
AssistantWristband.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001840  08006fe8  08006fe8  00016fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008828  08008828  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008828  08008828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008830  08008830  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008834  08008834  00018834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001f0  08008a28  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08008a28  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d76b  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e91  00000000  00000000  0002d98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd0  00000000  00000000  0002f820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000161da  00000000  00000000  000303f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a3aa  00000000  00000000  000465ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00089c92  00000000  00000000  00050974  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000da606  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ae0  00000000  00000000  000da688  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00003b1c  00000000  00000000  000db168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006fd0 	.word	0x08006fd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08006fd0 	.word	0x08006fd0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <mma8452qWrite>:
 * This function writes value to address reg using the assigned peripheral address
 * hi2c : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * reg : address of register whose value is set inside the censor
 * value : reg's new content
 * */
HAL_StatusTypeDef mma8452qWrite(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t value) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2];
	data[0] = reg;
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000ecc:	78bb      	ldrb	r3, [r7, #2]
 8000ece:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(hi2c, MMA8452Q_DEVICE_ADDR, data, 2, 10);
 8000ed0:	f107 020c 	add.w	r2, r7, #12
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2302      	movs	r3, #2
 8000eda:	2138      	movs	r1, #56	; 0x38
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f001 fd3f 	bl	8002960 <HAL_I2C_Master_Transmit>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <mma8452qRead>:
 * hi2c  : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * reg   : address of register where to start reading data from
 * numberofbytes : amount of data to be read from the registers of the censor
 * data_rec : address of buffer where the data from the censor will be stored into
 * */
HAL_StatusTypeDef mma8452qRead(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t numberofbytes, uint8_t* data_rec) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	72fb      	strb	r3, [r7, #11]
 8000efa:	4613      	mov	r3, r2
 8000efc:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, MMA8452Q_DEVICE_ADDR, reg, 1, data_rec, numberofbytes, 100);
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	b299      	uxth	r1, r3
 8000f02:	7abb      	ldrb	r3, [r7, #10]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2264      	movs	r2, #100	; 0x64
 8000f08:	9202      	str	r2, [sp, #8]
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	460a      	mov	r2, r1
 8000f14:	2138      	movs	r1, #56	; 0x38
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f001 fe20 	bl	8002b5c <HAL_I2C_Mem_Read>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <mma8452qInit>:

/*
 * This function initializes all the necessary censor registers in order to read data from it
 * hi2c  : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * */
HAL_StatusTypeDef mma8452qInit(I2C_HandleTypeDef* hi2c) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	  HAL_StatusTypeDef ret1 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_1, 0x00); // 2g selected after 0x00 sent
 8000f2e:	2200      	movs	r2, #0
 8000f30:	212a      	movs	r1, #42	; 0x2a
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffc0 	bl	8000eb8 <mma8452qWrite>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
	  HAL_StatusTypeDef ret2 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_1, 0x01);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	212a      	movs	r1, #42	; 0x2a
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ffb9 	bl	8000eb8 <mma8452qWrite>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73bb      	strb	r3, [r7, #14]
	  HAL_StatusTypeDef ret3 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_2, 0x00);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb2 	bl	8000eb8 <mma8452qWrite>
 8000f54:	4603      	mov	r3, r0
 8000f56:	737b      	strb	r3, [r7, #13]
	  if (ret1 == HAL_OK && ret2 == HAL_OK && ret3 == HAL_OK)
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d107      	bne.n	8000f6e <mma8452qInit+0x48>
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d104      	bne.n	8000f6e <mma8452qInit+0x48>
 8000f64:	7b7b      	ldrb	r3, [r7, #13]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <mma8452qInit+0x48>
		  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <mma8452qInit+0x4a>
	  else
		  return HAL_BUSY;
 8000f6e:	2302      	movs	r3, #2
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <getAccXYZ>:

/*
 * This function takes 7 bytes coming from censor and converts them into meaningful acceloremeter values
 * acc_3d : struct instance that contains raw data coming from censor and variables to be set for meaningful x,y,z acceloremeter data
 * */
void getAccXYZ(AccData* acc_3d) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	int16_t xAccl = (((int16_t)(acc_3d->acc_info[1] << 8)) | acc_3d->acc_info[2]) >> 4;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	789b      	ldrb	r3, [r3, #2]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	111b      	asrs	r3, r3, #4
 8000f92:	81fb      	strh	r3, [r7, #14]
	int16_t yAccl = (((int16_t)(acc_3d->acc_info[3] << 8)) | acc_3d->acc_info[4]) >> 4;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	111b      	asrs	r3, r3, #4
 8000fa6:	81bb      	strh	r3, [r7, #12]
	int16_t zAccl = (((int16_t)(acc_3d->acc_info[5] << 8)) | acc_3d->acc_info[6]) >> 4;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	799b      	ldrb	r3, [r3, #6]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	111b      	asrs	r3, r3, #4
 8000fba:	817b      	strh	r3, [r7, #10]
	acc_3d->x_acc = xAccl;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	89fa      	ldrh	r2, [r7, #14]
 8000fc0:	811a      	strh	r2, [r3, #8]
	acc_3d->y_acc = yAccl;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	89ba      	ldrh	r2, [r7, #12]
 8000fc6:	815a      	strh	r2, [r3, #10]
	acc_3d->z_acc = zAccl;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	897a      	ldrh	r2, [r7, #10]
 8000fcc:	819a      	strh	r2, [r3, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <ST7735_Select+0x14>)
 8000fe6:	f001 fb45 	bl	8002674 <HAL_GPIO_WritePin>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <ST7735_Unselect+0x14>)
 8000ffe:	f001 fb39 	bl	8002674 <HAL_GPIO_WritePin>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00

0800100c <ST7735_Reset>:

static void ST7735_Reset() {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <ST7735_Reset+0x28>)
 8001018:	f001 fb2c 	bl	8002674 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800101c:	2005      	movs	r0, #5
 800101e:	f001 f85b 	bl	80020d8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <ST7735_Reset+0x28>)
 800102a:	f001 fb23 	bl	8002674 <HAL_GPIO_WritePin>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020000 	.word	0x40020000

08001038 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <ST7735_WriteCommand+0x2c>)
 800104a:	f001 fb13 	bl	8002674 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800104e:	1df9      	adds	r1, r7, #7
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2201      	movs	r2, #1
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <ST7735_WriteCommand+0x30>)
 8001058:	f002 ffb2 	bl	8003fc0 <HAL_SPI_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020800 	.word	0x40020800
 8001068:	2000026c 	.word	0x2000026c

0800106c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <ST7735_WriteData+0x30>)
 800107e:	f001 faf9 	bl	8002674 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b29a      	uxth	r2, r3
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <ST7735_WriteData+0x34>)
 800108e:	f002 ff97 	bl	8003fc0 <HAL_SPI_Transmit>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020800 	.word	0x40020800
 80010a0:	2000026c 	.word	0x2000026c

080010a4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80010b6:	e034      	b.n	8001122 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffb7 	bl	8001038 <ST7735_WriteCommand>

        numArgs = *addr++;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80010d4:	7abb      	ldrb	r3, [r7, #10]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010dc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010e4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80010ec:	7abb      	ldrb	r3, [r7, #10]
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ffbb 	bl	800106c <ST7735_WriteData>
            addr += numArgs;
 80010f6:	7abb      	ldrb	r3, [r7, #10]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80010fe:	89bb      	ldrh	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00e      	beq.n	8001122 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800110e:	89bb      	ldrh	r3, [r7, #12]
 8001110:	2bff      	cmp	r3, #255	; 0xff
 8001112:	d102      	bne.n	800111a <ST7735_ExecuteCommandList+0x76>
 8001114:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001118:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 ffdb 	bl	80020d8 <HAL_Delay>
    while(numCommands--) {
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	73fa      	strb	r2, [r7, #15]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1c5      	bne.n	80010b8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4623      	mov	r3, r4
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	4603      	mov	r3, r0
 8001148:	71bb      	strb	r3, [r7, #6]
 800114a:	460b      	mov	r3, r1
 800114c:	717b      	strb	r3, [r7, #5]
 800114e:	4613      	mov	r3, r2
 8001150:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001152:	202a      	movs	r0, #42	; 0x2a
 8001154:	f7ff ff70 	bl	8001038 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001158:	2300      	movs	r3, #0
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3302      	adds	r3, #2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]
 8001164:	2300      	movs	r3, #0
 8001166:	73bb      	strb	r3, [r7, #14]
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	3302      	adds	r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2104      	movs	r1, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff78 	bl	800106c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800117c:	202b      	movs	r0, #43	; 0x2b
 800117e:	f7ff ff5b 	bl	8001038 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	3301      	adds	r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800118a:	793b      	ldrb	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2104      	movs	r1, #4
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff67 	bl	800106c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800119e:	202c      	movs	r0, #44	; 0x2c
 80011a0:	f7ff ff4a 	bl	8001038 <ST7735_WriteCommand>
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}

080011ac <ST7735_Init>:

void ST7735_Init() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    ST7735_Select();
 80011b0:	f7ff ff14 	bl	8000fdc <ST7735_Select>
    ST7735_Reset();
 80011b4:	f7ff ff2a 	bl	800100c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <ST7735_Init+0x28>)
 80011ba:	f7ff ff73 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <ST7735_Init+0x2c>)
 80011c0:	f7ff ff70 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <ST7735_Init+0x30>)
 80011c6:	f7ff ff6d 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80011ca:	f7ff ff13 	bl	8000ff4 <ST7735_Unselect>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	08008534 	.word	0x08008534
 80011d8:	08008570 	.word	0x08008570
 80011dc:	08008580 	.word	0x08008580

080011e0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011e0:	b082      	sub	sp, #8
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b089      	sub	sp, #36	; 0x24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	460b      	mov	r3, r1
 80011f0:	80bb      	strh	r3, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	b2d9      	uxtb	r1, r3
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001206:	4413      	add	r3, r2
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b01      	subs	r3, #1
 800120c:	b2dc      	uxtb	r4, r3
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001216:	4413      	add	r3, r2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3b01      	subs	r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4622      	mov	r2, r4
 8001220:	f7ff ff88 	bl	8001134 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	e043      	b.n	80012b2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800122a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	3b20      	subs	r3, #32
 8001230:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	4619      	mov	r1, r3
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	440b      	add	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	e029      	b.n	80012a0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00e      	beq.n	800127a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800125c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	743b      	strb	r3, [r7, #16]
 8001266:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001268:	b2db      	uxtb	r3, r3
 800126a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2102      	movs	r1, #2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fefa 	bl	800106c <ST7735_WriteData>
 8001278:	e00f      	b.n	800129a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800127a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	b29b      	uxth	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	733b      	strb	r3, [r7, #12]
 8001286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800128a:	b2db      	uxtb	r3, r3
 800128c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2102      	movs	r1, #2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fee9 	bl	800106c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	3301      	adds	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012a4:	461a      	mov	r2, r3
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d3cf      	bcc.n	800124c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	3301      	adds	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012b6:	461a      	mov	r2, r3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d3b5      	bcc.n	800122a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012c8:	b002      	add	sp, #8
 80012ca:	4770      	bx	lr

080012cc <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012cc:	b082      	sub	sp, #8
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af04      	add	r7, sp, #16
 80012d4:	603a      	str	r2, [r7, #0]
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	4603      	mov	r3, r0
 80012da:	80fb      	strh	r3, [r7, #6]
 80012dc:	460b      	mov	r3, r1
 80012de:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80012e0:	f7ff fe7c 	bl	8000fdc <ST7735_Select>

    while(*str) {
 80012e4:	e02d      	b.n	8001342 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	7d3a      	ldrb	r2, [r7, #20]
 80012ea:	4413      	add	r3, r2
 80012ec:	2b7f      	cmp	r3, #127	; 0x7f
 80012ee:	dd13      	ble.n	8001318 <ST7735_WriteString+0x4c>
            x = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80012f4:	7d7b      	ldrb	r3, [r7, #21]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	7d7a      	ldrb	r2, [r7, #21]
 8001302:	4413      	add	r3, r2
 8001304:	2b9f      	cmp	r3, #159	; 0x9f
 8001306:	dc21      	bgt.n	800134c <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b20      	cmp	r3, #32
 800130e:	d103      	bne.n	8001318 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	603b      	str	r3, [r7, #0]
                continue;
 8001316:	e014      	b.n	8001342 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	88b9      	ldrh	r1, [r7, #4]
 800131e:	88f8      	ldrh	r0, [r7, #6]
 8001320:	8c3b      	ldrh	r3, [r7, #32]
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	8bbb      	ldrh	r3, [r7, #28]
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f7ff ff57 	bl	80011e0 <ST7735_WriteChar>
        x += font.width;
 8001332:	7d3b      	ldrb	r3, [r7, #20]
 8001334:	b29a      	uxth	r2, r3
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4413      	add	r3, r2
 800133a:	80fb      	strh	r3, [r7, #6]
        str++;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1cd      	bne.n	80012e6 <ST7735_WriteString+0x1a>
 800134a:	e000      	b.n	800134e <ST7735_WriteString+0x82>
                break;
 800134c:	bf00      	nop
    }

    ST7735_Unselect();
 800134e:	f7ff fe51 	bl	8000ff4 <ST7735_Unselect>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800135c:	b002      	add	sp, #8
 800135e:	4770      	bx	lr

08001360 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4623      	mov	r3, r4
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	4603      	mov	r3, r0
 8001374:	80bb      	strh	r3, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]
 800137a:	4613      	mov	r3, r2
 800137c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b7f      	cmp	r3, #127	; 0x7f
 8001382:	d85a      	bhi.n	800143a <ST7735_FillRectangle+0xda>
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	2b9f      	cmp	r3, #159	; 0x9f
 8001388:	d857      	bhi.n	800143a <ST7735_FillRectangle+0xda>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800138a:	88fa      	ldrh	r2, [r7, #6]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4413      	add	r3, r2
 8001390:	3b01      	subs	r3, #1
 8001392:	2b7f      	cmp	r3, #127	; 0x7f
 8001394:	dd03      	ble.n	800139e <ST7735_FillRectangle+0x3e>
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800139c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800139e:	88ba      	ldrh	r2, [r7, #4]
 80013a0:	883b      	ldrh	r3, [r7, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	3b01      	subs	r3, #1
 80013a6:	2b9f      	cmp	r3, #159	; 0x9f
 80013a8:	dd03      	ble.n	80013b2 <ST7735_FillRectangle+0x52>
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80013b0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80013b2:	f7ff fe13 	bl	8000fdc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	b2d8      	uxtb	r0, r3
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	b2d9      	uxtb	r1, r3
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	3b01      	subs	r3, #1
 80013cc:	b2dc      	uxtb	r4, r3
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	883b      	ldrh	r3, [r7, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3b01      	subs	r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4622      	mov	r2, r4
 80013e0:	f7ff fea8 	bl	8001134 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80013e4:	8c3b      	ldrh	r3, [r7, #32]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	733b      	strb	r3, [r7, #12]
 80013ee:	8c3b      	ldrh	r3, [r7, #32]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <ST7735_FillRectangle+0xe4>)
 80013fc:	f001 f93a 	bl	8002674 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001400:	883b      	ldrh	r3, [r7, #0]
 8001402:	80bb      	strh	r3, [r7, #4]
 8001404:	e013      	b.n	800142e <ST7735_FillRectangle+0xce>
        for(x = w; x > 0; x--) {
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	80fb      	strh	r3, [r7, #6]
 800140a:	e00a      	b.n	8001422 <ST7735_FillRectangle+0xc2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800140c:	f107 010c 	add.w	r1, r7, #12
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	2202      	movs	r2, #2
 8001416:	480c      	ldr	r0, [pc, #48]	; (8001448 <ST7735_FillRectangle+0xe8>)
 8001418:	f002 fdd2 	bl	8003fc0 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	3b01      	subs	r3, #1
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f1      	bne.n	800140c <ST7735_FillRectangle+0xac>
    for(y = h; y > 0; y--) {
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e8      	bne.n	8001406 <ST7735_FillRectangle+0xa6>
        }
    }

    ST7735_Unselect();
 8001434:	f7ff fdde 	bl	8000ff4 <ST7735_Unselect>
 8001438:	e000      	b.n	800143c <ST7735_FillRectangle+0xdc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800143a:	bf00      	nop
}
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	40020800 	.word	0x40020800
 8001448:	2000026c 	.word	0x2000026c

0800144c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af02      	add	r7, sp, #8
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	2100      	movs	r1, #0
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff ff7d 	bl	8001360 <ST7735_FillRectangle>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b0a0      	sub	sp, #128	; 0x80
 8001474:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	AccData acc_3d;
	state current_state = welcome_mode;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f000 fdba 	bl	8001ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f8fe 	bl	8001680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f000 f9f4 	bl	8001870 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001488:	f000 f962 	bl	8001750 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800148c:	f000 f9c6 	bl	800181c <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001490:	f000 f98c 	bl	80017ac <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

	// put all custom initialization functions here no matter which states they belong to
	ST7735_Init();
 8001494:	f7ff fe8a 	bl	80011ac <ST7735_Init>
	mma8452qInit(&hi2c1);
 8001498:	4872      	ldr	r0, [pc, #456]	; (8001664 <main+0x1f4>)
 800149a:	f7ff fd44 	bl	8000f26 <mma8452qInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	switch (current_state) {
 800149e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d80c      	bhi.n	80014c0 <main+0x50>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <main+0x3c>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	080014c1 	.word	0x080014c1
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014c1 	.word	0x080014c1
 80014b8:	080014c1 	.word	0x080014c1
 80014bc:	080014c1 	.word	0x080014c1
			break;
	}



	welcomeScreen(&current_state);
 80014c0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fc77 	bl	8001db8 <welcomeScreen>

	ST7735_FillScreen(ST7735_WHITE);
 80014ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014ce:	f7ff ffbd 	bl	800144c <ST7735_FillScreen>
	//ST7735_DrawImage(0,0,128,128,win10_logo);


	HAL_Delay(2000);
 80014d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014d6:	f000 fdff 	bl	80020d8 <HAL_Delay>
	ST7735_FillScreen(ST7735_WHITE);
 80014da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014de:	f7ff ffb5 	bl	800144c <ST7735_FillScreen>
	//ST7735_WriteString(0, 150, "www.digitalruh.com", Font_7x10, ST7735_BLACK, ST7735_WHITE);

	while (1)
	{
		HAL_StatusTypeDef is_mma8452q_read_ok = mma8452qRead(&hi2c1, 0x00, 7, acc_3d.acc_info);
 80014e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e6:	2207      	movs	r2, #7
 80014e8:	2100      	movs	r1, #0
 80014ea:	485e      	ldr	r0, [pc, #376]	; (8001664 <main+0x1f4>)
 80014ec:	f7ff fcfe 	bl	8000eec <mma8452qRead>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (is_mma8452q_read_ok == HAL_OK) {
 80014f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f1      	bne.n	80014e2 <main+0x72>
			getAccXYZ(&acc_3d);
 80014fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd38 	bl	8000f78 <getAccXYZ>
			char message[50] = { 0 };
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2232      	movs	r2, #50	; 0x32
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fc0c 	bl	8004d2c <memset>
			//sprintf(message, "acc_x: %d, acc_y: %d, acc_z: %d\r\n", acc_3d.x_acc, acc_3d.y_acc, acc_3d.z_acc);
			double x_acc = acc_3d.x_acc / 1024.;
 8001514:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f80b 	bl	8000534 <__aeabi_i2d>
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4b51      	ldr	r3, [pc, #324]	; (8001668 <main+0x1f8>)
 8001524:	f7ff f99a 	bl	800085c <__aeabi_ddiv>
 8001528:	4603      	mov	r3, r0
 800152a:	460c      	mov	r4, r1
 800152c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			double y_acc = acc_3d.y_acc / 1024.;
 8001530:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fffd 	bl	8000534 <__aeabi_i2d>
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <main+0x1f8>)
 8001540:	f7ff f98c 	bl	800085c <__aeabi_ddiv>
 8001544:	4603      	mov	r3, r0
 8001546:	460c      	mov	r4, r1
 8001548:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			double z_acc = acc_3d.z_acc / 1024.;
 800154c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ffef 	bl	8000534 <__aeabi_i2d>
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b43      	ldr	r3, [pc, #268]	; (8001668 <main+0x1f8>)
 800155c:	f7ff f97e 	bl	800085c <__aeabi_ddiv>
 8001560:	4603      	mov	r3, r0
 8001562:	460c      	mov	r4, r1
 8001564:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			double magnitude = sqrt((x_acc * x_acc) + (y_acc * y_acc) + (z_acc * z_acc));
 8001568:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800156c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001570:	f7ff f84a 	bl	8000608 <__aeabi_dmul>
 8001574:	4603      	mov	r3, r0
 8001576:	460c      	mov	r4, r1
 8001578:	4625      	mov	r5, r4
 800157a:	461c      	mov	r4, r3
 800157c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001580:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001584:	f7ff f840 	bl	8000608 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	f7fe fe84 	bl	800029c <__adddf3>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	4625      	mov	r5, r4
 800159a:	461c      	mov	r4, r3
 800159c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80015a4:	f7ff f830 	bl	8000608 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe74 	bl	800029c <__adddf3>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	ec44 3b17 	vmov	d7, r3, r4
 80015bc:	eeb0 0a47 	vmov.f32	s0, s14
 80015c0:	eef0 0a67 	vmov.f32	s1, s15
 80015c4:	f005 fbf8 	bl	8006db8 <sqrt>
 80015c8:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
			sprintf(message, "%.2f %.2f %.2f \r\n", x_acc, y_acc, z_acc);
 80015cc:	1d38      	adds	r0, r7, #4
 80015ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80015d2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80015d6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80015da:	e9cd 3400 	strd	r3, r4, [sp]
 80015de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015e2:	4922      	ldr	r1, [pc, #136]	; (800166c <main+0x1fc>)
 80015e4:	f004 f806 	bl	80055f4 <siprintf>
			ST7735_WriteString(0, 50, message, Font_7x10, ST7735_BLACK, ST7735_WHITE);
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <main+0x200>)
 80015ea:	1d39      	adds	r1, r7, #4
 80015ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f0:	9202      	str	r2, [sp, #8]
 80015f2:	2200      	movs	r2, #0
 80015f4:	9201      	str	r2, [sp, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	9200      	str	r2, [sp, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	460a      	mov	r2, r1
 80015fe:	2132      	movs	r1, #50	; 0x32
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff fe63 	bl	80012cc <ST7735_WriteString>
			HAL_StatusTypeDef blue_ok = HAL_UART_Transmit(&huart6, (uint8_t *)message, sizeof(message), 100);
 8001606:	1d39      	adds	r1, r7, #4
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	2232      	movs	r2, #50	; 0x32
 800160c:	4819      	ldr	r0, [pc, #100]	; (8001674 <main+0x204>)
 800160e:	f002 ff04 	bl	800441a <HAL_UART_Transmit>
 8001612:	4603      	mov	r3, r0
 8001614:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (blue_ok == HAL_OK) {
 8001618:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10e      	bne.n	800163e <main+0x1ce>
					ST7735_WriteString(0, 100, "ok...", Font_7x10, ST7735_BLACK, ST7735_WHITE);
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <main+0x200>)
 8001622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001626:	9202      	str	r2, [sp, #8]
 8001628:	2200      	movs	r2, #0
 800162a:	9201      	str	r2, [sp, #4]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	9200      	str	r2, [sp, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <main+0x208>)
 8001634:	2164      	movs	r1, #100	; 0x64
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fe48 	bl	80012cc <ST7735_WriteString>
 800163c:	e00d      	b.n	800165a <main+0x1ea>
				}
				else {
					ST7735_WriteString(0, 100, "not ok...", Font_7x10, ST7735_BLACK, ST7735_WHITE);
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <main+0x200>)
 8001640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001644:	9202      	str	r2, [sp, #8]
 8001646:	2200      	movs	r2, #0
 8001648:	9201      	str	r2, [sp, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	9200      	str	r2, [sp, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <main+0x20c>)
 8001652:	2164      	movs	r1, #100	; 0x64
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fe39 	bl	80012cc <ST7735_WriteString>
				}
			HAL_Delay(100);
 800165a:	2064      	movs	r0, #100	; 0x64
 800165c:	f000 fd3c 	bl	80020d8 <HAL_Delay>
	{
 8001660:	e73f      	b.n	80014e2 <main+0x72>
 8001662:	bf00      	nop
 8001664:	20000218 	.word	0x20000218
 8001668:	40900000 	.word	0x40900000
 800166c:	08006fe8 	.word	0x08006fe8
 8001670:	20000000 	.word	0x20000000
 8001674:	200002c4 	.word	0x200002c4
 8001678:	08006ffc 	.word	0x08006ffc
 800167c:	08007004 	.word	0x08007004

08001680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b094      	sub	sp, #80	; 0x50
 8001684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001686:	f107 0320 	add.w	r3, r7, #32
 800168a:	2230      	movs	r2, #48	; 0x30
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fb4c 	bl	8004d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <SystemClock_Config+0xc8>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	4a26      	ldr	r2, [pc, #152]	; (8001748 <SystemClock_Config+0xc8>)
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6413      	str	r3, [r2, #64]	; 0x40
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <SystemClock_Config+0xc8>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <SystemClock_Config+0xcc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a20      	ldr	r2, [pc, #128]	; (800174c <SystemClock_Config+0xcc>)
 80016ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <SystemClock_Config+0xcc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016dc:	2301      	movs	r3, #1
 80016de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	2302      	movs	r3, #2
 80016e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016f0:	2308      	movs	r3, #8
 80016f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80016f4:	2364      	movs	r3, #100	; 0x64
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016fc:	2304      	movs	r3, #4
 80016fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	4618      	mov	r0, r3
 8001706:	f001 ff95 	bl	8003634 <HAL_RCC_OscConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001710:	f000 f96e 	bl	80019f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001714:	230f      	movs	r3, #15
 8001716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001718:	2302      	movs	r3, #2
 800171a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f002 f9f0 	bl	8003b14 <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800173a:	f000 f959 	bl	80019f0 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3750      	adds	r7, #80	; 0x50
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000

08001750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001756:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <MX_I2C1_Init+0x54>)
 8001758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_I2C1_Init+0x50>)
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <MX_I2C1_Init+0x58>)
 800175e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_I2C1_Init+0x50>)
 800176e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_I2C1_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_I2C1_Init+0x50>)
 800178e:	f000 ffaf 	bl	80026f0 <HAL_I2C_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001798:	f000 f92a 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000218 	.word	0x20000218
 80017a4:	40005400 	.word	0x40005400
 80017a8:	000186a0 	.word	0x000186a0

080017ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_SPI3_Init+0x68>)
 80017b2:	4a19      	ldr	r2, [pc, #100]	; (8001818 <MX_SPI3_Init+0x6c>)
 80017b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_SPI3_Init+0x68>)
 80017b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_SPI3_Init+0x68>)
 80017c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017c4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_SPI3_Init+0x68>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_SPI3_Init+0x68>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_SPI3_Init+0x68>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_SPI3_Init+0x68>)
 80017da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_SPI3_Init+0x68>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_SPI3_Init+0x68>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_SPI3_Init+0x68>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_SPI3_Init+0x68>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_SPI3_Init+0x68>)
 80017fa:	220a      	movs	r2, #10
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_SPI3_Init+0x68>)
 8001800:	f002 fb7a 	bl	8003ef8 <HAL_SPI_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800180a:	f000 f8f1 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000026c 	.word	0x2000026c
 8001818:	40003c00 	.word	0x40003c00

0800181c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_USART6_UART_Init+0x4c>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <MX_USART6_UART_Init+0x50>)
 8001824:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <MX_USART6_UART_Init+0x4c>)
 8001828:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800182c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_USART6_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_USART6_UART_Init+0x4c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_USART6_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_USART6_UART_Init+0x4c>)
 8001842:	2208      	movs	r2, #8
 8001844:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_USART6_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_USART6_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_USART6_UART_Init+0x4c>)
 8001854:	f002 fd94 	bl	8004380 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800185e:	f000 f8c7 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200002c4 	.word	0x200002c4
 800186c:	40011400 	.word	0x40011400

08001870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b54      	ldr	r3, [pc, #336]	; (80019dc <MX_GPIO_Init+0x16c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a53      	ldr	r2, [pc, #332]	; (80019dc <MX_GPIO_Init+0x16c>)
 8001890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b51      	ldr	r3, [pc, #324]	; (80019dc <MX_GPIO_Init+0x16c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <MX_GPIO_Init+0x16c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <MX_GPIO_Init+0x16c>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <MX_GPIO_Init+0x16c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b46      	ldr	r3, [pc, #280]	; (80019dc <MX_GPIO_Init+0x16c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a45      	ldr	r2, [pc, #276]	; (80019dc <MX_GPIO_Init+0x16c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b43      	ldr	r3, [pc, #268]	; (80019dc <MX_GPIO_Init+0x16c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <MX_GPIO_Init+0x16c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a3e      	ldr	r2, [pc, #248]	; (80019dc <MX_GPIO_Init+0x16c>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b3c      	ldr	r3, [pc, #240]	; (80019dc <MX_GPIO_Init+0x16c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b38      	ldr	r3, [pc, #224]	; (80019dc <MX_GPIO_Init+0x16c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a37      	ldr	r2, [pc, #220]	; (80019dc <MX_GPIO_Init+0x16c>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b35      	ldr	r3, [pc, #212]	; (80019dc <MX_GPIO_Init+0x16c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_RST_GPIO_Port, DISP_RST_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001918:	4831      	ldr	r0, [pc, #196]	; (80019e0 <MX_GPIO_Init+0x170>)
 800191a:	f000 feab 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_A0_DC_GPIO_Port, DISP_A0_DC_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001924:	482f      	ldr	r0, [pc, #188]	; (80019e4 <MX_GPIO_Init+0x174>)
 8001926:	f000 fea5 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2104      	movs	r1, #4
 800192e:	482e      	ldr	r0, [pc, #184]	; (80019e8 <MX_GPIO_Init+0x178>)
 8001930:	f000 fea0 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : sag_Pin orta_Pin sol_Pin */
  GPIO_InitStruct.Pin = sag_Pin|orta_Pin|sol_Pin;
 8001934:	2307      	movs	r3, #7
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001938:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <MX_GPIO_Init+0x17c>)
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800193c:	2302      	movs	r3, #2
 800193e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4827      	ldr	r0, [pc, #156]	; (80019e4 <MX_GPIO_Init+0x174>)
 8001948:	f000 fcfa 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_RST_Pin */
  GPIO_InitStruct.Pin = DISP_RST_Pin;
 800194c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_RST_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	481e      	ldr	r0, [pc, #120]	; (80019e0 <MX_GPIO_Init+0x170>)
 8001966:	f000 fceb 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_A0_DC_Pin */
  GPIO_InitStruct.Pin = DISP_A0_DC_Pin;
 800196a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800196e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_A0_DC_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4818      	ldr	r0, [pc, #96]	; (80019e4 <MX_GPIO_Init+0x174>)
 8001984:	f000 fcdc 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8001988:	2304      	movs	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198c:	2301      	movs	r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4812      	ldr	r0, [pc, #72]	; (80019e8 <MX_GPIO_Init+0x178>)
 80019a0:	f000 fcce 	bl	8002340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	2006      	movs	r0, #6
 80019aa:	f000 fc92 	bl	80022d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019ae:	2006      	movs	r0, #6
 80019b0:	f000 fcab 	bl	800230a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	2007      	movs	r0, #7
 80019ba:	f000 fc8a 	bl	80022d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019be:	2007      	movs	r0, #7
 80019c0:	f000 fca3 	bl	800230a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2008      	movs	r0, #8
 80019ca:	f000 fc82 	bl	80022d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80019ce:	2008      	movs	r0, #8
 80019d0:	f000 fc9b 	bl	800230a <HAL_NVIC_EnableIRQ>

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020c00 	.word	0x40020c00
 80019ec:	10110000 	.word	0x10110000

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800

08001a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <HAL_I2C_MspInit+0x84>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d12c      	bne.n	8001acc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a94:	2312      	movs	r3, #18
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480c      	ldr	r0, [pc, #48]	; (8001adc <HAL_I2C_MspInit+0x8c>)
 8001aac:	f000 fc48 	bl	8002340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001aba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001abe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	; 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020400 	.word	0x40020400

08001ae0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_SPI_MspInit+0x84>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d12c      	bne.n	8001b5c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_SPI_MspInit+0x88>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <HAL_SPI_MspInit+0x88>)
 8001b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_SPI_MspInit+0x88>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_SPI_MspInit+0x88>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <HAL_SPI_MspInit+0x88>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_SPI_MspInit+0x88>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001b3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b4c:	2306      	movs	r3, #6
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <HAL_SPI_MspInit+0x8c>)
 8001b58:	f000 fbf2 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40003c00 	.word	0x40003c00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020800 	.word	0x40020800

08001b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_UART_MspInit+0x84>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12c      	bne.n	8001bec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001b9c:	f043 0320 	orr.w	r3, r3, #32
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_UART_MspInit+0x88>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <HAL_UART_MspInit+0x8c>)
 8001be8:	f000 fbaa 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40011400 	.word	0x40011400
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020000 	.word	0x40020000

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 fa20 	bl	8002098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8001c62:	2101      	movs	r1, #1
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <EXTI0_IRQHandler+0x3c>)
 8001c66:	f000 fced 	bl	8002644 <HAL_GPIO_ReadPin>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00d      	beq.n	8001c8c <EXTI0_IRQHandler+0x30>
		  ST7735_WriteString(0, 150, "SAG BUTONA BASILDI", Font_7x10, ST7735_BLACK, ST7735_WHITE);
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <EXTI0_IRQHandler+0x40>)
 8001c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c76:	9202      	str	r2, [sp, #8]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	9201      	str	r2, [sp, #4]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	9200      	str	r2, [sp, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <EXTI0_IRQHandler+0x44>)
 8001c84:	2196      	movs	r1, #150	; 0x96
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fb20 	bl	80012cc <ST7735_WriteString>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f000 fd0b 	bl	80026a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	08007010 	.word	0x08007010

08001ca4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8001caa:	2102      	movs	r1, #2
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <EXTI1_IRQHandler+0x3c>)
 8001cae:	f000 fcc9 	bl	8002644 <HAL_GPIO_ReadPin>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <EXTI1_IRQHandler+0x30>
	  ST7735_WriteString(0, 150, "ORTA BUTONA BASILDI", Font_7x10, ST7735_BLACK, ST7735_WHITE);
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <EXTI1_IRQHandler+0x40>)
 8001cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cbe:	9202      	str	r2, [sp, #8]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	9201      	str	r2, [sp, #4]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	9200      	str	r2, [sp, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <EXTI1_IRQHandler+0x44>)
 8001ccc:	2196      	movs	r1, #150	; 0x96
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff fafc 	bl	80012cc <ST7735_WriteString>
	}
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f000 fce7 	bl	80026a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	08007024 	.word	0x08007024

08001cec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	480c      	ldr	r0, [pc, #48]	; (8001d28 <EXTI2_IRQHandler+0x3c>)
 8001cf6:	f000 fca5 	bl	8002644 <HAL_GPIO_ReadPin>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00d      	beq.n	8001d1c <EXTI2_IRQHandler+0x30>
	  ST7735_WriteString(0, 150, "SOL BUTONA BASILDI", Font_7x10, ST7735_BLACK, ST7735_WHITE);
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <EXTI2_IRQHandler+0x40>)
 8001d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d06:	9202      	str	r2, [sp, #8]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	9201      	str	r2, [sp, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	9200      	str	r2, [sp, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <EXTI2_IRQHandler+0x44>)
 8001d14:	2196      	movs	r1, #150	; 0x96
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff fad8 	bl	80012cc <ST7735_WriteString>
	}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d1c:	2004      	movs	r0, #4
 8001d1e:	f000 fcc3 	bl	80026a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	08007038 	.word	0x08007038

08001d34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <_sbrk+0x50>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x16>
		heap_end = &end;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <_sbrk+0x50>)
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <_sbrk+0x54>)
 8001d48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <_sbrk+0x50>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <_sbrk+0x50>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	466a      	mov	r2, sp
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d907      	bls.n	8001d6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d5e:	f002 ffbb 	bl	8004cd8 <__errno>
 8001d62:	4602      	mov	r2, r0
 8001d64:	230c      	movs	r3, #12
 8001d66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	e006      	b.n	8001d7c <_sbrk+0x48>
	}

	heap_end += incr;
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <_sbrk+0x50>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a03      	ldr	r2, [pc, #12]	; (8001d84 <_sbrk+0x50>)
 8001d78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000020c 	.word	0x2000020c
 8001d88:	20000310 	.word	0x20000310

08001d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <SystemInit+0x28>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <SystemInit+0x28>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SystemInit+0x28>)
 8001da2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001da6:	609a      	str	r2, [r3, #8]
#endif
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <welcomeScreen>:

/*
 * Fills opening screen in a fancy way:)
 * current_state : its value is changed here so that the next state can be executed.
 * */
void welcomeScreen(state* current_state) {
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b091      	sub	sp, #68	; 0x44
 8001dbc:	af04      	add	r7, sp, #16
 8001dbe:	6078      	str	r0, [r7, #4]
	char text1[] = " Wrist Band ";
 8001dc0:	4b74      	ldr	r3, [pc, #464]	; (8001f94 <welcomeScreen+0x1dc>)
 8001dc2:	f107 0418 	add.w	r4, r7, #24
 8001dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc8:	c407      	stmia	r4!, {r0, r1, r2}
 8001dca:	7023      	strb	r3, [r4, #0]
	char text2[] = "Hosgeldiniz ";
 8001dcc:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <welcomeScreen+0x1e0>)
 8001dce:	f107 0408 	add.w	r4, r7, #8
 8001dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd4:	c407      	stmia	r4!, {r0, r1, r2}
 8001dd6:	7023      	strb	r3, [r4, #0]
	ST7735_FillScreen(BACKGROUND_COLOR);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fb37 	bl	800144c <ST7735_FillScreen>

	for (int i = 0; i < strlen(text1); ++i) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de2:	e020      	b.n	8001e26 <welcomeScreen+0x6e>
		text1[i] = '\0';
 8001de4:	f107 0218 	add.w	r2, r7, #24
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	4413      	add	r3, r2
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
		ST7735_WriteString(0, 50, text1, TEXT_FONT, TEXT_COLOR, TEXT_BACKGROUND_COLOR);
 8001df0:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <welcomeScreen+0x1e4>)
 8001df2:	f107 0118 	add.w	r1, r7, #24
 8001df6:	2200      	movs	r2, #0
 8001df8:	9202      	str	r2, [sp, #8]
 8001dfa:	221f      	movs	r2, #31
 8001dfc:	9201      	str	r2, [sp, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	9200      	str	r2, [sp, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	460a      	mov	r2, r1
 8001e06:	2132      	movs	r1, #50	; 0x32
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff fa5f 	bl	80012cc <ST7735_WriteString>
		HAL_Delay(100);
 8001e0e:	2064      	movs	r0, #100	; 0x64
 8001e10:	f000 f962 	bl	80020d8 <HAL_Delay>
		strcpy(text1, " Wrist Band ");
 8001e14:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <welcomeScreen+0x1dc>)
 8001e16:	f107 0418 	add.w	r4, r7, #24
 8001e1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e1c:	c407      	stmia	r4!, {r0, r1, r2}
 8001e1e:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < strlen(text1); ++i) {
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	3301      	adds	r3, #1
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e26:	f107 0318 	add.w	r3, r7, #24
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe f9d8 	bl	80001e0 <strlen>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8d5      	bhi.n	8001de4 <welcomeScreen+0x2c>
	}

	HAL_Delay(250);
 8001e38:	20fa      	movs	r0, #250	; 0xfa
 8001e3a:	f000 f94d 	bl	80020d8 <HAL_Delay>

	for (int i = 0; i < strlen(text2); ++i) {
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e42:	e020      	b.n	8001e86 <welcomeScreen+0xce>
		text2[i] = '\0';
 8001e44:	f107 0208 	add.w	r2, r7, #8
 8001e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
		ST7735_WriteString(0, 80, text2, TEXT_FONT, TEXT_COLOR, TEXT_BACKGROUND_COLOR);
 8001e50:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <welcomeScreen+0x1e4>)
 8001e52:	f107 0108 	add.w	r1, r7, #8
 8001e56:	2200      	movs	r2, #0
 8001e58:	9202      	str	r2, [sp, #8]
 8001e5a:	221f      	movs	r2, #31
 8001e5c:	9201      	str	r2, [sp, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	9200      	str	r2, [sp, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	460a      	mov	r2, r1
 8001e66:	2150      	movs	r1, #80	; 0x50
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fa2f 	bl	80012cc <ST7735_WriteString>
		HAL_Delay(100);
 8001e6e:	2064      	movs	r0, #100	; 0x64
 8001e70:	f000 f932 	bl	80020d8 <HAL_Delay>
		strcpy(text2, "Hosgeldiniz ");
 8001e74:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <welcomeScreen+0x1e0>)
 8001e76:	f107 0408 	add.w	r4, r7, #8
 8001e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e7c:	c407      	stmia	r4!, {r0, r1, r2}
 8001e7e:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < strlen(text2); ++i) {
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	3301      	adds	r3, #1
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e86:	f107 0308 	add.w	r3, r7, #8
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe f9a8 	bl	80001e0 <strlen>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8d5      	bhi.n	8001e44 <welcomeScreen+0x8c>
	}

	HAL_Delay(1000);
 8001e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e9c:	f000 f91c 	bl	80020d8 <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fad3 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT, TEXT_COLOR, TEXT_BACKGROUND_COLOR);
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <welcomeScreen+0x1e4>)
 8001ea8:	f107 0118 	add.w	r1, r7, #24
 8001eac:	2200      	movs	r2, #0
 8001eae:	9202      	str	r2, [sp, #8]
 8001eb0:	221f      	movs	r2, #31
 8001eb2:	9201      	str	r2, [sp, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	9200      	str	r2, [sp, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	460a      	mov	r2, r1
 8001ebc:	213c      	movs	r1, #60	; 0x3c
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff fa04 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT, TEXT_COLOR, TEXT_BACKGROUND_COLOR);
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <welcomeScreen+0x1e4>)
 8001ec6:	f107 0108 	add.w	r1, r7, #8
 8001eca:	2200      	movs	r2, #0
 8001ecc:	9202      	str	r2, [sp, #8]
 8001ece:	221f      	movs	r2, #31
 8001ed0:	9201      	str	r2, [sp, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	460a      	mov	r2, r1
 8001eda:	2150      	movs	r1, #80	; 0x50
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff f9f5 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(500);
 8001ee2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ee6:	f000 f8f7 	bl	80020d8 <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff faae 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT, TEXT_COLOR, TEXT_BACKGROUND_COLOR);
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <welcomeScreen+0x1e4>)
 8001ef2:	f107 0118 	add.w	r1, r7, #24
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	9202      	str	r2, [sp, #8]
 8001efa:	221f      	movs	r2, #31
 8001efc:	9201      	str	r2, [sp, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	9200      	str	r2, [sp, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	460a      	mov	r2, r1
 8001f06:	213c      	movs	r1, #60	; 0x3c
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff f9df 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT, TEXT_COLOR, TEXT_BACKGROUND_COLOR);
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <welcomeScreen+0x1e4>)
 8001f10:	f107 0108 	add.w	r1, r7, #8
 8001f14:	2200      	movs	r2, #0
 8001f16:	9202      	str	r2, [sp, #8]
 8001f18:	221f      	movs	r2, #31
 8001f1a:	9201      	str	r2, [sp, #4]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	9200      	str	r2, [sp, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	460a      	mov	r2, r1
 8001f24:	2150      	movs	r1, #80	; 0x50
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff f9d0 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(500);
 8001f2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f30:	f000 f8d2 	bl	80020d8 <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff fa89 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT, TEXT_COLOR, TEXT_BACKGROUND_COLOR);
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <welcomeScreen+0x1e4>)
 8001f3c:	f107 0118 	add.w	r1, r7, #24
 8001f40:	2200      	movs	r2, #0
 8001f42:	9202      	str	r2, [sp, #8]
 8001f44:	221f      	movs	r2, #31
 8001f46:	9201      	str	r2, [sp, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	9200      	str	r2, [sp, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	460a      	mov	r2, r1
 8001f50:	213c      	movs	r1, #60	; 0x3c
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff f9ba 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT, TEXT_COLOR, TEXT_BACKGROUND_COLOR);
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <welcomeScreen+0x1e4>)
 8001f5a:	f107 0108 	add.w	r1, r7, #8
 8001f5e:	2200      	movs	r2, #0
 8001f60:	9202      	str	r2, [sp, #8]
 8001f62:	221f      	movs	r2, #31
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	9200      	str	r2, [sp, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	2150      	movs	r1, #80	; 0x50
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff f9ab 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(500);
 8001f76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f7a:	f000 f8ad 	bl	80020d8 <HAL_Delay>

	*current_state = choose_mode;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8001f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f88:	f000 f8a6 	bl	80020d8 <HAL_Delay>
}
 8001f8c:	bf00      	nop
 8001f8e:	3734      	adds	r7, #52	; 0x34
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd90      	pop	{r4, r7, pc}
 8001f94:	0800704c 	.word	0x0800704c
 8001f98:	0800705c 	.word	0x0800705c
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fa6:	e003      	b.n	8001fb0 <LoopCopyDataInit>

08001fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fae:	3104      	adds	r1, #4

08001fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fb0:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fb8:	d3f6      	bcc.n	8001fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fbc:	e002      	b.n	8001fc4 <LoopFillZerobss>

08001fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fc0:	f842 3b04 	str.w	r3, [r2], #4

08001fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fc8:	d3f9      	bcc.n	8001fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fca:	f7ff fedf 	bl	8001d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fce:	f002 fe89 	bl	8004ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd2:	f7ff fa4d 	bl	8001470 <main>
  bx  lr    
 8001fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fdc:	08008838 	.word	0x08008838
  ldr  r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fe4:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001fe8:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8001fec:	2000030c 	.word	0x2000030c

08001ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC_IRQHandler>
	...

08001ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_Init+0x40>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <HAL_Init+0x40>)
 8001ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_Init+0x40>)
 800200a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_Init+0x40>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201c:	2003      	movs	r0, #3
 800201e:	f000 f94d 	bl	80022bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002022:	2000      	movs	r0, #0
 8002024:	f000 f808 	bl	8002038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002028:	f7ff fcea 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023c00 	.word	0x40023c00

08002038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x54>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x58>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f965 	bl	8002326 <HAL_SYSTICK_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e00e      	b.n	8002084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d80a      	bhi.n	8002082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f000 f92d 	bl	80022d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <HAL_InitTick+0x5c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000010 	.word	0x20000010
 8002090:	20000018 	.word	0x20000018
 8002094:	20000014 	.word	0x20000014

08002098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000018 	.word	0x20000018
 80020bc:	20000304 	.word	0x20000304

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000304 	.word	0x20000304

080020d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff ffee 	bl	80020c0 <HAL_GetTick>
 80020e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d005      	beq.n	80020fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_Delay+0x40>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020fe:	bf00      	nop
 8002100:	f7ff ffde 	bl	80020c0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d8f7      	bhi.n	8002100 <HAL_Delay+0x28>
  {
  }
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000018 	.word	0x20000018

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	db0b      	blt.n	80021aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4907      	ldr	r1, [pc, #28]	; (80021b8 <__NVIC_EnableIRQ+0x38>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2001      	movs	r0, #1
 80021a2:	fa00 f202 	lsl.w	r2, r0, r2
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002288:	d301      	bcc.n	800228e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228a:	2301      	movs	r3, #1
 800228c:	e00f      	b.n	80022ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <SysTick_Config+0x40>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002296:	210f      	movs	r1, #15
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f7ff ff8e 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <SysTick_Config+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <SysTick_Config+0x40>)
 80022a8:	2207      	movs	r2, #7
 80022aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	e000e010 	.word	0xe000e010

080022bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff29 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff3e 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff8e 	bl	8002210 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5d 	bl	80021bc <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff31 	bl	8002180 <__NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffa2 	bl	8002278 <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	e159      	b.n	8002610 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	429a      	cmp	r2, r3
 8002376:	f040 8148 	bne.w	800260a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d00b      	beq.n	800239a <HAL_GPIO_Init+0x5a>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800238e:	2b11      	cmp	r3, #17
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b12      	cmp	r3, #18
 8002398:	d130      	bne.n	80023fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d0:	2201      	movs	r2, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 0201 	and.w	r2, r3, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0xfc>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b12      	cmp	r3, #18
 800243a:	d123      	bne.n	8002484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	08da      	lsrs	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3208      	adds	r2, #8
 8002444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	08da      	lsrs	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3208      	adds	r2, #8
 800247e:	69b9      	ldr	r1, [r7, #24]
 8002480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0203 	and.w	r2, r3, #3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a2 	beq.w	800260a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b56      	ldr	r3, [pc, #344]	; (8002624 <HAL_GPIO_Init+0x2e4>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a55      	ldr	r2, [pc, #340]	; (8002624 <HAL_GPIO_Init+0x2e4>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_GPIO_Init+0x2e4>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e2:	4a51      	ldr	r2, [pc, #324]	; (8002628 <HAL_GPIO_Init+0x2e8>)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	220f      	movs	r2, #15
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a48      	ldr	r2, [pc, #288]	; (800262c <HAL_GPIO_Init+0x2ec>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d019      	beq.n	8002542 <HAL_GPIO_Init+0x202>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a47      	ldr	r2, [pc, #284]	; (8002630 <HAL_GPIO_Init+0x2f0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_GPIO_Init+0x1fe>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a46      	ldr	r2, [pc, #280]	; (8002634 <HAL_GPIO_Init+0x2f4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00d      	beq.n	800253a <HAL_GPIO_Init+0x1fa>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a45      	ldr	r2, [pc, #276]	; (8002638 <HAL_GPIO_Init+0x2f8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0x1f6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a44      	ldr	r2, [pc, #272]	; (800263c <HAL_GPIO_Init+0x2fc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_GPIO_Init+0x1f2>
 800252e:	2304      	movs	r3, #4
 8002530:	e008      	b.n	8002544 <HAL_GPIO_Init+0x204>
 8002532:	2307      	movs	r3, #7
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x204>
 8002536:	2303      	movs	r3, #3
 8002538:	e004      	b.n	8002544 <HAL_GPIO_Init+0x204>
 800253a:	2302      	movs	r3, #2
 800253c:	e002      	b.n	8002544 <HAL_GPIO_Init+0x204>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_GPIO_Init+0x204>
 8002542:	2300      	movs	r3, #0
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f002 0203 	and.w	r2, r2, #3
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	4093      	lsls	r3, r2
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002554:	4934      	ldr	r1, [pc, #208]	; (8002628 <HAL_GPIO_Init+0x2e8>)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	3302      	adds	r3, #2
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_GPIO_Init+0x300>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002586:	4a2e      	ldr	r2, [pc, #184]	; (8002640 <HAL_GPIO_Init+0x300>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_GPIO_Init+0x300>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b0:	4a23      	ldr	r2, [pc, #140]	; (8002640 <HAL_GPIO_Init+0x300>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_GPIO_Init+0x300>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025da:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_GPIO_Init+0x300>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <HAL_GPIO_Init+0x300>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_GPIO_Init+0x300>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3301      	adds	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	f67f aea2 	bls.w	800235c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002618:	bf00      	nop
 800261a:	3724      	adds	r7, #36	; 0x24
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40023800 	.word	0x40023800
 8002628:	40013800 	.word	0x40013800
 800262c:	40020000 	.word	0x40020000
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40021000 	.word	0x40021000
 8002640:	40013c00 	.word	0x40013c00

08002644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e001      	b.n	8002666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002690:	e003      	b.n	800269a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	041a      	lsls	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	619a      	str	r2, [r3, #24]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d006      	beq.n	80026cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f806 	bl	80026d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40013c00 	.word	0x40013c00

080026d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e11f      	b.n	8002942 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff f99a 	bl	8001a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	; 0x24
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002742:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002752:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002754:	f001 fba8 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8002758:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a7b      	ldr	r2, [pc, #492]	; (800294c <HAL_I2C_Init+0x25c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d807      	bhi.n	8002774 <HAL_I2C_Init+0x84>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a7a      	ldr	r2, [pc, #488]	; (8002950 <HAL_I2C_Init+0x260>)
 8002768:	4293      	cmp	r3, r2
 800276a:	bf94      	ite	ls
 800276c:	2301      	movls	r3, #1
 800276e:	2300      	movhi	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	e006      	b.n	8002782 <HAL_I2C_Init+0x92>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4a77      	ldr	r2, [pc, #476]	; (8002954 <HAL_I2C_Init+0x264>)
 8002778:	4293      	cmp	r3, r2
 800277a:	bf94      	ite	ls
 800277c:	2301      	movls	r3, #1
 800277e:	2300      	movhi	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0db      	b.n	8002942 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4a72      	ldr	r2, [pc, #456]	; (8002958 <HAL_I2C_Init+0x268>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0c9b      	lsrs	r3, r3, #18
 8002794:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a64      	ldr	r2, [pc, #400]	; (800294c <HAL_I2C_Init+0x25c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d802      	bhi.n	80027c4 <HAL_I2C_Init+0xd4>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3301      	adds	r3, #1
 80027c2:	e009      	b.n	80027d8 <HAL_I2C_Init+0xe8>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	4a63      	ldr	r2, [pc, #396]	; (800295c <HAL_I2C_Init+0x26c>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	3301      	adds	r3, #1
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	430b      	orrs	r3, r1
 80027de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4956      	ldr	r1, [pc, #344]	; (800294c <HAL_I2C_Init+0x25c>)
 80027f4:	428b      	cmp	r3, r1
 80027f6:	d80d      	bhi.n	8002814 <HAL_I2C_Init+0x124>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e59      	subs	r1, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fbb1 f3f3 	udiv	r3, r1, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280c:	2b04      	cmp	r3, #4
 800280e:	bf38      	it	cc
 8002810:	2304      	movcc	r3, #4
 8002812:	e04f      	b.n	80028b4 <HAL_I2C_Init+0x1c4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d111      	bne.n	8002840 <HAL_I2C_Init+0x150>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e012      	b.n	8002866 <HAL_I2C_Init+0x176>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	0099      	lsls	r1, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Init+0x17e>
 800286a:	2301      	movs	r3, #1
 800286c:	e022      	b.n	80028b4 <HAL_I2C_Init+0x1c4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10e      	bne.n	8002894 <HAL_I2C_Init+0x1a4>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1e58      	subs	r0, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	440b      	add	r3, r1
 8002884:	fbb0 f3f3 	udiv	r3, r0, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002892:	e00f      	b.n	80028b4 <HAL_I2C_Init+0x1c4>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e58      	subs	r0, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	0099      	lsls	r1, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	6809      	ldr	r1, [r1, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6911      	ldr	r1, [r2, #16]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68d2      	ldr	r2, [r2, #12]
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	000186a0 	.word	0x000186a0
 8002950:	001e847f 	.word	0x001e847f
 8002954:	003d08ff 	.word	0x003d08ff
 8002958:	431bde83 	.word	0x431bde83
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	461a      	mov	r2, r3
 800296c:	460b      	mov	r3, r1
 800296e:	817b      	strh	r3, [r7, #10]
 8002970:	4613      	mov	r3, r2
 8002972:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff fba4 	bl	80020c0 <HAL_GetTick>
 8002978:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	f040 80e0 	bne.w	8002b48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2319      	movs	r3, #25
 800298e:	2201      	movs	r2, #1
 8002990:	4970      	ldr	r1, [pc, #448]	; (8002b54 <HAL_I2C_Master_Transmit+0x1f4>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fc70 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	e0d3      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_I2C_Master_Transmit+0x50>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0cc      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d007      	beq.n	80029d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2221      	movs	r2, #33	; 0x21
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2210      	movs	r2, #16
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	893a      	ldrh	r2, [r7, #8]
 8002a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a50      	ldr	r2, [pc, #320]	; (8002b58 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fac2 	bl	8002fa8 <I2C_MasterRequestWrite>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e08d      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a44:	e066      	b.n	8002b14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	6a39      	ldr	r1, [r7, #32]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fcea 	bl	8003424 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d107      	bne.n	8002a6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e06b      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d11b      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x188>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d017      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	6a39      	ldr	r1, [r7, #32]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fcda 	bl	80034a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00d      	beq.n	8002b14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d107      	bne.n	8002b10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e01a      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d194      	bne.n	8002a46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	00100002 	.word	0x00100002
 8002b58:	ffff0000 	.word	0xffff0000

08002b5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	813b      	strh	r3, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b76:	f7ff faa3 	bl	80020c0 <HAL_GetTick>
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	f040 8208 	bne.w	8002f9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2319      	movs	r3, #25
 8002b90:	2201      	movs	r2, #1
 8002b92:	497b      	ldr	r1, [pc, #492]	; (8002d80 <HAL_I2C_Mem_Read+0x224>)
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fb6f 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e1fb      	b.n	8002f9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Mem_Read+0x56>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e1f4      	b.n	8002f9c <HAL_I2C_Mem_Read+0x440>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d007      	beq.n	8002bd8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2222      	movs	r2, #34	; 0x22
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2240      	movs	r2, #64	; 0x40
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a5b      	ldr	r2, [pc, #364]	; (8002d84 <HAL_I2C_Mem_Read+0x228>)
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c1a:	88f8      	ldrh	r0, [r7, #6]
 8002c1c:	893a      	ldrh	r2, [r7, #8]
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4603      	mov	r3, r0
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fa3e 	bl	80030ac <I2C_RequestMemoryRead>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e1b0      	b.n	8002f9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d113      	bne.n	8002c6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	623b      	str	r3, [r7, #32]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	623b      	str	r3, [r7, #32]
 8002c56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e184      	b.n	8002f74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d11b      	bne.n	8002caa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e164      	b.n	8002f74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d11b      	bne.n	8002cea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	e144      	b.n	8002f74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d00:	e138      	b.n	8002f74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	f200 80f1 	bhi.w	8002eee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d123      	bne.n	8002d5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fc05 	bl	8003528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e139      	b.n	8002f9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d5a:	e10b      	b.n	8002f74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d14e      	bne.n	8002e02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4906      	ldr	r1, [pc, #24]	; (8002d88 <HAL_I2C_Mem_Read+0x22c>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fa82 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e10e      	b.n	8002f9c <HAL_I2C_Mem_Read+0x440>
 8002d7e:	bf00      	nop
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000
 8002d88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e00:	e0b8      	b.n	8002f74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4966      	ldr	r1, [pc, #408]	; (8002fa4 <HAL_I2C_Mem_Read+0x448>)
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fa33 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0bf      	b.n	8002f9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	2200      	movs	r2, #0
 8002e66:	494f      	ldr	r1, [pc, #316]	; (8002fa4 <HAL_I2C_Mem_Read+0x448>)
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fa05 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e091      	b.n	8002f9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eec:	e042      	b.n	8002f74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fb18 	bl	8003528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e04c      	b.n	8002f9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d118      	bne.n	8002f74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f47f aec2 	bne.w	8002d02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	00010004 	.word	0x00010004

08002fa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d006      	beq.n	8002fd2 <I2C_MasterRequestWrite+0x2a>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d003      	beq.n	8002fd2 <I2C_MasterRequestWrite+0x2a>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fd0:	d108      	bne.n	8002fe4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e00b      	b.n	8002ffc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	2b12      	cmp	r3, #18
 8002fea:	d107      	bne.n	8002ffc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f935 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00c      	beq.n	800302e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e035      	b.n	800309a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003036:	d108      	bne.n	800304a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003038:	897b      	ldrh	r3, [r7, #10]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003046:	611a      	str	r2, [r3, #16]
 8003048:	e01b      	b.n	8003082 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800304a:	897b      	ldrh	r3, [r7, #10]
 800304c:	11db      	asrs	r3, r3, #7
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f003 0306 	and.w	r3, r3, #6
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f063 030f 	orn	r3, r3, #15
 800305a:	b2da      	uxtb	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	490f      	ldr	r1, [pc, #60]	; (80030a4 <I2C_MasterRequestWrite+0xfc>)
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f95c 	bl	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e010      	b.n	800309a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003078:	897b      	ldrh	r3, [r7, #10]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4908      	ldr	r1, [pc, #32]	; (80030a8 <I2C_MasterRequestWrite+0x100>)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f94c 	bl	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	00010008 	.word	0x00010008
 80030a8:	00010002 	.word	0x00010002

080030ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f8c0 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0a9      	b.n	800326c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003118:	897b      	ldrh	r3, [r7, #10]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003126:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	6a3a      	ldr	r2, [r7, #32]
 800312c:	4951      	ldr	r1, [pc, #324]	; (8003274 <I2C_RequestMemoryRead+0x1c8>)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f8f9 	bl	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e096      	b.n	800326c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003156:	6a39      	ldr	r1, [r7, #32]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f963 	bl	8003424 <I2C_WaitOnTXEFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	2b04      	cmp	r3, #4
 800316a:	d107      	bne.n	800317c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e075      	b.n	800326c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003186:	893b      	ldrh	r3, [r7, #8]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]
 8003190:	e021      	b.n	80031d6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003192:	893b      	ldrh	r3, [r7, #8]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	b29b      	uxth	r3, r3
 8003198:	b2da      	uxtb	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a2:	6a39      	ldr	r1, [r7, #32]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f93d 	bl	8003424 <I2C_WaitOnTXEFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d107      	bne.n	80031c8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e04f      	b.n	800326c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031cc:	893b      	ldrh	r3, [r7, #8]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d8:	6a39      	ldr	r1, [r7, #32]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f922 	bl	8003424 <I2C_WaitOnTXEFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d107      	bne.n	80031fe <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e034      	b.n	800326c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003210:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	2200      	movs	r2, #0
 800321a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f82a 	bl	8003278 <I2C_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e013      	b.n	800326c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003244:	897b      	ldrh	r3, [r7, #10]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	6a3a      	ldr	r2, [r7, #32]
 8003258:	4906      	ldr	r1, [pc, #24]	; (8003274 <I2C_RequestMemoryRead+0x1c8>)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f863 	bl	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	00010002 	.word	0x00010002

08003278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003288:	e025      	b.n	80032d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d021      	beq.n	80032d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003292:	f7fe ff15 	bl	80020c0 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d116      	bne.n	80032d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e023      	b.n	800331e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10d      	bne.n	80032fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4013      	ands	r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf0c      	ite	eq
 80032f2:	2301      	moveq	r3, #1
 80032f4:	2300      	movne	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	e00c      	b.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4013      	ands	r3, r2
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	bf0c      	ite	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	2300      	movne	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	429a      	cmp	r2, r3
 800331a:	d0b6      	beq.n	800328a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003334:	e051      	b.n	80033da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003344:	d123      	bne.n	800338e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003354:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800335e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f043 0204 	orr.w	r2, r3, #4
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e046      	b.n	800341c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d021      	beq.n	80033da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003396:	f7fe fe93 	bl	80020c0 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d302      	bcc.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d116      	bne.n	80033da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f043 0220 	orr.w	r2, r3, #32
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e020      	b.n	800341c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d10c      	bne.n	80033fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4013      	ands	r3, r2
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	e00b      	b.n	8003416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	43da      	mvns	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4013      	ands	r3, r2
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d18d      	bne.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003430:	e02d      	b.n	800348e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f8ce 	bl	80035d4 <I2C_IsAcknowledgeFailed>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e02d      	b.n	800349e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d021      	beq.n	800348e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fe fe39 	bl	80020c0 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d116      	bne.n	800348e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0220 	orr.w	r2, r3, #32
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e007      	b.n	800349e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b80      	cmp	r3, #128	; 0x80
 800349a:	d1ca      	bne.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034b2:	e02d      	b.n	8003510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f88d 	bl	80035d4 <I2C_IsAcknowledgeFailed>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e02d      	b.n	8003520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ca:	d021      	beq.n	8003510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034cc:	f7fe fdf8 	bl	80020c0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d302      	bcc.n	80034e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e007      	b.n	8003520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b04      	cmp	r3, #4
 800351c:	d1ca      	bne.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003534:	e042      	b.n	80035bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b10      	cmp	r3, #16
 8003542:	d119      	bne.n	8003578 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0210 	mvn.w	r2, #16
 800354c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e029      	b.n	80035cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003578:	f7fe fda2 	bl	80020c0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	d302      	bcc.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d116      	bne.n	80035bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e007      	b.n	80035cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d1b5      	bne.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ea:	d11b      	bne.n	8003624 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	f043 0204 	orr.w	r2, r3, #4
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e25b      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d075      	beq.n	800373e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003652:	4ba3      	ldr	r3, [pc, #652]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b04      	cmp	r3, #4
 800365c:	d00c      	beq.n	8003678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365e:	4ba0      	ldr	r3, [pc, #640]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003666:	2b08      	cmp	r3, #8
 8003668:	d112      	bne.n	8003690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366a:	4b9d      	ldr	r3, [pc, #628]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003676:	d10b      	bne.n	8003690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	4b99      	ldr	r3, [pc, #612]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d05b      	beq.n	800373c <HAL_RCC_OscConfig+0x108>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d157      	bne.n	800373c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e236      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d106      	bne.n	80036a8 <HAL_RCC_OscConfig+0x74>
 800369a:	4b91      	ldr	r3, [pc, #580]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a90      	ldr	r2, [pc, #576]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e01d      	b.n	80036e4 <HAL_RCC_OscConfig+0xb0>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0x98>
 80036b2:	4b8b      	ldr	r3, [pc, #556]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a8a      	ldr	r2, [pc, #552]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4b88      	ldr	r3, [pc, #544]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a87      	ldr	r2, [pc, #540]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e00b      	b.n	80036e4 <HAL_RCC_OscConfig+0xb0>
 80036cc:	4b84      	ldr	r3, [pc, #528]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a83      	ldr	r2, [pc, #524]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b81      	ldr	r3, [pc, #516]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a80      	ldr	r2, [pc, #512]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe fce8 	bl	80020c0 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fe fce4 	bl	80020c0 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1fb      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	4b76      	ldr	r3, [pc, #472]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0xc0>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fe fcd4 	bl	80020c0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800371c:	f7fe fcd0 	bl	80020c0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e1e7      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	4b6c      	ldr	r3, [pc, #432]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0xe8>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d063      	beq.n	8003812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800374a:	4b65      	ldr	r3, [pc, #404]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003756:	4b62      	ldr	r3, [pc, #392]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800375e:	2b08      	cmp	r3, #8
 8003760:	d11c      	bne.n	800379c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003762:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d116      	bne.n	800379c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376e:	4b5c      	ldr	r3, [pc, #368]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_RCC_OscConfig+0x152>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e1bb      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003786:	4b56      	ldr	r3, [pc, #344]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4952      	ldr	r1, [pc, #328]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379a:	e03a      	b.n	8003812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d020      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a4:	4b4f      	ldr	r3, [pc, #316]	; (80038e4 <HAL_RCC_OscConfig+0x2b0>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fe fc89 	bl	80020c0 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b2:	f7fe fc85 	bl	80020c0 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e19c      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	4b46      	ldr	r3, [pc, #280]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4940      	ldr	r1, [pc, #256]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]
 80037e4:	e015      	b.n	8003812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e6:	4b3f      	ldr	r3, [pc, #252]	; (80038e4 <HAL_RCC_OscConfig+0x2b0>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fc68 	bl	80020c0 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f4:	f7fe fc64 	bl	80020c0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e17b      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d030      	beq.n	8003880 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003826:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <HAL_RCC_OscConfig+0x2b4>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fe fc48 	bl	80020c0 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003834:	f7fe fc44 	bl	80020c0 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e15b      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003846:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x200>
 8003852:	e015      	b.n	8003880 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003854:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_OscConfig+0x2b4>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7fe fc31 	bl	80020c0 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003862:	f7fe fc2d 	bl	80020c0 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e144      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003874:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a0 	beq.w	80039ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388e:	2300      	movs	r3, #0
 8003890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003892:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a0e      	ldr	r2, [pc, #56]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <HAL_RCC_OscConfig+0x2ac>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_OscConfig+0x2b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d121      	bne.n	800390e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <HAL_RCC_OscConfig+0x2b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a07      	ldr	r2, [pc, #28]	; (80038ec <HAL_RCC_OscConfig+0x2b8>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fe fbf3 	bl	80020c0 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	e011      	b.n	8003902 <HAL_RCC_OscConfig+0x2ce>
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	42470000 	.word	0x42470000
 80038e8:	42470e80 	.word	0x42470e80
 80038ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f0:	f7fe fbe6 	bl	80020c0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e0fd      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b81      	ldr	r3, [pc, #516]	; (8003b08 <HAL_RCC_OscConfig+0x4d4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d106      	bne.n	8003924 <HAL_RCC_OscConfig+0x2f0>
 8003916:	4b7d      	ldr	r3, [pc, #500]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	4a7c      	ldr	r2, [pc, #496]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6713      	str	r3, [r2, #112]	; 0x70
 8003922:	e01c      	b.n	800395e <HAL_RCC_OscConfig+0x32a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d10c      	bne.n	8003946 <HAL_RCC_OscConfig+0x312>
 800392c:	4b77      	ldr	r3, [pc, #476]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	4a76      	ldr	r2, [pc, #472]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003932:	f043 0304 	orr.w	r3, r3, #4
 8003936:	6713      	str	r3, [r2, #112]	; 0x70
 8003938:	4b74      	ldr	r3, [pc, #464]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	4a73      	ldr	r2, [pc, #460]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6713      	str	r3, [r2, #112]	; 0x70
 8003944:	e00b      	b.n	800395e <HAL_RCC_OscConfig+0x32a>
 8003946:	4b71      	ldr	r3, [pc, #452]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	4a70      	ldr	r2, [pc, #448]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6713      	str	r3, [r2, #112]	; 0x70
 8003952:	4b6e      	ldr	r3, [pc, #440]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a6d      	ldr	r2, [pc, #436]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d015      	beq.n	8003992 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003966:	f7fe fbab 	bl	80020c0 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396c:	e00a      	b.n	8003984 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fe fba7 	bl	80020c0 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f241 3288 	movw	r2, #5000	; 0x1388
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e0bc      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003984:	4b61      	ldr	r3, [pc, #388]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ee      	beq.n	800396e <HAL_RCC_OscConfig+0x33a>
 8003990:	e014      	b.n	80039bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fe fb95 	bl	80020c0 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003998:	e00a      	b.n	80039b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800399a:	f7fe fb91 	bl	80020c0 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e0a6      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b0:	4b56      	ldr	r3, [pc, #344]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ee      	bne.n	800399a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d105      	bne.n	80039ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c2:	4b52      	ldr	r3, [pc, #328]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	4a51      	ldr	r2, [pc, #324]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 80039c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 8092 	beq.w	8003afc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039d8:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d05c      	beq.n	8003a9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d141      	bne.n	8003a70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ec:	4b48      	ldr	r3, [pc, #288]	; (8003b10 <HAL_RCC_OscConfig+0x4dc>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fe fb65 	bl	80020c0 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fe fb61 	bl	80020c0 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e078      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f0      	bne.n	80039fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	019b      	lsls	r3, r3, #6
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	3b01      	subs	r3, #1
 8003a32:	041b      	lsls	r3, r3, #16
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	061b      	lsls	r3, r3, #24
 8003a3c:	4933      	ldr	r1, [pc, #204]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a42:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <HAL_RCC_OscConfig+0x4dc>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fe fb3a 	bl	80020c0 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fe fb36 	bl	80020c0 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e04d      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a62:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x41c>
 8003a6e:	e045      	b.n	8003afc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a70:	4b27      	ldr	r3, [pc, #156]	; (8003b10 <HAL_RCC_OscConfig+0x4dc>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7fe fb23 	bl	80020c0 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fe fb1f 	bl	80020c0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e036      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a90:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f0      	bne.n	8003a7e <HAL_RCC_OscConfig+0x44a>
 8003a9c:	e02e      	b.n	8003afc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e029      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <HAL_RCC_OscConfig+0x4d8>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d11c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d115      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d10d      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40007000 	.word	0x40007000
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	42470060 	.word	0x42470060

08003b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0cc      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b68      	ldr	r3, [pc, #416]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d90c      	bls.n	8003b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b65      	ldr	r3, [pc, #404]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b63      	ldr	r3, [pc, #396]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0b8      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b68:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a58      	ldr	r2, [pc, #352]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b80:	4b53      	ldr	r3, [pc, #332]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4a52      	ldr	r2, [pc, #328]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b8c:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	494d      	ldr	r1, [pc, #308]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d044      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d119      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e07f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e067      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf2:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4934      	ldr	r1, [pc, #208]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c04:	f7fe fa5c 	bl	80020c0 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7fe fa58 	bl	80020c0 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e04f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 020c 	and.w	r2, r3, #12
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1eb      	bne.n	8003c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d20c      	bcs.n	8003c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e032      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4916      	ldr	r1, [pc, #88]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	490e      	ldr	r1, [pc, #56]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c9a:	f000 f821 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	5cd3      	ldrb	r3, [r2, r3]
 8003cae:	fa21 f303 	lsr.w	r3, r1, r3
 8003cb2:	4a09      	ldr	r2, [pc, #36]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <HAL_RCC_ClockConfig+0x1c8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe f9bc 	bl	8002038 <HAL_InitTick>

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	080085ac 	.word	0x080085ac
 8003cd8:	20000010 	.word	0x20000010
 8003cdc:	20000014 	.word	0x20000014

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf6:	4b63      	ldr	r3, [pc, #396]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d007      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x32>
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d008      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x38>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f040 80b4 	bne.w	8003e74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d0c:	4b5e      	ldr	r3, [pc, #376]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d0e:	60bb      	str	r3, [r7, #8]
       break;
 8003d10:	e0b3      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d12:	4b5e      	ldr	r3, [pc, #376]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003d14:	60bb      	str	r3, [r7, #8]
      break;
 8003d16:	e0b0      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d18:	4b5a      	ldr	r3, [pc, #360]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d22:	4b58      	ldr	r3, [pc, #352]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d04a      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b55      	ldr	r3, [pc, #340]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	f04f 0400 	mov.w	r4, #0
 8003d38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	ea03 0501 	and.w	r5, r3, r1
 8003d44:	ea04 0602 	and.w	r6, r4, r2
 8003d48:	4629      	mov	r1, r5
 8003d4a:	4632      	mov	r2, r6
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	f04f 0400 	mov.w	r4, #0
 8003d54:	0154      	lsls	r4, r2, #5
 8003d56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d5a:	014b      	lsls	r3, r1, #5
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4622      	mov	r2, r4
 8003d60:	1b49      	subs	r1, r1, r5
 8003d62:	eb62 0206 	sbc.w	r2, r2, r6
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	f04f 0400 	mov.w	r4, #0
 8003d6e:	0194      	lsls	r4, r2, #6
 8003d70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d74:	018b      	lsls	r3, r1, #6
 8003d76:	1a5b      	subs	r3, r3, r1
 8003d78:	eb64 0402 	sbc.w	r4, r4, r2
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	00e2      	lsls	r2, r4, #3
 8003d86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d8a:	00d9      	lsls	r1, r3, #3
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4614      	mov	r4, r2
 8003d90:	195b      	adds	r3, r3, r5
 8003d92:	eb44 0406 	adc.w	r4, r4, r6
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	0262      	lsls	r2, r4, #9
 8003da0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003da4:	0259      	lsls	r1, r3, #9
 8003da6:	460b      	mov	r3, r1
 8003da8:	4614      	mov	r4, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	4621      	mov	r1, r4
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f04f 0400 	mov.w	r4, #0
 8003db4:	461a      	mov	r2, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	f7fc fefe 	bl	8000bb8 <__aeabi_uldivmod>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e049      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc4:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	099b      	lsrs	r3, r3, #6
 8003dca:	f04f 0400 	mov.w	r4, #0
 8003dce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	ea03 0501 	and.w	r5, r3, r1
 8003dda:	ea04 0602 	and.w	r6, r4, r2
 8003dde:	4629      	mov	r1, r5
 8003de0:	4632      	mov	r2, r6
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	f04f 0400 	mov.w	r4, #0
 8003dea:	0154      	lsls	r4, r2, #5
 8003dec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003df0:	014b      	lsls	r3, r1, #5
 8003df2:	4619      	mov	r1, r3
 8003df4:	4622      	mov	r2, r4
 8003df6:	1b49      	subs	r1, r1, r5
 8003df8:	eb62 0206 	sbc.w	r2, r2, r6
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	f04f 0400 	mov.w	r4, #0
 8003e04:	0194      	lsls	r4, r2, #6
 8003e06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e0a:	018b      	lsls	r3, r1, #6
 8003e0c:	1a5b      	subs	r3, r3, r1
 8003e0e:	eb64 0402 	sbc.w	r4, r4, r2
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	00e2      	lsls	r2, r4, #3
 8003e1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e20:	00d9      	lsls	r1, r3, #3
 8003e22:	460b      	mov	r3, r1
 8003e24:	4614      	mov	r4, r2
 8003e26:	195b      	adds	r3, r3, r5
 8003e28:	eb44 0406 	adc.w	r4, r4, r6
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	02a2      	lsls	r2, r4, #10
 8003e36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e3a:	0299      	lsls	r1, r3, #10
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4614      	mov	r4, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	4621      	mov	r1, r4
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f04f 0400 	mov.w	r4, #0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4623      	mov	r3, r4
 8003e4e:	f7fc feb3 	bl	8000bb8 <__aeabi_uldivmod>
 8003e52:	4603      	mov	r3, r0
 8003e54:	460c      	mov	r4, r1
 8003e56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	0c1b      	lsrs	r3, r3, #16
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	3301      	adds	r3, #1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	60bb      	str	r3, [r7, #8]
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e76:	60bb      	str	r3, [r7, #8]
      break;
 8003e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e84:	40023800 	.word	0x40023800
 8003e88:	00f42400 	.word	0x00f42400
 8003e8c:	007a1200 	.word	0x007a1200

08003e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000010 	.word	0x20000010

08003ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eac:	f7ff fff0 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4601      	mov	r1, r0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0a9b      	lsrs	r3, r3, #10
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4a03      	ldr	r2, [pc, #12]	; (8003ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ebe:	5cd3      	ldrb	r3, [r2, r3]
 8003ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	080085bc 	.word	0x080085bc

08003ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ed4:	f7ff ffdc 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003ed8:	4601      	mov	r1, r0
 8003eda:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	0b5b      	lsrs	r3, r3, #13
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4a03      	ldr	r2, [pc, #12]	; (8003ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee6:	5cd3      	ldrb	r3, [r2, r3]
 8003ee8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	080085bc 	.word	0x080085bc

08003ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e056      	b.n	8003fb8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fd fddb 	bl	8001ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	ea42 0103 	orr.w	r1, r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	f003 0104 	and.w	r1, r3, #4
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69da      	ldr	r2, [r3, #28]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_SPI_Transmit+0x22>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e11e      	b.n	8004220 <HAL_SPI_Transmit+0x260>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fea:	f7fe f869 	bl	80020c0 <HAL_GetTick>
 8003fee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d002      	beq.n	8004006 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004000:	2302      	movs	r3, #2
 8004002:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004004:	e103      	b.n	800420e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_SPI_Transmit+0x52>
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004016:	e0fa      	b.n	800420e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2203      	movs	r2, #3
 800401c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405e:	d107      	bne.n	8004070 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800406e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d007      	beq.n	800408e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800408c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004096:	d14b      	bne.n	8004130 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_SPI_Transmit+0xe6>
 80040a0:	8afb      	ldrh	r3, [r7, #22]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d13e      	bne.n	8004124 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	1c9a      	adds	r2, r3, #2
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040ca:	e02b      	b.n	8004124 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d112      	bne.n	8004100 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	881a      	ldrh	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	1c9a      	adds	r2, r3, #2
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80040fe:	e011      	b.n	8004124 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004100:	f7fd ffde 	bl	80020c0 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d803      	bhi.n	8004118 <HAL_SPI_Transmit+0x158>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d102      	bne.n	800411e <HAL_SPI_Transmit+0x15e>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004122:	e074      	b.n	800420e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1ce      	bne.n	80040cc <HAL_SPI_Transmit+0x10c>
 800412e:	e04c      	b.n	80041ca <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_SPI_Transmit+0x17e>
 8004138:	8afb      	ldrh	r3, [r7, #22]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d140      	bne.n	80041c0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	7812      	ldrb	r2, [r2, #0]
 800414a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004164:	e02c      	b.n	80041c0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d113      	bne.n	800419c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	7812      	ldrb	r2, [r2, #0]
 8004180:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	86da      	strh	r2, [r3, #54]	; 0x36
 800419a:	e011      	b.n	80041c0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800419c:	f7fd ff90 	bl	80020c0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d803      	bhi.n	80041b4 <HAL_SPI_Transmit+0x1f4>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d102      	bne.n	80041ba <HAL_SPI_Transmit+0x1fa>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041be:	e026      	b.n	800420e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1cd      	bne.n	8004166 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	6839      	ldr	r1, [r7, #0]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f894 	bl	80042fc <SPI_EndRxTxTransaction>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e000      	b.n	800420e <HAL_SPI_Transmit+0x24e>
  }

error:
 800420c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800421e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004238:	e04c      	b.n	80042d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d048      	beq.n	80042d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004242:	f7fd ff3d 	bl	80020c0 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d902      	bls.n	8004258 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d13d      	bne.n	80042d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004266:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004270:	d111      	bne.n	8004296 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427a:	d004      	beq.n	8004286 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004284:	d107      	bne.n	8004296 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004294:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429e:	d10f      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e00f      	b.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4013      	ands	r3, r2
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d1a3      	bne.n	800423a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <SPI_EndRxTxTransaction+0x7c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1b      	ldr	r2, [pc, #108]	; (800437c <SPI_EndRxTxTransaction+0x80>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0d5b      	lsrs	r3, r3, #21
 8004314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004318:	fb02 f303 	mul.w	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004326:	d112      	bne.n	800434e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2200      	movs	r2, #0
 8004330:	2180      	movs	r1, #128	; 0x80
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff ff78 	bl	8004228 <SPI_WaitFlagStateUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d016      	beq.n	800436c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e00f      	b.n	800436e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3b01      	subs	r3, #1
 8004358:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004364:	2b80      	cmp	r3, #128	; 0x80
 8004366:	d0f2      	beq.n	800434e <SPI_EndRxTxTransaction+0x52>
 8004368:	e000      	b.n	800436c <SPI_EndRxTxTransaction+0x70>
        break;
 800436a:	bf00      	nop
  }

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000010 	.word	0x20000010
 800437c:	165e9f81 	.word	0x165e9f81

08004380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e03f      	b.n	8004412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd fbe2 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2224      	movs	r2, #36	; 0x24
 80043b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f90b 	bl	80045e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b088      	sub	sp, #32
 800441e:	af02      	add	r7, sp, #8
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b20      	cmp	r3, #32
 8004438:	f040 8083 	bne.w	8004542 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_UART_Transmit+0x2e>
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e07b      	b.n	8004544 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_UART_Transmit+0x40>
 8004456:	2302      	movs	r3, #2
 8004458:	e074      	b.n	8004544 <HAL_UART_Transmit+0x12a>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2221      	movs	r2, #33	; 0x21
 800446c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004470:	f7fd fe26 	bl	80020c0 <HAL_GetTick>
 8004474:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	88fa      	ldrh	r2, [r7, #6]
 800447a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800448a:	e042      	b.n	8004512 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a2:	d122      	bne.n	80044ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2200      	movs	r2, #0
 80044ac:	2180      	movs	r1, #128	; 0x80
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f84c 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e042      	b.n	8004544 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	3302      	adds	r3, #2
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	e017      	b.n	8004512 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	e013      	b.n	8004512 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2180      	movs	r1, #128	; 0x80
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f829 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e01f      	b.n	8004544 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	60ba      	str	r2, [r7, #8]
 800450a:	781a      	ldrb	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1b7      	bne.n	800448c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	2140      	movs	r1, #64	; 0x40
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f810 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e006      	b.n	8004544 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e000      	b.n	8004544 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455c:	e02c      	b.n	80045b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d028      	beq.n	80045b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <UART_WaitOnFlagUntilTimeout+0x30>
 800456c:	f7fd fda8 	bl	80020c0 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	429a      	cmp	r2, r3
 800457a:	d21d      	bcs.n	80045b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800458a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e00f      	b.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4013      	ands	r3, r2
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d0c3      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004622:	f023 030c 	bic.w	r3, r3, #12
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	430b      	orrs	r3, r1
 800462e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464e:	f040 818b 	bne.w	8004968 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4ac1      	ldr	r2, [pc, #772]	; (800495c <UART_SetConfig+0x37c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d005      	beq.n	8004668 <UART_SetConfig+0x88>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4abf      	ldr	r2, [pc, #764]	; (8004960 <UART_SetConfig+0x380>)
 8004662:	4293      	cmp	r3, r2
 8004664:	f040 80bd 	bne.w	80047e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004668:	f7ff fc32 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 800466c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	461d      	mov	r5, r3
 8004672:	f04f 0600 	mov.w	r6, #0
 8004676:	46a8      	mov	r8, r5
 8004678:	46b1      	mov	r9, r6
 800467a:	eb18 0308 	adds.w	r3, r8, r8
 800467e:	eb49 0409 	adc.w	r4, r9, r9
 8004682:	4698      	mov	r8, r3
 8004684:	46a1      	mov	r9, r4
 8004686:	eb18 0805 	adds.w	r8, r8, r5
 800468a:	eb49 0906 	adc.w	r9, r9, r6
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800469a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800469e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046a2:	4688      	mov	r8, r1
 80046a4:	4691      	mov	r9, r2
 80046a6:	eb18 0005 	adds.w	r0, r8, r5
 80046aa:	eb49 0106 	adc.w	r1, r9, r6
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	461d      	mov	r5, r3
 80046b4:	f04f 0600 	mov.w	r6, #0
 80046b8:	196b      	adds	r3, r5, r5
 80046ba:	eb46 0406 	adc.w	r4, r6, r6
 80046be:	461a      	mov	r2, r3
 80046c0:	4623      	mov	r3, r4
 80046c2:	f7fc fa79 	bl	8000bb8 <__aeabi_uldivmod>
 80046c6:	4603      	mov	r3, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	461a      	mov	r2, r3
 80046cc:	4ba5      	ldr	r3, [pc, #660]	; (8004964 <UART_SetConfig+0x384>)
 80046ce:	fba3 2302 	umull	r2, r3, r3, r2
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	461d      	mov	r5, r3
 80046dc:	f04f 0600 	mov.w	r6, #0
 80046e0:	46a9      	mov	r9, r5
 80046e2:	46b2      	mov	sl, r6
 80046e4:	eb19 0309 	adds.w	r3, r9, r9
 80046e8:	eb4a 040a 	adc.w	r4, sl, sl
 80046ec:	4699      	mov	r9, r3
 80046ee:	46a2      	mov	sl, r4
 80046f0:	eb19 0905 	adds.w	r9, r9, r5
 80046f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80046f8:	f04f 0100 	mov.w	r1, #0
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004704:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004708:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800470c:	4689      	mov	r9, r1
 800470e:	4692      	mov	sl, r2
 8004710:	eb19 0005 	adds.w	r0, r9, r5
 8004714:	eb4a 0106 	adc.w	r1, sl, r6
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	461d      	mov	r5, r3
 800471e:	f04f 0600 	mov.w	r6, #0
 8004722:	196b      	adds	r3, r5, r5
 8004724:	eb46 0406 	adc.w	r4, r6, r6
 8004728:	461a      	mov	r2, r3
 800472a:	4623      	mov	r3, r4
 800472c:	f7fc fa44 	bl	8000bb8 <__aeabi_uldivmod>
 8004730:	4603      	mov	r3, r0
 8004732:	460c      	mov	r4, r1
 8004734:	461a      	mov	r2, r3
 8004736:	4b8b      	ldr	r3, [pc, #556]	; (8004964 <UART_SetConfig+0x384>)
 8004738:	fba3 1302 	umull	r1, r3, r3, r2
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	2164      	movs	r1, #100	; 0x64
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	3332      	adds	r3, #50	; 0x32
 800474a:	4a86      	ldr	r2, [pc, #536]	; (8004964 <UART_SetConfig+0x384>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004758:	4498      	add	r8, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	461d      	mov	r5, r3
 800475e:	f04f 0600 	mov.w	r6, #0
 8004762:	46a9      	mov	r9, r5
 8004764:	46b2      	mov	sl, r6
 8004766:	eb19 0309 	adds.w	r3, r9, r9
 800476a:	eb4a 040a 	adc.w	r4, sl, sl
 800476e:	4699      	mov	r9, r3
 8004770:	46a2      	mov	sl, r4
 8004772:	eb19 0905 	adds.w	r9, r9, r5
 8004776:	eb4a 0a06 	adc.w	sl, sl, r6
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004786:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800478a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800478e:	4689      	mov	r9, r1
 8004790:	4692      	mov	sl, r2
 8004792:	eb19 0005 	adds.w	r0, r9, r5
 8004796:	eb4a 0106 	adc.w	r1, sl, r6
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	461d      	mov	r5, r3
 80047a0:	f04f 0600 	mov.w	r6, #0
 80047a4:	196b      	adds	r3, r5, r5
 80047a6:	eb46 0406 	adc.w	r4, r6, r6
 80047aa:	461a      	mov	r2, r3
 80047ac:	4623      	mov	r3, r4
 80047ae:	f7fc fa03 	bl	8000bb8 <__aeabi_uldivmod>
 80047b2:	4603      	mov	r3, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	461a      	mov	r2, r3
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <UART_SetConfig+0x384>)
 80047ba:	fba3 1302 	umull	r1, r3, r3, r2
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2164      	movs	r1, #100	; 0x64
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	3332      	adds	r3, #50	; 0x32
 80047cc:	4a65      	ldr	r2, [pc, #404]	; (8004964 <UART_SetConfig+0x384>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	f003 0207 	and.w	r2, r3, #7
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4442      	add	r2, r8
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	e26f      	b.n	8004cc2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047e2:	f7ff fb61 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 80047e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	461d      	mov	r5, r3
 80047ec:	f04f 0600 	mov.w	r6, #0
 80047f0:	46a8      	mov	r8, r5
 80047f2:	46b1      	mov	r9, r6
 80047f4:	eb18 0308 	adds.w	r3, r8, r8
 80047f8:	eb49 0409 	adc.w	r4, r9, r9
 80047fc:	4698      	mov	r8, r3
 80047fe:	46a1      	mov	r9, r4
 8004800:	eb18 0805 	adds.w	r8, r8, r5
 8004804:	eb49 0906 	adc.w	r9, r9, r6
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004814:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004818:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800481c:	4688      	mov	r8, r1
 800481e:	4691      	mov	r9, r2
 8004820:	eb18 0005 	adds.w	r0, r8, r5
 8004824:	eb49 0106 	adc.w	r1, r9, r6
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	461d      	mov	r5, r3
 800482e:	f04f 0600 	mov.w	r6, #0
 8004832:	196b      	adds	r3, r5, r5
 8004834:	eb46 0406 	adc.w	r4, r6, r6
 8004838:	461a      	mov	r2, r3
 800483a:	4623      	mov	r3, r4
 800483c:	f7fc f9bc 	bl	8000bb8 <__aeabi_uldivmod>
 8004840:	4603      	mov	r3, r0
 8004842:	460c      	mov	r4, r1
 8004844:	461a      	mov	r2, r3
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <UART_SetConfig+0x384>)
 8004848:	fba3 2302 	umull	r2, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	461d      	mov	r5, r3
 8004856:	f04f 0600 	mov.w	r6, #0
 800485a:	46a9      	mov	r9, r5
 800485c:	46b2      	mov	sl, r6
 800485e:	eb19 0309 	adds.w	r3, r9, r9
 8004862:	eb4a 040a 	adc.w	r4, sl, sl
 8004866:	4699      	mov	r9, r3
 8004868:	46a2      	mov	sl, r4
 800486a:	eb19 0905 	adds.w	r9, r9, r5
 800486e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800487e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004882:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004886:	4689      	mov	r9, r1
 8004888:	4692      	mov	sl, r2
 800488a:	eb19 0005 	adds.w	r0, r9, r5
 800488e:	eb4a 0106 	adc.w	r1, sl, r6
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	461d      	mov	r5, r3
 8004898:	f04f 0600 	mov.w	r6, #0
 800489c:	196b      	adds	r3, r5, r5
 800489e:	eb46 0406 	adc.w	r4, r6, r6
 80048a2:	461a      	mov	r2, r3
 80048a4:	4623      	mov	r3, r4
 80048a6:	f7fc f987 	bl	8000bb8 <__aeabi_uldivmod>
 80048aa:	4603      	mov	r3, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	461a      	mov	r2, r3
 80048b0:	4b2c      	ldr	r3, [pc, #176]	; (8004964 <UART_SetConfig+0x384>)
 80048b2:	fba3 1302 	umull	r1, r3, r3, r2
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	2164      	movs	r1, #100	; 0x64
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	3332      	adds	r3, #50	; 0x32
 80048c4:	4a27      	ldr	r2, [pc, #156]	; (8004964 <UART_SetConfig+0x384>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048d2:	4498      	add	r8, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	461d      	mov	r5, r3
 80048d8:	f04f 0600 	mov.w	r6, #0
 80048dc:	46a9      	mov	r9, r5
 80048de:	46b2      	mov	sl, r6
 80048e0:	eb19 0309 	adds.w	r3, r9, r9
 80048e4:	eb4a 040a 	adc.w	r4, sl, sl
 80048e8:	4699      	mov	r9, r3
 80048ea:	46a2      	mov	sl, r4
 80048ec:	eb19 0905 	adds.w	r9, r9, r5
 80048f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80048f4:	f04f 0100 	mov.w	r1, #0
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004900:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004904:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004908:	4689      	mov	r9, r1
 800490a:	4692      	mov	sl, r2
 800490c:	eb19 0005 	adds.w	r0, r9, r5
 8004910:	eb4a 0106 	adc.w	r1, sl, r6
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	461d      	mov	r5, r3
 800491a:	f04f 0600 	mov.w	r6, #0
 800491e:	196b      	adds	r3, r5, r5
 8004920:	eb46 0406 	adc.w	r4, r6, r6
 8004924:	461a      	mov	r2, r3
 8004926:	4623      	mov	r3, r4
 8004928:	f7fc f946 	bl	8000bb8 <__aeabi_uldivmod>
 800492c:	4603      	mov	r3, r0
 800492e:	460c      	mov	r4, r1
 8004930:	461a      	mov	r2, r3
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <UART_SetConfig+0x384>)
 8004934:	fba3 1302 	umull	r1, r3, r3, r2
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	2164      	movs	r1, #100	; 0x64
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	3332      	adds	r3, #50	; 0x32
 8004946:	4a07      	ldr	r2, [pc, #28]	; (8004964 <UART_SetConfig+0x384>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	f003 0207 	and.w	r2, r3, #7
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4442      	add	r2, r8
 8004958:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800495a:	e1b2      	b.n	8004cc2 <UART_SetConfig+0x6e2>
 800495c:	40011000 	.word	0x40011000
 8004960:	40011400 	.word	0x40011400
 8004964:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4ad7      	ldr	r2, [pc, #860]	; (8004ccc <UART_SetConfig+0x6ec>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d005      	beq.n	800497e <UART_SetConfig+0x39e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4ad6      	ldr	r2, [pc, #856]	; (8004cd0 <UART_SetConfig+0x6f0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	f040 80d1 	bne.w	8004b20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800497e:	f7ff faa7 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 8004982:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	469a      	mov	sl, r3
 8004988:	f04f 0b00 	mov.w	fp, #0
 800498c:	46d0      	mov	r8, sl
 800498e:	46d9      	mov	r9, fp
 8004990:	eb18 0308 	adds.w	r3, r8, r8
 8004994:	eb49 0409 	adc.w	r4, r9, r9
 8004998:	4698      	mov	r8, r3
 800499a:	46a1      	mov	r9, r4
 800499c:	eb18 080a 	adds.w	r8, r8, sl
 80049a0:	eb49 090b 	adc.w	r9, r9, fp
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049b8:	4688      	mov	r8, r1
 80049ba:	4691      	mov	r9, r2
 80049bc:	eb1a 0508 	adds.w	r5, sl, r8
 80049c0:	eb4b 0609 	adc.w	r6, fp, r9
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	4619      	mov	r1, r3
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	f04f 0400 	mov.w	r4, #0
 80049d6:	0094      	lsls	r4, r2, #2
 80049d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049dc:	008b      	lsls	r3, r1, #2
 80049de:	461a      	mov	r2, r3
 80049e0:	4623      	mov	r3, r4
 80049e2:	4628      	mov	r0, r5
 80049e4:	4631      	mov	r1, r6
 80049e6:	f7fc f8e7 	bl	8000bb8 <__aeabi_uldivmod>
 80049ea:	4603      	mov	r3, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	461a      	mov	r2, r3
 80049f0:	4bb8      	ldr	r3, [pc, #736]	; (8004cd4 <UART_SetConfig+0x6f4>)
 80049f2:	fba3 2302 	umull	r2, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	469b      	mov	fp, r3
 8004a00:	f04f 0c00 	mov.w	ip, #0
 8004a04:	46d9      	mov	r9, fp
 8004a06:	46e2      	mov	sl, ip
 8004a08:	eb19 0309 	adds.w	r3, r9, r9
 8004a0c:	eb4a 040a 	adc.w	r4, sl, sl
 8004a10:	4699      	mov	r9, r3
 8004a12:	46a2      	mov	sl, r4
 8004a14:	eb19 090b 	adds.w	r9, r9, fp
 8004a18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a30:	4689      	mov	r9, r1
 8004a32:	4692      	mov	sl, r2
 8004a34:	eb1b 0509 	adds.w	r5, fp, r9
 8004a38:	eb4c 060a 	adc.w	r6, ip, sl
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4619      	mov	r1, r3
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	f04f 0400 	mov.w	r4, #0
 8004a4e:	0094      	lsls	r4, r2, #2
 8004a50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a54:	008b      	lsls	r3, r1, #2
 8004a56:	461a      	mov	r2, r3
 8004a58:	4623      	mov	r3, r4
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	f7fc f8ab 	bl	8000bb8 <__aeabi_uldivmod>
 8004a62:	4603      	mov	r3, r0
 8004a64:	460c      	mov	r4, r1
 8004a66:	461a      	mov	r2, r3
 8004a68:	4b9a      	ldr	r3, [pc, #616]	; (8004cd4 <UART_SetConfig+0x6f4>)
 8004a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	2164      	movs	r1, #100	; 0x64
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	3332      	adds	r3, #50	; 0x32
 8004a7c:	4a95      	ldr	r2, [pc, #596]	; (8004cd4 <UART_SetConfig+0x6f4>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a88:	4498      	add	r8, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	469b      	mov	fp, r3
 8004a8e:	f04f 0c00 	mov.w	ip, #0
 8004a92:	46d9      	mov	r9, fp
 8004a94:	46e2      	mov	sl, ip
 8004a96:	eb19 0309 	adds.w	r3, r9, r9
 8004a9a:	eb4a 040a 	adc.w	r4, sl, sl
 8004a9e:	4699      	mov	r9, r3
 8004aa0:	46a2      	mov	sl, r4
 8004aa2:	eb19 090b 	adds.w	r9, r9, fp
 8004aa6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004aba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004abe:	4689      	mov	r9, r1
 8004ac0:	4692      	mov	sl, r2
 8004ac2:	eb1b 0509 	adds.w	r5, fp, r9
 8004ac6:	eb4c 060a 	adc.w	r6, ip, sl
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	f04f 0400 	mov.w	r4, #0
 8004adc:	0094      	lsls	r4, r2, #2
 8004ade:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ae2:	008b      	lsls	r3, r1, #2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4623      	mov	r3, r4
 8004ae8:	4628      	mov	r0, r5
 8004aea:	4631      	mov	r1, r6
 8004aec:	f7fc f864 	bl	8000bb8 <__aeabi_uldivmod>
 8004af0:	4603      	mov	r3, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	461a      	mov	r2, r3
 8004af6:	4b77      	ldr	r3, [pc, #476]	; (8004cd4 <UART_SetConfig+0x6f4>)
 8004af8:	fba3 1302 	umull	r1, r3, r3, r2
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	2164      	movs	r1, #100	; 0x64
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	3332      	adds	r3, #50	; 0x32
 8004b0a:	4a72      	ldr	r2, [pc, #456]	; (8004cd4 <UART_SetConfig+0x6f4>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	f003 020f 	and.w	r2, r3, #15
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4442      	add	r2, r8
 8004b1c:	609a      	str	r2, [r3, #8]
 8004b1e:	e0d0      	b.n	8004cc2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7ff f9c2 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8004b24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	469a      	mov	sl, r3
 8004b2a:	f04f 0b00 	mov.w	fp, #0
 8004b2e:	46d0      	mov	r8, sl
 8004b30:	46d9      	mov	r9, fp
 8004b32:	eb18 0308 	adds.w	r3, r8, r8
 8004b36:	eb49 0409 	adc.w	r4, r9, r9
 8004b3a:	4698      	mov	r8, r3
 8004b3c:	46a1      	mov	r9, r4
 8004b3e:	eb18 080a 	adds.w	r8, r8, sl
 8004b42:	eb49 090b 	adc.w	r9, r9, fp
 8004b46:	f04f 0100 	mov.w	r1, #0
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b5a:	4688      	mov	r8, r1
 8004b5c:	4691      	mov	r9, r2
 8004b5e:	eb1a 0508 	adds.w	r5, sl, r8
 8004b62:	eb4b 0609 	adc.w	r6, fp, r9
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	f04f 0400 	mov.w	r4, #0
 8004b78:	0094      	lsls	r4, r2, #2
 8004b7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b7e:	008b      	lsls	r3, r1, #2
 8004b80:	461a      	mov	r2, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	4628      	mov	r0, r5
 8004b86:	4631      	mov	r1, r6
 8004b88:	f7fc f816 	bl	8000bb8 <__aeabi_uldivmod>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	460c      	mov	r4, r1
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b50      	ldr	r3, [pc, #320]	; (8004cd4 <UART_SetConfig+0x6f4>)
 8004b94:	fba3 2302 	umull	r2, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	469b      	mov	fp, r3
 8004ba2:	f04f 0c00 	mov.w	ip, #0
 8004ba6:	46d9      	mov	r9, fp
 8004ba8:	46e2      	mov	sl, ip
 8004baa:	eb19 0309 	adds.w	r3, r9, r9
 8004bae:	eb4a 040a 	adc.w	r4, sl, sl
 8004bb2:	4699      	mov	r9, r3
 8004bb4:	46a2      	mov	sl, r4
 8004bb6:	eb19 090b 	adds.w	r9, r9, fp
 8004bba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bd2:	4689      	mov	r9, r1
 8004bd4:	4692      	mov	sl, r2
 8004bd6:	eb1b 0509 	adds.w	r5, fp, r9
 8004bda:	eb4c 060a 	adc.w	r6, ip, sl
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	4619      	mov	r1, r3
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	f04f 0400 	mov.w	r4, #0
 8004bf0:	0094      	lsls	r4, r2, #2
 8004bf2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bf6:	008b      	lsls	r3, r1, #2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	4631      	mov	r1, r6
 8004c00:	f7fb ffda 	bl	8000bb8 <__aeabi_uldivmod>
 8004c04:	4603      	mov	r3, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4b32      	ldr	r3, [pc, #200]	; (8004cd4 <UART_SetConfig+0x6f4>)
 8004c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	2164      	movs	r1, #100	; 0x64
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	3332      	adds	r3, #50	; 0x32
 8004c1e:	4a2d      	ldr	r2, [pc, #180]	; (8004cd4 <UART_SetConfig+0x6f4>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c2a:	4498      	add	r8, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	469b      	mov	fp, r3
 8004c30:	f04f 0c00 	mov.w	ip, #0
 8004c34:	46d9      	mov	r9, fp
 8004c36:	46e2      	mov	sl, ip
 8004c38:	eb19 0309 	adds.w	r3, r9, r9
 8004c3c:	eb4a 040a 	adc.w	r4, sl, sl
 8004c40:	4699      	mov	r9, r3
 8004c42:	46a2      	mov	sl, r4
 8004c44:	eb19 090b 	adds.w	r9, r9, fp
 8004c48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c60:	4689      	mov	r9, r1
 8004c62:	4692      	mov	sl, r2
 8004c64:	eb1b 0509 	adds.w	r5, fp, r9
 8004c68:	eb4c 060a 	adc.w	r6, ip, sl
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	4619      	mov	r1, r3
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	f04f 0400 	mov.w	r4, #0
 8004c7e:	0094      	lsls	r4, r2, #2
 8004c80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c84:	008b      	lsls	r3, r1, #2
 8004c86:	461a      	mov	r2, r3
 8004c88:	4623      	mov	r3, r4
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	f7fb ff93 	bl	8000bb8 <__aeabi_uldivmod>
 8004c92:	4603      	mov	r3, r0
 8004c94:	460c      	mov	r4, r1
 8004c96:	461a      	mov	r2, r3
 8004c98:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <UART_SetConfig+0x6f4>)
 8004c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	2164      	movs	r1, #100	; 0x64
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	3332      	adds	r3, #50	; 0x32
 8004cac:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <UART_SetConfig+0x6f4>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	f003 020f 	and.w	r2, r3, #15
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4442      	add	r2, r8
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	e7ff      	b.n	8004cc2 <UART_SetConfig+0x6e2>
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ccc:	40011000 	.word	0x40011000
 8004cd0:	40011400 	.word	0x40011400
 8004cd4:	51eb851f 	.word	0x51eb851f

08004cd8 <__errno>:
 8004cd8:	4b01      	ldr	r3, [pc, #4]	; (8004ce0 <__errno+0x8>)
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	2000001c 	.word	0x2000001c

08004ce4 <__libc_init_array>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	4e0d      	ldr	r6, [pc, #52]	; (8004d1c <__libc_init_array+0x38>)
 8004ce8:	4c0d      	ldr	r4, [pc, #52]	; (8004d20 <__libc_init_array+0x3c>)
 8004cea:	1ba4      	subs	r4, r4, r6
 8004cec:	10a4      	asrs	r4, r4, #2
 8004cee:	2500      	movs	r5, #0
 8004cf0:	42a5      	cmp	r5, r4
 8004cf2:	d109      	bne.n	8004d08 <__libc_init_array+0x24>
 8004cf4:	4e0b      	ldr	r6, [pc, #44]	; (8004d24 <__libc_init_array+0x40>)
 8004cf6:	4c0c      	ldr	r4, [pc, #48]	; (8004d28 <__libc_init_array+0x44>)
 8004cf8:	f002 f96a 	bl	8006fd0 <_init>
 8004cfc:	1ba4      	subs	r4, r4, r6
 8004cfe:	10a4      	asrs	r4, r4, #2
 8004d00:	2500      	movs	r5, #0
 8004d02:	42a5      	cmp	r5, r4
 8004d04:	d105      	bne.n	8004d12 <__libc_init_array+0x2e>
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d0c:	4798      	blx	r3
 8004d0e:	3501      	adds	r5, #1
 8004d10:	e7ee      	b.n	8004cf0 <__libc_init_array+0xc>
 8004d12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d16:	4798      	blx	r3
 8004d18:	3501      	adds	r5, #1
 8004d1a:	e7f2      	b.n	8004d02 <__libc_init_array+0x1e>
 8004d1c:	08008830 	.word	0x08008830
 8004d20:	08008830 	.word	0x08008830
 8004d24:	08008830 	.word	0x08008830
 8004d28:	08008834 	.word	0x08008834

08004d2c <memset>:
 8004d2c:	4402      	add	r2, r0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d100      	bne.n	8004d36 <memset+0xa>
 8004d34:	4770      	bx	lr
 8004d36:	f803 1b01 	strb.w	r1, [r3], #1
 8004d3a:	e7f9      	b.n	8004d30 <memset+0x4>

08004d3c <__cvt>:
 8004d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d40:	ec55 4b10 	vmov	r4, r5, d0
 8004d44:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004d46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d4a:	2d00      	cmp	r5, #0
 8004d4c:	460e      	mov	r6, r1
 8004d4e:	4691      	mov	r9, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	bfb8      	it	lt
 8004d54:	4622      	movlt	r2, r4
 8004d56:	462b      	mov	r3, r5
 8004d58:	f027 0720 	bic.w	r7, r7, #32
 8004d5c:	bfbb      	ittet	lt
 8004d5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d62:	461d      	movlt	r5, r3
 8004d64:	2300      	movge	r3, #0
 8004d66:	232d      	movlt	r3, #45	; 0x2d
 8004d68:	bfb8      	it	lt
 8004d6a:	4614      	movlt	r4, r2
 8004d6c:	2f46      	cmp	r7, #70	; 0x46
 8004d6e:	700b      	strb	r3, [r1, #0]
 8004d70:	d004      	beq.n	8004d7c <__cvt+0x40>
 8004d72:	2f45      	cmp	r7, #69	; 0x45
 8004d74:	d100      	bne.n	8004d78 <__cvt+0x3c>
 8004d76:	3601      	adds	r6, #1
 8004d78:	2102      	movs	r1, #2
 8004d7a:	e000      	b.n	8004d7e <__cvt+0x42>
 8004d7c:	2103      	movs	r1, #3
 8004d7e:	ab03      	add	r3, sp, #12
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	ab02      	add	r3, sp, #8
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4632      	mov	r2, r6
 8004d88:	4653      	mov	r3, sl
 8004d8a:	ec45 4b10 	vmov	d0, r4, r5
 8004d8e:	f000 fcdf 	bl	8005750 <_dtoa_r>
 8004d92:	2f47      	cmp	r7, #71	; 0x47
 8004d94:	4680      	mov	r8, r0
 8004d96:	d102      	bne.n	8004d9e <__cvt+0x62>
 8004d98:	f019 0f01 	tst.w	r9, #1
 8004d9c:	d026      	beq.n	8004dec <__cvt+0xb0>
 8004d9e:	2f46      	cmp	r7, #70	; 0x46
 8004da0:	eb08 0906 	add.w	r9, r8, r6
 8004da4:	d111      	bne.n	8004dca <__cvt+0x8e>
 8004da6:	f898 3000 	ldrb.w	r3, [r8]
 8004daa:	2b30      	cmp	r3, #48	; 0x30
 8004dac:	d10a      	bne.n	8004dc4 <__cvt+0x88>
 8004dae:	2200      	movs	r2, #0
 8004db0:	2300      	movs	r3, #0
 8004db2:	4620      	mov	r0, r4
 8004db4:	4629      	mov	r1, r5
 8004db6:	f7fb fe8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dba:	b918      	cbnz	r0, 8004dc4 <__cvt+0x88>
 8004dbc:	f1c6 0601 	rsb	r6, r6, #1
 8004dc0:	f8ca 6000 	str.w	r6, [sl]
 8004dc4:	f8da 3000 	ldr.w	r3, [sl]
 8004dc8:	4499      	add	r9, r3
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	f7fb fe81 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dd6:	b938      	cbnz	r0, 8004de8 <__cvt+0xac>
 8004dd8:	2230      	movs	r2, #48	; 0x30
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	454b      	cmp	r3, r9
 8004dde:	d205      	bcs.n	8004dec <__cvt+0xb0>
 8004de0:	1c59      	adds	r1, r3, #1
 8004de2:	9103      	str	r1, [sp, #12]
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	e7f8      	b.n	8004dda <__cvt+0x9e>
 8004de8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dec:	9b03      	ldr	r3, [sp, #12]
 8004dee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004df0:	eba3 0308 	sub.w	r3, r3, r8
 8004df4:	4640      	mov	r0, r8
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	b004      	add	sp, #16
 8004dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004dfe <__exponent>:
 8004dfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e00:	2900      	cmp	r1, #0
 8004e02:	4604      	mov	r4, r0
 8004e04:	bfba      	itte	lt
 8004e06:	4249      	neglt	r1, r1
 8004e08:	232d      	movlt	r3, #45	; 0x2d
 8004e0a:	232b      	movge	r3, #43	; 0x2b
 8004e0c:	2909      	cmp	r1, #9
 8004e0e:	f804 2b02 	strb.w	r2, [r4], #2
 8004e12:	7043      	strb	r3, [r0, #1]
 8004e14:	dd20      	ble.n	8004e58 <__exponent+0x5a>
 8004e16:	f10d 0307 	add.w	r3, sp, #7
 8004e1a:	461f      	mov	r7, r3
 8004e1c:	260a      	movs	r6, #10
 8004e1e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e22:	fb06 1115 	mls	r1, r6, r5, r1
 8004e26:	3130      	adds	r1, #48	; 0x30
 8004e28:	2d09      	cmp	r5, #9
 8004e2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e2e:	f103 32ff 	add.w	r2, r3, #4294967295
 8004e32:	4629      	mov	r1, r5
 8004e34:	dc09      	bgt.n	8004e4a <__exponent+0x4c>
 8004e36:	3130      	adds	r1, #48	; 0x30
 8004e38:	3b02      	subs	r3, #2
 8004e3a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e3e:	42bb      	cmp	r3, r7
 8004e40:	4622      	mov	r2, r4
 8004e42:	d304      	bcc.n	8004e4e <__exponent+0x50>
 8004e44:	1a10      	subs	r0, r2, r0
 8004e46:	b003      	add	sp, #12
 8004e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	e7e7      	b.n	8004e1e <__exponent+0x20>
 8004e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e52:	f804 2b01 	strb.w	r2, [r4], #1
 8004e56:	e7f2      	b.n	8004e3e <__exponent+0x40>
 8004e58:	2330      	movs	r3, #48	; 0x30
 8004e5a:	4419      	add	r1, r3
 8004e5c:	7083      	strb	r3, [r0, #2]
 8004e5e:	1d02      	adds	r2, r0, #4
 8004e60:	70c1      	strb	r1, [r0, #3]
 8004e62:	e7ef      	b.n	8004e44 <__exponent+0x46>

08004e64 <_printf_float>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	b08d      	sub	sp, #52	; 0x34
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004e70:	4616      	mov	r6, r2
 8004e72:	461f      	mov	r7, r3
 8004e74:	4605      	mov	r5, r0
 8004e76:	f001 fa23 	bl	80062c0 <_localeconv_r>
 8004e7a:	6803      	ldr	r3, [r0, #0]
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb f9ae 	bl	80001e0 <strlen>
 8004e84:	2300      	movs	r3, #0
 8004e86:	930a      	str	r3, [sp, #40]	; 0x28
 8004e88:	f8d8 3000 	ldr.w	r3, [r8]
 8004e8c:	9005      	str	r0, [sp, #20]
 8004e8e:	3307      	adds	r3, #7
 8004e90:	f023 0307 	bic.w	r3, r3, #7
 8004e94:	f103 0208 	add.w	r2, r3, #8
 8004e98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e9c:	f8d4 b000 	ldr.w	fp, [r4]
 8004ea0:	f8c8 2000 	str.w	r2, [r8]
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004eac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004eb0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004eb4:	9307      	str	r3, [sp, #28]
 8004eb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004eba:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebe:	4ba7      	ldr	r3, [pc, #668]	; (800515c <_printf_float+0x2f8>)
 8004ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ec4:	f7fb fe3a 	bl	8000b3c <__aeabi_dcmpun>
 8004ec8:	bb70      	cbnz	r0, 8004f28 <_printf_float+0xc4>
 8004eca:	f04f 32ff 	mov.w	r2, #4294967295
 8004ece:	4ba3      	ldr	r3, [pc, #652]	; (800515c <_printf_float+0x2f8>)
 8004ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ed4:	f7fb fe14 	bl	8000b00 <__aeabi_dcmple>
 8004ed8:	bb30      	cbnz	r0, 8004f28 <_printf_float+0xc4>
 8004eda:	2200      	movs	r2, #0
 8004edc:	2300      	movs	r3, #0
 8004ede:	4640      	mov	r0, r8
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	f7fb fe03 	bl	8000aec <__aeabi_dcmplt>
 8004ee6:	b110      	cbz	r0, 8004eee <_printf_float+0x8a>
 8004ee8:	232d      	movs	r3, #45	; 0x2d
 8004eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eee:	4a9c      	ldr	r2, [pc, #624]	; (8005160 <_printf_float+0x2fc>)
 8004ef0:	4b9c      	ldr	r3, [pc, #624]	; (8005164 <_printf_float+0x300>)
 8004ef2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004ef6:	bf8c      	ite	hi
 8004ef8:	4690      	movhi	r8, r2
 8004efa:	4698      	movls	r8, r3
 8004efc:	2303      	movs	r3, #3
 8004efe:	f02b 0204 	bic.w	r2, fp, #4
 8004f02:	6123      	str	r3, [r4, #16]
 8004f04:	6022      	str	r2, [r4, #0]
 8004f06:	f04f 0900 	mov.w	r9, #0
 8004f0a:	9700      	str	r7, [sp, #0]
 8004f0c:	4633      	mov	r3, r6
 8004f0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f10:	4621      	mov	r1, r4
 8004f12:	4628      	mov	r0, r5
 8004f14:	f000 f9e6 	bl	80052e4 <_printf_common>
 8004f18:	3001      	adds	r0, #1
 8004f1a:	f040 808d 	bne.w	8005038 <_printf_float+0x1d4>
 8004f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f22:	b00d      	add	sp, #52	; 0x34
 8004f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	4649      	mov	r1, r9
 8004f30:	f7fb fe04 	bl	8000b3c <__aeabi_dcmpun>
 8004f34:	b110      	cbz	r0, 8004f3c <_printf_float+0xd8>
 8004f36:	4a8c      	ldr	r2, [pc, #560]	; (8005168 <_printf_float+0x304>)
 8004f38:	4b8c      	ldr	r3, [pc, #560]	; (800516c <_printf_float+0x308>)
 8004f3a:	e7da      	b.n	8004ef2 <_printf_float+0x8e>
 8004f3c:	6861      	ldr	r1, [r4, #4]
 8004f3e:	1c4b      	adds	r3, r1, #1
 8004f40:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004f44:	a80a      	add	r0, sp, #40	; 0x28
 8004f46:	d13e      	bne.n	8004fc6 <_printf_float+0x162>
 8004f48:	2306      	movs	r3, #6
 8004f4a:	6063      	str	r3, [r4, #4]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004f52:	ab09      	add	r3, sp, #36	; 0x24
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	ec49 8b10 	vmov	d0, r8, r9
 8004f5a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f5e:	6022      	str	r2, [r4, #0]
 8004f60:	f8cd a004 	str.w	sl, [sp, #4]
 8004f64:	6861      	ldr	r1, [r4, #4]
 8004f66:	4628      	mov	r0, r5
 8004f68:	f7ff fee8 	bl	8004d3c <__cvt>
 8004f6c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004f70:	2b47      	cmp	r3, #71	; 0x47
 8004f72:	4680      	mov	r8, r0
 8004f74:	d109      	bne.n	8004f8a <_printf_float+0x126>
 8004f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f78:	1cd8      	adds	r0, r3, #3
 8004f7a:	db02      	blt.n	8004f82 <_printf_float+0x11e>
 8004f7c:	6862      	ldr	r2, [r4, #4]
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	dd47      	ble.n	8005012 <_printf_float+0x1ae>
 8004f82:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f86:	fa5f fa8a 	uxtb.w	sl, sl
 8004f8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004f8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f90:	d824      	bhi.n	8004fdc <_printf_float+0x178>
 8004f92:	3901      	subs	r1, #1
 8004f94:	4652      	mov	r2, sl
 8004f96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f9a:	9109      	str	r1, [sp, #36]	; 0x24
 8004f9c:	f7ff ff2f 	bl	8004dfe <__exponent>
 8004fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fa2:	1813      	adds	r3, r2, r0
 8004fa4:	2a01      	cmp	r2, #1
 8004fa6:	4681      	mov	r9, r0
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	dc02      	bgt.n	8004fb2 <_printf_float+0x14e>
 8004fac:	6822      	ldr	r2, [r4, #0]
 8004fae:	07d1      	lsls	r1, r2, #31
 8004fb0:	d501      	bpl.n	8004fb6 <_printf_float+0x152>
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	6123      	str	r3, [r4, #16]
 8004fb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0a5      	beq.n	8004f0a <_printf_float+0xa6>
 8004fbe:	232d      	movs	r3, #45	; 0x2d
 8004fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc4:	e7a1      	b.n	8004f0a <_printf_float+0xa6>
 8004fc6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004fca:	f000 8177 	beq.w	80052bc <_printf_float+0x458>
 8004fce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004fd2:	d1bb      	bne.n	8004f4c <_printf_float+0xe8>
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	d1b9      	bne.n	8004f4c <_printf_float+0xe8>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e7b6      	b.n	8004f4a <_printf_float+0xe6>
 8004fdc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004fe0:	d119      	bne.n	8005016 <_printf_float+0x1b2>
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	6863      	ldr	r3, [r4, #4]
 8004fe6:	dd0c      	ble.n	8005002 <_printf_float+0x19e>
 8004fe8:	6121      	str	r1, [r4, #16]
 8004fea:	b913      	cbnz	r3, 8004ff2 <_printf_float+0x18e>
 8004fec:	6822      	ldr	r2, [r4, #0]
 8004fee:	07d2      	lsls	r2, r2, #31
 8004ff0:	d502      	bpl.n	8004ff8 <_printf_float+0x194>
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	440b      	add	r3, r1
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ffa:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ffc:	f04f 0900 	mov.w	r9, #0
 8005000:	e7d9      	b.n	8004fb6 <_printf_float+0x152>
 8005002:	b913      	cbnz	r3, 800500a <_printf_float+0x1a6>
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	07d0      	lsls	r0, r2, #31
 8005008:	d501      	bpl.n	800500e <_printf_float+0x1aa>
 800500a:	3302      	adds	r3, #2
 800500c:	e7f3      	b.n	8004ff6 <_printf_float+0x192>
 800500e:	2301      	movs	r3, #1
 8005010:	e7f1      	b.n	8004ff6 <_printf_float+0x192>
 8005012:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005016:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800501a:	4293      	cmp	r3, r2
 800501c:	db05      	blt.n	800502a <_printf_float+0x1c6>
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	6123      	str	r3, [r4, #16]
 8005022:	07d1      	lsls	r1, r2, #31
 8005024:	d5e8      	bpl.n	8004ff8 <_printf_float+0x194>
 8005026:	3301      	adds	r3, #1
 8005028:	e7e5      	b.n	8004ff6 <_printf_float+0x192>
 800502a:	2b00      	cmp	r3, #0
 800502c:	bfd4      	ite	le
 800502e:	f1c3 0302 	rsble	r3, r3, #2
 8005032:	2301      	movgt	r3, #1
 8005034:	4413      	add	r3, r2
 8005036:	e7de      	b.n	8004ff6 <_printf_float+0x192>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	055a      	lsls	r2, r3, #21
 800503c:	d407      	bmi.n	800504e <_printf_float+0x1ea>
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	4642      	mov	r2, r8
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	d12b      	bne.n	80050a4 <_printf_float+0x240>
 800504c:	e767      	b.n	8004f1e <_printf_float+0xba>
 800504e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005052:	f240 80dc 	bls.w	800520e <_printf_float+0x3aa>
 8005056:	2200      	movs	r2, #0
 8005058:	2300      	movs	r3, #0
 800505a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800505e:	f7fb fd3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005062:	2800      	cmp	r0, #0
 8005064:	d033      	beq.n	80050ce <_printf_float+0x26a>
 8005066:	2301      	movs	r3, #1
 8005068:	4a41      	ldr	r2, [pc, #260]	; (8005170 <_printf_float+0x30c>)
 800506a:	4631      	mov	r1, r6
 800506c:	4628      	mov	r0, r5
 800506e:	47b8      	blx	r7
 8005070:	3001      	adds	r0, #1
 8005072:	f43f af54 	beq.w	8004f1e <_printf_float+0xba>
 8005076:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800507a:	429a      	cmp	r2, r3
 800507c:	db02      	blt.n	8005084 <_printf_float+0x220>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	07d8      	lsls	r0, r3, #31
 8005082:	d50f      	bpl.n	80050a4 <_printf_float+0x240>
 8005084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005088:	4631      	mov	r1, r6
 800508a:	4628      	mov	r0, r5
 800508c:	47b8      	blx	r7
 800508e:	3001      	adds	r0, #1
 8005090:	f43f af45 	beq.w	8004f1e <_printf_float+0xba>
 8005094:	f04f 0800 	mov.w	r8, #0
 8005098:	f104 091a 	add.w	r9, r4, #26
 800509c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800509e:	3b01      	subs	r3, #1
 80050a0:	4543      	cmp	r3, r8
 80050a2:	dc09      	bgt.n	80050b8 <_printf_float+0x254>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	079b      	lsls	r3, r3, #30
 80050a8:	f100 8103 	bmi.w	80052b2 <_printf_float+0x44e>
 80050ac:	68e0      	ldr	r0, [r4, #12]
 80050ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050b0:	4298      	cmp	r0, r3
 80050b2:	bfb8      	it	lt
 80050b4:	4618      	movlt	r0, r3
 80050b6:	e734      	b.n	8004f22 <_printf_float+0xbe>
 80050b8:	2301      	movs	r3, #1
 80050ba:	464a      	mov	r2, r9
 80050bc:	4631      	mov	r1, r6
 80050be:	4628      	mov	r0, r5
 80050c0:	47b8      	blx	r7
 80050c2:	3001      	adds	r0, #1
 80050c4:	f43f af2b 	beq.w	8004f1e <_printf_float+0xba>
 80050c8:	f108 0801 	add.w	r8, r8, #1
 80050cc:	e7e6      	b.n	800509c <_printf_float+0x238>
 80050ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	dc2b      	bgt.n	800512c <_printf_float+0x2c8>
 80050d4:	2301      	movs	r3, #1
 80050d6:	4a26      	ldr	r2, [pc, #152]	; (8005170 <_printf_float+0x30c>)
 80050d8:	4631      	mov	r1, r6
 80050da:	4628      	mov	r0, r5
 80050dc:	47b8      	blx	r7
 80050de:	3001      	adds	r0, #1
 80050e0:	f43f af1d 	beq.w	8004f1e <_printf_float+0xba>
 80050e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e6:	b923      	cbnz	r3, 80050f2 <_printf_float+0x28e>
 80050e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ea:	b913      	cbnz	r3, 80050f2 <_printf_float+0x28e>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	07d9      	lsls	r1, r3, #31
 80050f0:	d5d8      	bpl.n	80050a4 <_printf_float+0x240>
 80050f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050f6:	4631      	mov	r1, r6
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b8      	blx	r7
 80050fc:	3001      	adds	r0, #1
 80050fe:	f43f af0e 	beq.w	8004f1e <_printf_float+0xba>
 8005102:	f04f 0900 	mov.w	r9, #0
 8005106:	f104 0a1a 	add.w	sl, r4, #26
 800510a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510c:	425b      	negs	r3, r3
 800510e:	454b      	cmp	r3, r9
 8005110:	dc01      	bgt.n	8005116 <_printf_float+0x2b2>
 8005112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005114:	e794      	b.n	8005040 <_printf_float+0x1dc>
 8005116:	2301      	movs	r3, #1
 8005118:	4652      	mov	r2, sl
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	47b8      	blx	r7
 8005120:	3001      	adds	r0, #1
 8005122:	f43f aefc 	beq.w	8004f1e <_printf_float+0xba>
 8005126:	f109 0901 	add.w	r9, r9, #1
 800512a:	e7ee      	b.n	800510a <_printf_float+0x2a6>
 800512c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800512e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005130:	429a      	cmp	r2, r3
 8005132:	bfa8      	it	ge
 8005134:	461a      	movge	r2, r3
 8005136:	2a00      	cmp	r2, #0
 8005138:	4691      	mov	r9, r2
 800513a:	dd07      	ble.n	800514c <_printf_float+0x2e8>
 800513c:	4613      	mov	r3, r2
 800513e:	4631      	mov	r1, r6
 8005140:	4642      	mov	r2, r8
 8005142:	4628      	mov	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	3001      	adds	r0, #1
 8005148:	f43f aee9 	beq.w	8004f1e <_printf_float+0xba>
 800514c:	f104 031a 	add.w	r3, r4, #26
 8005150:	f04f 0b00 	mov.w	fp, #0
 8005154:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005158:	9306      	str	r3, [sp, #24]
 800515a:	e015      	b.n	8005188 <_printf_float+0x324>
 800515c:	7fefffff 	.word	0x7fefffff
 8005160:	080085c8 	.word	0x080085c8
 8005164:	080085c4 	.word	0x080085c4
 8005168:	080085d0 	.word	0x080085d0
 800516c:	080085cc 	.word	0x080085cc
 8005170:	080085d4 	.word	0x080085d4
 8005174:	2301      	movs	r3, #1
 8005176:	9a06      	ldr	r2, [sp, #24]
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	f43f aecd 	beq.w	8004f1e <_printf_float+0xba>
 8005184:	f10b 0b01 	add.w	fp, fp, #1
 8005188:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800518c:	ebaa 0309 	sub.w	r3, sl, r9
 8005190:	455b      	cmp	r3, fp
 8005192:	dcef      	bgt.n	8005174 <_printf_float+0x310>
 8005194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005198:	429a      	cmp	r2, r3
 800519a:	44d0      	add	r8, sl
 800519c:	db15      	blt.n	80051ca <_printf_float+0x366>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	07da      	lsls	r2, r3, #31
 80051a2:	d412      	bmi.n	80051ca <_printf_float+0x366>
 80051a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051a8:	eba3 020a 	sub.w	r2, r3, sl
 80051ac:	eba3 0a01 	sub.w	sl, r3, r1
 80051b0:	4592      	cmp	sl, r2
 80051b2:	bfa8      	it	ge
 80051b4:	4692      	movge	sl, r2
 80051b6:	f1ba 0f00 	cmp.w	sl, #0
 80051ba:	dc0e      	bgt.n	80051da <_printf_float+0x376>
 80051bc:	f04f 0800 	mov.w	r8, #0
 80051c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051c4:	f104 091a 	add.w	r9, r4, #26
 80051c8:	e019      	b.n	80051fe <_printf_float+0x39a>
 80051ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	d1e5      	bne.n	80051a4 <_printf_float+0x340>
 80051d8:	e6a1      	b.n	8004f1e <_printf_float+0xba>
 80051da:	4653      	mov	r3, sl
 80051dc:	4642      	mov	r2, r8
 80051de:	4631      	mov	r1, r6
 80051e0:	4628      	mov	r0, r5
 80051e2:	47b8      	blx	r7
 80051e4:	3001      	adds	r0, #1
 80051e6:	d1e9      	bne.n	80051bc <_printf_float+0x358>
 80051e8:	e699      	b.n	8004f1e <_printf_float+0xba>
 80051ea:	2301      	movs	r3, #1
 80051ec:	464a      	mov	r2, r9
 80051ee:	4631      	mov	r1, r6
 80051f0:	4628      	mov	r0, r5
 80051f2:	47b8      	blx	r7
 80051f4:	3001      	adds	r0, #1
 80051f6:	f43f ae92 	beq.w	8004f1e <_printf_float+0xba>
 80051fa:	f108 0801 	add.w	r8, r8, #1
 80051fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	eba3 030a 	sub.w	r3, r3, sl
 8005208:	4543      	cmp	r3, r8
 800520a:	dcee      	bgt.n	80051ea <_printf_float+0x386>
 800520c:	e74a      	b.n	80050a4 <_printf_float+0x240>
 800520e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005210:	2a01      	cmp	r2, #1
 8005212:	dc01      	bgt.n	8005218 <_printf_float+0x3b4>
 8005214:	07db      	lsls	r3, r3, #31
 8005216:	d53a      	bpl.n	800528e <_printf_float+0x42a>
 8005218:	2301      	movs	r3, #1
 800521a:	4642      	mov	r2, r8
 800521c:	4631      	mov	r1, r6
 800521e:	4628      	mov	r0, r5
 8005220:	47b8      	blx	r7
 8005222:	3001      	adds	r0, #1
 8005224:	f43f ae7b 	beq.w	8004f1e <_printf_float+0xba>
 8005228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800522c:	4631      	mov	r1, r6
 800522e:	4628      	mov	r0, r5
 8005230:	47b8      	blx	r7
 8005232:	3001      	adds	r0, #1
 8005234:	f108 0801 	add.w	r8, r8, #1
 8005238:	f43f ae71 	beq.w	8004f1e <_printf_float+0xba>
 800523c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800523e:	2200      	movs	r2, #0
 8005240:	f103 3aff 	add.w	sl, r3, #4294967295
 8005244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005248:	2300      	movs	r3, #0
 800524a:	f7fb fc45 	bl	8000ad8 <__aeabi_dcmpeq>
 800524e:	b9c8      	cbnz	r0, 8005284 <_printf_float+0x420>
 8005250:	4653      	mov	r3, sl
 8005252:	4642      	mov	r2, r8
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	d10e      	bne.n	800527c <_printf_float+0x418>
 800525e:	e65e      	b.n	8004f1e <_printf_float+0xba>
 8005260:	2301      	movs	r3, #1
 8005262:	4652      	mov	r2, sl
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f ae57 	beq.w	8004f1e <_printf_float+0xba>
 8005270:	f108 0801 	add.w	r8, r8, #1
 8005274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005276:	3b01      	subs	r3, #1
 8005278:	4543      	cmp	r3, r8
 800527a:	dcf1      	bgt.n	8005260 <_printf_float+0x3fc>
 800527c:	464b      	mov	r3, r9
 800527e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005282:	e6de      	b.n	8005042 <_printf_float+0x1de>
 8005284:	f04f 0800 	mov.w	r8, #0
 8005288:	f104 0a1a 	add.w	sl, r4, #26
 800528c:	e7f2      	b.n	8005274 <_printf_float+0x410>
 800528e:	2301      	movs	r3, #1
 8005290:	e7df      	b.n	8005252 <_printf_float+0x3ee>
 8005292:	2301      	movs	r3, #1
 8005294:	464a      	mov	r2, r9
 8005296:	4631      	mov	r1, r6
 8005298:	4628      	mov	r0, r5
 800529a:	47b8      	blx	r7
 800529c:	3001      	adds	r0, #1
 800529e:	f43f ae3e 	beq.w	8004f1e <_printf_float+0xba>
 80052a2:	f108 0801 	add.w	r8, r8, #1
 80052a6:	68e3      	ldr	r3, [r4, #12]
 80052a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	4543      	cmp	r3, r8
 80052ae:	dcf0      	bgt.n	8005292 <_printf_float+0x42e>
 80052b0:	e6fc      	b.n	80050ac <_printf_float+0x248>
 80052b2:	f04f 0800 	mov.w	r8, #0
 80052b6:	f104 0919 	add.w	r9, r4, #25
 80052ba:	e7f4      	b.n	80052a6 <_printf_float+0x442>
 80052bc:	2900      	cmp	r1, #0
 80052be:	f43f ae8b 	beq.w	8004fd8 <_printf_float+0x174>
 80052c2:	2300      	movs	r3, #0
 80052c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80052c8:	ab09      	add	r3, sp, #36	; 0x24
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	ec49 8b10 	vmov	d0, r8, r9
 80052d0:	6022      	str	r2, [r4, #0]
 80052d2:	f8cd a004 	str.w	sl, [sp, #4]
 80052d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052da:	4628      	mov	r0, r5
 80052dc:	f7ff fd2e 	bl	8004d3c <__cvt>
 80052e0:	4680      	mov	r8, r0
 80052e2:	e648      	b.n	8004f76 <_printf_float+0x112>

080052e4 <_printf_common>:
 80052e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e8:	4691      	mov	r9, r2
 80052ea:	461f      	mov	r7, r3
 80052ec:	688a      	ldr	r2, [r1, #8]
 80052ee:	690b      	ldr	r3, [r1, #16]
 80052f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052f4:	4293      	cmp	r3, r2
 80052f6:	bfb8      	it	lt
 80052f8:	4613      	movlt	r3, r2
 80052fa:	f8c9 3000 	str.w	r3, [r9]
 80052fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005302:	4606      	mov	r6, r0
 8005304:	460c      	mov	r4, r1
 8005306:	b112      	cbz	r2, 800530e <_printf_common+0x2a>
 8005308:	3301      	adds	r3, #1
 800530a:	f8c9 3000 	str.w	r3, [r9]
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	0699      	lsls	r1, r3, #26
 8005312:	bf42      	ittt	mi
 8005314:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005318:	3302      	addmi	r3, #2
 800531a:	f8c9 3000 	strmi.w	r3, [r9]
 800531e:	6825      	ldr	r5, [r4, #0]
 8005320:	f015 0506 	ands.w	r5, r5, #6
 8005324:	d107      	bne.n	8005336 <_printf_common+0x52>
 8005326:	f104 0a19 	add.w	sl, r4, #25
 800532a:	68e3      	ldr	r3, [r4, #12]
 800532c:	f8d9 2000 	ldr.w	r2, [r9]
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	42ab      	cmp	r3, r5
 8005334:	dc28      	bgt.n	8005388 <_printf_common+0xa4>
 8005336:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	3300      	adds	r3, #0
 800533e:	bf18      	it	ne
 8005340:	2301      	movne	r3, #1
 8005342:	0692      	lsls	r2, r2, #26
 8005344:	d42d      	bmi.n	80053a2 <_printf_common+0xbe>
 8005346:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800534a:	4639      	mov	r1, r7
 800534c:	4630      	mov	r0, r6
 800534e:	47c0      	blx	r8
 8005350:	3001      	adds	r0, #1
 8005352:	d020      	beq.n	8005396 <_printf_common+0xb2>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	68e5      	ldr	r5, [r4, #12]
 8005358:	f8d9 2000 	ldr.w	r2, [r9]
 800535c:	f003 0306 	and.w	r3, r3, #6
 8005360:	2b04      	cmp	r3, #4
 8005362:	bf08      	it	eq
 8005364:	1aad      	subeq	r5, r5, r2
 8005366:	68a3      	ldr	r3, [r4, #8]
 8005368:	6922      	ldr	r2, [r4, #16]
 800536a:	bf0c      	ite	eq
 800536c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005370:	2500      	movne	r5, #0
 8005372:	4293      	cmp	r3, r2
 8005374:	bfc4      	itt	gt
 8005376:	1a9b      	subgt	r3, r3, r2
 8005378:	18ed      	addgt	r5, r5, r3
 800537a:	f04f 0900 	mov.w	r9, #0
 800537e:	341a      	adds	r4, #26
 8005380:	454d      	cmp	r5, r9
 8005382:	d11a      	bne.n	80053ba <_printf_common+0xd6>
 8005384:	2000      	movs	r0, #0
 8005386:	e008      	b.n	800539a <_printf_common+0xb6>
 8005388:	2301      	movs	r3, #1
 800538a:	4652      	mov	r2, sl
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	47c0      	blx	r8
 8005392:	3001      	adds	r0, #1
 8005394:	d103      	bne.n	800539e <_printf_common+0xba>
 8005396:	f04f 30ff 	mov.w	r0, #4294967295
 800539a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539e:	3501      	adds	r5, #1
 80053a0:	e7c3      	b.n	800532a <_printf_common+0x46>
 80053a2:	18e1      	adds	r1, r4, r3
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	2030      	movs	r0, #48	; 0x30
 80053a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ac:	4422      	add	r2, r4
 80053ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053b6:	3302      	adds	r3, #2
 80053b8:	e7c5      	b.n	8005346 <_printf_common+0x62>
 80053ba:	2301      	movs	r3, #1
 80053bc:	4622      	mov	r2, r4
 80053be:	4639      	mov	r1, r7
 80053c0:	4630      	mov	r0, r6
 80053c2:	47c0      	blx	r8
 80053c4:	3001      	adds	r0, #1
 80053c6:	d0e6      	beq.n	8005396 <_printf_common+0xb2>
 80053c8:	f109 0901 	add.w	r9, r9, #1
 80053cc:	e7d8      	b.n	8005380 <_printf_common+0x9c>
	...

080053d0 <_printf_i>:
 80053d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80053d8:	460c      	mov	r4, r1
 80053da:	7e09      	ldrb	r1, [r1, #24]
 80053dc:	b085      	sub	sp, #20
 80053de:	296e      	cmp	r1, #110	; 0x6e
 80053e0:	4617      	mov	r7, r2
 80053e2:	4606      	mov	r6, r0
 80053e4:	4698      	mov	r8, r3
 80053e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053e8:	f000 80b3 	beq.w	8005552 <_printf_i+0x182>
 80053ec:	d822      	bhi.n	8005434 <_printf_i+0x64>
 80053ee:	2963      	cmp	r1, #99	; 0x63
 80053f0:	d036      	beq.n	8005460 <_printf_i+0x90>
 80053f2:	d80a      	bhi.n	800540a <_printf_i+0x3a>
 80053f4:	2900      	cmp	r1, #0
 80053f6:	f000 80b9 	beq.w	800556c <_printf_i+0x19c>
 80053fa:	2958      	cmp	r1, #88	; 0x58
 80053fc:	f000 8083 	beq.w	8005506 <_printf_i+0x136>
 8005400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005404:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005408:	e032      	b.n	8005470 <_printf_i+0xa0>
 800540a:	2964      	cmp	r1, #100	; 0x64
 800540c:	d001      	beq.n	8005412 <_printf_i+0x42>
 800540e:	2969      	cmp	r1, #105	; 0x69
 8005410:	d1f6      	bne.n	8005400 <_printf_i+0x30>
 8005412:	6820      	ldr	r0, [r4, #0]
 8005414:	6813      	ldr	r3, [r2, #0]
 8005416:	0605      	lsls	r5, r0, #24
 8005418:	f103 0104 	add.w	r1, r3, #4
 800541c:	d52a      	bpl.n	8005474 <_printf_i+0xa4>
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6011      	str	r1, [r2, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	da03      	bge.n	800542e <_printf_i+0x5e>
 8005426:	222d      	movs	r2, #45	; 0x2d
 8005428:	425b      	negs	r3, r3
 800542a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800542e:	486f      	ldr	r0, [pc, #444]	; (80055ec <_printf_i+0x21c>)
 8005430:	220a      	movs	r2, #10
 8005432:	e039      	b.n	80054a8 <_printf_i+0xd8>
 8005434:	2973      	cmp	r1, #115	; 0x73
 8005436:	f000 809d 	beq.w	8005574 <_printf_i+0x1a4>
 800543a:	d808      	bhi.n	800544e <_printf_i+0x7e>
 800543c:	296f      	cmp	r1, #111	; 0x6f
 800543e:	d020      	beq.n	8005482 <_printf_i+0xb2>
 8005440:	2970      	cmp	r1, #112	; 0x70
 8005442:	d1dd      	bne.n	8005400 <_printf_i+0x30>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	f043 0320 	orr.w	r3, r3, #32
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	e003      	b.n	8005456 <_printf_i+0x86>
 800544e:	2975      	cmp	r1, #117	; 0x75
 8005450:	d017      	beq.n	8005482 <_printf_i+0xb2>
 8005452:	2978      	cmp	r1, #120	; 0x78
 8005454:	d1d4      	bne.n	8005400 <_printf_i+0x30>
 8005456:	2378      	movs	r3, #120	; 0x78
 8005458:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800545c:	4864      	ldr	r0, [pc, #400]	; (80055f0 <_printf_i+0x220>)
 800545e:	e055      	b.n	800550c <_printf_i+0x13c>
 8005460:	6813      	ldr	r3, [r2, #0]
 8005462:	1d19      	adds	r1, r3, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6011      	str	r1, [r2, #0]
 8005468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800546c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005470:	2301      	movs	r3, #1
 8005472:	e08c      	b.n	800558e <_printf_i+0x1be>
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6011      	str	r1, [r2, #0]
 8005478:	f010 0f40 	tst.w	r0, #64	; 0x40
 800547c:	bf18      	it	ne
 800547e:	b21b      	sxthne	r3, r3
 8005480:	e7cf      	b.n	8005422 <_printf_i+0x52>
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	6825      	ldr	r5, [r4, #0]
 8005486:	1d18      	adds	r0, r3, #4
 8005488:	6010      	str	r0, [r2, #0]
 800548a:	0628      	lsls	r0, r5, #24
 800548c:	d501      	bpl.n	8005492 <_printf_i+0xc2>
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	e002      	b.n	8005498 <_printf_i+0xc8>
 8005492:	0668      	lsls	r0, r5, #25
 8005494:	d5fb      	bpl.n	800548e <_printf_i+0xbe>
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	4854      	ldr	r0, [pc, #336]	; (80055ec <_printf_i+0x21c>)
 800549a:	296f      	cmp	r1, #111	; 0x6f
 800549c:	bf14      	ite	ne
 800549e:	220a      	movne	r2, #10
 80054a0:	2208      	moveq	r2, #8
 80054a2:	2100      	movs	r1, #0
 80054a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054a8:	6865      	ldr	r5, [r4, #4]
 80054aa:	60a5      	str	r5, [r4, #8]
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	f2c0 8095 	blt.w	80055dc <_printf_i+0x20c>
 80054b2:	6821      	ldr	r1, [r4, #0]
 80054b4:	f021 0104 	bic.w	r1, r1, #4
 80054b8:	6021      	str	r1, [r4, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d13d      	bne.n	800553a <_printf_i+0x16a>
 80054be:	2d00      	cmp	r5, #0
 80054c0:	f040 808e 	bne.w	80055e0 <_printf_i+0x210>
 80054c4:	4665      	mov	r5, ip
 80054c6:	2a08      	cmp	r2, #8
 80054c8:	d10b      	bne.n	80054e2 <_printf_i+0x112>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	07db      	lsls	r3, r3, #31
 80054ce:	d508      	bpl.n	80054e2 <_printf_i+0x112>
 80054d0:	6923      	ldr	r3, [r4, #16]
 80054d2:	6862      	ldr	r2, [r4, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	bfde      	ittt	le
 80054d8:	2330      	movle	r3, #48	; 0x30
 80054da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054e2:	ebac 0305 	sub.w	r3, ip, r5
 80054e6:	6123      	str	r3, [r4, #16]
 80054e8:	f8cd 8000 	str.w	r8, [sp]
 80054ec:	463b      	mov	r3, r7
 80054ee:	aa03      	add	r2, sp, #12
 80054f0:	4621      	mov	r1, r4
 80054f2:	4630      	mov	r0, r6
 80054f4:	f7ff fef6 	bl	80052e4 <_printf_common>
 80054f8:	3001      	adds	r0, #1
 80054fa:	d14d      	bne.n	8005598 <_printf_i+0x1c8>
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	b005      	add	sp, #20
 8005502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005506:	4839      	ldr	r0, [pc, #228]	; (80055ec <_printf_i+0x21c>)
 8005508:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800550c:	6813      	ldr	r3, [r2, #0]
 800550e:	6821      	ldr	r1, [r4, #0]
 8005510:	1d1d      	adds	r5, r3, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6015      	str	r5, [r2, #0]
 8005516:	060a      	lsls	r2, r1, #24
 8005518:	d50b      	bpl.n	8005532 <_printf_i+0x162>
 800551a:	07ca      	lsls	r2, r1, #31
 800551c:	bf44      	itt	mi
 800551e:	f041 0120 	orrmi.w	r1, r1, #32
 8005522:	6021      	strmi	r1, [r4, #0]
 8005524:	b91b      	cbnz	r3, 800552e <_printf_i+0x15e>
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	f022 0220 	bic.w	r2, r2, #32
 800552c:	6022      	str	r2, [r4, #0]
 800552e:	2210      	movs	r2, #16
 8005530:	e7b7      	b.n	80054a2 <_printf_i+0xd2>
 8005532:	064d      	lsls	r5, r1, #25
 8005534:	bf48      	it	mi
 8005536:	b29b      	uxthmi	r3, r3
 8005538:	e7ef      	b.n	800551a <_printf_i+0x14a>
 800553a:	4665      	mov	r5, ip
 800553c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005540:	fb02 3311 	mls	r3, r2, r1, r3
 8005544:	5cc3      	ldrb	r3, [r0, r3]
 8005546:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800554a:	460b      	mov	r3, r1
 800554c:	2900      	cmp	r1, #0
 800554e:	d1f5      	bne.n	800553c <_printf_i+0x16c>
 8005550:	e7b9      	b.n	80054c6 <_printf_i+0xf6>
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	6825      	ldr	r5, [r4, #0]
 8005556:	6961      	ldr	r1, [r4, #20]
 8005558:	1d18      	adds	r0, r3, #4
 800555a:	6010      	str	r0, [r2, #0]
 800555c:	0628      	lsls	r0, r5, #24
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	d501      	bpl.n	8005566 <_printf_i+0x196>
 8005562:	6019      	str	r1, [r3, #0]
 8005564:	e002      	b.n	800556c <_printf_i+0x19c>
 8005566:	066a      	lsls	r2, r5, #25
 8005568:	d5fb      	bpl.n	8005562 <_printf_i+0x192>
 800556a:	8019      	strh	r1, [r3, #0]
 800556c:	2300      	movs	r3, #0
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	4665      	mov	r5, ip
 8005572:	e7b9      	b.n	80054e8 <_printf_i+0x118>
 8005574:	6813      	ldr	r3, [r2, #0]
 8005576:	1d19      	adds	r1, r3, #4
 8005578:	6011      	str	r1, [r2, #0]
 800557a:	681d      	ldr	r5, [r3, #0]
 800557c:	6862      	ldr	r2, [r4, #4]
 800557e:	2100      	movs	r1, #0
 8005580:	4628      	mov	r0, r5
 8005582:	f7fa fe35 	bl	80001f0 <memchr>
 8005586:	b108      	cbz	r0, 800558c <_printf_i+0x1bc>
 8005588:	1b40      	subs	r0, r0, r5
 800558a:	6060      	str	r0, [r4, #4]
 800558c:	6863      	ldr	r3, [r4, #4]
 800558e:	6123      	str	r3, [r4, #16]
 8005590:	2300      	movs	r3, #0
 8005592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005596:	e7a7      	b.n	80054e8 <_printf_i+0x118>
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	462a      	mov	r2, r5
 800559c:	4639      	mov	r1, r7
 800559e:	4630      	mov	r0, r6
 80055a0:	47c0      	blx	r8
 80055a2:	3001      	adds	r0, #1
 80055a4:	d0aa      	beq.n	80054fc <_printf_i+0x12c>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	079b      	lsls	r3, r3, #30
 80055aa:	d413      	bmi.n	80055d4 <_printf_i+0x204>
 80055ac:	68e0      	ldr	r0, [r4, #12]
 80055ae:	9b03      	ldr	r3, [sp, #12]
 80055b0:	4298      	cmp	r0, r3
 80055b2:	bfb8      	it	lt
 80055b4:	4618      	movlt	r0, r3
 80055b6:	e7a3      	b.n	8005500 <_printf_i+0x130>
 80055b8:	2301      	movs	r3, #1
 80055ba:	464a      	mov	r2, r9
 80055bc:	4639      	mov	r1, r7
 80055be:	4630      	mov	r0, r6
 80055c0:	47c0      	blx	r8
 80055c2:	3001      	adds	r0, #1
 80055c4:	d09a      	beq.n	80054fc <_printf_i+0x12c>
 80055c6:	3501      	adds	r5, #1
 80055c8:	68e3      	ldr	r3, [r4, #12]
 80055ca:	9a03      	ldr	r2, [sp, #12]
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	42ab      	cmp	r3, r5
 80055d0:	dcf2      	bgt.n	80055b8 <_printf_i+0x1e8>
 80055d2:	e7eb      	b.n	80055ac <_printf_i+0x1dc>
 80055d4:	2500      	movs	r5, #0
 80055d6:	f104 0919 	add.w	r9, r4, #25
 80055da:	e7f5      	b.n	80055c8 <_printf_i+0x1f8>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1ac      	bne.n	800553a <_printf_i+0x16a>
 80055e0:	7803      	ldrb	r3, [r0, #0]
 80055e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055ea:	e76c      	b.n	80054c6 <_printf_i+0xf6>
 80055ec:	080085d6 	.word	0x080085d6
 80055f0:	080085e7 	.word	0x080085e7

080055f4 <siprintf>:
 80055f4:	b40e      	push	{r1, r2, r3}
 80055f6:	b500      	push	{lr}
 80055f8:	b09c      	sub	sp, #112	; 0x70
 80055fa:	ab1d      	add	r3, sp, #116	; 0x74
 80055fc:	9002      	str	r0, [sp, #8]
 80055fe:	9006      	str	r0, [sp, #24]
 8005600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005604:	4809      	ldr	r0, [pc, #36]	; (800562c <siprintf+0x38>)
 8005606:	9107      	str	r1, [sp, #28]
 8005608:	9104      	str	r1, [sp, #16]
 800560a:	4909      	ldr	r1, [pc, #36]	; (8005630 <siprintf+0x3c>)
 800560c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005610:	9105      	str	r1, [sp, #20]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	a902      	add	r1, sp, #8
 8005618:	f001 fa5e 	bl	8006ad8 <_svfiprintf_r>
 800561c:	9b02      	ldr	r3, [sp, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	b01c      	add	sp, #112	; 0x70
 8005624:	f85d eb04 	ldr.w	lr, [sp], #4
 8005628:	b003      	add	sp, #12
 800562a:	4770      	bx	lr
 800562c:	2000001c 	.word	0x2000001c
 8005630:	ffff0208 	.word	0xffff0208

08005634 <quorem>:
 8005634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	6903      	ldr	r3, [r0, #16]
 800563a:	690c      	ldr	r4, [r1, #16]
 800563c:	42a3      	cmp	r3, r4
 800563e:	4680      	mov	r8, r0
 8005640:	f2c0 8082 	blt.w	8005748 <quorem+0x114>
 8005644:	3c01      	subs	r4, #1
 8005646:	f101 0714 	add.w	r7, r1, #20
 800564a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800564e:	f100 0614 	add.w	r6, r0, #20
 8005652:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005656:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800565a:	eb06 030c 	add.w	r3, r6, ip
 800565e:	3501      	adds	r5, #1
 8005660:	eb07 090c 	add.w	r9, r7, ip
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	fbb0 f5f5 	udiv	r5, r0, r5
 800566a:	b395      	cbz	r5, 80056d2 <quorem+0x9e>
 800566c:	f04f 0a00 	mov.w	sl, #0
 8005670:	4638      	mov	r0, r7
 8005672:	46b6      	mov	lr, r6
 8005674:	46d3      	mov	fp, sl
 8005676:	f850 2b04 	ldr.w	r2, [r0], #4
 800567a:	b293      	uxth	r3, r2
 800567c:	fb05 a303 	mla	r3, r5, r3, sl
 8005680:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005684:	b29b      	uxth	r3, r3
 8005686:	ebab 0303 	sub.w	r3, fp, r3
 800568a:	0c12      	lsrs	r2, r2, #16
 800568c:	f8de b000 	ldr.w	fp, [lr]
 8005690:	fb05 a202 	mla	r2, r5, r2, sl
 8005694:	fa13 f38b 	uxtah	r3, r3, fp
 8005698:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800569c:	fa1f fb82 	uxth.w	fp, r2
 80056a0:	f8de 2000 	ldr.w	r2, [lr]
 80056a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80056a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056b2:	4581      	cmp	r9, r0
 80056b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80056b8:	f84e 3b04 	str.w	r3, [lr], #4
 80056bc:	d2db      	bcs.n	8005676 <quorem+0x42>
 80056be:	f856 300c 	ldr.w	r3, [r6, ip]
 80056c2:	b933      	cbnz	r3, 80056d2 <quorem+0x9e>
 80056c4:	9b01      	ldr	r3, [sp, #4]
 80056c6:	3b04      	subs	r3, #4
 80056c8:	429e      	cmp	r6, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	d330      	bcc.n	8005730 <quorem+0xfc>
 80056ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80056d2:	4640      	mov	r0, r8
 80056d4:	f001 f82a 	bl	800672c <__mcmp>
 80056d8:	2800      	cmp	r0, #0
 80056da:	db25      	blt.n	8005728 <quorem+0xf4>
 80056dc:	3501      	adds	r5, #1
 80056de:	4630      	mov	r0, r6
 80056e0:	f04f 0c00 	mov.w	ip, #0
 80056e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80056e8:	f8d0 e000 	ldr.w	lr, [r0]
 80056ec:	b293      	uxth	r3, r2
 80056ee:	ebac 0303 	sub.w	r3, ip, r3
 80056f2:	0c12      	lsrs	r2, r2, #16
 80056f4:	fa13 f38e 	uxtah	r3, r3, lr
 80056f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005700:	b29b      	uxth	r3, r3
 8005702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005706:	45b9      	cmp	r9, r7
 8005708:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800570c:	f840 3b04 	str.w	r3, [r0], #4
 8005710:	d2e8      	bcs.n	80056e4 <quorem+0xb0>
 8005712:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005716:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800571a:	b92a      	cbnz	r2, 8005728 <quorem+0xf4>
 800571c:	3b04      	subs	r3, #4
 800571e:	429e      	cmp	r6, r3
 8005720:	461a      	mov	r2, r3
 8005722:	d30b      	bcc.n	800573c <quorem+0x108>
 8005724:	f8c8 4010 	str.w	r4, [r8, #16]
 8005728:	4628      	mov	r0, r5
 800572a:	b003      	add	sp, #12
 800572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005730:	6812      	ldr	r2, [r2, #0]
 8005732:	3b04      	subs	r3, #4
 8005734:	2a00      	cmp	r2, #0
 8005736:	d1ca      	bne.n	80056ce <quorem+0x9a>
 8005738:	3c01      	subs	r4, #1
 800573a:	e7c5      	b.n	80056c8 <quorem+0x94>
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	3b04      	subs	r3, #4
 8005740:	2a00      	cmp	r2, #0
 8005742:	d1ef      	bne.n	8005724 <quorem+0xf0>
 8005744:	3c01      	subs	r4, #1
 8005746:	e7ea      	b.n	800571e <quorem+0xea>
 8005748:	2000      	movs	r0, #0
 800574a:	e7ee      	b.n	800572a <quorem+0xf6>
 800574c:	0000      	movs	r0, r0
	...

08005750 <_dtoa_r>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	ec57 6b10 	vmov	r6, r7, d0
 8005758:	b097      	sub	sp, #92	; 0x5c
 800575a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800575c:	9106      	str	r1, [sp, #24]
 800575e:	4604      	mov	r4, r0
 8005760:	920b      	str	r2, [sp, #44]	; 0x2c
 8005762:	9312      	str	r3, [sp, #72]	; 0x48
 8005764:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005768:	e9cd 6700 	strd	r6, r7, [sp]
 800576c:	b93d      	cbnz	r5, 800577e <_dtoa_r+0x2e>
 800576e:	2010      	movs	r0, #16
 8005770:	f000 fdb4 	bl	80062dc <malloc>
 8005774:	6260      	str	r0, [r4, #36]	; 0x24
 8005776:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800577a:	6005      	str	r5, [r0, #0]
 800577c:	60c5      	str	r5, [r0, #12]
 800577e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	b151      	cbz	r1, 800579a <_dtoa_r+0x4a>
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	604a      	str	r2, [r1, #4]
 8005788:	2301      	movs	r3, #1
 800578a:	4093      	lsls	r3, r2
 800578c:	608b      	str	r3, [r1, #8]
 800578e:	4620      	mov	r0, r4
 8005790:	f000 fdeb 	bl	800636a <_Bfree>
 8005794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	1e3b      	subs	r3, r7, #0
 800579c:	bfbb      	ittet	lt
 800579e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057a2:	9301      	strlt	r3, [sp, #4]
 80057a4:	2300      	movge	r3, #0
 80057a6:	2201      	movlt	r2, #1
 80057a8:	bfac      	ite	ge
 80057aa:	f8c8 3000 	strge.w	r3, [r8]
 80057ae:	f8c8 2000 	strlt.w	r2, [r8]
 80057b2:	4baf      	ldr	r3, [pc, #700]	; (8005a70 <_dtoa_r+0x320>)
 80057b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80057b8:	ea33 0308 	bics.w	r3, r3, r8
 80057bc:	d114      	bne.n	80057e8 <_dtoa_r+0x98>
 80057be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	9b00      	ldr	r3, [sp, #0]
 80057c8:	b923      	cbnz	r3, 80057d4 <_dtoa_r+0x84>
 80057ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80057ce:	2800      	cmp	r0, #0
 80057d0:	f000 8542 	beq.w	8006258 <_dtoa_r+0xb08>
 80057d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005a84 <_dtoa_r+0x334>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8544 	beq.w	8006268 <_dtoa_r+0xb18>
 80057e0:	f10b 0303 	add.w	r3, fp, #3
 80057e4:	f000 bd3e 	b.w	8006264 <_dtoa_r+0xb14>
 80057e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80057ec:	2200      	movs	r2, #0
 80057ee:	2300      	movs	r3, #0
 80057f0:	4630      	mov	r0, r6
 80057f2:	4639      	mov	r1, r7
 80057f4:	f7fb f970 	bl	8000ad8 <__aeabi_dcmpeq>
 80057f8:	4681      	mov	r9, r0
 80057fa:	b168      	cbz	r0, 8005818 <_dtoa_r+0xc8>
 80057fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057fe:	2301      	movs	r3, #1
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8524 	beq.w	8006252 <_dtoa_r+0xb02>
 800580a:	4b9a      	ldr	r3, [pc, #616]	; (8005a74 <_dtoa_r+0x324>)
 800580c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800580e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	f000 bd28 	b.w	8006268 <_dtoa_r+0xb18>
 8005818:	aa14      	add	r2, sp, #80	; 0x50
 800581a:	a915      	add	r1, sp, #84	; 0x54
 800581c:	ec47 6b10 	vmov	d0, r6, r7
 8005820:	4620      	mov	r0, r4
 8005822:	f000 fffa 	bl	800681a <__d2b>
 8005826:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800582a:	9004      	str	r0, [sp, #16]
 800582c:	2d00      	cmp	r5, #0
 800582e:	d07c      	beq.n	800592a <_dtoa_r+0x1da>
 8005830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005834:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005838:	46b2      	mov	sl, r6
 800583a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800583e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005842:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005846:	2200      	movs	r2, #0
 8005848:	4b8b      	ldr	r3, [pc, #556]	; (8005a78 <_dtoa_r+0x328>)
 800584a:	4650      	mov	r0, sl
 800584c:	4659      	mov	r1, fp
 800584e:	f7fa fd23 	bl	8000298 <__aeabi_dsub>
 8005852:	a381      	add	r3, pc, #516	; (adr r3, 8005a58 <_dtoa_r+0x308>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f7fa fed6 	bl	8000608 <__aeabi_dmul>
 800585c:	a380      	add	r3, pc, #512	; (adr r3, 8005a60 <_dtoa_r+0x310>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f7fa fd1b 	bl	800029c <__adddf3>
 8005866:	4606      	mov	r6, r0
 8005868:	4628      	mov	r0, r5
 800586a:	460f      	mov	r7, r1
 800586c:	f7fa fe62 	bl	8000534 <__aeabi_i2d>
 8005870:	a37d      	add	r3, pc, #500	; (adr r3, 8005a68 <_dtoa_r+0x318>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f7fa fec7 	bl	8000608 <__aeabi_dmul>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4630      	mov	r0, r6
 8005880:	4639      	mov	r1, r7
 8005882:	f7fa fd0b 	bl	800029c <__adddf3>
 8005886:	4606      	mov	r6, r0
 8005888:	460f      	mov	r7, r1
 800588a:	f7fb f96d 	bl	8000b68 <__aeabi_d2iz>
 800588e:	2200      	movs	r2, #0
 8005890:	4682      	mov	sl, r0
 8005892:	2300      	movs	r3, #0
 8005894:	4630      	mov	r0, r6
 8005896:	4639      	mov	r1, r7
 8005898:	f7fb f928 	bl	8000aec <__aeabi_dcmplt>
 800589c:	b148      	cbz	r0, 80058b2 <_dtoa_r+0x162>
 800589e:	4650      	mov	r0, sl
 80058a0:	f7fa fe48 	bl	8000534 <__aeabi_i2d>
 80058a4:	4632      	mov	r2, r6
 80058a6:	463b      	mov	r3, r7
 80058a8:	f7fb f916 	bl	8000ad8 <__aeabi_dcmpeq>
 80058ac:	b908      	cbnz	r0, 80058b2 <_dtoa_r+0x162>
 80058ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058b2:	f1ba 0f16 	cmp.w	sl, #22
 80058b6:	d859      	bhi.n	800596c <_dtoa_r+0x21c>
 80058b8:	4970      	ldr	r1, [pc, #448]	; (8005a7c <_dtoa_r+0x32c>)
 80058ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80058be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058c6:	f7fb f92f 	bl	8000b28 <__aeabi_dcmpgt>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d050      	beq.n	8005970 <_dtoa_r+0x220>
 80058ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058d2:	2300      	movs	r3, #0
 80058d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80058d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058d8:	1b5d      	subs	r5, r3, r5
 80058da:	f1b5 0801 	subs.w	r8, r5, #1
 80058de:	bf49      	itett	mi
 80058e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80058e4:	2300      	movpl	r3, #0
 80058e6:	9305      	strmi	r3, [sp, #20]
 80058e8:	f04f 0800 	movmi.w	r8, #0
 80058ec:	bf58      	it	pl
 80058ee:	9305      	strpl	r3, [sp, #20]
 80058f0:	f1ba 0f00 	cmp.w	sl, #0
 80058f4:	db3e      	blt.n	8005974 <_dtoa_r+0x224>
 80058f6:	2300      	movs	r3, #0
 80058f8:	44d0      	add	r8, sl
 80058fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80058fe:	9307      	str	r3, [sp, #28]
 8005900:	9b06      	ldr	r3, [sp, #24]
 8005902:	2b09      	cmp	r3, #9
 8005904:	f200 8090 	bhi.w	8005a28 <_dtoa_r+0x2d8>
 8005908:	2b05      	cmp	r3, #5
 800590a:	bfc4      	itt	gt
 800590c:	3b04      	subgt	r3, #4
 800590e:	9306      	strgt	r3, [sp, #24]
 8005910:	9b06      	ldr	r3, [sp, #24]
 8005912:	f1a3 0302 	sub.w	r3, r3, #2
 8005916:	bfcc      	ite	gt
 8005918:	2500      	movgt	r5, #0
 800591a:	2501      	movle	r5, #1
 800591c:	2b03      	cmp	r3, #3
 800591e:	f200 808f 	bhi.w	8005a40 <_dtoa_r+0x2f0>
 8005922:	e8df f003 	tbb	[pc, r3]
 8005926:	7f7d      	.short	0x7f7d
 8005928:	7131      	.short	0x7131
 800592a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800592e:	441d      	add	r5, r3
 8005930:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005934:	2820      	cmp	r0, #32
 8005936:	dd13      	ble.n	8005960 <_dtoa_r+0x210>
 8005938:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800593c:	9b00      	ldr	r3, [sp, #0]
 800593e:	fa08 f800 	lsl.w	r8, r8, r0
 8005942:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005946:	fa23 f000 	lsr.w	r0, r3, r0
 800594a:	ea48 0000 	orr.w	r0, r8, r0
 800594e:	f7fa fde1 	bl	8000514 <__aeabi_ui2d>
 8005952:	2301      	movs	r3, #1
 8005954:	4682      	mov	sl, r0
 8005956:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800595a:	3d01      	subs	r5, #1
 800595c:	9313      	str	r3, [sp, #76]	; 0x4c
 800595e:	e772      	b.n	8005846 <_dtoa_r+0xf6>
 8005960:	9b00      	ldr	r3, [sp, #0]
 8005962:	f1c0 0020 	rsb	r0, r0, #32
 8005966:	fa03 f000 	lsl.w	r0, r3, r0
 800596a:	e7f0      	b.n	800594e <_dtoa_r+0x1fe>
 800596c:	2301      	movs	r3, #1
 800596e:	e7b1      	b.n	80058d4 <_dtoa_r+0x184>
 8005970:	900f      	str	r0, [sp, #60]	; 0x3c
 8005972:	e7b0      	b.n	80058d6 <_dtoa_r+0x186>
 8005974:	9b05      	ldr	r3, [sp, #20]
 8005976:	eba3 030a 	sub.w	r3, r3, sl
 800597a:	9305      	str	r3, [sp, #20]
 800597c:	f1ca 0300 	rsb	r3, sl, #0
 8005980:	9307      	str	r3, [sp, #28]
 8005982:	2300      	movs	r3, #0
 8005984:	930e      	str	r3, [sp, #56]	; 0x38
 8005986:	e7bb      	b.n	8005900 <_dtoa_r+0x1b0>
 8005988:	2301      	movs	r3, #1
 800598a:	930a      	str	r3, [sp, #40]	; 0x28
 800598c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800598e:	2b00      	cmp	r3, #0
 8005990:	dd59      	ble.n	8005a46 <_dtoa_r+0x2f6>
 8005992:	9302      	str	r3, [sp, #8]
 8005994:	4699      	mov	r9, r3
 8005996:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005998:	2200      	movs	r2, #0
 800599a:	6072      	str	r2, [r6, #4]
 800599c:	2204      	movs	r2, #4
 800599e:	f102 0014 	add.w	r0, r2, #20
 80059a2:	4298      	cmp	r0, r3
 80059a4:	6871      	ldr	r1, [r6, #4]
 80059a6:	d953      	bls.n	8005a50 <_dtoa_r+0x300>
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 fcaa 	bl	8006302 <_Balloc>
 80059ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059b0:	6030      	str	r0, [r6, #0]
 80059b2:	f1b9 0f0e 	cmp.w	r9, #14
 80059b6:	f8d3 b000 	ldr.w	fp, [r3]
 80059ba:	f200 80e6 	bhi.w	8005b8a <_dtoa_r+0x43a>
 80059be:	2d00      	cmp	r5, #0
 80059c0:	f000 80e3 	beq.w	8005b8a <_dtoa_r+0x43a>
 80059c4:	ed9d 7b00 	vldr	d7, [sp]
 80059c8:	f1ba 0f00 	cmp.w	sl, #0
 80059cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80059d0:	dd74      	ble.n	8005abc <_dtoa_r+0x36c>
 80059d2:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <_dtoa_r+0x32c>)
 80059d4:	f00a 030f 	and.w	r3, sl, #15
 80059d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059dc:	ed93 7b00 	vldr	d7, [r3]
 80059e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80059e4:	06f0      	lsls	r0, r6, #27
 80059e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80059ea:	d565      	bpl.n	8005ab8 <_dtoa_r+0x368>
 80059ec:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <_dtoa_r+0x330>)
 80059ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059f6:	f7fa ff31 	bl	800085c <__aeabi_ddiv>
 80059fa:	e9cd 0100 	strd	r0, r1, [sp]
 80059fe:	f006 060f 	and.w	r6, r6, #15
 8005a02:	2503      	movs	r5, #3
 8005a04:	4f1e      	ldr	r7, [pc, #120]	; (8005a80 <_dtoa_r+0x330>)
 8005a06:	e04c      	b.n	8005aa2 <_dtoa_r+0x352>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a0e:	4453      	add	r3, sl
 8005a10:	f103 0901 	add.w	r9, r3, #1
 8005a14:	9302      	str	r3, [sp, #8]
 8005a16:	464b      	mov	r3, r9
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	bfb8      	it	lt
 8005a1c:	2301      	movlt	r3, #1
 8005a1e:	e7ba      	b.n	8005996 <_dtoa_r+0x246>
 8005a20:	2300      	movs	r3, #0
 8005a22:	e7b2      	b.n	800598a <_dtoa_r+0x23a>
 8005a24:	2300      	movs	r3, #0
 8005a26:	e7f0      	b.n	8005a0a <_dtoa_r+0x2ba>
 8005a28:	2501      	movs	r5, #1
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	9306      	str	r3, [sp, #24]
 8005a2e:	950a      	str	r5, [sp, #40]	; 0x28
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295
 8005a34:	9302      	str	r3, [sp, #8]
 8005a36:	4699      	mov	r9, r3
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2312      	movs	r3, #18
 8005a3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a3e:	e7aa      	b.n	8005996 <_dtoa_r+0x246>
 8005a40:	2301      	movs	r3, #1
 8005a42:	930a      	str	r3, [sp, #40]	; 0x28
 8005a44:	e7f4      	b.n	8005a30 <_dtoa_r+0x2e0>
 8005a46:	2301      	movs	r3, #1
 8005a48:	9302      	str	r3, [sp, #8]
 8005a4a:	4699      	mov	r9, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	e7f5      	b.n	8005a3c <_dtoa_r+0x2ec>
 8005a50:	3101      	adds	r1, #1
 8005a52:	6071      	str	r1, [r6, #4]
 8005a54:	0052      	lsls	r2, r2, #1
 8005a56:	e7a2      	b.n	800599e <_dtoa_r+0x24e>
 8005a58:	636f4361 	.word	0x636f4361
 8005a5c:	3fd287a7 	.word	0x3fd287a7
 8005a60:	8b60c8b3 	.word	0x8b60c8b3
 8005a64:	3fc68a28 	.word	0x3fc68a28
 8005a68:	509f79fb 	.word	0x509f79fb
 8005a6c:	3fd34413 	.word	0x3fd34413
 8005a70:	7ff00000 	.word	0x7ff00000
 8005a74:	080085d5 	.word	0x080085d5
 8005a78:	3ff80000 	.word	0x3ff80000
 8005a7c:	08008630 	.word	0x08008630
 8005a80:	08008608 	.word	0x08008608
 8005a84:	08008601 	.word	0x08008601
 8005a88:	07f1      	lsls	r1, r6, #31
 8005a8a:	d508      	bpl.n	8005a9e <_dtoa_r+0x34e>
 8005a8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a94:	f7fa fdb8 	bl	8000608 <__aeabi_dmul>
 8005a98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	1076      	asrs	r6, r6, #1
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	2e00      	cmp	r6, #0
 8005aa4:	d1f0      	bne.n	8005a88 <_dtoa_r+0x338>
 8005aa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005aae:	f7fa fed5 	bl	800085c <__aeabi_ddiv>
 8005ab2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ab6:	e01a      	b.n	8005aee <_dtoa_r+0x39e>
 8005ab8:	2502      	movs	r5, #2
 8005aba:	e7a3      	b.n	8005a04 <_dtoa_r+0x2b4>
 8005abc:	f000 80a0 	beq.w	8005c00 <_dtoa_r+0x4b0>
 8005ac0:	f1ca 0600 	rsb	r6, sl, #0
 8005ac4:	4b9f      	ldr	r3, [pc, #636]	; (8005d44 <_dtoa_r+0x5f4>)
 8005ac6:	4fa0      	ldr	r7, [pc, #640]	; (8005d48 <_dtoa_r+0x5f8>)
 8005ac8:	f006 020f 	and.w	r2, r6, #15
 8005acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ad8:	f7fa fd96 	bl	8000608 <__aeabi_dmul>
 8005adc:	e9cd 0100 	strd	r0, r1, [sp]
 8005ae0:	1136      	asrs	r6, r6, #4
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2502      	movs	r5, #2
 8005ae6:	2e00      	cmp	r6, #0
 8005ae8:	d17f      	bne.n	8005bea <_dtoa_r+0x49a>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e1      	bne.n	8005ab2 <_dtoa_r+0x362>
 8005aee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8087 	beq.w	8005c04 <_dtoa_r+0x4b4>
 8005af6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005afa:	2200      	movs	r2, #0
 8005afc:	4b93      	ldr	r3, [pc, #588]	; (8005d4c <_dtoa_r+0x5fc>)
 8005afe:	4630      	mov	r0, r6
 8005b00:	4639      	mov	r1, r7
 8005b02:	f7fa fff3 	bl	8000aec <__aeabi_dcmplt>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d07c      	beq.n	8005c04 <_dtoa_r+0x4b4>
 8005b0a:	f1b9 0f00 	cmp.w	r9, #0
 8005b0e:	d079      	beq.n	8005c04 <_dtoa_r+0x4b4>
 8005b10:	9b02      	ldr	r3, [sp, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	dd35      	ble.n	8005b82 <_dtoa_r+0x432>
 8005b16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b1a:	9308      	str	r3, [sp, #32]
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	2200      	movs	r2, #0
 8005b20:	4b8b      	ldr	r3, [pc, #556]	; (8005d50 <_dtoa_r+0x600>)
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7fa fd70 	bl	8000608 <__aeabi_dmul>
 8005b28:	e9cd 0100 	strd	r0, r1, [sp]
 8005b2c:	9f02      	ldr	r7, [sp, #8]
 8005b2e:	3501      	adds	r5, #1
 8005b30:	4628      	mov	r0, r5
 8005b32:	f7fa fcff 	bl	8000534 <__aeabi_i2d>
 8005b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b3a:	f7fa fd65 	bl	8000608 <__aeabi_dmul>
 8005b3e:	2200      	movs	r2, #0
 8005b40:	4b84      	ldr	r3, [pc, #528]	; (8005d54 <_dtoa_r+0x604>)
 8005b42:	f7fa fbab 	bl	800029c <__adddf3>
 8005b46:	4605      	mov	r5, r0
 8005b48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b4c:	2f00      	cmp	r7, #0
 8005b4e:	d15d      	bne.n	8005c0c <_dtoa_r+0x4bc>
 8005b50:	2200      	movs	r2, #0
 8005b52:	4b81      	ldr	r3, [pc, #516]	; (8005d58 <_dtoa_r+0x608>)
 8005b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b58:	f7fa fb9e 	bl	8000298 <__aeabi_dsub>
 8005b5c:	462a      	mov	r2, r5
 8005b5e:	4633      	mov	r3, r6
 8005b60:	e9cd 0100 	strd	r0, r1, [sp]
 8005b64:	f7fa ffe0 	bl	8000b28 <__aeabi_dcmpgt>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	f040 8288 	bne.w	800607e <_dtoa_r+0x92e>
 8005b6e:	462a      	mov	r2, r5
 8005b70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b78:	f7fa ffb8 	bl	8000aec <__aeabi_dcmplt>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	f040 827c 	bne.w	800607a <_dtoa_r+0x92a>
 8005b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b86:	e9cd 2300 	strd	r2, r3, [sp]
 8005b8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f2c0 8150 	blt.w	8005e32 <_dtoa_r+0x6e2>
 8005b92:	f1ba 0f0e 	cmp.w	sl, #14
 8005b96:	f300 814c 	bgt.w	8005e32 <_dtoa_r+0x6e2>
 8005b9a:	4b6a      	ldr	r3, [pc, #424]	; (8005d44 <_dtoa_r+0x5f4>)
 8005b9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ba0:	ed93 7b00 	vldr	d7, [r3]
 8005ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005bac:	f280 80d8 	bge.w	8005d60 <_dtoa_r+0x610>
 8005bb0:	f1b9 0f00 	cmp.w	r9, #0
 8005bb4:	f300 80d4 	bgt.w	8005d60 <_dtoa_r+0x610>
 8005bb8:	f040 825e 	bne.w	8006078 <_dtoa_r+0x928>
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4b66      	ldr	r3, [pc, #408]	; (8005d58 <_dtoa_r+0x608>)
 8005bc0:	ec51 0b17 	vmov	r0, r1, d7
 8005bc4:	f7fa fd20 	bl	8000608 <__aeabi_dmul>
 8005bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bcc:	f7fa ffa2 	bl	8000b14 <__aeabi_dcmpge>
 8005bd0:	464f      	mov	r7, r9
 8005bd2:	464e      	mov	r6, r9
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	f040 8234 	bne.w	8006042 <_dtoa_r+0x8f2>
 8005bda:	2331      	movs	r3, #49	; 0x31
 8005bdc:	f10b 0501 	add.w	r5, fp, #1
 8005be0:	f88b 3000 	strb.w	r3, [fp]
 8005be4:	f10a 0a01 	add.w	sl, sl, #1
 8005be8:	e22f      	b.n	800604a <_dtoa_r+0x8fa>
 8005bea:	07f2      	lsls	r2, r6, #31
 8005bec:	d505      	bpl.n	8005bfa <_dtoa_r+0x4aa>
 8005bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bf2:	f7fa fd09 	bl	8000608 <__aeabi_dmul>
 8005bf6:	3501      	adds	r5, #1
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	1076      	asrs	r6, r6, #1
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	e772      	b.n	8005ae6 <_dtoa_r+0x396>
 8005c00:	2502      	movs	r5, #2
 8005c02:	e774      	b.n	8005aee <_dtoa_r+0x39e>
 8005c04:	f8cd a020 	str.w	sl, [sp, #32]
 8005c08:	464f      	mov	r7, r9
 8005c0a:	e791      	b.n	8005b30 <_dtoa_r+0x3e0>
 8005c0c:	4b4d      	ldr	r3, [pc, #308]	; (8005d44 <_dtoa_r+0x5f4>)
 8005c0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d047      	beq.n	8005cac <_dtoa_r+0x55c>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	2000      	movs	r0, #0
 8005c22:	494e      	ldr	r1, [pc, #312]	; (8005d5c <_dtoa_r+0x60c>)
 8005c24:	f7fa fe1a 	bl	800085c <__aeabi_ddiv>
 8005c28:	462a      	mov	r2, r5
 8005c2a:	4633      	mov	r3, r6
 8005c2c:	f7fa fb34 	bl	8000298 <__aeabi_dsub>
 8005c30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c34:	465d      	mov	r5, fp
 8005c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c3a:	f7fa ff95 	bl	8000b68 <__aeabi_d2iz>
 8005c3e:	4606      	mov	r6, r0
 8005c40:	f7fa fc78 	bl	8000534 <__aeabi_i2d>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c4c:	f7fa fb24 	bl	8000298 <__aeabi_dsub>
 8005c50:	3630      	adds	r6, #48	; 0x30
 8005c52:	f805 6b01 	strb.w	r6, [r5], #1
 8005c56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c5a:	e9cd 0100 	strd	r0, r1, [sp]
 8005c5e:	f7fa ff45 	bl	8000aec <__aeabi_dcmplt>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d163      	bne.n	8005d2e <_dtoa_r+0x5de>
 8005c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	4937      	ldr	r1, [pc, #220]	; (8005d4c <_dtoa_r+0x5fc>)
 8005c6e:	f7fa fb13 	bl	8000298 <__aeabi_dsub>
 8005c72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c76:	f7fa ff39 	bl	8000aec <__aeabi_dcmplt>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	f040 80b7 	bne.w	8005dee <_dtoa_r+0x69e>
 8005c80:	eba5 030b 	sub.w	r3, r5, fp
 8005c84:	429f      	cmp	r7, r3
 8005c86:	f77f af7c 	ble.w	8005b82 <_dtoa_r+0x432>
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	4b30      	ldr	r3, [pc, #192]	; (8005d50 <_dtoa_r+0x600>)
 8005c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c92:	f7fa fcb9 	bl	8000608 <__aeabi_dmul>
 8005c96:	2200      	movs	r2, #0
 8005c98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c9c:	4b2c      	ldr	r3, [pc, #176]	; (8005d50 <_dtoa_r+0x600>)
 8005c9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ca2:	f7fa fcb1 	bl	8000608 <__aeabi_dmul>
 8005ca6:	e9cd 0100 	strd	r0, r1, [sp]
 8005caa:	e7c4      	b.n	8005c36 <_dtoa_r+0x4e6>
 8005cac:	462a      	mov	r2, r5
 8005cae:	4633      	mov	r3, r6
 8005cb0:	f7fa fcaa 	bl	8000608 <__aeabi_dmul>
 8005cb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005cb8:	eb0b 0507 	add.w	r5, fp, r7
 8005cbc:	465e      	mov	r6, fp
 8005cbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cc2:	f7fa ff51 	bl	8000b68 <__aeabi_d2iz>
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	f7fa fc34 	bl	8000534 <__aeabi_i2d>
 8005ccc:	3730      	adds	r7, #48	; 0x30
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cd6:	f7fa fadf 	bl	8000298 <__aeabi_dsub>
 8005cda:	f806 7b01 	strb.w	r7, [r6], #1
 8005cde:	42ae      	cmp	r6, r5
 8005ce0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	d126      	bne.n	8005d38 <_dtoa_r+0x5e8>
 8005cea:	4b1c      	ldr	r3, [pc, #112]	; (8005d5c <_dtoa_r+0x60c>)
 8005cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cf0:	f7fa fad4 	bl	800029c <__adddf3>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cfc:	f7fa ff14 	bl	8000b28 <__aeabi_dcmpgt>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d174      	bne.n	8005dee <_dtoa_r+0x69e>
 8005d04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d08:	2000      	movs	r0, #0
 8005d0a:	4914      	ldr	r1, [pc, #80]	; (8005d5c <_dtoa_r+0x60c>)
 8005d0c:	f7fa fac4 	bl	8000298 <__aeabi_dsub>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d18:	f7fa fee8 	bl	8000aec <__aeabi_dcmplt>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	f43f af30 	beq.w	8005b82 <_dtoa_r+0x432>
 8005d22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d26:	2b30      	cmp	r3, #48	; 0x30
 8005d28:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d2c:	d002      	beq.n	8005d34 <_dtoa_r+0x5e4>
 8005d2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d32:	e04a      	b.n	8005dca <_dtoa_r+0x67a>
 8005d34:	4615      	mov	r5, r2
 8005d36:	e7f4      	b.n	8005d22 <_dtoa_r+0x5d2>
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <_dtoa_r+0x600>)
 8005d3a:	f7fa fc65 	bl	8000608 <__aeabi_dmul>
 8005d3e:	e9cd 0100 	strd	r0, r1, [sp]
 8005d42:	e7bc      	b.n	8005cbe <_dtoa_r+0x56e>
 8005d44:	08008630 	.word	0x08008630
 8005d48:	08008608 	.word	0x08008608
 8005d4c:	3ff00000 	.word	0x3ff00000
 8005d50:	40240000 	.word	0x40240000
 8005d54:	401c0000 	.word	0x401c0000
 8005d58:	40140000 	.word	0x40140000
 8005d5c:	3fe00000 	.word	0x3fe00000
 8005d60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005d64:	465d      	mov	r5, fp
 8005d66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	f7fa fd75 	bl	800085c <__aeabi_ddiv>
 8005d72:	f7fa fef9 	bl	8000b68 <__aeabi_d2iz>
 8005d76:	4680      	mov	r8, r0
 8005d78:	f7fa fbdc 	bl	8000534 <__aeabi_i2d>
 8005d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d80:	f7fa fc42 	bl	8000608 <__aeabi_dmul>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4630      	mov	r0, r6
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005d90:	f7fa fa82 	bl	8000298 <__aeabi_dsub>
 8005d94:	f805 6b01 	strb.w	r6, [r5], #1
 8005d98:	eba5 060b 	sub.w	r6, r5, fp
 8005d9c:	45b1      	cmp	r9, r6
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	d139      	bne.n	8005e18 <_dtoa_r+0x6c8>
 8005da4:	f7fa fa7a 	bl	800029c <__adddf3>
 8005da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dac:	4606      	mov	r6, r0
 8005dae:	460f      	mov	r7, r1
 8005db0:	f7fa feba 	bl	8000b28 <__aeabi_dcmpgt>
 8005db4:	b9c8      	cbnz	r0, 8005dea <_dtoa_r+0x69a>
 8005db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dba:	4630      	mov	r0, r6
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	f7fa fe8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dc2:	b110      	cbz	r0, 8005dca <_dtoa_r+0x67a>
 8005dc4:	f018 0f01 	tst.w	r8, #1
 8005dc8:	d10f      	bne.n	8005dea <_dtoa_r+0x69a>
 8005dca:	9904      	ldr	r1, [sp, #16]
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 facc 	bl	800636a <_Bfree>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dd6:	702b      	strb	r3, [r5, #0]
 8005dd8:	f10a 0301 	add.w	r3, sl, #1
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8241 	beq.w	8006268 <_dtoa_r+0xb18>
 8005de6:	601d      	str	r5, [r3, #0]
 8005de8:	e23e      	b.n	8006268 <_dtoa_r+0xb18>
 8005dea:	f8cd a020 	str.w	sl, [sp, #32]
 8005dee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005df2:	2a39      	cmp	r2, #57	; 0x39
 8005df4:	f105 33ff 	add.w	r3, r5, #4294967295
 8005df8:	d108      	bne.n	8005e0c <_dtoa_r+0x6bc>
 8005dfa:	459b      	cmp	fp, r3
 8005dfc:	d10a      	bne.n	8005e14 <_dtoa_r+0x6c4>
 8005dfe:	9b08      	ldr	r3, [sp, #32]
 8005e00:	3301      	adds	r3, #1
 8005e02:	9308      	str	r3, [sp, #32]
 8005e04:	2330      	movs	r3, #48	; 0x30
 8005e06:	f88b 3000 	strb.w	r3, [fp]
 8005e0a:	465b      	mov	r3, fp
 8005e0c:	781a      	ldrb	r2, [r3, #0]
 8005e0e:	3201      	adds	r2, #1
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	e78c      	b.n	8005d2e <_dtoa_r+0x5de>
 8005e14:	461d      	mov	r5, r3
 8005e16:	e7ea      	b.n	8005dee <_dtoa_r+0x69e>
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4b9b      	ldr	r3, [pc, #620]	; (8006088 <_dtoa_r+0x938>)
 8005e1c:	f7fa fbf4 	bl	8000608 <__aeabi_dmul>
 8005e20:	2200      	movs	r2, #0
 8005e22:	2300      	movs	r3, #0
 8005e24:	4606      	mov	r6, r0
 8005e26:	460f      	mov	r7, r1
 8005e28:	f7fa fe56 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d09a      	beq.n	8005d66 <_dtoa_r+0x616>
 8005e30:	e7cb      	b.n	8005dca <_dtoa_r+0x67a>
 8005e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e34:	2a00      	cmp	r2, #0
 8005e36:	f000 808b 	beq.w	8005f50 <_dtoa_r+0x800>
 8005e3a:	9a06      	ldr	r2, [sp, #24]
 8005e3c:	2a01      	cmp	r2, #1
 8005e3e:	dc6e      	bgt.n	8005f1e <_dtoa_r+0x7ce>
 8005e40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	d067      	beq.n	8005f16 <_dtoa_r+0x7c6>
 8005e46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e4a:	9f07      	ldr	r7, [sp, #28]
 8005e4c:	9d05      	ldr	r5, [sp, #20]
 8005e4e:	9a05      	ldr	r2, [sp, #20]
 8005e50:	2101      	movs	r1, #1
 8005e52:	441a      	add	r2, r3
 8005e54:	4620      	mov	r0, r4
 8005e56:	9205      	str	r2, [sp, #20]
 8005e58:	4498      	add	r8, r3
 8005e5a:	f000 fb26 	bl	80064aa <__i2b>
 8005e5e:	4606      	mov	r6, r0
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	dd0c      	ble.n	8005e7e <_dtoa_r+0x72e>
 8005e64:	f1b8 0f00 	cmp.w	r8, #0
 8005e68:	dd09      	ble.n	8005e7e <_dtoa_r+0x72e>
 8005e6a:	4545      	cmp	r5, r8
 8005e6c:	9a05      	ldr	r2, [sp, #20]
 8005e6e:	462b      	mov	r3, r5
 8005e70:	bfa8      	it	ge
 8005e72:	4643      	movge	r3, r8
 8005e74:	1ad2      	subs	r2, r2, r3
 8005e76:	9205      	str	r2, [sp, #20]
 8005e78:	1aed      	subs	r5, r5, r3
 8005e7a:	eba8 0803 	sub.w	r8, r8, r3
 8005e7e:	9b07      	ldr	r3, [sp, #28]
 8005e80:	b1eb      	cbz	r3, 8005ebe <_dtoa_r+0x76e>
 8005e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d067      	beq.n	8005f58 <_dtoa_r+0x808>
 8005e88:	b18f      	cbz	r7, 8005eae <_dtoa_r+0x75e>
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	463a      	mov	r2, r7
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 fbaa 	bl	80065e8 <__pow5mult>
 8005e94:	9a04      	ldr	r2, [sp, #16]
 8005e96:	4601      	mov	r1, r0
 8005e98:	4606      	mov	r6, r0
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 fb0e 	bl	80064bc <__multiply>
 8005ea0:	9904      	ldr	r1, [sp, #16]
 8005ea2:	9008      	str	r0, [sp, #32]
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f000 fa60 	bl	800636a <_Bfree>
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	9304      	str	r3, [sp, #16]
 8005eae:	9b07      	ldr	r3, [sp, #28]
 8005eb0:	1bda      	subs	r2, r3, r7
 8005eb2:	d004      	beq.n	8005ebe <_dtoa_r+0x76e>
 8005eb4:	9904      	ldr	r1, [sp, #16]
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 fb96 	bl	80065e8 <__pow5mult>
 8005ebc:	9004      	str	r0, [sp, #16]
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 faf2 	bl	80064aa <__i2b>
 8005ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec8:	4607      	mov	r7, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 81d0 	beq.w	8006270 <_dtoa_r+0xb20>
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4601      	mov	r1, r0
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f000 fb87 	bl	80065e8 <__pow5mult>
 8005eda:	9b06      	ldr	r3, [sp, #24]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	4607      	mov	r7, r0
 8005ee0:	dc40      	bgt.n	8005f64 <_dtoa_r+0x814>
 8005ee2:	9b00      	ldr	r3, [sp, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d139      	bne.n	8005f5c <_dtoa_r+0x80c>
 8005ee8:	9b01      	ldr	r3, [sp, #4]
 8005eea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d136      	bne.n	8005f60 <_dtoa_r+0x810>
 8005ef2:	9b01      	ldr	r3, [sp, #4]
 8005ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ef8:	0d1b      	lsrs	r3, r3, #20
 8005efa:	051b      	lsls	r3, r3, #20
 8005efc:	b12b      	cbz	r3, 8005f0a <_dtoa_r+0x7ba>
 8005efe:	9b05      	ldr	r3, [sp, #20]
 8005f00:	3301      	adds	r3, #1
 8005f02:	9305      	str	r3, [sp, #20]
 8005f04:	f108 0801 	add.w	r8, r8, #1
 8005f08:	2301      	movs	r3, #1
 8005f0a:	9307      	str	r3, [sp, #28]
 8005f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d12a      	bne.n	8005f68 <_dtoa_r+0x818>
 8005f12:	2001      	movs	r0, #1
 8005f14:	e030      	b.n	8005f78 <_dtoa_r+0x828>
 8005f16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f1c:	e795      	b.n	8005e4a <_dtoa_r+0x6fa>
 8005f1e:	9b07      	ldr	r3, [sp, #28]
 8005f20:	f109 37ff 	add.w	r7, r9, #4294967295
 8005f24:	42bb      	cmp	r3, r7
 8005f26:	bfbf      	itttt	lt
 8005f28:	9b07      	ldrlt	r3, [sp, #28]
 8005f2a:	9707      	strlt	r7, [sp, #28]
 8005f2c:	1afa      	sublt	r2, r7, r3
 8005f2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005f30:	bfbb      	ittet	lt
 8005f32:	189b      	addlt	r3, r3, r2
 8005f34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005f36:	1bdf      	subge	r7, r3, r7
 8005f38:	2700      	movlt	r7, #0
 8005f3a:	f1b9 0f00 	cmp.w	r9, #0
 8005f3e:	bfb5      	itete	lt
 8005f40:	9b05      	ldrlt	r3, [sp, #20]
 8005f42:	9d05      	ldrge	r5, [sp, #20]
 8005f44:	eba3 0509 	sublt.w	r5, r3, r9
 8005f48:	464b      	movge	r3, r9
 8005f4a:	bfb8      	it	lt
 8005f4c:	2300      	movlt	r3, #0
 8005f4e:	e77e      	b.n	8005e4e <_dtoa_r+0x6fe>
 8005f50:	9f07      	ldr	r7, [sp, #28]
 8005f52:	9d05      	ldr	r5, [sp, #20]
 8005f54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005f56:	e783      	b.n	8005e60 <_dtoa_r+0x710>
 8005f58:	9a07      	ldr	r2, [sp, #28]
 8005f5a:	e7ab      	b.n	8005eb4 <_dtoa_r+0x764>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e7d4      	b.n	8005f0a <_dtoa_r+0x7ba>
 8005f60:	9b00      	ldr	r3, [sp, #0]
 8005f62:	e7d2      	b.n	8005f0a <_dtoa_r+0x7ba>
 8005f64:	2300      	movs	r3, #0
 8005f66:	9307      	str	r3, [sp, #28]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005f6e:	6918      	ldr	r0, [r3, #16]
 8005f70:	f000 fa4d 	bl	800640e <__hi0bits>
 8005f74:	f1c0 0020 	rsb	r0, r0, #32
 8005f78:	4440      	add	r0, r8
 8005f7a:	f010 001f 	ands.w	r0, r0, #31
 8005f7e:	d047      	beq.n	8006010 <_dtoa_r+0x8c0>
 8005f80:	f1c0 0320 	rsb	r3, r0, #32
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	dd3b      	ble.n	8006000 <_dtoa_r+0x8b0>
 8005f88:	9b05      	ldr	r3, [sp, #20]
 8005f8a:	f1c0 001c 	rsb	r0, r0, #28
 8005f8e:	4403      	add	r3, r0
 8005f90:	9305      	str	r3, [sp, #20]
 8005f92:	4405      	add	r5, r0
 8005f94:	4480      	add	r8, r0
 8005f96:	9b05      	ldr	r3, [sp, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	dd05      	ble.n	8005fa8 <_dtoa_r+0x858>
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	9904      	ldr	r1, [sp, #16]
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fb6f 	bl	8006684 <__lshift>
 8005fa6:	9004      	str	r0, [sp, #16]
 8005fa8:	f1b8 0f00 	cmp.w	r8, #0
 8005fac:	dd05      	ble.n	8005fba <_dtoa_r+0x86a>
 8005fae:	4639      	mov	r1, r7
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fb66 	bl	8006684 <__lshift>
 8005fb8:	4607      	mov	r7, r0
 8005fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fbc:	b353      	cbz	r3, 8006014 <_dtoa_r+0x8c4>
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	9804      	ldr	r0, [sp, #16]
 8005fc2:	f000 fbb3 	bl	800672c <__mcmp>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	da24      	bge.n	8006014 <_dtoa_r+0x8c4>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	220a      	movs	r2, #10
 8005fce:	9904      	ldr	r1, [sp, #16]
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 f9e1 	bl	8006398 <__multadd>
 8005fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd8:	9004      	str	r0, [sp, #16]
 8005fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 814d 	beq.w	800627e <_dtoa_r+0xb2e>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	220a      	movs	r2, #10
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 f9d4 	bl	8006398 <__multadd>
 8005ff0:	9b02      	ldr	r3, [sp, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	4606      	mov	r6, r0
 8005ff6:	dc4f      	bgt.n	8006098 <_dtoa_r+0x948>
 8005ff8:	9b06      	ldr	r3, [sp, #24]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	dd4c      	ble.n	8006098 <_dtoa_r+0x948>
 8005ffe:	e011      	b.n	8006024 <_dtoa_r+0x8d4>
 8006000:	d0c9      	beq.n	8005f96 <_dtoa_r+0x846>
 8006002:	9a05      	ldr	r2, [sp, #20]
 8006004:	331c      	adds	r3, #28
 8006006:	441a      	add	r2, r3
 8006008:	9205      	str	r2, [sp, #20]
 800600a:	441d      	add	r5, r3
 800600c:	4498      	add	r8, r3
 800600e:	e7c2      	b.n	8005f96 <_dtoa_r+0x846>
 8006010:	4603      	mov	r3, r0
 8006012:	e7f6      	b.n	8006002 <_dtoa_r+0x8b2>
 8006014:	f1b9 0f00 	cmp.w	r9, #0
 8006018:	dc38      	bgt.n	800608c <_dtoa_r+0x93c>
 800601a:	9b06      	ldr	r3, [sp, #24]
 800601c:	2b02      	cmp	r3, #2
 800601e:	dd35      	ble.n	800608c <_dtoa_r+0x93c>
 8006020:	f8cd 9008 	str.w	r9, [sp, #8]
 8006024:	9b02      	ldr	r3, [sp, #8]
 8006026:	b963      	cbnz	r3, 8006042 <_dtoa_r+0x8f2>
 8006028:	4639      	mov	r1, r7
 800602a:	2205      	movs	r2, #5
 800602c:	4620      	mov	r0, r4
 800602e:	f000 f9b3 	bl	8006398 <__multadd>
 8006032:	4601      	mov	r1, r0
 8006034:	4607      	mov	r7, r0
 8006036:	9804      	ldr	r0, [sp, #16]
 8006038:	f000 fb78 	bl	800672c <__mcmp>
 800603c:	2800      	cmp	r0, #0
 800603e:	f73f adcc 	bgt.w	8005bda <_dtoa_r+0x48a>
 8006042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006044:	465d      	mov	r5, fp
 8006046:	ea6f 0a03 	mvn.w	sl, r3
 800604a:	f04f 0900 	mov.w	r9, #0
 800604e:	4639      	mov	r1, r7
 8006050:	4620      	mov	r0, r4
 8006052:	f000 f98a 	bl	800636a <_Bfree>
 8006056:	2e00      	cmp	r6, #0
 8006058:	f43f aeb7 	beq.w	8005dca <_dtoa_r+0x67a>
 800605c:	f1b9 0f00 	cmp.w	r9, #0
 8006060:	d005      	beq.n	800606e <_dtoa_r+0x91e>
 8006062:	45b1      	cmp	r9, r6
 8006064:	d003      	beq.n	800606e <_dtoa_r+0x91e>
 8006066:	4649      	mov	r1, r9
 8006068:	4620      	mov	r0, r4
 800606a:	f000 f97e 	bl	800636a <_Bfree>
 800606e:	4631      	mov	r1, r6
 8006070:	4620      	mov	r0, r4
 8006072:	f000 f97a 	bl	800636a <_Bfree>
 8006076:	e6a8      	b.n	8005dca <_dtoa_r+0x67a>
 8006078:	2700      	movs	r7, #0
 800607a:	463e      	mov	r6, r7
 800607c:	e7e1      	b.n	8006042 <_dtoa_r+0x8f2>
 800607e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006082:	463e      	mov	r6, r7
 8006084:	e5a9      	b.n	8005bda <_dtoa_r+0x48a>
 8006086:	bf00      	nop
 8006088:	40240000 	.word	0x40240000
 800608c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80fa 	beq.w	800628c <_dtoa_r+0xb3c>
 8006098:	2d00      	cmp	r5, #0
 800609a:	dd05      	ble.n	80060a8 <_dtoa_r+0x958>
 800609c:	4631      	mov	r1, r6
 800609e:	462a      	mov	r2, r5
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 faef 	bl	8006684 <__lshift>
 80060a6:	4606      	mov	r6, r0
 80060a8:	9b07      	ldr	r3, [sp, #28]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d04c      	beq.n	8006148 <_dtoa_r+0x9f8>
 80060ae:	6871      	ldr	r1, [r6, #4]
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 f926 	bl	8006302 <_Balloc>
 80060b6:	6932      	ldr	r2, [r6, #16]
 80060b8:	3202      	adds	r2, #2
 80060ba:	4605      	mov	r5, r0
 80060bc:	0092      	lsls	r2, r2, #2
 80060be:	f106 010c 	add.w	r1, r6, #12
 80060c2:	300c      	adds	r0, #12
 80060c4:	f000 f912 	bl	80062ec <memcpy>
 80060c8:	2201      	movs	r2, #1
 80060ca:	4629      	mov	r1, r5
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 fad9 	bl	8006684 <__lshift>
 80060d2:	9b00      	ldr	r3, [sp, #0]
 80060d4:	f8cd b014 	str.w	fp, [sp, #20]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	46b1      	mov	r9, r6
 80060de:	9307      	str	r3, [sp, #28]
 80060e0:	4606      	mov	r6, r0
 80060e2:	4639      	mov	r1, r7
 80060e4:	9804      	ldr	r0, [sp, #16]
 80060e6:	f7ff faa5 	bl	8005634 <quorem>
 80060ea:	4649      	mov	r1, r9
 80060ec:	4605      	mov	r5, r0
 80060ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80060f2:	9804      	ldr	r0, [sp, #16]
 80060f4:	f000 fb1a 	bl	800672c <__mcmp>
 80060f8:	4632      	mov	r2, r6
 80060fa:	9000      	str	r0, [sp, #0]
 80060fc:	4639      	mov	r1, r7
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 fb2e 	bl	8006760 <__mdiff>
 8006104:	68c3      	ldr	r3, [r0, #12]
 8006106:	4602      	mov	r2, r0
 8006108:	bb03      	cbnz	r3, 800614c <_dtoa_r+0x9fc>
 800610a:	4601      	mov	r1, r0
 800610c:	9008      	str	r0, [sp, #32]
 800610e:	9804      	ldr	r0, [sp, #16]
 8006110:	f000 fb0c 	bl	800672c <__mcmp>
 8006114:	9a08      	ldr	r2, [sp, #32]
 8006116:	4603      	mov	r3, r0
 8006118:	4611      	mov	r1, r2
 800611a:	4620      	mov	r0, r4
 800611c:	9308      	str	r3, [sp, #32]
 800611e:	f000 f924 	bl	800636a <_Bfree>
 8006122:	9b08      	ldr	r3, [sp, #32]
 8006124:	b9a3      	cbnz	r3, 8006150 <_dtoa_r+0xa00>
 8006126:	9a06      	ldr	r2, [sp, #24]
 8006128:	b992      	cbnz	r2, 8006150 <_dtoa_r+0xa00>
 800612a:	9a07      	ldr	r2, [sp, #28]
 800612c:	b982      	cbnz	r2, 8006150 <_dtoa_r+0xa00>
 800612e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006132:	d029      	beq.n	8006188 <_dtoa_r+0xa38>
 8006134:	9b00      	ldr	r3, [sp, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	dd01      	ble.n	800613e <_dtoa_r+0x9ee>
 800613a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800613e:	9b05      	ldr	r3, [sp, #20]
 8006140:	1c5d      	adds	r5, r3, #1
 8006142:	f883 8000 	strb.w	r8, [r3]
 8006146:	e782      	b.n	800604e <_dtoa_r+0x8fe>
 8006148:	4630      	mov	r0, r6
 800614a:	e7c2      	b.n	80060d2 <_dtoa_r+0x982>
 800614c:	2301      	movs	r3, #1
 800614e:	e7e3      	b.n	8006118 <_dtoa_r+0x9c8>
 8006150:	9a00      	ldr	r2, [sp, #0]
 8006152:	2a00      	cmp	r2, #0
 8006154:	db04      	blt.n	8006160 <_dtoa_r+0xa10>
 8006156:	d125      	bne.n	80061a4 <_dtoa_r+0xa54>
 8006158:	9a06      	ldr	r2, [sp, #24]
 800615a:	bb1a      	cbnz	r2, 80061a4 <_dtoa_r+0xa54>
 800615c:	9a07      	ldr	r2, [sp, #28]
 800615e:	bb0a      	cbnz	r2, 80061a4 <_dtoa_r+0xa54>
 8006160:	2b00      	cmp	r3, #0
 8006162:	ddec      	ble.n	800613e <_dtoa_r+0x9ee>
 8006164:	2201      	movs	r2, #1
 8006166:	9904      	ldr	r1, [sp, #16]
 8006168:	4620      	mov	r0, r4
 800616a:	f000 fa8b 	bl	8006684 <__lshift>
 800616e:	4639      	mov	r1, r7
 8006170:	9004      	str	r0, [sp, #16]
 8006172:	f000 fadb 	bl	800672c <__mcmp>
 8006176:	2800      	cmp	r0, #0
 8006178:	dc03      	bgt.n	8006182 <_dtoa_r+0xa32>
 800617a:	d1e0      	bne.n	800613e <_dtoa_r+0x9ee>
 800617c:	f018 0f01 	tst.w	r8, #1
 8006180:	d0dd      	beq.n	800613e <_dtoa_r+0x9ee>
 8006182:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006186:	d1d8      	bne.n	800613a <_dtoa_r+0x9ea>
 8006188:	9b05      	ldr	r3, [sp, #20]
 800618a:	9a05      	ldr	r2, [sp, #20]
 800618c:	1c5d      	adds	r5, r3, #1
 800618e:	2339      	movs	r3, #57	; 0x39
 8006190:	7013      	strb	r3, [r2, #0]
 8006192:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006196:	2b39      	cmp	r3, #57	; 0x39
 8006198:	f105 32ff 	add.w	r2, r5, #4294967295
 800619c:	d04f      	beq.n	800623e <_dtoa_r+0xaee>
 800619e:	3301      	adds	r3, #1
 80061a0:	7013      	strb	r3, [r2, #0]
 80061a2:	e754      	b.n	800604e <_dtoa_r+0x8fe>
 80061a4:	9a05      	ldr	r2, [sp, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f102 0501 	add.w	r5, r2, #1
 80061ac:	dd06      	ble.n	80061bc <_dtoa_r+0xa6c>
 80061ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80061b2:	d0e9      	beq.n	8006188 <_dtoa_r+0xa38>
 80061b4:	f108 0801 	add.w	r8, r8, #1
 80061b8:	9b05      	ldr	r3, [sp, #20]
 80061ba:	e7c2      	b.n	8006142 <_dtoa_r+0x9f2>
 80061bc:	9a02      	ldr	r2, [sp, #8]
 80061be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80061c2:	eba5 030b 	sub.w	r3, r5, fp
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d021      	beq.n	800620e <_dtoa_r+0xabe>
 80061ca:	2300      	movs	r3, #0
 80061cc:	220a      	movs	r2, #10
 80061ce:	9904      	ldr	r1, [sp, #16]
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 f8e1 	bl	8006398 <__multadd>
 80061d6:	45b1      	cmp	r9, r6
 80061d8:	9004      	str	r0, [sp, #16]
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	f04f 020a 	mov.w	r2, #10
 80061e2:	4649      	mov	r1, r9
 80061e4:	4620      	mov	r0, r4
 80061e6:	d105      	bne.n	80061f4 <_dtoa_r+0xaa4>
 80061e8:	f000 f8d6 	bl	8006398 <__multadd>
 80061ec:	4681      	mov	r9, r0
 80061ee:	4606      	mov	r6, r0
 80061f0:	9505      	str	r5, [sp, #20]
 80061f2:	e776      	b.n	80060e2 <_dtoa_r+0x992>
 80061f4:	f000 f8d0 	bl	8006398 <__multadd>
 80061f8:	4631      	mov	r1, r6
 80061fa:	4681      	mov	r9, r0
 80061fc:	2300      	movs	r3, #0
 80061fe:	220a      	movs	r2, #10
 8006200:	4620      	mov	r0, r4
 8006202:	f000 f8c9 	bl	8006398 <__multadd>
 8006206:	4606      	mov	r6, r0
 8006208:	e7f2      	b.n	80061f0 <_dtoa_r+0xaa0>
 800620a:	f04f 0900 	mov.w	r9, #0
 800620e:	2201      	movs	r2, #1
 8006210:	9904      	ldr	r1, [sp, #16]
 8006212:	4620      	mov	r0, r4
 8006214:	f000 fa36 	bl	8006684 <__lshift>
 8006218:	4639      	mov	r1, r7
 800621a:	9004      	str	r0, [sp, #16]
 800621c:	f000 fa86 	bl	800672c <__mcmp>
 8006220:	2800      	cmp	r0, #0
 8006222:	dcb6      	bgt.n	8006192 <_dtoa_r+0xa42>
 8006224:	d102      	bne.n	800622c <_dtoa_r+0xadc>
 8006226:	f018 0f01 	tst.w	r8, #1
 800622a:	d1b2      	bne.n	8006192 <_dtoa_r+0xa42>
 800622c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006230:	2b30      	cmp	r3, #48	; 0x30
 8006232:	f105 32ff 	add.w	r2, r5, #4294967295
 8006236:	f47f af0a 	bne.w	800604e <_dtoa_r+0x8fe>
 800623a:	4615      	mov	r5, r2
 800623c:	e7f6      	b.n	800622c <_dtoa_r+0xadc>
 800623e:	4593      	cmp	fp, r2
 8006240:	d105      	bne.n	800624e <_dtoa_r+0xafe>
 8006242:	2331      	movs	r3, #49	; 0x31
 8006244:	f10a 0a01 	add.w	sl, sl, #1
 8006248:	f88b 3000 	strb.w	r3, [fp]
 800624c:	e6ff      	b.n	800604e <_dtoa_r+0x8fe>
 800624e:	4615      	mov	r5, r2
 8006250:	e79f      	b.n	8006192 <_dtoa_r+0xa42>
 8006252:	f8df b064 	ldr.w	fp, [pc, #100]	; 80062b8 <_dtoa_r+0xb68>
 8006256:	e007      	b.n	8006268 <_dtoa_r+0xb18>
 8006258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800625a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80062bc <_dtoa_r+0xb6c>
 800625e:	b11b      	cbz	r3, 8006268 <_dtoa_r+0xb18>
 8006260:	f10b 0308 	add.w	r3, fp, #8
 8006264:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	4658      	mov	r0, fp
 800626a:	b017      	add	sp, #92	; 0x5c
 800626c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006270:	9b06      	ldr	r3, [sp, #24]
 8006272:	2b01      	cmp	r3, #1
 8006274:	f77f ae35 	ble.w	8005ee2 <_dtoa_r+0x792>
 8006278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800627a:	9307      	str	r3, [sp, #28]
 800627c:	e649      	b.n	8005f12 <_dtoa_r+0x7c2>
 800627e:	9b02      	ldr	r3, [sp, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	dc03      	bgt.n	800628c <_dtoa_r+0xb3c>
 8006284:	9b06      	ldr	r3, [sp, #24]
 8006286:	2b02      	cmp	r3, #2
 8006288:	f73f aecc 	bgt.w	8006024 <_dtoa_r+0x8d4>
 800628c:	465d      	mov	r5, fp
 800628e:	4639      	mov	r1, r7
 8006290:	9804      	ldr	r0, [sp, #16]
 8006292:	f7ff f9cf 	bl	8005634 <quorem>
 8006296:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800629a:	f805 8b01 	strb.w	r8, [r5], #1
 800629e:	9a02      	ldr	r2, [sp, #8]
 80062a0:	eba5 030b 	sub.w	r3, r5, fp
 80062a4:	429a      	cmp	r2, r3
 80062a6:	ddb0      	ble.n	800620a <_dtoa_r+0xaba>
 80062a8:	2300      	movs	r3, #0
 80062aa:	220a      	movs	r2, #10
 80062ac:	9904      	ldr	r1, [sp, #16]
 80062ae:	4620      	mov	r0, r4
 80062b0:	f000 f872 	bl	8006398 <__multadd>
 80062b4:	9004      	str	r0, [sp, #16]
 80062b6:	e7ea      	b.n	800628e <_dtoa_r+0xb3e>
 80062b8:	080085d4 	.word	0x080085d4
 80062bc:	080085f8 	.word	0x080085f8

080062c0 <_localeconv_r>:
 80062c0:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <_localeconv_r+0x14>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6a18      	ldr	r0, [r3, #32]
 80062c6:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <_localeconv_r+0x18>)
 80062c8:	2800      	cmp	r0, #0
 80062ca:	bf08      	it	eq
 80062cc:	4618      	moveq	r0, r3
 80062ce:	30f0      	adds	r0, #240	; 0xf0
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	2000001c 	.word	0x2000001c
 80062d8:	20000080 	.word	0x20000080

080062dc <malloc>:
 80062dc:	4b02      	ldr	r3, [pc, #8]	; (80062e8 <malloc+0xc>)
 80062de:	4601      	mov	r1, r0
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	f000 bb45 	b.w	8006970 <_malloc_r>
 80062e6:	bf00      	nop
 80062e8:	2000001c 	.word	0x2000001c

080062ec <memcpy>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	1e43      	subs	r3, r0, #1
 80062f0:	440a      	add	r2, r1
 80062f2:	4291      	cmp	r1, r2
 80062f4:	d100      	bne.n	80062f8 <memcpy+0xc>
 80062f6:	bd10      	pop	{r4, pc}
 80062f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006300:	e7f7      	b.n	80062f2 <memcpy+0x6>

08006302 <_Balloc>:
 8006302:	b570      	push	{r4, r5, r6, lr}
 8006304:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006306:	4604      	mov	r4, r0
 8006308:	460e      	mov	r6, r1
 800630a:	b93d      	cbnz	r5, 800631c <_Balloc+0x1a>
 800630c:	2010      	movs	r0, #16
 800630e:	f7ff ffe5 	bl	80062dc <malloc>
 8006312:	6260      	str	r0, [r4, #36]	; 0x24
 8006314:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006318:	6005      	str	r5, [r0, #0]
 800631a:	60c5      	str	r5, [r0, #12]
 800631c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800631e:	68eb      	ldr	r3, [r5, #12]
 8006320:	b183      	cbz	r3, 8006344 <_Balloc+0x42>
 8006322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800632a:	b9b8      	cbnz	r0, 800635c <_Balloc+0x5a>
 800632c:	2101      	movs	r1, #1
 800632e:	fa01 f506 	lsl.w	r5, r1, r6
 8006332:	1d6a      	adds	r2, r5, #5
 8006334:	0092      	lsls	r2, r2, #2
 8006336:	4620      	mov	r0, r4
 8006338:	f000 fabe 	bl	80068b8 <_calloc_r>
 800633c:	b160      	cbz	r0, 8006358 <_Balloc+0x56>
 800633e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006342:	e00e      	b.n	8006362 <_Balloc+0x60>
 8006344:	2221      	movs	r2, #33	; 0x21
 8006346:	2104      	movs	r1, #4
 8006348:	4620      	mov	r0, r4
 800634a:	f000 fab5 	bl	80068b8 <_calloc_r>
 800634e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006350:	60e8      	str	r0, [r5, #12]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e4      	bne.n	8006322 <_Balloc+0x20>
 8006358:	2000      	movs	r0, #0
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	6802      	ldr	r2, [r0, #0]
 800635e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006362:	2300      	movs	r3, #0
 8006364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006368:	e7f7      	b.n	800635a <_Balloc+0x58>

0800636a <_Bfree>:
 800636a:	b570      	push	{r4, r5, r6, lr}
 800636c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800636e:	4606      	mov	r6, r0
 8006370:	460d      	mov	r5, r1
 8006372:	b93c      	cbnz	r4, 8006384 <_Bfree+0x1a>
 8006374:	2010      	movs	r0, #16
 8006376:	f7ff ffb1 	bl	80062dc <malloc>
 800637a:	6270      	str	r0, [r6, #36]	; 0x24
 800637c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006380:	6004      	str	r4, [r0, #0]
 8006382:	60c4      	str	r4, [r0, #12]
 8006384:	b13d      	cbz	r5, 8006396 <_Bfree+0x2c>
 8006386:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006388:	686a      	ldr	r2, [r5, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006390:	6029      	str	r1, [r5, #0]
 8006392:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006396:	bd70      	pop	{r4, r5, r6, pc}

08006398 <__multadd>:
 8006398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639c:	690d      	ldr	r5, [r1, #16]
 800639e:	461f      	mov	r7, r3
 80063a0:	4606      	mov	r6, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	f101 0c14 	add.w	ip, r1, #20
 80063a8:	2300      	movs	r3, #0
 80063aa:	f8dc 0000 	ldr.w	r0, [ip]
 80063ae:	b281      	uxth	r1, r0
 80063b0:	fb02 7101 	mla	r1, r2, r1, r7
 80063b4:	0c0f      	lsrs	r7, r1, #16
 80063b6:	0c00      	lsrs	r0, r0, #16
 80063b8:	fb02 7000 	mla	r0, r2, r0, r7
 80063bc:	b289      	uxth	r1, r1
 80063be:	3301      	adds	r3, #1
 80063c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80063c4:	429d      	cmp	r5, r3
 80063c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80063ca:	f84c 1b04 	str.w	r1, [ip], #4
 80063ce:	dcec      	bgt.n	80063aa <__multadd+0x12>
 80063d0:	b1d7      	cbz	r7, 8006408 <__multadd+0x70>
 80063d2:	68a3      	ldr	r3, [r4, #8]
 80063d4:	42ab      	cmp	r3, r5
 80063d6:	dc12      	bgt.n	80063fe <__multadd+0x66>
 80063d8:	6861      	ldr	r1, [r4, #4]
 80063da:	4630      	mov	r0, r6
 80063dc:	3101      	adds	r1, #1
 80063de:	f7ff ff90 	bl	8006302 <_Balloc>
 80063e2:	6922      	ldr	r2, [r4, #16]
 80063e4:	3202      	adds	r2, #2
 80063e6:	f104 010c 	add.w	r1, r4, #12
 80063ea:	4680      	mov	r8, r0
 80063ec:	0092      	lsls	r2, r2, #2
 80063ee:	300c      	adds	r0, #12
 80063f0:	f7ff ff7c 	bl	80062ec <memcpy>
 80063f4:	4621      	mov	r1, r4
 80063f6:	4630      	mov	r0, r6
 80063f8:	f7ff ffb7 	bl	800636a <_Bfree>
 80063fc:	4644      	mov	r4, r8
 80063fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006402:	3501      	adds	r5, #1
 8006404:	615f      	str	r7, [r3, #20]
 8006406:	6125      	str	r5, [r4, #16]
 8006408:	4620      	mov	r0, r4
 800640a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800640e <__hi0bits>:
 800640e:	0c02      	lsrs	r2, r0, #16
 8006410:	0412      	lsls	r2, r2, #16
 8006412:	4603      	mov	r3, r0
 8006414:	b9b2      	cbnz	r2, 8006444 <__hi0bits+0x36>
 8006416:	0403      	lsls	r3, r0, #16
 8006418:	2010      	movs	r0, #16
 800641a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800641e:	bf04      	itt	eq
 8006420:	021b      	lsleq	r3, r3, #8
 8006422:	3008      	addeq	r0, #8
 8006424:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006428:	bf04      	itt	eq
 800642a:	011b      	lsleq	r3, r3, #4
 800642c:	3004      	addeq	r0, #4
 800642e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006432:	bf04      	itt	eq
 8006434:	009b      	lsleq	r3, r3, #2
 8006436:	3002      	addeq	r0, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	db06      	blt.n	800644a <__hi0bits+0x3c>
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	d503      	bpl.n	8006448 <__hi0bits+0x3a>
 8006440:	3001      	adds	r0, #1
 8006442:	4770      	bx	lr
 8006444:	2000      	movs	r0, #0
 8006446:	e7e8      	b.n	800641a <__hi0bits+0xc>
 8006448:	2020      	movs	r0, #32
 800644a:	4770      	bx	lr

0800644c <__lo0bits>:
 800644c:	6803      	ldr	r3, [r0, #0]
 800644e:	f013 0207 	ands.w	r2, r3, #7
 8006452:	4601      	mov	r1, r0
 8006454:	d00b      	beq.n	800646e <__lo0bits+0x22>
 8006456:	07da      	lsls	r2, r3, #31
 8006458:	d423      	bmi.n	80064a2 <__lo0bits+0x56>
 800645a:	0798      	lsls	r0, r3, #30
 800645c:	bf49      	itett	mi
 800645e:	085b      	lsrmi	r3, r3, #1
 8006460:	089b      	lsrpl	r3, r3, #2
 8006462:	2001      	movmi	r0, #1
 8006464:	600b      	strmi	r3, [r1, #0]
 8006466:	bf5c      	itt	pl
 8006468:	600b      	strpl	r3, [r1, #0]
 800646a:	2002      	movpl	r0, #2
 800646c:	4770      	bx	lr
 800646e:	b298      	uxth	r0, r3
 8006470:	b9a8      	cbnz	r0, 800649e <__lo0bits+0x52>
 8006472:	0c1b      	lsrs	r3, r3, #16
 8006474:	2010      	movs	r0, #16
 8006476:	f013 0fff 	tst.w	r3, #255	; 0xff
 800647a:	bf04      	itt	eq
 800647c:	0a1b      	lsreq	r3, r3, #8
 800647e:	3008      	addeq	r0, #8
 8006480:	071a      	lsls	r2, r3, #28
 8006482:	bf04      	itt	eq
 8006484:	091b      	lsreq	r3, r3, #4
 8006486:	3004      	addeq	r0, #4
 8006488:	079a      	lsls	r2, r3, #30
 800648a:	bf04      	itt	eq
 800648c:	089b      	lsreq	r3, r3, #2
 800648e:	3002      	addeq	r0, #2
 8006490:	07da      	lsls	r2, r3, #31
 8006492:	d402      	bmi.n	800649a <__lo0bits+0x4e>
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	d006      	beq.n	80064a6 <__lo0bits+0x5a>
 8006498:	3001      	adds	r0, #1
 800649a:	600b      	str	r3, [r1, #0]
 800649c:	4770      	bx	lr
 800649e:	4610      	mov	r0, r2
 80064a0:	e7e9      	b.n	8006476 <__lo0bits+0x2a>
 80064a2:	2000      	movs	r0, #0
 80064a4:	4770      	bx	lr
 80064a6:	2020      	movs	r0, #32
 80064a8:	4770      	bx	lr

080064aa <__i2b>:
 80064aa:	b510      	push	{r4, lr}
 80064ac:	460c      	mov	r4, r1
 80064ae:	2101      	movs	r1, #1
 80064b0:	f7ff ff27 	bl	8006302 <_Balloc>
 80064b4:	2201      	movs	r2, #1
 80064b6:	6144      	str	r4, [r0, #20]
 80064b8:	6102      	str	r2, [r0, #16]
 80064ba:	bd10      	pop	{r4, pc}

080064bc <__multiply>:
 80064bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	4614      	mov	r4, r2
 80064c2:	690a      	ldr	r2, [r1, #16]
 80064c4:	6923      	ldr	r3, [r4, #16]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	bfb8      	it	lt
 80064ca:	460b      	movlt	r3, r1
 80064cc:	4688      	mov	r8, r1
 80064ce:	bfbc      	itt	lt
 80064d0:	46a0      	movlt	r8, r4
 80064d2:	461c      	movlt	r4, r3
 80064d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80064dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064e4:	eb07 0609 	add.w	r6, r7, r9
 80064e8:	42b3      	cmp	r3, r6
 80064ea:	bfb8      	it	lt
 80064ec:	3101      	addlt	r1, #1
 80064ee:	f7ff ff08 	bl	8006302 <_Balloc>
 80064f2:	f100 0514 	add.w	r5, r0, #20
 80064f6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80064fa:	462b      	mov	r3, r5
 80064fc:	2200      	movs	r2, #0
 80064fe:	4573      	cmp	r3, lr
 8006500:	d316      	bcc.n	8006530 <__multiply+0x74>
 8006502:	f104 0214 	add.w	r2, r4, #20
 8006506:	f108 0114 	add.w	r1, r8, #20
 800650a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800650e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	9b00      	ldr	r3, [sp, #0]
 8006516:	9201      	str	r2, [sp, #4]
 8006518:	4293      	cmp	r3, r2
 800651a:	d80c      	bhi.n	8006536 <__multiply+0x7a>
 800651c:	2e00      	cmp	r6, #0
 800651e:	dd03      	ble.n	8006528 <__multiply+0x6c>
 8006520:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006524:	2b00      	cmp	r3, #0
 8006526:	d05d      	beq.n	80065e4 <__multiply+0x128>
 8006528:	6106      	str	r6, [r0, #16]
 800652a:	b003      	add	sp, #12
 800652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006530:	f843 2b04 	str.w	r2, [r3], #4
 8006534:	e7e3      	b.n	80064fe <__multiply+0x42>
 8006536:	f8b2 b000 	ldrh.w	fp, [r2]
 800653a:	f1bb 0f00 	cmp.w	fp, #0
 800653e:	d023      	beq.n	8006588 <__multiply+0xcc>
 8006540:	4689      	mov	r9, r1
 8006542:	46ac      	mov	ip, r5
 8006544:	f04f 0800 	mov.w	r8, #0
 8006548:	f859 4b04 	ldr.w	r4, [r9], #4
 800654c:	f8dc a000 	ldr.w	sl, [ip]
 8006550:	b2a3      	uxth	r3, r4
 8006552:	fa1f fa8a 	uxth.w	sl, sl
 8006556:	fb0b a303 	mla	r3, fp, r3, sl
 800655a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800655e:	f8dc 4000 	ldr.w	r4, [ip]
 8006562:	4443      	add	r3, r8
 8006564:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006568:	fb0b 840a 	mla	r4, fp, sl, r8
 800656c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006570:	46e2      	mov	sl, ip
 8006572:	b29b      	uxth	r3, r3
 8006574:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006578:	454f      	cmp	r7, r9
 800657a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800657e:	f84a 3b04 	str.w	r3, [sl], #4
 8006582:	d82b      	bhi.n	80065dc <__multiply+0x120>
 8006584:	f8cc 8004 	str.w	r8, [ip, #4]
 8006588:	9b01      	ldr	r3, [sp, #4]
 800658a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800658e:	3204      	adds	r2, #4
 8006590:	f1ba 0f00 	cmp.w	sl, #0
 8006594:	d020      	beq.n	80065d8 <__multiply+0x11c>
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	4689      	mov	r9, r1
 800659a:	46a8      	mov	r8, r5
 800659c:	f04f 0b00 	mov.w	fp, #0
 80065a0:	f8b9 c000 	ldrh.w	ip, [r9]
 80065a4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80065a8:	fb0a 440c 	mla	r4, sl, ip, r4
 80065ac:	445c      	add	r4, fp
 80065ae:	46c4      	mov	ip, r8
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065b6:	f84c 3b04 	str.w	r3, [ip], #4
 80065ba:	f859 3b04 	ldr.w	r3, [r9], #4
 80065be:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80065c2:	0c1b      	lsrs	r3, r3, #16
 80065c4:	fb0a b303 	mla	r3, sl, r3, fp
 80065c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80065cc:	454f      	cmp	r7, r9
 80065ce:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80065d2:	d805      	bhi.n	80065e0 <__multiply+0x124>
 80065d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80065d8:	3504      	adds	r5, #4
 80065da:	e79b      	b.n	8006514 <__multiply+0x58>
 80065dc:	46d4      	mov	ip, sl
 80065de:	e7b3      	b.n	8006548 <__multiply+0x8c>
 80065e0:	46e0      	mov	r8, ip
 80065e2:	e7dd      	b.n	80065a0 <__multiply+0xe4>
 80065e4:	3e01      	subs	r6, #1
 80065e6:	e799      	b.n	800651c <__multiply+0x60>

080065e8 <__pow5mult>:
 80065e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ec:	4615      	mov	r5, r2
 80065ee:	f012 0203 	ands.w	r2, r2, #3
 80065f2:	4606      	mov	r6, r0
 80065f4:	460f      	mov	r7, r1
 80065f6:	d007      	beq.n	8006608 <__pow5mult+0x20>
 80065f8:	3a01      	subs	r2, #1
 80065fa:	4c21      	ldr	r4, [pc, #132]	; (8006680 <__pow5mult+0x98>)
 80065fc:	2300      	movs	r3, #0
 80065fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006602:	f7ff fec9 	bl	8006398 <__multadd>
 8006606:	4607      	mov	r7, r0
 8006608:	10ad      	asrs	r5, r5, #2
 800660a:	d035      	beq.n	8006678 <__pow5mult+0x90>
 800660c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800660e:	b93c      	cbnz	r4, 8006620 <__pow5mult+0x38>
 8006610:	2010      	movs	r0, #16
 8006612:	f7ff fe63 	bl	80062dc <malloc>
 8006616:	6270      	str	r0, [r6, #36]	; 0x24
 8006618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800661c:	6004      	str	r4, [r0, #0]
 800661e:	60c4      	str	r4, [r0, #12]
 8006620:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006628:	b94c      	cbnz	r4, 800663e <__pow5mult+0x56>
 800662a:	f240 2171 	movw	r1, #625	; 0x271
 800662e:	4630      	mov	r0, r6
 8006630:	f7ff ff3b 	bl	80064aa <__i2b>
 8006634:	2300      	movs	r3, #0
 8006636:	f8c8 0008 	str.w	r0, [r8, #8]
 800663a:	4604      	mov	r4, r0
 800663c:	6003      	str	r3, [r0, #0]
 800663e:	f04f 0800 	mov.w	r8, #0
 8006642:	07eb      	lsls	r3, r5, #31
 8006644:	d50a      	bpl.n	800665c <__pow5mult+0x74>
 8006646:	4639      	mov	r1, r7
 8006648:	4622      	mov	r2, r4
 800664a:	4630      	mov	r0, r6
 800664c:	f7ff ff36 	bl	80064bc <__multiply>
 8006650:	4639      	mov	r1, r7
 8006652:	4681      	mov	r9, r0
 8006654:	4630      	mov	r0, r6
 8006656:	f7ff fe88 	bl	800636a <_Bfree>
 800665a:	464f      	mov	r7, r9
 800665c:	106d      	asrs	r5, r5, #1
 800665e:	d00b      	beq.n	8006678 <__pow5mult+0x90>
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	b938      	cbnz	r0, 8006674 <__pow5mult+0x8c>
 8006664:	4622      	mov	r2, r4
 8006666:	4621      	mov	r1, r4
 8006668:	4630      	mov	r0, r6
 800666a:	f7ff ff27 	bl	80064bc <__multiply>
 800666e:	6020      	str	r0, [r4, #0]
 8006670:	f8c0 8000 	str.w	r8, [r0]
 8006674:	4604      	mov	r4, r0
 8006676:	e7e4      	b.n	8006642 <__pow5mult+0x5a>
 8006678:	4638      	mov	r0, r7
 800667a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800667e:	bf00      	nop
 8006680:	080086f8 	.word	0x080086f8

08006684 <__lshift>:
 8006684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006688:	460c      	mov	r4, r1
 800668a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	6849      	ldr	r1, [r1, #4]
 8006692:	eb0a 0903 	add.w	r9, sl, r3
 8006696:	68a3      	ldr	r3, [r4, #8]
 8006698:	4607      	mov	r7, r0
 800669a:	4616      	mov	r6, r2
 800669c:	f109 0501 	add.w	r5, r9, #1
 80066a0:	42ab      	cmp	r3, r5
 80066a2:	db32      	blt.n	800670a <__lshift+0x86>
 80066a4:	4638      	mov	r0, r7
 80066a6:	f7ff fe2c 	bl	8006302 <_Balloc>
 80066aa:	2300      	movs	r3, #0
 80066ac:	4680      	mov	r8, r0
 80066ae:	f100 0114 	add.w	r1, r0, #20
 80066b2:	461a      	mov	r2, r3
 80066b4:	4553      	cmp	r3, sl
 80066b6:	db2b      	blt.n	8006710 <__lshift+0x8c>
 80066b8:	6920      	ldr	r0, [r4, #16]
 80066ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066be:	f104 0314 	add.w	r3, r4, #20
 80066c2:	f016 021f 	ands.w	r2, r6, #31
 80066c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066ce:	d025      	beq.n	800671c <__lshift+0x98>
 80066d0:	f1c2 0e20 	rsb	lr, r2, #32
 80066d4:	2000      	movs	r0, #0
 80066d6:	681e      	ldr	r6, [r3, #0]
 80066d8:	468a      	mov	sl, r1
 80066da:	4096      	lsls	r6, r2
 80066dc:	4330      	orrs	r0, r6
 80066de:	f84a 0b04 	str.w	r0, [sl], #4
 80066e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80066e6:	459c      	cmp	ip, r3
 80066e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80066ec:	d814      	bhi.n	8006718 <__lshift+0x94>
 80066ee:	6048      	str	r0, [r1, #4]
 80066f0:	b108      	cbz	r0, 80066f6 <__lshift+0x72>
 80066f2:	f109 0502 	add.w	r5, r9, #2
 80066f6:	3d01      	subs	r5, #1
 80066f8:	4638      	mov	r0, r7
 80066fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80066fe:	4621      	mov	r1, r4
 8006700:	f7ff fe33 	bl	800636a <_Bfree>
 8006704:	4640      	mov	r0, r8
 8006706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670a:	3101      	adds	r1, #1
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	e7c7      	b.n	80066a0 <__lshift+0x1c>
 8006710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006714:	3301      	adds	r3, #1
 8006716:	e7cd      	b.n	80066b4 <__lshift+0x30>
 8006718:	4651      	mov	r1, sl
 800671a:	e7dc      	b.n	80066d6 <__lshift+0x52>
 800671c:	3904      	subs	r1, #4
 800671e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006722:	f841 2f04 	str.w	r2, [r1, #4]!
 8006726:	459c      	cmp	ip, r3
 8006728:	d8f9      	bhi.n	800671e <__lshift+0x9a>
 800672a:	e7e4      	b.n	80066f6 <__lshift+0x72>

0800672c <__mcmp>:
 800672c:	6903      	ldr	r3, [r0, #16]
 800672e:	690a      	ldr	r2, [r1, #16]
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	b530      	push	{r4, r5, lr}
 8006734:	d10c      	bne.n	8006750 <__mcmp+0x24>
 8006736:	0092      	lsls	r2, r2, #2
 8006738:	3014      	adds	r0, #20
 800673a:	3114      	adds	r1, #20
 800673c:	1884      	adds	r4, r0, r2
 800673e:	4411      	add	r1, r2
 8006740:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006744:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006748:	4295      	cmp	r5, r2
 800674a:	d003      	beq.n	8006754 <__mcmp+0x28>
 800674c:	d305      	bcc.n	800675a <__mcmp+0x2e>
 800674e:	2301      	movs	r3, #1
 8006750:	4618      	mov	r0, r3
 8006752:	bd30      	pop	{r4, r5, pc}
 8006754:	42a0      	cmp	r0, r4
 8006756:	d3f3      	bcc.n	8006740 <__mcmp+0x14>
 8006758:	e7fa      	b.n	8006750 <__mcmp+0x24>
 800675a:	f04f 33ff 	mov.w	r3, #4294967295
 800675e:	e7f7      	b.n	8006750 <__mcmp+0x24>

08006760 <__mdiff>:
 8006760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	460d      	mov	r5, r1
 8006766:	4607      	mov	r7, r0
 8006768:	4611      	mov	r1, r2
 800676a:	4628      	mov	r0, r5
 800676c:	4614      	mov	r4, r2
 800676e:	f7ff ffdd 	bl	800672c <__mcmp>
 8006772:	1e06      	subs	r6, r0, #0
 8006774:	d108      	bne.n	8006788 <__mdiff+0x28>
 8006776:	4631      	mov	r1, r6
 8006778:	4638      	mov	r0, r7
 800677a:	f7ff fdc2 	bl	8006302 <_Balloc>
 800677e:	2301      	movs	r3, #1
 8006780:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	bfa4      	itt	ge
 800678a:	4623      	movge	r3, r4
 800678c:	462c      	movge	r4, r5
 800678e:	4638      	mov	r0, r7
 8006790:	6861      	ldr	r1, [r4, #4]
 8006792:	bfa6      	itte	ge
 8006794:	461d      	movge	r5, r3
 8006796:	2600      	movge	r6, #0
 8006798:	2601      	movlt	r6, #1
 800679a:	f7ff fdb2 	bl	8006302 <_Balloc>
 800679e:	692b      	ldr	r3, [r5, #16]
 80067a0:	60c6      	str	r6, [r0, #12]
 80067a2:	6926      	ldr	r6, [r4, #16]
 80067a4:	f105 0914 	add.w	r9, r5, #20
 80067a8:	f104 0214 	add.w	r2, r4, #20
 80067ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80067b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80067b4:	f100 0514 	add.w	r5, r0, #20
 80067b8:	f04f 0e00 	mov.w	lr, #0
 80067bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80067c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80067c4:	fa1e f18a 	uxtah	r1, lr, sl
 80067c8:	b2a3      	uxth	r3, r4
 80067ca:	1ac9      	subs	r1, r1, r3
 80067cc:	0c23      	lsrs	r3, r4, #16
 80067ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80067d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80067d6:	b289      	uxth	r1, r1
 80067d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80067dc:	45c8      	cmp	r8, r9
 80067de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80067e2:	4694      	mov	ip, r2
 80067e4:	f845 3b04 	str.w	r3, [r5], #4
 80067e8:	d8e8      	bhi.n	80067bc <__mdiff+0x5c>
 80067ea:	45bc      	cmp	ip, r7
 80067ec:	d304      	bcc.n	80067f8 <__mdiff+0x98>
 80067ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80067f2:	b183      	cbz	r3, 8006816 <__mdiff+0xb6>
 80067f4:	6106      	str	r6, [r0, #16]
 80067f6:	e7c5      	b.n	8006784 <__mdiff+0x24>
 80067f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80067fc:	fa1e f381 	uxtah	r3, lr, r1
 8006800:	141a      	asrs	r2, r3, #16
 8006802:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006806:	b29b      	uxth	r3, r3
 8006808:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800680c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006810:	f845 3b04 	str.w	r3, [r5], #4
 8006814:	e7e9      	b.n	80067ea <__mdiff+0x8a>
 8006816:	3e01      	subs	r6, #1
 8006818:	e7e9      	b.n	80067ee <__mdiff+0x8e>

0800681a <__d2b>:
 800681a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800681e:	460e      	mov	r6, r1
 8006820:	2101      	movs	r1, #1
 8006822:	ec59 8b10 	vmov	r8, r9, d0
 8006826:	4615      	mov	r5, r2
 8006828:	f7ff fd6b 	bl	8006302 <_Balloc>
 800682c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006830:	4607      	mov	r7, r0
 8006832:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006836:	bb34      	cbnz	r4, 8006886 <__d2b+0x6c>
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	f1b8 0300 	subs.w	r3, r8, #0
 800683e:	d027      	beq.n	8006890 <__d2b+0x76>
 8006840:	a802      	add	r0, sp, #8
 8006842:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006846:	f7ff fe01 	bl	800644c <__lo0bits>
 800684a:	9900      	ldr	r1, [sp, #0]
 800684c:	b1f0      	cbz	r0, 800688c <__d2b+0x72>
 800684e:	9a01      	ldr	r2, [sp, #4]
 8006850:	f1c0 0320 	rsb	r3, r0, #32
 8006854:	fa02 f303 	lsl.w	r3, r2, r3
 8006858:	430b      	orrs	r3, r1
 800685a:	40c2      	lsrs	r2, r0
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	9201      	str	r2, [sp, #4]
 8006860:	9b01      	ldr	r3, [sp, #4]
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	bf14      	ite	ne
 8006868:	2102      	movne	r1, #2
 800686a:	2101      	moveq	r1, #1
 800686c:	6139      	str	r1, [r7, #16]
 800686e:	b1c4      	cbz	r4, 80068a2 <__d2b+0x88>
 8006870:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006874:	4404      	add	r4, r0
 8006876:	6034      	str	r4, [r6, #0]
 8006878:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800687c:	6028      	str	r0, [r5, #0]
 800687e:	4638      	mov	r0, r7
 8006880:	b003      	add	sp, #12
 8006882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800688a:	e7d5      	b.n	8006838 <__d2b+0x1e>
 800688c:	6179      	str	r1, [r7, #20]
 800688e:	e7e7      	b.n	8006860 <__d2b+0x46>
 8006890:	a801      	add	r0, sp, #4
 8006892:	f7ff fddb 	bl	800644c <__lo0bits>
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	2101      	movs	r1, #1
 800689c:	6139      	str	r1, [r7, #16]
 800689e:	3020      	adds	r0, #32
 80068a0:	e7e5      	b.n	800686e <__d2b+0x54>
 80068a2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80068a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068aa:	6030      	str	r0, [r6, #0]
 80068ac:	6918      	ldr	r0, [r3, #16]
 80068ae:	f7ff fdae 	bl	800640e <__hi0bits>
 80068b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80068b6:	e7e1      	b.n	800687c <__d2b+0x62>

080068b8 <_calloc_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	fb02 f401 	mul.w	r4, r2, r1
 80068be:	4621      	mov	r1, r4
 80068c0:	f000 f856 	bl	8006970 <_malloc_r>
 80068c4:	4605      	mov	r5, r0
 80068c6:	b118      	cbz	r0, 80068d0 <_calloc_r+0x18>
 80068c8:	4622      	mov	r2, r4
 80068ca:	2100      	movs	r1, #0
 80068cc:	f7fe fa2e 	bl	8004d2c <memset>
 80068d0:	4628      	mov	r0, r5
 80068d2:	bd38      	pop	{r3, r4, r5, pc}

080068d4 <_free_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4605      	mov	r5, r0
 80068d8:	2900      	cmp	r1, #0
 80068da:	d045      	beq.n	8006968 <_free_r+0x94>
 80068dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e0:	1f0c      	subs	r4, r1, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bfb8      	it	lt
 80068e6:	18e4      	addlt	r4, r4, r3
 80068e8:	f000 fa29 	bl	8006d3e <__malloc_lock>
 80068ec:	4a1f      	ldr	r2, [pc, #124]	; (800696c <_free_r+0x98>)
 80068ee:	6813      	ldr	r3, [r2, #0]
 80068f0:	4610      	mov	r0, r2
 80068f2:	b933      	cbnz	r3, 8006902 <_free_r+0x2e>
 80068f4:	6063      	str	r3, [r4, #4]
 80068f6:	6014      	str	r4, [r2, #0]
 80068f8:	4628      	mov	r0, r5
 80068fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068fe:	f000 ba1f 	b.w	8006d40 <__malloc_unlock>
 8006902:	42a3      	cmp	r3, r4
 8006904:	d90c      	bls.n	8006920 <_free_r+0x4c>
 8006906:	6821      	ldr	r1, [r4, #0]
 8006908:	1862      	adds	r2, r4, r1
 800690a:	4293      	cmp	r3, r2
 800690c:	bf04      	itt	eq
 800690e:	681a      	ldreq	r2, [r3, #0]
 8006910:	685b      	ldreq	r3, [r3, #4]
 8006912:	6063      	str	r3, [r4, #4]
 8006914:	bf04      	itt	eq
 8006916:	1852      	addeq	r2, r2, r1
 8006918:	6022      	streq	r2, [r4, #0]
 800691a:	6004      	str	r4, [r0, #0]
 800691c:	e7ec      	b.n	80068f8 <_free_r+0x24>
 800691e:	4613      	mov	r3, r2
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	b10a      	cbz	r2, 8006928 <_free_r+0x54>
 8006924:	42a2      	cmp	r2, r4
 8006926:	d9fa      	bls.n	800691e <_free_r+0x4a>
 8006928:	6819      	ldr	r1, [r3, #0]
 800692a:	1858      	adds	r0, r3, r1
 800692c:	42a0      	cmp	r0, r4
 800692e:	d10b      	bne.n	8006948 <_free_r+0x74>
 8006930:	6820      	ldr	r0, [r4, #0]
 8006932:	4401      	add	r1, r0
 8006934:	1858      	adds	r0, r3, r1
 8006936:	4282      	cmp	r2, r0
 8006938:	6019      	str	r1, [r3, #0]
 800693a:	d1dd      	bne.n	80068f8 <_free_r+0x24>
 800693c:	6810      	ldr	r0, [r2, #0]
 800693e:	6852      	ldr	r2, [r2, #4]
 8006940:	605a      	str	r2, [r3, #4]
 8006942:	4401      	add	r1, r0
 8006944:	6019      	str	r1, [r3, #0]
 8006946:	e7d7      	b.n	80068f8 <_free_r+0x24>
 8006948:	d902      	bls.n	8006950 <_free_r+0x7c>
 800694a:	230c      	movs	r3, #12
 800694c:	602b      	str	r3, [r5, #0]
 800694e:	e7d3      	b.n	80068f8 <_free_r+0x24>
 8006950:	6820      	ldr	r0, [r4, #0]
 8006952:	1821      	adds	r1, r4, r0
 8006954:	428a      	cmp	r2, r1
 8006956:	bf04      	itt	eq
 8006958:	6811      	ldreq	r1, [r2, #0]
 800695a:	6852      	ldreq	r2, [r2, #4]
 800695c:	6062      	str	r2, [r4, #4]
 800695e:	bf04      	itt	eq
 8006960:	1809      	addeq	r1, r1, r0
 8006962:	6021      	streq	r1, [r4, #0]
 8006964:	605c      	str	r4, [r3, #4]
 8006966:	e7c7      	b.n	80068f8 <_free_r+0x24>
 8006968:	bd38      	pop	{r3, r4, r5, pc}
 800696a:	bf00      	nop
 800696c:	20000210 	.word	0x20000210

08006970 <_malloc_r>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	1ccd      	adds	r5, r1, #3
 8006974:	f025 0503 	bic.w	r5, r5, #3
 8006978:	3508      	adds	r5, #8
 800697a:	2d0c      	cmp	r5, #12
 800697c:	bf38      	it	cc
 800697e:	250c      	movcc	r5, #12
 8006980:	2d00      	cmp	r5, #0
 8006982:	4606      	mov	r6, r0
 8006984:	db01      	blt.n	800698a <_malloc_r+0x1a>
 8006986:	42a9      	cmp	r1, r5
 8006988:	d903      	bls.n	8006992 <_malloc_r+0x22>
 800698a:	230c      	movs	r3, #12
 800698c:	6033      	str	r3, [r6, #0]
 800698e:	2000      	movs	r0, #0
 8006990:	bd70      	pop	{r4, r5, r6, pc}
 8006992:	f000 f9d4 	bl	8006d3e <__malloc_lock>
 8006996:	4a21      	ldr	r2, [pc, #132]	; (8006a1c <_malloc_r+0xac>)
 8006998:	6814      	ldr	r4, [r2, #0]
 800699a:	4621      	mov	r1, r4
 800699c:	b991      	cbnz	r1, 80069c4 <_malloc_r+0x54>
 800699e:	4c20      	ldr	r4, [pc, #128]	; (8006a20 <_malloc_r+0xb0>)
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	b91b      	cbnz	r3, 80069ac <_malloc_r+0x3c>
 80069a4:	4630      	mov	r0, r6
 80069a6:	f000 f98f 	bl	8006cc8 <_sbrk_r>
 80069aa:	6020      	str	r0, [r4, #0]
 80069ac:	4629      	mov	r1, r5
 80069ae:	4630      	mov	r0, r6
 80069b0:	f000 f98a 	bl	8006cc8 <_sbrk_r>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d124      	bne.n	8006a02 <_malloc_r+0x92>
 80069b8:	230c      	movs	r3, #12
 80069ba:	6033      	str	r3, [r6, #0]
 80069bc:	4630      	mov	r0, r6
 80069be:	f000 f9bf 	bl	8006d40 <__malloc_unlock>
 80069c2:	e7e4      	b.n	800698e <_malloc_r+0x1e>
 80069c4:	680b      	ldr	r3, [r1, #0]
 80069c6:	1b5b      	subs	r3, r3, r5
 80069c8:	d418      	bmi.n	80069fc <_malloc_r+0x8c>
 80069ca:	2b0b      	cmp	r3, #11
 80069cc:	d90f      	bls.n	80069ee <_malloc_r+0x7e>
 80069ce:	600b      	str	r3, [r1, #0]
 80069d0:	50cd      	str	r5, [r1, r3]
 80069d2:	18cc      	adds	r4, r1, r3
 80069d4:	4630      	mov	r0, r6
 80069d6:	f000 f9b3 	bl	8006d40 <__malloc_unlock>
 80069da:	f104 000b 	add.w	r0, r4, #11
 80069de:	1d23      	adds	r3, r4, #4
 80069e0:	f020 0007 	bic.w	r0, r0, #7
 80069e4:	1ac3      	subs	r3, r0, r3
 80069e6:	d0d3      	beq.n	8006990 <_malloc_r+0x20>
 80069e8:	425a      	negs	r2, r3
 80069ea:	50e2      	str	r2, [r4, r3]
 80069ec:	e7d0      	b.n	8006990 <_malloc_r+0x20>
 80069ee:	428c      	cmp	r4, r1
 80069f0:	684b      	ldr	r3, [r1, #4]
 80069f2:	bf16      	itet	ne
 80069f4:	6063      	strne	r3, [r4, #4]
 80069f6:	6013      	streq	r3, [r2, #0]
 80069f8:	460c      	movne	r4, r1
 80069fa:	e7eb      	b.n	80069d4 <_malloc_r+0x64>
 80069fc:	460c      	mov	r4, r1
 80069fe:	6849      	ldr	r1, [r1, #4]
 8006a00:	e7cc      	b.n	800699c <_malloc_r+0x2c>
 8006a02:	1cc4      	adds	r4, r0, #3
 8006a04:	f024 0403 	bic.w	r4, r4, #3
 8006a08:	42a0      	cmp	r0, r4
 8006a0a:	d005      	beq.n	8006a18 <_malloc_r+0xa8>
 8006a0c:	1a21      	subs	r1, r4, r0
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f000 f95a 	bl	8006cc8 <_sbrk_r>
 8006a14:	3001      	adds	r0, #1
 8006a16:	d0cf      	beq.n	80069b8 <_malloc_r+0x48>
 8006a18:	6025      	str	r5, [r4, #0]
 8006a1a:	e7db      	b.n	80069d4 <_malloc_r+0x64>
 8006a1c:	20000210 	.word	0x20000210
 8006a20:	20000214 	.word	0x20000214

08006a24 <__ssputs_r>:
 8006a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	688e      	ldr	r6, [r1, #8]
 8006a2a:	429e      	cmp	r6, r3
 8006a2c:	4682      	mov	sl, r0
 8006a2e:	460c      	mov	r4, r1
 8006a30:	4690      	mov	r8, r2
 8006a32:	4699      	mov	r9, r3
 8006a34:	d837      	bhi.n	8006aa6 <__ssputs_r+0x82>
 8006a36:	898a      	ldrh	r2, [r1, #12]
 8006a38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a3c:	d031      	beq.n	8006aa2 <__ssputs_r+0x7e>
 8006a3e:	6825      	ldr	r5, [r4, #0]
 8006a40:	6909      	ldr	r1, [r1, #16]
 8006a42:	1a6f      	subs	r7, r5, r1
 8006a44:	6965      	ldr	r5, [r4, #20]
 8006a46:	2302      	movs	r3, #2
 8006a48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a50:	f109 0301 	add.w	r3, r9, #1
 8006a54:	443b      	add	r3, r7
 8006a56:	429d      	cmp	r5, r3
 8006a58:	bf38      	it	cc
 8006a5a:	461d      	movcc	r5, r3
 8006a5c:	0553      	lsls	r3, r2, #21
 8006a5e:	d530      	bpl.n	8006ac2 <__ssputs_r+0x9e>
 8006a60:	4629      	mov	r1, r5
 8006a62:	f7ff ff85 	bl	8006970 <_malloc_r>
 8006a66:	4606      	mov	r6, r0
 8006a68:	b950      	cbnz	r0, 8006a80 <__ssputs_r+0x5c>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	f8ca 3000 	str.w	r3, [sl]
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a80:	463a      	mov	r2, r7
 8006a82:	6921      	ldr	r1, [r4, #16]
 8006a84:	f7ff fc32 	bl	80062ec <memcpy>
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a92:	81a3      	strh	r3, [r4, #12]
 8006a94:	6126      	str	r6, [r4, #16]
 8006a96:	6165      	str	r5, [r4, #20]
 8006a98:	443e      	add	r6, r7
 8006a9a:	1bed      	subs	r5, r5, r7
 8006a9c:	6026      	str	r6, [r4, #0]
 8006a9e:	60a5      	str	r5, [r4, #8]
 8006aa0:	464e      	mov	r6, r9
 8006aa2:	454e      	cmp	r6, r9
 8006aa4:	d900      	bls.n	8006aa8 <__ssputs_r+0x84>
 8006aa6:	464e      	mov	r6, r9
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	4641      	mov	r1, r8
 8006aac:	6820      	ldr	r0, [r4, #0]
 8006aae:	f000 f92d 	bl	8006d0c <memmove>
 8006ab2:	68a3      	ldr	r3, [r4, #8]
 8006ab4:	1b9b      	subs	r3, r3, r6
 8006ab6:	60a3      	str	r3, [r4, #8]
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	441e      	add	r6, r3
 8006abc:	6026      	str	r6, [r4, #0]
 8006abe:	2000      	movs	r0, #0
 8006ac0:	e7dc      	b.n	8006a7c <__ssputs_r+0x58>
 8006ac2:	462a      	mov	r2, r5
 8006ac4:	f000 f93d 	bl	8006d42 <_realloc_r>
 8006ac8:	4606      	mov	r6, r0
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d1e2      	bne.n	8006a94 <__ssputs_r+0x70>
 8006ace:	6921      	ldr	r1, [r4, #16]
 8006ad0:	4650      	mov	r0, sl
 8006ad2:	f7ff feff 	bl	80068d4 <_free_r>
 8006ad6:	e7c8      	b.n	8006a6a <__ssputs_r+0x46>

08006ad8 <_svfiprintf_r>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	461d      	mov	r5, r3
 8006ade:	898b      	ldrh	r3, [r1, #12]
 8006ae0:	061f      	lsls	r7, r3, #24
 8006ae2:	b09d      	sub	sp, #116	; 0x74
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	4616      	mov	r6, r2
 8006aea:	d50f      	bpl.n	8006b0c <_svfiprintf_r+0x34>
 8006aec:	690b      	ldr	r3, [r1, #16]
 8006aee:	b96b      	cbnz	r3, 8006b0c <_svfiprintf_r+0x34>
 8006af0:	2140      	movs	r1, #64	; 0x40
 8006af2:	f7ff ff3d 	bl	8006970 <_malloc_r>
 8006af6:	6020      	str	r0, [r4, #0]
 8006af8:	6120      	str	r0, [r4, #16]
 8006afa:	b928      	cbnz	r0, 8006b08 <_svfiprintf_r+0x30>
 8006afc:	230c      	movs	r3, #12
 8006afe:	f8c8 3000 	str.w	r3, [r8]
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	e0c8      	b.n	8006c9a <_svfiprintf_r+0x1c2>
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	6163      	str	r3, [r4, #20]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b10:	2320      	movs	r3, #32
 8006b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b16:	2330      	movs	r3, #48	; 0x30
 8006b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b1c:	9503      	str	r5, [sp, #12]
 8006b1e:	f04f 0b01 	mov.w	fp, #1
 8006b22:	4637      	mov	r7, r6
 8006b24:	463d      	mov	r5, r7
 8006b26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b2a:	b10b      	cbz	r3, 8006b30 <_svfiprintf_r+0x58>
 8006b2c:	2b25      	cmp	r3, #37	; 0x25
 8006b2e:	d13e      	bne.n	8006bae <_svfiprintf_r+0xd6>
 8006b30:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b34:	d00b      	beq.n	8006b4e <_svfiprintf_r+0x76>
 8006b36:	4653      	mov	r3, sl
 8006b38:	4632      	mov	r2, r6
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	f7ff ff71 	bl	8006a24 <__ssputs_r>
 8006b42:	3001      	adds	r0, #1
 8006b44:	f000 80a4 	beq.w	8006c90 <_svfiprintf_r+0x1b8>
 8006b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b4a:	4453      	add	r3, sl
 8006b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b4e:	783b      	ldrb	r3, [r7, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 809d 	beq.w	8006c90 <_svfiprintf_r+0x1b8>
 8006b56:	2300      	movs	r3, #0
 8006b58:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b60:	9304      	str	r3, [sp, #16]
 8006b62:	9307      	str	r3, [sp, #28]
 8006b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b68:	931a      	str	r3, [sp, #104]	; 0x68
 8006b6a:	462f      	mov	r7, r5
 8006b6c:	2205      	movs	r2, #5
 8006b6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006b72:	4850      	ldr	r0, [pc, #320]	; (8006cb4 <_svfiprintf_r+0x1dc>)
 8006b74:	f7f9 fb3c 	bl	80001f0 <memchr>
 8006b78:	9b04      	ldr	r3, [sp, #16]
 8006b7a:	b9d0      	cbnz	r0, 8006bb2 <_svfiprintf_r+0xda>
 8006b7c:	06d9      	lsls	r1, r3, #27
 8006b7e:	bf44      	itt	mi
 8006b80:	2220      	movmi	r2, #32
 8006b82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b86:	071a      	lsls	r2, r3, #28
 8006b88:	bf44      	itt	mi
 8006b8a:	222b      	movmi	r2, #43	; 0x2b
 8006b8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b90:	782a      	ldrb	r2, [r5, #0]
 8006b92:	2a2a      	cmp	r2, #42	; 0x2a
 8006b94:	d015      	beq.n	8006bc2 <_svfiprintf_r+0xea>
 8006b96:	9a07      	ldr	r2, [sp, #28]
 8006b98:	462f      	mov	r7, r5
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	250a      	movs	r5, #10
 8006b9e:	4639      	mov	r1, r7
 8006ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ba4:	3b30      	subs	r3, #48	; 0x30
 8006ba6:	2b09      	cmp	r3, #9
 8006ba8:	d94d      	bls.n	8006c46 <_svfiprintf_r+0x16e>
 8006baa:	b1b8      	cbz	r0, 8006bdc <_svfiprintf_r+0x104>
 8006bac:	e00f      	b.n	8006bce <_svfiprintf_r+0xf6>
 8006bae:	462f      	mov	r7, r5
 8006bb0:	e7b8      	b.n	8006b24 <_svfiprintf_r+0x4c>
 8006bb2:	4a40      	ldr	r2, [pc, #256]	; (8006cb4 <_svfiprintf_r+0x1dc>)
 8006bb4:	1a80      	subs	r0, r0, r2
 8006bb6:	fa0b f000 	lsl.w	r0, fp, r0
 8006bba:	4318      	orrs	r0, r3
 8006bbc:	9004      	str	r0, [sp, #16]
 8006bbe:	463d      	mov	r5, r7
 8006bc0:	e7d3      	b.n	8006b6a <_svfiprintf_r+0x92>
 8006bc2:	9a03      	ldr	r2, [sp, #12]
 8006bc4:	1d11      	adds	r1, r2, #4
 8006bc6:	6812      	ldr	r2, [r2, #0]
 8006bc8:	9103      	str	r1, [sp, #12]
 8006bca:	2a00      	cmp	r2, #0
 8006bcc:	db01      	blt.n	8006bd2 <_svfiprintf_r+0xfa>
 8006bce:	9207      	str	r2, [sp, #28]
 8006bd0:	e004      	b.n	8006bdc <_svfiprintf_r+0x104>
 8006bd2:	4252      	negs	r2, r2
 8006bd4:	f043 0302 	orr.w	r3, r3, #2
 8006bd8:	9207      	str	r2, [sp, #28]
 8006bda:	9304      	str	r3, [sp, #16]
 8006bdc:	783b      	ldrb	r3, [r7, #0]
 8006bde:	2b2e      	cmp	r3, #46	; 0x2e
 8006be0:	d10c      	bne.n	8006bfc <_svfiprintf_r+0x124>
 8006be2:	787b      	ldrb	r3, [r7, #1]
 8006be4:	2b2a      	cmp	r3, #42	; 0x2a
 8006be6:	d133      	bne.n	8006c50 <_svfiprintf_r+0x178>
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	1d1a      	adds	r2, r3, #4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	9203      	str	r2, [sp, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bfb8      	it	lt
 8006bf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bf8:	3702      	adds	r7, #2
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	4d2e      	ldr	r5, [pc, #184]	; (8006cb8 <_svfiprintf_r+0x1e0>)
 8006bfe:	7839      	ldrb	r1, [r7, #0]
 8006c00:	2203      	movs	r2, #3
 8006c02:	4628      	mov	r0, r5
 8006c04:	f7f9 faf4 	bl	80001f0 <memchr>
 8006c08:	b138      	cbz	r0, 8006c1a <_svfiprintf_r+0x142>
 8006c0a:	2340      	movs	r3, #64	; 0x40
 8006c0c:	1b40      	subs	r0, r0, r5
 8006c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	4303      	orrs	r3, r0
 8006c16:	3701      	adds	r7, #1
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	7839      	ldrb	r1, [r7, #0]
 8006c1c:	4827      	ldr	r0, [pc, #156]	; (8006cbc <_svfiprintf_r+0x1e4>)
 8006c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c22:	2206      	movs	r2, #6
 8006c24:	1c7e      	adds	r6, r7, #1
 8006c26:	f7f9 fae3 	bl	80001f0 <memchr>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d038      	beq.n	8006ca0 <_svfiprintf_r+0x1c8>
 8006c2e:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <_svfiprintf_r+0x1e8>)
 8006c30:	bb13      	cbnz	r3, 8006c78 <_svfiprintf_r+0x1a0>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	3307      	adds	r3, #7
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c40:	444b      	add	r3, r9
 8006c42:	9309      	str	r3, [sp, #36]	; 0x24
 8006c44:	e76d      	b.n	8006b22 <_svfiprintf_r+0x4a>
 8006c46:	fb05 3202 	mla	r2, r5, r2, r3
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	460f      	mov	r7, r1
 8006c4e:	e7a6      	b.n	8006b9e <_svfiprintf_r+0xc6>
 8006c50:	2300      	movs	r3, #0
 8006c52:	3701      	adds	r7, #1
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	4619      	mov	r1, r3
 8006c58:	250a      	movs	r5, #10
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c60:	3a30      	subs	r2, #48	; 0x30
 8006c62:	2a09      	cmp	r2, #9
 8006c64:	d903      	bls.n	8006c6e <_svfiprintf_r+0x196>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0c8      	beq.n	8006bfc <_svfiprintf_r+0x124>
 8006c6a:	9105      	str	r1, [sp, #20]
 8006c6c:	e7c6      	b.n	8006bfc <_svfiprintf_r+0x124>
 8006c6e:	fb05 2101 	mla	r1, r5, r1, r2
 8006c72:	2301      	movs	r3, #1
 8006c74:	4607      	mov	r7, r0
 8006c76:	e7f0      	b.n	8006c5a <_svfiprintf_r+0x182>
 8006c78:	ab03      	add	r3, sp, #12
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <_svfiprintf_r+0x1ec>)
 8006c80:	a904      	add	r1, sp, #16
 8006c82:	4640      	mov	r0, r8
 8006c84:	f7fe f8ee 	bl	8004e64 <_printf_float>
 8006c88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c8c:	4681      	mov	r9, r0
 8006c8e:	d1d6      	bne.n	8006c3e <_svfiprintf_r+0x166>
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	065b      	lsls	r3, r3, #25
 8006c94:	f53f af35 	bmi.w	8006b02 <_svfiprintf_r+0x2a>
 8006c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c9a:	b01d      	add	sp, #116	; 0x74
 8006c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca0:	ab03      	add	r3, sp, #12
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4622      	mov	r2, r4
 8006ca6:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <_svfiprintf_r+0x1ec>)
 8006ca8:	a904      	add	r1, sp, #16
 8006caa:	4640      	mov	r0, r8
 8006cac:	f7fe fb90 	bl	80053d0 <_printf_i>
 8006cb0:	e7ea      	b.n	8006c88 <_svfiprintf_r+0x1b0>
 8006cb2:	bf00      	nop
 8006cb4:	08008704 	.word	0x08008704
 8006cb8:	0800870a 	.word	0x0800870a
 8006cbc:	0800870e 	.word	0x0800870e
 8006cc0:	08004e65 	.word	0x08004e65
 8006cc4:	08006a25 	.word	0x08006a25

08006cc8 <_sbrk_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4c06      	ldr	r4, [pc, #24]	; (8006ce4 <_sbrk_r+0x1c>)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4605      	mov	r5, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	f7fb f82e 	bl	8001d34 <_sbrk>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_sbrk_r+0x1a>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_sbrk_r+0x1a>
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	20000308 	.word	0x20000308

08006ce8 <__ascii_mbtowc>:
 8006ce8:	b082      	sub	sp, #8
 8006cea:	b901      	cbnz	r1, 8006cee <__ascii_mbtowc+0x6>
 8006cec:	a901      	add	r1, sp, #4
 8006cee:	b142      	cbz	r2, 8006d02 <__ascii_mbtowc+0x1a>
 8006cf0:	b14b      	cbz	r3, 8006d06 <__ascii_mbtowc+0x1e>
 8006cf2:	7813      	ldrb	r3, [r2, #0]
 8006cf4:	600b      	str	r3, [r1, #0]
 8006cf6:	7812      	ldrb	r2, [r2, #0]
 8006cf8:	1c10      	adds	r0, r2, #0
 8006cfa:	bf18      	it	ne
 8006cfc:	2001      	movne	r0, #1
 8006cfe:	b002      	add	sp, #8
 8006d00:	4770      	bx	lr
 8006d02:	4610      	mov	r0, r2
 8006d04:	e7fb      	b.n	8006cfe <__ascii_mbtowc+0x16>
 8006d06:	f06f 0001 	mvn.w	r0, #1
 8006d0a:	e7f8      	b.n	8006cfe <__ascii_mbtowc+0x16>

08006d0c <memmove>:
 8006d0c:	4288      	cmp	r0, r1
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	eb01 0302 	add.w	r3, r1, r2
 8006d14:	d807      	bhi.n	8006d26 <memmove+0x1a>
 8006d16:	1e42      	subs	r2, r0, #1
 8006d18:	4299      	cmp	r1, r3
 8006d1a:	d00a      	beq.n	8006d32 <memmove+0x26>
 8006d1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d20:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d24:	e7f8      	b.n	8006d18 <memmove+0xc>
 8006d26:	4283      	cmp	r3, r0
 8006d28:	d9f5      	bls.n	8006d16 <memmove+0xa>
 8006d2a:	1881      	adds	r1, r0, r2
 8006d2c:	1ad2      	subs	r2, r2, r3
 8006d2e:	42d3      	cmn	r3, r2
 8006d30:	d100      	bne.n	8006d34 <memmove+0x28>
 8006d32:	bd10      	pop	{r4, pc}
 8006d34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d38:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006d3c:	e7f7      	b.n	8006d2e <memmove+0x22>

08006d3e <__malloc_lock>:
 8006d3e:	4770      	bx	lr

08006d40 <__malloc_unlock>:
 8006d40:	4770      	bx	lr

08006d42 <_realloc_r>:
 8006d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d44:	4607      	mov	r7, r0
 8006d46:	4614      	mov	r4, r2
 8006d48:	460e      	mov	r6, r1
 8006d4a:	b921      	cbnz	r1, 8006d56 <_realloc_r+0x14>
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d52:	f7ff be0d 	b.w	8006970 <_malloc_r>
 8006d56:	b922      	cbnz	r2, 8006d62 <_realloc_r+0x20>
 8006d58:	f7ff fdbc 	bl	80068d4 <_free_r>
 8006d5c:	4625      	mov	r5, r4
 8006d5e:	4628      	mov	r0, r5
 8006d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d62:	f000 f821 	bl	8006da8 <_malloc_usable_size_r>
 8006d66:	42a0      	cmp	r0, r4
 8006d68:	d20f      	bcs.n	8006d8a <_realloc_r+0x48>
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	f7ff fdff 	bl	8006970 <_malloc_r>
 8006d72:	4605      	mov	r5, r0
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d0f2      	beq.n	8006d5e <_realloc_r+0x1c>
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	f7ff fab6 	bl	80062ec <memcpy>
 8006d80:	4631      	mov	r1, r6
 8006d82:	4638      	mov	r0, r7
 8006d84:	f7ff fda6 	bl	80068d4 <_free_r>
 8006d88:	e7e9      	b.n	8006d5e <_realloc_r+0x1c>
 8006d8a:	4635      	mov	r5, r6
 8006d8c:	e7e7      	b.n	8006d5e <_realloc_r+0x1c>

08006d8e <__ascii_wctomb>:
 8006d8e:	b149      	cbz	r1, 8006da4 <__ascii_wctomb+0x16>
 8006d90:	2aff      	cmp	r2, #255	; 0xff
 8006d92:	bf85      	ittet	hi
 8006d94:	238a      	movhi	r3, #138	; 0x8a
 8006d96:	6003      	strhi	r3, [r0, #0]
 8006d98:	700a      	strbls	r2, [r1, #0]
 8006d9a:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d9e:	bf98      	it	ls
 8006da0:	2001      	movls	r0, #1
 8006da2:	4770      	bx	lr
 8006da4:	4608      	mov	r0, r1
 8006da6:	4770      	bx	lr

08006da8 <_malloc_usable_size_r>:
 8006da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dac:	1f18      	subs	r0, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bfbc      	itt	lt
 8006db2:	580b      	ldrlt	r3, [r1, r0]
 8006db4:	18c0      	addlt	r0, r0, r3
 8006db6:	4770      	bx	lr

08006db8 <sqrt>:
 8006db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dbc:	ed2d 8b02 	vpush	{d8}
 8006dc0:	b08b      	sub	sp, #44	; 0x2c
 8006dc2:	ec55 4b10 	vmov	r4, r5, d0
 8006dc6:	f000 f851 	bl	8006e6c <__ieee754_sqrt>
 8006dca:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <sqrt+0xac>)
 8006dcc:	eeb0 8a40 	vmov.f32	s16, s0
 8006dd0:	eef0 8a60 	vmov.f32	s17, s1
 8006dd4:	f993 6000 	ldrsb.w	r6, [r3]
 8006dd8:	1c73      	adds	r3, r6, #1
 8006dda:	d02a      	beq.n	8006e32 <sqrt+0x7a>
 8006ddc:	4622      	mov	r2, r4
 8006dde:	462b      	mov	r3, r5
 8006de0:	4620      	mov	r0, r4
 8006de2:	4629      	mov	r1, r5
 8006de4:	f7f9 feaa 	bl	8000b3c <__aeabi_dcmpun>
 8006de8:	4607      	mov	r7, r0
 8006dea:	bb10      	cbnz	r0, 8006e32 <sqrt+0x7a>
 8006dec:	f04f 0800 	mov.w	r8, #0
 8006df0:	f04f 0900 	mov.w	r9, #0
 8006df4:	4642      	mov	r2, r8
 8006df6:	464b      	mov	r3, r9
 8006df8:	4620      	mov	r0, r4
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	f7f9 fe76 	bl	8000aec <__aeabi_dcmplt>
 8006e00:	b1b8      	cbz	r0, 8006e32 <sqrt+0x7a>
 8006e02:	2301      	movs	r3, #1
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <sqrt+0xb0>)
 8006e08:	9301      	str	r3, [sp, #4]
 8006e0a:	9708      	str	r7, [sp, #32]
 8006e0c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006e10:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006e14:	b9b6      	cbnz	r6, 8006e44 <sqrt+0x8c>
 8006e16:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006e1a:	4668      	mov	r0, sp
 8006e1c:	f000 f8d6 	bl	8006fcc <matherr>
 8006e20:	b1d0      	cbz	r0, 8006e58 <sqrt+0xa0>
 8006e22:	9b08      	ldr	r3, [sp, #32]
 8006e24:	b11b      	cbz	r3, 8006e2e <sqrt+0x76>
 8006e26:	f7fd ff57 	bl	8004cd8 <__errno>
 8006e2a:	9b08      	ldr	r3, [sp, #32]
 8006e2c:	6003      	str	r3, [r0, #0]
 8006e2e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006e32:	eeb0 0a48 	vmov.f32	s0, s16
 8006e36:	eef0 0a68 	vmov.f32	s1, s17
 8006e3a:	b00b      	add	sp, #44	; 0x2c
 8006e3c:	ecbd 8b02 	vpop	{d8}
 8006e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e44:	4642      	mov	r2, r8
 8006e46:	464b      	mov	r3, r9
 8006e48:	4640      	mov	r0, r8
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	f7f9 fd06 	bl	800085c <__aeabi_ddiv>
 8006e50:	2e02      	cmp	r6, #2
 8006e52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e56:	d1e0      	bne.n	8006e1a <sqrt+0x62>
 8006e58:	f7fd ff3e 	bl	8004cd8 <__errno>
 8006e5c:	2321      	movs	r3, #33	; 0x21
 8006e5e:	6003      	str	r3, [r0, #0]
 8006e60:	e7df      	b.n	8006e22 <sqrt+0x6a>
 8006e62:	bf00      	nop
 8006e64:	200001ec 	.word	0x200001ec
 8006e68:	08008820 	.word	0x08008820

08006e6c <__ieee754_sqrt>:
 8006e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e70:	4955      	ldr	r1, [pc, #340]	; (8006fc8 <__ieee754_sqrt+0x15c>)
 8006e72:	ec55 4b10 	vmov	r4, r5, d0
 8006e76:	43a9      	bics	r1, r5
 8006e78:	462b      	mov	r3, r5
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	d112      	bne.n	8006ea4 <__ieee754_sqrt+0x38>
 8006e7e:	ee10 2a10 	vmov	r2, s0
 8006e82:	ee10 0a10 	vmov	r0, s0
 8006e86:	4629      	mov	r1, r5
 8006e88:	f7f9 fbbe 	bl	8000608 <__aeabi_dmul>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4620      	mov	r0, r4
 8006e92:	4629      	mov	r1, r5
 8006e94:	f7f9 fa02 	bl	800029c <__adddf3>
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	ec45 4b10 	vmov	d0, r4, r5
 8006ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	ee10 0a10 	vmov	r0, s0
 8006eaa:	4621      	mov	r1, r4
 8006eac:	dc0f      	bgt.n	8006ece <__ieee754_sqrt+0x62>
 8006eae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006eb2:	4330      	orrs	r0, r6
 8006eb4:	d0f2      	beq.n	8006e9c <__ieee754_sqrt+0x30>
 8006eb6:	b155      	cbz	r5, 8006ece <__ieee754_sqrt+0x62>
 8006eb8:	ee10 2a10 	vmov	r2, s0
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	f7f9 f9ea 	bl	8000298 <__aeabi_dsub>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	f7f9 fcc8 	bl	800085c <__aeabi_ddiv>
 8006ecc:	e7e4      	b.n	8006e98 <__ieee754_sqrt+0x2c>
 8006ece:	151b      	asrs	r3, r3, #20
 8006ed0:	d073      	beq.n	8006fba <__ieee754_sqrt+0x14e>
 8006ed2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ed6:	07dd      	lsls	r5, r3, #31
 8006ed8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006edc:	bf48      	it	mi
 8006ede:	0fc8      	lsrmi	r0, r1, #31
 8006ee0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ee4:	bf44      	itt	mi
 8006ee6:	0049      	lslmi	r1, r1, #1
 8006ee8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006eec:	2500      	movs	r5, #0
 8006eee:	1058      	asrs	r0, r3, #1
 8006ef0:	0fcb      	lsrs	r3, r1, #31
 8006ef2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006ef6:	0049      	lsls	r1, r1, #1
 8006ef8:	2316      	movs	r3, #22
 8006efa:	462c      	mov	r4, r5
 8006efc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006f00:	19a7      	adds	r7, r4, r6
 8006f02:	4297      	cmp	r7, r2
 8006f04:	bfde      	ittt	le
 8006f06:	19bc      	addle	r4, r7, r6
 8006f08:	1bd2      	suble	r2, r2, r7
 8006f0a:	19ad      	addle	r5, r5, r6
 8006f0c:	0fcf      	lsrs	r7, r1, #31
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006f14:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006f18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006f1c:	d1f0      	bne.n	8006f00 <__ieee754_sqrt+0x94>
 8006f1e:	f04f 0c20 	mov.w	ip, #32
 8006f22:	469e      	mov	lr, r3
 8006f24:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006f28:	42a2      	cmp	r2, r4
 8006f2a:	eb06 070e 	add.w	r7, r6, lr
 8006f2e:	dc02      	bgt.n	8006f36 <__ieee754_sqrt+0xca>
 8006f30:	d112      	bne.n	8006f58 <__ieee754_sqrt+0xec>
 8006f32:	428f      	cmp	r7, r1
 8006f34:	d810      	bhi.n	8006f58 <__ieee754_sqrt+0xec>
 8006f36:	2f00      	cmp	r7, #0
 8006f38:	eb07 0e06 	add.w	lr, r7, r6
 8006f3c:	da42      	bge.n	8006fc4 <__ieee754_sqrt+0x158>
 8006f3e:	f1be 0f00 	cmp.w	lr, #0
 8006f42:	db3f      	blt.n	8006fc4 <__ieee754_sqrt+0x158>
 8006f44:	f104 0801 	add.w	r8, r4, #1
 8006f48:	1b12      	subs	r2, r2, r4
 8006f4a:	428f      	cmp	r7, r1
 8006f4c:	bf88      	it	hi
 8006f4e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006f52:	1bc9      	subs	r1, r1, r7
 8006f54:	4433      	add	r3, r6
 8006f56:	4644      	mov	r4, r8
 8006f58:	0052      	lsls	r2, r2, #1
 8006f5a:	f1bc 0c01 	subs.w	ip, ip, #1
 8006f5e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006f62:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006f66:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006f6a:	d1dd      	bne.n	8006f28 <__ieee754_sqrt+0xbc>
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	d006      	beq.n	8006f7e <__ieee754_sqrt+0x112>
 8006f70:	1c5c      	adds	r4, r3, #1
 8006f72:	bf13      	iteet	ne
 8006f74:	3301      	addne	r3, #1
 8006f76:	3501      	addeq	r5, #1
 8006f78:	4663      	moveq	r3, ip
 8006f7a:	f023 0301 	bicne.w	r3, r3, #1
 8006f7e:	106a      	asrs	r2, r5, #1
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	07e9      	lsls	r1, r5, #31
 8006f84:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006f88:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006f8c:	bf48      	it	mi
 8006f8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006f92:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006f96:	461c      	mov	r4, r3
 8006f98:	e780      	b.n	8006e9c <__ieee754_sqrt+0x30>
 8006f9a:	0aca      	lsrs	r2, r1, #11
 8006f9c:	3815      	subs	r0, #21
 8006f9e:	0549      	lsls	r1, r1, #21
 8006fa0:	2a00      	cmp	r2, #0
 8006fa2:	d0fa      	beq.n	8006f9a <__ieee754_sqrt+0x12e>
 8006fa4:	02d6      	lsls	r6, r2, #11
 8006fa6:	d50a      	bpl.n	8006fbe <__ieee754_sqrt+0x152>
 8006fa8:	f1c3 0420 	rsb	r4, r3, #32
 8006fac:	fa21 f404 	lsr.w	r4, r1, r4
 8006fb0:	1e5d      	subs	r5, r3, #1
 8006fb2:	4099      	lsls	r1, r3
 8006fb4:	4322      	orrs	r2, r4
 8006fb6:	1b43      	subs	r3, r0, r5
 8006fb8:	e78b      	b.n	8006ed2 <__ieee754_sqrt+0x66>
 8006fba:	4618      	mov	r0, r3
 8006fbc:	e7f0      	b.n	8006fa0 <__ieee754_sqrt+0x134>
 8006fbe:	0052      	lsls	r2, r2, #1
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	e7ef      	b.n	8006fa4 <__ieee754_sqrt+0x138>
 8006fc4:	46a0      	mov	r8, r4
 8006fc6:	e7bf      	b.n	8006f48 <__ieee754_sqrt+0xdc>
 8006fc8:	7ff00000 	.word	0x7ff00000

08006fcc <matherr>:
 8006fcc:	2000      	movs	r0, #0
 8006fce:	4770      	bx	lr

08006fd0 <_init>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr

08006fdc <_fini>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr
