
AssistantWristband.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001928  08008bf8  08008bf8  00018bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a520  0800a520  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800a520  0800a520  0001a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a528  0800a528  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a528  0800a528  0001a528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a52c  0800a52c  0001a52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800a530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000238  0800a768  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800a768  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019878  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030fd  00000000  00000000  00039ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001210  00000000  00000000  0003cbe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000199f3  00000000  00000000  0003ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00010da2  00000000  00000000  000577e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00092840  00000000  00000000  00068585  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000fadc5  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000010a0  00000000  00000000  000fae40  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00005508  00000000  00000000  000fbee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008bdc 	.word	0x08008bdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	08008bdc 	.word	0x08008bdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <mma8452qWrite>:
 * This function writes value to address reg using the assigned peripheral address
 * hi2c : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * reg : address of register whose value is set inside the censor
 * value : reg's new content
 * */
HAL_StatusTypeDef mma8452qWrite(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t value) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2];
	data[0] = reg;
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000ecc:	78bb      	ldrb	r3, [r7, #2]
 8000ece:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(hi2c, MMA8452Q_DEVICE_ADDR, data, 2, 10);
 8000ed0:	f107 020c 	add.w	r2, r7, #12
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2302      	movs	r3, #2
 8000eda:	2138      	movs	r1, #56	; 0x38
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f002 fd8f 	bl	8003a00 <HAL_I2C_Master_Transmit>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <mma8452qRead>:
 * hi2c  : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * reg   : address of register where to start reading data from
 * numberofbytes : amount of data to be read from the registers of the censor
 * data_rec : address of buffer where the data from the censor will be stored into
 * */
HAL_StatusTypeDef mma8452qRead(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t numberofbytes, uint8_t* data_rec) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	72fb      	strb	r3, [r7, #11]
 8000efa:	4613      	mov	r3, r2
 8000efc:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, MMA8452Q_DEVICE_ADDR, reg, 1, data_rec, numberofbytes, 100);
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	b299      	uxth	r1, r3
 8000f02:	7abb      	ldrb	r3, [r7, #10]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2264      	movs	r2, #100	; 0x64
 8000f08:	9202      	str	r2, [sp, #8]
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	460a      	mov	r2, r1
 8000f14:	2138      	movs	r1, #56	; 0x38
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f002 fe70 	bl	8003bfc <HAL_I2C_Mem_Read>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <mma8452qInit>:

/*
 * This function initializes all the necessary censor registers in order to read data from it
 * hi2c  : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * */
HAL_StatusTypeDef mma8452qInit(I2C_HandleTypeDef* hi2c) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	  HAL_StatusTypeDef ret1 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_1, 0x00); // 2g selected after 0x00 sent
 8000f2e:	2200      	movs	r2, #0
 8000f30:	212a      	movs	r1, #42	; 0x2a
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffc0 	bl	8000eb8 <mma8452qWrite>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
	  HAL_StatusTypeDef ret2 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_1, 0x01);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	212a      	movs	r1, #42	; 0x2a
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ffb9 	bl	8000eb8 <mma8452qWrite>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73bb      	strb	r3, [r7, #14]
	  HAL_StatusTypeDef ret3 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_2, 0x00);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb2 	bl	8000eb8 <mma8452qWrite>
 8000f54:	4603      	mov	r3, r0
 8000f56:	737b      	strb	r3, [r7, #13]
	  if (ret1 == HAL_OK && ret2 == HAL_OK && ret3 == HAL_OK)
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d107      	bne.n	8000f6e <mma8452qInit+0x48>
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d104      	bne.n	8000f6e <mma8452qInit+0x48>
 8000f64:	7b7b      	ldrb	r3, [r7, #13]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <mma8452qInit+0x48>
		  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <mma8452qInit+0x4a>
	  else
		  return HAL_BUSY;
 8000f6e:	2302      	movs	r3, #2
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <getAccXYZ>:

/*
 * This function takes 7 bytes coming from censor and converts them into meaningful acceloremeter values
 * acc_3d : struct instance that contains raw data coming from censor and variables to be set for meaningful x,y,z acceloremeter data
 * */
void getAccXYZ(AccData* acc_3d) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	int16_t xAccl = (((int16_t)(acc_3d->acc_info[1] << 8)) | acc_3d->acc_info[2]) >> 4;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	789b      	ldrb	r3, [r3, #2]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	111b      	asrs	r3, r3, #4
 8000f92:	81fb      	strh	r3, [r7, #14]
	int16_t yAccl = (((int16_t)(acc_3d->acc_info[3] << 8)) | acc_3d->acc_info[4]) >> 4;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	111b      	asrs	r3, r3, #4
 8000fa6:	81bb      	strh	r3, [r7, #12]
	int16_t zAccl = (((int16_t)(acc_3d->acc_info[5] << 8)) | acc_3d->acc_info[6]) >> 4;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	799b      	ldrb	r3, [r3, #6]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	111b      	asrs	r3, r3, #4
 8000fba:	817b      	strh	r3, [r7, #10]
	acc_3d->x_acc = xAccl;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	89fa      	ldrh	r2, [r7, #14]
 8000fc0:	811a      	strh	r2, [r3, #8]
	acc_3d->y_acc = yAccl;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	89ba      	ldrh	r2, [r7, #12]
 8000fc6:	815a      	strh	r2, [r3, #10]
	acc_3d->z_acc = zAccl;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	897a      	ldrh	r2, [r7, #10]
 8000fcc:	819a      	strh	r2, [r3, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <ST7735_Select+0x14>)
 8000fe6:	f002 fbb9 	bl	800375c <HAL_GPIO_WritePin>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <ST7735_Unselect+0x14>)
 8000ffe:	f002 fbad 	bl	800375c <HAL_GPIO_WritePin>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00

0800100c <ST7735_Reset>:

static void ST7735_Reset() {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <ST7735_Reset+0x28>)
 8001018:	f002 fba0 	bl	800375c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800101c:	2005      	movs	r0, #5
 800101e:	f002 f8cf 	bl	80031c0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <ST7735_Reset+0x28>)
 800102a:	f002 fb97 	bl	800375c <HAL_GPIO_WritePin>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020000 	.word	0x40020000

08001038 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <ST7735_WriteCommand+0x2c>)
 800104a:	f002 fb87 	bl	800375c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800104e:	1df9      	adds	r1, r7, #7
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2201      	movs	r2, #1
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <ST7735_WriteCommand+0x30>)
 8001058:	f004 f802 	bl	8005060 <HAL_SPI_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020800 	.word	0x40020800
 8001068:	20000308 	.word	0x20000308

0800106c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <ST7735_WriteData+0x30>)
 800107e:	f002 fb6d 	bl	800375c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b29a      	uxth	r2, r3
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <ST7735_WriteData+0x34>)
 800108e:	f003 ffe7 	bl	8005060 <HAL_SPI_Transmit>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020800 	.word	0x40020800
 80010a0:	20000308 	.word	0x20000308

080010a4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80010b6:	e034      	b.n	8001122 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffb7 	bl	8001038 <ST7735_WriteCommand>

        numArgs = *addr++;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80010d4:	7abb      	ldrb	r3, [r7, #10]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010dc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010e4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80010ec:	7abb      	ldrb	r3, [r7, #10]
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ffbb 	bl	800106c <ST7735_WriteData>
            addr += numArgs;
 80010f6:	7abb      	ldrb	r3, [r7, #10]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80010fe:	89bb      	ldrh	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00e      	beq.n	8001122 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800110e:	89bb      	ldrh	r3, [r7, #12]
 8001110:	2bff      	cmp	r3, #255	; 0xff
 8001112:	d102      	bne.n	800111a <ST7735_ExecuteCommandList+0x76>
 8001114:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001118:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	f002 f84f 	bl	80031c0 <HAL_Delay>
    while(numCommands--) {
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	73fa      	strb	r2, [r7, #15]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1c5      	bne.n	80010b8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4623      	mov	r3, r4
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	4603      	mov	r3, r0
 8001148:	71bb      	strb	r3, [r7, #6]
 800114a:	460b      	mov	r3, r1
 800114c:	717b      	strb	r3, [r7, #5]
 800114e:	4613      	mov	r3, r2
 8001150:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001152:	202a      	movs	r0, #42	; 0x2a
 8001154:	f7ff ff70 	bl	8001038 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001158:	2300      	movs	r3, #0
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3302      	adds	r3, #2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]
 8001164:	2300      	movs	r3, #0
 8001166:	73bb      	strb	r3, [r7, #14]
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	3302      	adds	r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2104      	movs	r1, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff78 	bl	800106c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800117c:	202b      	movs	r0, #43	; 0x2b
 800117e:	f7ff ff5b 	bl	8001038 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	3301      	adds	r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800118a:	793b      	ldrb	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2104      	movs	r1, #4
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff67 	bl	800106c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800119e:	202c      	movs	r0, #44	; 0x2c
 80011a0:	f7ff ff4a 	bl	8001038 <ST7735_WriteCommand>
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}

080011ac <ST7735_Init>:

void ST7735_Init() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    ST7735_Select();
 80011b0:	f7ff ff14 	bl	8000fdc <ST7735_Select>
    ST7735_Reset();
 80011b4:	f7ff ff2a 	bl	800100c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <ST7735_Init+0x28>)
 80011ba:	f7ff ff73 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <ST7735_Init+0x2c>)
 80011c0:	f7ff ff70 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <ST7735_Init+0x30>)
 80011c6:	f7ff ff6d 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80011ca:	f7ff ff13 	bl	8000ff4 <ST7735_Unselect>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800a230 	.word	0x0800a230
 80011d8:	0800a26c 	.word	0x0800a26c
 80011dc:	0800a27c 	.word	0x0800a27c

080011e0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011e0:	b082      	sub	sp, #8
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b089      	sub	sp, #36	; 0x24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	460b      	mov	r3, r1
 80011f0:	80bb      	strh	r3, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	b2d9      	uxtb	r1, r3
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001206:	4413      	add	r3, r2
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b01      	subs	r3, #1
 800120c:	b2dc      	uxtb	r4, r3
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001216:	4413      	add	r3, r2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3b01      	subs	r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4622      	mov	r2, r4
 8001220:	f7ff ff88 	bl	8001134 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	e043      	b.n	80012b2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800122a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	3b20      	subs	r3, #32
 8001230:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	4619      	mov	r1, r3
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	440b      	add	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	e029      	b.n	80012a0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00e      	beq.n	800127a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800125c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	743b      	strb	r3, [r7, #16]
 8001266:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001268:	b2db      	uxtb	r3, r3
 800126a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2102      	movs	r1, #2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fefa 	bl	800106c <ST7735_WriteData>
 8001278:	e00f      	b.n	800129a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800127a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	b29b      	uxth	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	733b      	strb	r3, [r7, #12]
 8001286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800128a:	b2db      	uxtb	r3, r3
 800128c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2102      	movs	r1, #2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fee9 	bl	800106c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	3301      	adds	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012a4:	461a      	mov	r2, r3
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d3cf      	bcc.n	800124c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	3301      	adds	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012b6:	461a      	mov	r2, r3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d3b5      	bcc.n	800122a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012c8:	b002      	add	sp, #8
 80012ca:	4770      	bx	lr

080012cc <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012cc:	b082      	sub	sp, #8
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af04      	add	r7, sp, #16
 80012d4:	603a      	str	r2, [r7, #0]
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	4603      	mov	r3, r0
 80012da:	80fb      	strh	r3, [r7, #6]
 80012dc:	460b      	mov	r3, r1
 80012de:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80012e0:	f7ff fe7c 	bl	8000fdc <ST7735_Select>

    while(*str) {
 80012e4:	e02d      	b.n	8001342 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	7d3a      	ldrb	r2, [r7, #20]
 80012ea:	4413      	add	r3, r2
 80012ec:	2b7f      	cmp	r3, #127	; 0x7f
 80012ee:	dd13      	ble.n	8001318 <ST7735_WriteString+0x4c>
            x = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80012f4:	7d7b      	ldrb	r3, [r7, #21]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	7d7a      	ldrb	r2, [r7, #21]
 8001302:	4413      	add	r3, r2
 8001304:	2b9f      	cmp	r3, #159	; 0x9f
 8001306:	dc21      	bgt.n	800134c <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b20      	cmp	r3, #32
 800130e:	d103      	bne.n	8001318 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	603b      	str	r3, [r7, #0]
                continue;
 8001316:	e014      	b.n	8001342 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	88b9      	ldrh	r1, [r7, #4]
 800131e:	88f8      	ldrh	r0, [r7, #6]
 8001320:	8c3b      	ldrh	r3, [r7, #32]
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	8bbb      	ldrh	r3, [r7, #28]
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f7ff ff57 	bl	80011e0 <ST7735_WriteChar>
        x += font.width;
 8001332:	7d3b      	ldrb	r3, [r7, #20]
 8001334:	b29a      	uxth	r2, r3
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4413      	add	r3, r2
 800133a:	80fb      	strh	r3, [r7, #6]
        str++;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1cd      	bne.n	80012e6 <ST7735_WriteString+0x1a>
 800134a:	e000      	b.n	800134e <ST7735_WriteString+0x82>
                break;
 800134c:	bf00      	nop
    }

    ST7735_Unselect();
 800134e:	f7ff fe51 	bl	8000ff4 <ST7735_Unselect>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800135c:	b002      	add	sp, #8
 800135e:	4770      	bx	lr

08001360 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4623      	mov	r3, r4
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	4603      	mov	r3, r0
 8001374:	80bb      	strh	r3, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]
 800137a:	4613      	mov	r3, r2
 800137c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b7f      	cmp	r3, #127	; 0x7f
 8001382:	d85a      	bhi.n	800143a <ST7735_FillRectangle+0xda>
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	2b9f      	cmp	r3, #159	; 0x9f
 8001388:	d857      	bhi.n	800143a <ST7735_FillRectangle+0xda>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800138a:	88fa      	ldrh	r2, [r7, #6]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4413      	add	r3, r2
 8001390:	3b01      	subs	r3, #1
 8001392:	2b7f      	cmp	r3, #127	; 0x7f
 8001394:	dd03      	ble.n	800139e <ST7735_FillRectangle+0x3e>
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800139c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800139e:	88ba      	ldrh	r2, [r7, #4]
 80013a0:	883b      	ldrh	r3, [r7, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	3b01      	subs	r3, #1
 80013a6:	2b9f      	cmp	r3, #159	; 0x9f
 80013a8:	dd03      	ble.n	80013b2 <ST7735_FillRectangle+0x52>
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80013b0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80013b2:	f7ff fe13 	bl	8000fdc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	b2d8      	uxtb	r0, r3
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	b2d9      	uxtb	r1, r3
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	3b01      	subs	r3, #1
 80013cc:	b2dc      	uxtb	r4, r3
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	883b      	ldrh	r3, [r7, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3b01      	subs	r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4622      	mov	r2, r4
 80013e0:	f7ff fea8 	bl	8001134 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80013e4:	8c3b      	ldrh	r3, [r7, #32]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	733b      	strb	r3, [r7, #12]
 80013ee:	8c3b      	ldrh	r3, [r7, #32]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <ST7735_FillRectangle+0xe4>)
 80013fc:	f002 f9ae 	bl	800375c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001400:	883b      	ldrh	r3, [r7, #0]
 8001402:	80bb      	strh	r3, [r7, #4]
 8001404:	e013      	b.n	800142e <ST7735_FillRectangle+0xce>
        for(x = w; x > 0; x--) {
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	80fb      	strh	r3, [r7, #6]
 800140a:	e00a      	b.n	8001422 <ST7735_FillRectangle+0xc2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800140c:	f107 010c 	add.w	r1, r7, #12
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	2202      	movs	r2, #2
 8001416:	480c      	ldr	r0, [pc, #48]	; (8001448 <ST7735_FillRectangle+0xe8>)
 8001418:	f003 fe22 	bl	8005060 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	3b01      	subs	r3, #1
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f1      	bne.n	800140c <ST7735_FillRectangle+0xac>
    for(y = h; y > 0; y--) {
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e8      	bne.n	8001406 <ST7735_FillRectangle+0xa6>
        }
    }

    ST7735_Unselect();
 8001434:	f7ff fdde 	bl	8000ff4 <ST7735_Unselect>
 8001438:	e000      	b.n	800143c <ST7735_FillRectangle+0xdc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800143a:	bf00      	nop
}
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	40020800 	.word	0x40020800
 8001448:	20000308 	.word	0x20000308

0800144c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af02      	add	r7, sp, #8
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	2100      	movs	r1, #0
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff ff7d 	bl	8001360 <ST7735_FillRectangle>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b090      	sub	sp, #64	; 0x40
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	CalorieInfo person_cal_info;
	calorie_state = calorie_height_mode;
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <main+0x10c>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f001 fe2e 	bl	80030dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f88e 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f000 fa48 	bl	8001918 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001488:	f000 f8f2 	bl	8001670 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800148c:	f000 fa1a 	bl	80018c4 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001490:	f000 f91c 	bl	80016cc <MX_SPI3_Init>
  MX_TIM2_Init();
 8001494:	f000 f952 	bl	800173c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001498:	f000 f9c6 	bl	8001828 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim3);
 800149c:	4838      	ldr	r0, [pc, #224]	; (8001580 <main+0x110>)
 800149e:	f003 ffea 	bl	8005476 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014a2:	2100      	movs	r1, #0
 80014a4:	4837      	ldr	r0, [pc, #220]	; (8001584 <main+0x114>)
 80014a6:	f004 f83f 	bl	8005528 <HAL_TIM_PWM_Start>
  	htim2.Instance->CCR1 = 0;
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <main+0x114>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
	// put all custom initialization functions here no matter which states they belong to
	ST7735_Init();
 80014b2:	f7ff fe7b 	bl	80011ac <ST7735_Init>
	mma8452qInit(&hi2c1);
 80014b6:	4834      	ldr	r0, [pc, #208]	; (8001588 <main+0x118>)
 80014b8:	f7ff fd35 	bl	8000f26 <mma8452qInit>
	initCalorieMode(&person_cal_info);
 80014bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fdd5 	bl	8002070 <initCalorieMode>
	uint8_t send_weight_height_key = 0; // when equals 1, provides sending weight and height infos through bluetooth just once.
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	window_acc_y = createQueue(5);
 80014cc:	2005      	movs	r0, #5
 80014ce:	f000 fad0 	bl	8001a72 <createQueue>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <main+0x11c>)
 80014d6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (current_state) {
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <main+0x120>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d8fb      	bhi.n	80014d8 <main+0x68>
 80014e0:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <main+0x78>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	08001501 	.word	0x08001501
 80014ec:	08001507 	.word	0x08001507
 80014f0:	0800150d 	.word	0x0800150d
 80014f4:	08001519 	.word	0x08001519
 80014f8:	08001527 	.word	0x08001527
 80014fc:	0800156f 	.word	0x0800156f
			case welcome_mode:
				welcomeScreen();
 8001500:	f001 fcce 	bl	8002ea0 <welcomeScreen>
				break;
 8001504:	e039      	b.n	800157a <main+0x10a>
			case choose_mode:
				chooseModeScreen();
 8001506:	f001 f981 	bl	800280c <chooseModeScreen>
				break;
 800150a:	e036      	b.n	800157a <main+0x10a>
			case step_mode:
				stepScreen(step_num);
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <main+0x124>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f001 fc33 	bl	8002d7c <stepScreen>
				break;
 8001516:	e030      	b.n	800157a <main+0x10a>
			case calorie_mode:
				calorieScreen(&calorie_state, &person_cal_info);
 8001518:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800151c:	4619      	mov	r1, r3
 800151e:	4817      	ldr	r0, [pc, #92]	; (800157c <main+0x10c>)
 8001520:	f000 fd7a 	bl	8002018 <calorieScreen>
				break;
 8001524:	e029      	b.n	800157a <main+0x10a>
			case main_mode:
				if (!send_weight_height_key) {
 8001526:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800152a:	2b00      	cmp	r3, #0
 800152c:	d119      	bne.n	8001562 <main+0xf2>
					char weight_height_info[50] = { 0 };
 800152e:	463b      	mov	r3, r7
 8001530:	2232      	movs	r2, #50	; 0x32
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f005 fb15 	bl	8006b64 <memset>
					sprintf(weight_height_info, " %d %d \r\n", person_cal_info.weight, person_cal_info.height);
 800153a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800153e:	461a      	mov	r2, r3
 8001540:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001544:	4638      	mov	r0, r7
 8001546:	4914      	ldr	r1, [pc, #80]	; (8001598 <main+0x128>)
 8001548:	f006 f836 	bl	80075b8 <siprintf>
					HAL_UART_Transmit(&huart6, (uint8_t *)weight_height_info, sizeof(weight_height_info), 100);
 800154c:	4639      	mov	r1, r7
 800154e:	2364      	movs	r3, #100	; 0x64
 8001550:	2232      	movs	r2, #50	; 0x32
 8001552:	4812      	ldr	r0, [pc, #72]	; (800159c <main+0x12c>)
 8001554:	f004 fe6d 	bl	8006232 <HAL_UART_Transmit>
					++send_weight_height_key;
 8001558:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800155c:	3301      	adds	r3, #1
 800155e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
				mainScreen(&person_cal_info);
 8001562:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001566:	4618      	mov	r0, r3
 8001568:	f001 faa0 	bl	8002aac <mainScreen>
				break;
 800156c:	e005      	b.n	800157a <main+0x10a>
			case final_mode:
				finalModeScreen(&person_cal_info);
 800156e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001572:	4618      	mov	r0, r3
 8001574:	f001 f9ac 	bl	80028d0 <finalModeScreen>
				break;
 8001578:	bf00      	nop
		switch (current_state) {
 800157a:	e7ad      	b.n	80014d8 <main+0x68>
 800157c:	2000026c 	.word	0x2000026c
 8001580:	200002c4 	.word	0x200002c4
 8001584:	200003a4 	.word	0x200003a4
 8001588:	20000270 	.word	0x20000270
 800158c:	200003a0 	.word	0x200003a0
 8001590:	20000254 	.word	0x20000254
 8001594:	20000014 	.word	0x20000014
 8001598:	08008bf8 	.word	0x08008bf8
 800159c:	20000360 	.word	0x20000360

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	; 0x50
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	2230      	movs	r2, #48	; 0x30
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 fad8 	bl	8006b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <SystemClock_Config+0xc8>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <SystemClock_Config+0xc8>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <SystemClock_Config+0xc8>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <SystemClock_Config+0xcc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a20      	ldr	r2, [pc, #128]	; (800166c <SystemClock_Config+0xcc>)
 80015ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <SystemClock_Config+0xcc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015fc:	2301      	movs	r3, #1
 80015fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001606:	2302      	movs	r3, #2
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001610:	2308      	movs	r3, #8
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001618:	2302      	movs	r3, #2
 800161a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800161c:	2304      	movs	r3, #4
 800161e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4618      	mov	r0, r3
 8001626:	f003 f855 	bl	80046d4 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001630:	f000 fa18 	bl	8001a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	2302      	movs	r3, #2
 800163a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f003 fab0 	bl	8004bb4 <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800165a:	f000 fa03 	bl	8001a64 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	3750      	adds	r7, #80	; 0x50
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000

08001670 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <MX_I2C1_Init+0x54>)
 8001678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_I2C1_Init+0x50>)
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_I2C1_Init+0x58>)
 800167e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_I2C1_Init+0x50>)
 800168e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_I2C1_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016ae:	f002 f86f 	bl	8003790 <HAL_I2C_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b8:	f000 f9d4 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000270 	.word	0x20000270
 80016c4:	40005400 	.word	0x40005400
 80016c8:	000186a0 	.word	0x000186a0

080016cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_SPI3_Init+0x68>)
 80016d2:	4a19      	ldr	r2, [pc, #100]	; (8001738 <MX_SPI3_Init+0x6c>)
 80016d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <MX_SPI3_Init+0x68>)
 80016d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_SPI3_Init+0x68>)
 80016e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016e4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MX_SPI3_Init+0x68>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_SPI3_Init+0x68>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_SPI3_Init+0x68>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_SPI3_Init+0x68>)
 80016fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_SPI3_Init+0x68>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <MX_SPI3_Init+0x68>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_SPI3_Init+0x68>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <MX_SPI3_Init+0x68>)
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_SPI3_Init+0x68>)
 800171a:	220a      	movs	r2, #10
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_SPI3_Init+0x68>)
 8001720:	f003 fc3a 	bl	8004f98 <HAL_SPI_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800172a:	f000 f99b 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000308 	.word	0x20000308
 8001738:	40003c00 	.word	0x40003c00

0800173c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08e      	sub	sp, #56	; 0x38
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
 8001768:	615a      	str	r2, [r3, #20]
 800176a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <MX_TIM2_Init+0xe8>)
 800176e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 385-1;
 8001774:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <MX_TIM2_Init+0xe8>)
 8001776:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800177a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <MX_TIM2_Init+0xe8>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 8001782:	4b28      	ldr	r3, [pc, #160]	; (8001824 <MX_TIM2_Init+0xe8>)
 8001784:	22fe      	movs	r2, #254	; 0xfe
 8001786:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <MX_TIM2_Init+0xe8>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <MX_TIM2_Init+0xe8>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001794:	4823      	ldr	r0, [pc, #140]	; (8001824 <MX_TIM2_Init+0xe8>)
 8001796:	f003 fe43 	bl	8005420 <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017a0:	f000 f960 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ae:	4619      	mov	r1, r3
 80017b0:	481c      	ldr	r0, [pc, #112]	; (8001824 <MX_TIM2_Init+0xe8>)
 80017b2:	f004 f8b9 	bl	8005928 <HAL_TIM_ConfigClockSource>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017bc:	f000 f952 	bl	8001a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017c0:	4818      	ldr	r0, [pc, #96]	; (8001824 <MX_TIM2_Init+0xe8>)
 80017c2:	f003 fe7c 	bl	80054be <HAL_TIM_PWM_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017cc:	f000 f94a 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d8:	f107 0320 	add.w	r3, r7, #32
 80017dc:	4619      	mov	r1, r3
 80017de:	4811      	ldr	r0, [pc, #68]	; (8001824 <MX_TIM2_Init+0xe8>)
 80017e0:	f004 fc58 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017ea:	f000 f93b 	bl	8001a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ee:	2360      	movs	r3, #96	; 0x60
 80017f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2200      	movs	r2, #0
 8001802:	4619      	mov	r1, r3
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <MX_TIM2_Init+0xe8>)
 8001806:	f003 ffc9 	bl	800579c <HAL_TIM_PWM_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001810:	f000 f928 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <MX_TIM2_Init+0xe8>)
 8001816:	f000 faed 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 800181a:	bf00      	nop
 800181c:	3738      	adds	r7, #56	; 0x38
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200003a4 	.word	0x200003a4

08001828 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_TIM3_Init+0x94>)
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <MX_TIM3_Init+0x98>)
 8001848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25000;
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_TIM3_Init+0x94>)
 800184c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001850:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_TIM3_Init+0x94>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_TIM3_Init+0x94>)
 800185a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800185e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_TIM3_Init+0x94>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MX_TIM3_Init+0x94>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800186c:	4813      	ldr	r0, [pc, #76]	; (80018bc <MX_TIM3_Init+0x94>)
 800186e:	f003 fdd7 	bl	8005420 <HAL_TIM_Base_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001878:	f000 f8f4 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001880:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	4619      	mov	r1, r3
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <MX_TIM3_Init+0x94>)
 800188a:	f004 f84d 	bl	8005928 <HAL_TIM_ConfigClockSource>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001894:	f000 f8e6 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_TIM3_Init+0x94>)
 80018a6:	f004 fbf5 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018b0:	f000 f8d8 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002c4 	.word	0x200002c4
 80018c0:	40000400 	.word	0x40000400

080018c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART6_UART_Init+0x4c>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_USART6_UART_Init+0x50>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_USART6_UART_Init+0x4c>)
 80018d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART6_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART6_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART6_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART6_UART_Init+0x4c>)
 80018ea:	2208      	movs	r2, #8
 80018ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART6_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART6_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART6_UART_Init+0x4c>)
 80018fc:	f004 fc4c 	bl	8006198 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001906:	f000 f8ad 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000360 	.word	0x20000360
 8001914:	40011400 	.word	0x40011400

08001918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a47      	ldr	r2, [pc, #284]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b45      	ldr	r3, [pc, #276]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a40      	ldr	r2, [pc, #256]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b3e      	ldr	r3, [pc, #248]	; (8001a54 <MX_GPIO_Init+0x13c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <MX_GPIO_Init+0x13c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a39      	ldr	r2, [pc, #228]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a32      	ldr	r2, [pc, #200]	; (8001a54 <MX_GPIO_Init+0x13c>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <MX_GPIO_Init+0x13c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <MX_GPIO_Init+0x13c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a2b      	ldr	r2, [pc, #172]	; (8001a54 <MX_GPIO_Init+0x13c>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <MX_GPIO_Init+0x13c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_RST_GPIO_Port, DISP_RST_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c0:	4825      	ldr	r0, [pc, #148]	; (8001a58 <MX_GPIO_Init+0x140>)
 80019c2:	f001 fecb 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_A0_DC_GPIO_Port, DISP_A0_DC_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019cc:	4823      	ldr	r0, [pc, #140]	; (8001a5c <MX_GPIO_Init+0x144>)
 80019ce:	f001 fec5 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2104      	movs	r1, #4
 80019d6:	4822      	ldr	r0, [pc, #136]	; (8001a60 <MX_GPIO_Init+0x148>)
 80019d8:	f001 fec0 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019dc:	2307      	movs	r3, #7
 80019de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019e4:	2302      	movs	r3, #2
 80019e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	481b      	ldr	r0, [pc, #108]	; (8001a5c <MX_GPIO_Init+0x144>)
 80019f0:	f001 fd1a 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_RST_Pin */
  GPIO_InitStruct.Pin = DISP_RST_Pin;
 80019f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_RST_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4812      	ldr	r0, [pc, #72]	; (8001a58 <MX_GPIO_Init+0x140>)
 8001a0e:	f001 fd0b 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_A0_DC_Pin */
  GPIO_InitStruct.Pin = DISP_A0_DC_Pin;
 8001a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_A0_DC_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <MX_GPIO_Init+0x144>)
 8001a2c:	f001 fcfc 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8001a30:	2304      	movs	r3, #4
 8001a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <MX_GPIO_Init+0x148>)
 8001a48:	f001 fcee 	bl	8003428 <HAL_GPIO_Init>

}
 8001a4c:	bf00      	nop
 8001a4e:	3728      	adds	r7, #40	; 0x28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40020c00 	.word	0x40020c00

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <createQueue>:
#include "queue.h"

// function to create a queue
// of given capacity.
// It initializes size of queue as 0
Queue* createQueue(unsigned capacity) {
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b084      	sub	sp, #16
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
    struct Queue* queue = (struct Queue*)malloc(
 8001a7a:	2014      	movs	r0, #20
 8001a7c:	f005 f86a 	bl	8006b54 <malloc>
 8001a80:	4603      	mov	r3, r0
 8001a82:	60fb      	str	r3, [r7, #12]
        sizeof(struct Queue));
    queue->capacity = capacity;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	60da      	str	r2, [r3, #12]
    queue->front = queue->size = 0;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	601a      	str	r2, [r3, #0]

    // This is important, see the enqueue
    queue->rear = capacity - 1;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]
    queue->array = (int*)calloc(
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f005 f821 	bl	8006af0 <calloc>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
        queue->capacity, sizeof(int));

    return queue;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <isFull>:


// Queue is full when size becomes
// equal to the capacity
int isFull(Queue* queue) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	return (queue->size == queue->capacity);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	461a      	mov	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	bf0c      	ite	eq
 8001ad6:	2301      	moveq	r3, #1
 8001ad8:	2300      	movne	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <isEmpty>:


// Queue is empty when size is 0
int isEmpty(Queue* queue) {
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	return (queue->size == 0);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <dequeue>:


// Function to remove an item from queue.
// It changes front and size
int dequeue(struct Queue* queue) {
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffe8 	bl	8001ae8 <isEmpty>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <dequeue+0x1a>
        return INT_MIN;
 8001b1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b22:	e01b      	b.n	8001b5c <dequeue+0x52>
    int item = queue->array[queue->front];
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	461a      	mov	r2, r3
                   % queue->capacity;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b44:	fb03 f301 	mul.w	r3, r3, r1
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	461a      	mov	r2, r3
    queue->front = (queue->front + 1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	601a      	str	r2, [r3, #0]
    queue->size = queue->size - 1;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	609a      	str	r2, [r3, #8]
    return item;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <enqueue>:


// Function to add an item to the queue.
// It changes rear and size
void enqueue(Queue* queue, int item) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
    if (isFull(queue))
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ffa6 	bl	8001ac0 <isFull>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11b      	bne.n	8001bb2 <enqueue+0x4e>
        return;
    queue->rear = (queue->rear + 1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	461a      	mov	r2, r3
                  % queue->capacity;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b8a:	fb03 f301 	mul.w	r3, r3, r1
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	461a      	mov	r2, r3
    queue->rear = (queue->rear + 1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	605a      	str	r2, [r3, #4]
    queue->array[queue->rear] = item;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
    queue->size = queue->size + 1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	e000      	b.n	8001bb4 <enqueue+0x50>
        return;
 8001bb2:	bf00      	nop
    //printf("%d enqueued to queue\n", item);
}
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_MspInit+0x4c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <HAL_MspInit+0x4c>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_MspInit+0x4c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_MspInit+0x4c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_MspInit+0x4c>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_MspInit+0x4c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_I2C_MspInit+0x84>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d12c      	bne.n	8001c88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c50:	2312      	movs	r3, #18
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	480c      	ldr	r0, [pc, #48]	; (8001c98 <HAL_I2C_MspInit+0x8c>)
 8001c68:	f001 fbde 	bl	8003428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_I2C_MspInit+0x88>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c88:	bf00      	nop
 8001c8a:	3728      	adds	r7, #40	; 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40005400 	.word	0x40005400
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020400 	.word	0x40020400

08001c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_SPI_MspInit+0x84>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d12c      	bne.n	8001d18 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_SPI_MspInit+0x88>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_SPI_MspInit+0x88>)
 8001cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_SPI_MspInit+0x88>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_SPI_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <HAL_SPI_MspInit+0x88>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_SPI_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001cf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d08:	2306      	movs	r3, #6
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <HAL_SPI_MspInit+0x8c>)
 8001d14:	f001 fb88 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40003c00 	.word	0x40003c00
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020800 	.word	0x40020800

08001d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4c:	d10e      	bne.n	8001d6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d6a:	e038      	b.n	8001dde <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1e      	ldr	r2, [pc, #120]	; (8001dec <HAL_TIM_Base_MspInit+0xc0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d133      	bne.n	8001dde <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_TIM_Base_MspInit+0xbc>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4809      	ldr	r0, [pc, #36]	; (8001df0 <HAL_TIM_Base_MspInit+0xc4>)
 8001dca:	f001 fb2d 	bl	8003428 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	201d      	movs	r0, #29
 8001dd4:	f001 faf1 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dd8:	201d      	movs	r0, #29
 8001dda:	f001 fb0a 	bl	80033f2 <HAL_NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40020000 	.word	0x40020000

08001df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e14:	d11d      	bne.n	8001e52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_TIM_MspPostInit+0x68>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <HAL_TIM_MspPostInit+0x68>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_TIM_MspPostInit+0x68>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e32:	2301      	movs	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e42:	2301      	movs	r3, #1
 8001e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4804      	ldr	r0, [pc, #16]	; (8001e60 <HAL_TIM_MspPostInit+0x6c>)
 8001e4e:	f001 faeb 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e52:	bf00      	nop
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000

08001e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_UART_MspInit+0x84>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12c      	bne.n	8001ee0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e90:	f043 0320 	orr.w	r3, r3, #32
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ebe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <HAL_UART_MspInit+0x8c>)
 8001edc:	f001 faa4 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40011400 	.word	0x40011400
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f001 f91a 	bl	8003180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  if (current_state == main_mode) {
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <TIM3_IRQHandler+0x30>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d109      	bne.n	8001f70 <TIM3_IRQHandler+0x20>
	  current_step += 50;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <TIM3_IRQHandler+0x34>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3332      	adds	r3, #50	; 0x32
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <TIM3_IRQHandler+0x34>)
 8001f64:	6013      	str	r3, [r2, #0]
	  elapsed_time += 1;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <TIM3_IRQHandler+0x38>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <TIM3_IRQHandler+0x38>)
 8001f6e:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <TIM3_IRQHandler+0x3c>)
 8001f72:	f003 fb0b 	bl	800558c <HAL_TIM_IRQHandler>
  walk_permission = 1;
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <TIM3_IRQHandler+0x40>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000254 	.word	0x20000254
 8001f84:	20000010 	.word	0x20000010
 8001f88:	20000018 	.word	0x20000018
 8001f8c:	200002c4 	.word	0x200002c4
 8001f90:	2000001c 	.word	0x2000001c

08001f94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <_sbrk+0x50>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <_sbrk+0x16>
		heap_end = &end;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <_sbrk+0x50>)
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <_sbrk+0x54>)
 8001fa8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <_sbrk+0x50>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <_sbrk+0x50>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	466a      	mov	r2, sp
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d907      	bls.n	8001fce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fbe:	f004 fd9f 	bl	8006b00 <__errno>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	230c      	movs	r3, #12
 8001fc6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fcc:	e006      	b.n	8001fdc <_sbrk+0x48>
	}

	heap_end += incr;
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <_sbrk+0x50>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a03      	ldr	r2, [pc, #12]	; (8001fe4 <_sbrk+0x50>)
 8001fd8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000260 	.word	0x20000260
 8001fe8:	200003f0 	.word	0x200003f0

08001fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <SystemInit+0x28>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <SystemInit+0x28>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SystemInit+0x28>)
 8002002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002006:	609a      	str	r2, [r3, #8]
#endif
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <calorieScreen>:
uint8_t limit_vals_6[10][2] = {{45,28}, {55,33}, {64,38}, {73,44}, {82,49},
							 {91,55}, {100,60}, {114,69}, {125,75}, {136,82}};



void calorieScreen(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	switch (*calorie_mode) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d81d      	bhi.n	8002066 <calorieScreen+0x4e>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <calorieScreen+0x18>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	08002041 	.word	0x08002041
 8002034:	0800204b 	.word	0x0800204b
 8002038:	08002055 	.word	0x08002055
 800203c:	0800205f 	.word	0x0800205f
		case calorie_height_mode:
			calorieHeightMode(calorie_mode, person_cal_info);
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f828 	bl	8002098 <calorieHeightMode>
			break;
 8002048:	e00d      	b.n	8002066 <calorieScreen+0x4e>
		case calorie_weight_mode:
			calorieWeightMode(calorie_mode, person_cal_info);
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f8fd 	bl	800224c <calorieWeightMode>
			break;
 8002052:	e008      	b.n	8002066 <calorieScreen+0x4e>
		case calorie_amount_mode:
			calorieAmountMode(calorie_mode, person_cal_info);
 8002054:	6839      	ldr	r1, [r7, #0]
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f9d2 	bl	8002400 <calorieAmountMode>
			break;
 800205c:	e003      	b.n	8002066 <calorieScreen+0x4e>
		case calorie_step_mode:
			calorieStepMode(person_cal_info);
 800205e:	6838      	ldr	r0, [r7, #0]
 8002060:	f000 faa4 	bl	80025ac <calorieStepMode>
			break;
 8002064:	bf00      	nop
	}
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop

08002070 <initCalorieMode>:


void initCalorieMode(CalorieInfo* person_cal_info) {
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	person_cal_info->height = 160;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	22a0      	movs	r2, #160	; 0xa0
 800207c:	701a      	strb	r2, [r3, #0]
	person_cal_info->weight = 60;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223c      	movs	r2, #60	; 0x3c
 8002082:	705a      	strb	r2, [r3, #1]
	person_cal_info->calorie_amount = 1000;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800208a:	805a      	strh	r2, [r3, #2]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <calorieHeightMode>:


void calorieHeightMode(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b09c      	sub	sp, #112	; 0x70
 800209c:	af04      	add	r7, sp, #16
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) && (person_cal_info->height < 250)) {
 80020a2:	2101      	movs	r1, #1
 80020a4:	4863      	ldr	r0, [pc, #396]	; (8002234 <calorieHeightMode+0x19c>)
 80020a6:	f001 fb41 	bl	800372c <HAL_GPIO_ReadPin>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d016      	beq.n	80020de <calorieHeightMode+0x46>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2bf9      	cmp	r3, #249	; 0xf9
 80020b6:	d812      	bhi.n	80020de <calorieHeightMode+0x46>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 80020b8:	bf00      	nop
 80020ba:	2101      	movs	r1, #1
 80020bc:	485d      	ldr	r0, [pc, #372]	; (8002234 <calorieHeightMode+0x19c>)
 80020be:	f001 fb35 	bl	800372c <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f8      	bne.n	80020ba <calorieHeightMode+0x22>
			;
		HAL_Delay(300);
 80020c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020cc:	f001 f878 	bl	80031c0 <HAL_Delay>
		person_cal_info->height += 1;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e033      	b.n	8002146 <calorieHeightMode+0xae>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 80020de:	2102      	movs	r1, #2
 80020e0:	4854      	ldr	r0, [pc, #336]	; (8002234 <calorieHeightMode+0x19c>)
 80020e2:	f001 fb23 	bl	800372c <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00f      	beq.n	800210c <calorieHeightMode+0x74>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 80020ec:	bf00      	nop
 80020ee:	2104      	movs	r1, #4
 80020f0:	4850      	ldr	r0, [pc, #320]	; (8002234 <calorieHeightMode+0x19c>)
 80020f2:	f001 fb1b 	bl	800372c <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f8      	bne.n	80020ee <calorieHeightMode+0x56>
				;
			HAL_Delay(300);
 80020fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002100:	f001 f85e 	bl	80031c0 <HAL_Delay>
			*calorie_mode = calorie_weight_mode;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e090      	b.n	800222e <calorieHeightMode+0x196>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && (person_cal_info->height > 100)) {
 800210c:	2104      	movs	r1, #4
 800210e:	4849      	ldr	r0, [pc, #292]	; (8002234 <calorieHeightMode+0x19c>)
 8002110:	f001 fb0c 	bl	800372c <HAL_GPIO_ReadPin>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d015      	beq.n	8002146 <calorieHeightMode+0xae>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d911      	bls.n	8002146 <calorieHeightMode+0xae>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8002122:	bf00      	nop
 8002124:	2104      	movs	r1, #4
 8002126:	4843      	ldr	r0, [pc, #268]	; (8002234 <calorieHeightMode+0x19c>)
 8002128:	f001 fb00 	bl	800372c <HAL_GPIO_ReadPin>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f8      	bne.n	8002124 <calorieHeightMode+0x8c>
			;
		HAL_Delay(300);
 8002132:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002136:	f001 f843 	bl	80031c0 <HAL_Delay>
		person_cal_info->height -= 1;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	3b01      	subs	r3, #1
 8002140:	b2da      	uxtb	r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	701a      	strb	r2, [r3, #0]
	}

	ST7735_WriteString(0, 20, "(L) : - \\/ + : (R)", TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8002146:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <calorieHeightMode+0x1a0>)
 8002148:	2200      	movs	r2, #0
 800214a:	9202      	str	r2, [sp, #8]
 800214c:	221f      	movs	r2, #31
 800214e:	9201      	str	r2, [sp, #4]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	9200      	str	r2, [sp, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a39      	ldr	r2, [pc, #228]	; (800223c <calorieHeightMode+0x1a4>)
 8002158:	2114      	movs	r1, #20
 800215a:	2000      	movs	r0, #0
 800215c:	f7ff f8b6 	bl	80012cc <ST7735_WriteString>

	char calorie_text1[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
 8002170:	615a      	str	r2, [r3, #20]
 8002172:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text1, "   Height: %d   ", person_cal_info->height);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800217e:	4930      	ldr	r1, [pc, #192]	; (8002240 <calorieHeightMode+0x1a8>)
 8002180:	4618      	mov	r0, r3
 8002182:	f005 fa19 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 50, calorie_text1, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, TEXT_BACKGROUND_COLOR_CLR_MODE);
 8002186:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <calorieHeightMode+0x1a0>)
 8002188:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800218c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002190:	9202      	str	r2, [sp, #8]
 8002192:	221f      	movs	r2, #31
 8002194:	9201      	str	r2, [sp, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	9200      	str	r2, [sp, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	460a      	mov	r2, r1
 800219e:	2132      	movs	r1, #50	; 0x32
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7ff f893 	bl	80012cc <ST7735_WriteString>

	char calorie_text2[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 80021a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]
 80021b6:	615a      	str	r2, [r3, #20]
 80021b8:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text2, "    Weight: %d     ", person_cal_info->weight);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	461a      	mov	r2, r3
 80021c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c4:	491f      	ldr	r1, [pc, #124]	; (8002244 <calorieHeightMode+0x1ac>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	f005 f9f6 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 80, calorie_text2, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <calorieHeightMode+0x1a0>)
 80021ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021d2:	2200      	movs	r2, #0
 80021d4:	9202      	str	r2, [sp, #8]
 80021d6:	221f      	movs	r2, #31
 80021d8:	9201      	str	r2, [sp, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	9200      	str	r2, [sp, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	460a      	mov	r2, r1
 80021e2:	2150      	movs	r1, #80	; 0x50
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff f871 	bl	80012cc <ST7735_WriteString>

	char calorie_text3[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	611a      	str	r2, [r3, #16]
 80021fa:	615a      	str	r2, [r3, #20]
 80021fc:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text3, "  Calorie: %d   ", person_cal_info->calorie_amount);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	885b      	ldrh	r3, [r3, #2]
 8002202:	461a      	mov	r2, r3
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	490f      	ldr	r1, [pc, #60]	; (8002248 <calorieHeightMode+0x1b0>)
 800220a:	4618      	mov	r0, r3
 800220c:	f005 f9d4 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 110, calorie_text3, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <calorieHeightMode+0x1a0>)
 8002212:	f107 010c 	add.w	r1, r7, #12
 8002216:	2200      	movs	r2, #0
 8002218:	9202      	str	r2, [sp, #8]
 800221a:	221f      	movs	r2, #31
 800221c:	9201      	str	r2, [sp, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	9200      	str	r2, [sp, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	460a      	mov	r2, r1
 8002226:	216e      	movs	r1, #110	; 0x6e
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff f84f 	bl	80012cc <ST7735_WriteString>

}
 800222e:	3760      	adds	r7, #96	; 0x60
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40020800 	.word	0x40020800
 8002238:	20000000 	.word	0x20000000
 800223c:	08008c04 	.word	0x08008c04
 8002240:	08008c18 	.word	0x08008c18
 8002244:	08008c2c 	.word	0x08008c2c
 8002248:	08008c40 	.word	0x08008c40

0800224c <calorieWeightMode>:


void calorieWeightMode(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b09c      	sub	sp, #112	; 0x70
 8002250:	af04      	add	r7, sp, #16
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) && (person_cal_info->weight < 200)) {
 8002256:	2101      	movs	r1, #1
 8002258:	4863      	ldr	r0, [pc, #396]	; (80023e8 <calorieWeightMode+0x19c>)
 800225a:	f001 fa67 	bl	800372c <HAL_GPIO_ReadPin>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d016      	beq.n	8002292 <calorieWeightMode+0x46>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	2bc7      	cmp	r3, #199	; 0xc7
 800226a:	d812      	bhi.n	8002292 <calorieWeightMode+0x46>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 800226c:	bf00      	nop
 800226e:	2101      	movs	r1, #1
 8002270:	485d      	ldr	r0, [pc, #372]	; (80023e8 <calorieWeightMode+0x19c>)
 8002272:	f001 fa5b 	bl	800372c <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f8      	bne.n	800226e <calorieWeightMode+0x22>
			;
		HAL_Delay(300);
 800227c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002280:	f000 ff9e 	bl	80031c0 <HAL_Delay>
		person_cal_info->weight += 1;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	785b      	ldrb	r3, [r3, #1]
 8002288:	3301      	adds	r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	705a      	strb	r2, [r3, #1]
 8002290:	e033      	b.n	80022fa <calorieWeightMode+0xae>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8002292:	2102      	movs	r1, #2
 8002294:	4854      	ldr	r0, [pc, #336]	; (80023e8 <calorieWeightMode+0x19c>)
 8002296:	f001 fa49 	bl	800372c <HAL_GPIO_ReadPin>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00f      	beq.n	80022c0 <calorieWeightMode+0x74>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 80022a0:	bf00      	nop
 80022a2:	2104      	movs	r1, #4
 80022a4:	4850      	ldr	r0, [pc, #320]	; (80023e8 <calorieWeightMode+0x19c>)
 80022a6:	f001 fa41 	bl	800372c <HAL_GPIO_ReadPin>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f8      	bne.n	80022a2 <calorieWeightMode+0x56>
				;
			HAL_Delay(300);
 80022b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022b4:	f000 ff84 	bl	80031c0 <HAL_Delay>
			*calorie_mode = calorie_amount_mode;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e090      	b.n	80023e2 <calorieWeightMode+0x196>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && (person_cal_info->weight > 30)) {
 80022c0:	2104      	movs	r1, #4
 80022c2:	4849      	ldr	r0, [pc, #292]	; (80023e8 <calorieWeightMode+0x19c>)
 80022c4:	f001 fa32 	bl	800372c <HAL_GPIO_ReadPin>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d015      	beq.n	80022fa <calorieWeightMode+0xae>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	785b      	ldrb	r3, [r3, #1]
 80022d2:	2b1e      	cmp	r3, #30
 80022d4:	d911      	bls.n	80022fa <calorieWeightMode+0xae>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 80022d6:	bf00      	nop
 80022d8:	2104      	movs	r1, #4
 80022da:	4843      	ldr	r0, [pc, #268]	; (80023e8 <calorieWeightMode+0x19c>)
 80022dc:	f001 fa26 	bl	800372c <HAL_GPIO_ReadPin>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f8      	bne.n	80022d8 <calorieWeightMode+0x8c>
			;
		HAL_Delay(300);
 80022e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022ea:	f000 ff69 	bl	80031c0 <HAL_Delay>
		person_cal_info->weight -= 1;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	705a      	strb	r2, [r3, #1]
	}

	ST7735_WriteString(0, 20, "(L) : - \\/ + : (R)", TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 80022fa:	4b3c      	ldr	r3, [pc, #240]	; (80023ec <calorieWeightMode+0x1a0>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	9202      	str	r2, [sp, #8]
 8002300:	221f      	movs	r2, #31
 8002302:	9201      	str	r2, [sp, #4]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	9200      	str	r2, [sp, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a39      	ldr	r2, [pc, #228]	; (80023f0 <calorieWeightMode+0x1a4>)
 800230c:	2114      	movs	r1, #20
 800230e:	2000      	movs	r0, #0
 8002310:	f7fe ffdc 	bl	80012cc <ST7735_WriteString>

	char calorie_text1[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002314:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
 8002324:	615a      	str	r2, [r3, #20]
 8002326:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text1, "   Height: %d   ", person_cal_info->height);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002332:	4930      	ldr	r1, [pc, #192]	; (80023f4 <calorieWeightMode+0x1a8>)
 8002334:	4618      	mov	r0, r3
 8002336:	f005 f93f 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 50, calorie_text1, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <calorieWeightMode+0x1a0>)
 800233c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002340:	2200      	movs	r2, #0
 8002342:	9202      	str	r2, [sp, #8]
 8002344:	221f      	movs	r2, #31
 8002346:	9201      	str	r2, [sp, #4]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	9200      	str	r2, [sp, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	460a      	mov	r2, r1
 8002350:	2132      	movs	r1, #50	; 0x32
 8002352:	2000      	movs	r0, #0
 8002354:	f7fe ffba 	bl	80012cc <ST7735_WriteString>

	char calorie_text2[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
 8002368:	615a      	str	r2, [r3, #20]
 800236a:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text2, "    Weight: %d     ", person_cal_info->weight);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	785b      	ldrb	r3, [r3, #1]
 8002370:	461a      	mov	r2, r3
 8002372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002376:	4920      	ldr	r1, [pc, #128]	; (80023f8 <calorieWeightMode+0x1ac>)
 8002378:	4618      	mov	r0, r3
 800237a:	f005 f91d 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 80, calorie_text2, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, TEXT_BACKGROUND_COLOR_CLR_MODE);
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <calorieWeightMode+0x1a0>)
 8002380:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002388:	9202      	str	r2, [sp, #8]
 800238a:	221f      	movs	r2, #31
 800238c:	9201      	str	r2, [sp, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	9200      	str	r2, [sp, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	460a      	mov	r2, r1
 8002396:	2150      	movs	r1, #80	; 0x50
 8002398:	2000      	movs	r0, #0
 800239a:	f7fe ff97 	bl	80012cc <ST7735_WriteString>

	char calorie_text3[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]
 80023ae:	615a      	str	r2, [r3, #20]
 80023b0:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text3, "  Calorie: %d   ", person_cal_info->calorie_amount);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	885b      	ldrh	r3, [r3, #2]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	490f      	ldr	r1, [pc, #60]	; (80023fc <calorieWeightMode+0x1b0>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f005 f8fa 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 110, calorie_text3, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <calorieWeightMode+0x1a0>)
 80023c6:	f107 010c 	add.w	r1, r7, #12
 80023ca:	2200      	movs	r2, #0
 80023cc:	9202      	str	r2, [sp, #8]
 80023ce:	221f      	movs	r2, #31
 80023d0:	9201      	str	r2, [sp, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	9200      	str	r2, [sp, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	460a      	mov	r2, r1
 80023da:	216e      	movs	r1, #110	; 0x6e
 80023dc:	2000      	movs	r0, #0
 80023de:	f7fe ff75 	bl	80012cc <ST7735_WriteString>

}
 80023e2:	3760      	adds	r7, #96	; 0x60
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40020800 	.word	0x40020800
 80023ec:	20000000 	.word	0x20000000
 80023f0:	08008c04 	.word	0x08008c04
 80023f4:	08008c18 	.word	0x08008c18
 80023f8:	08008c2c 	.word	0x08008c2c
 80023fc:	08008c40 	.word	0x08008c40

08002400 <calorieAmountMode>:


void calorieAmountMode(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b09c      	sub	sp, #112	; 0x70
 8002404:	af04      	add	r7, sp, #16
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 800240a:	2101      	movs	r1, #1
 800240c:	4861      	ldr	r0, [pc, #388]	; (8002594 <calorieAmountMode+0x194>)
 800240e:	f001 f98d 	bl	800372c <HAL_GPIO_ReadPin>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d012      	beq.n	800243e <calorieAmountMode+0x3e>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8002418:	bf00      	nop
 800241a:	2101      	movs	r1, #1
 800241c:	485d      	ldr	r0, [pc, #372]	; (8002594 <calorieAmountMode+0x194>)
 800241e:	f001 f985 	bl	800372c <HAL_GPIO_ReadPin>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f8      	bne.n	800241a <calorieAmountMode+0x1a>
			;
		HAL_Delay(300);
 8002428:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800242c:	f000 fec8 	bl	80031c0 <HAL_Delay>
		person_cal_info->calorie_amount += 100;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	885b      	ldrh	r3, [r3, #2]
 8002434:	3364      	adds	r3, #100	; 0x64
 8002436:	b29a      	uxth	r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	805a      	strh	r2, [r3, #2]
 800243c:	e033      	b.n	80024a6 <calorieAmountMode+0xa6>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 800243e:	2102      	movs	r1, #2
 8002440:	4854      	ldr	r0, [pc, #336]	; (8002594 <calorieAmountMode+0x194>)
 8002442:	f001 f973 	bl	800372c <HAL_GPIO_ReadPin>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00f      	beq.n	800246c <calorieAmountMode+0x6c>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 800244c:	bf00      	nop
 800244e:	2104      	movs	r1, #4
 8002450:	4850      	ldr	r0, [pc, #320]	; (8002594 <calorieAmountMode+0x194>)
 8002452:	f001 f96b 	bl	800372c <HAL_GPIO_ReadPin>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f8      	bne.n	800244e <calorieAmountMode+0x4e>
				;
			HAL_Delay(300);
 800245c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002460:	f000 feae 	bl	80031c0 <HAL_Delay>
			*calorie_mode = calorie_step_mode;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2203      	movs	r2, #3
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	e090      	b.n	800258e <calorieAmountMode+0x18e>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && (person_cal_info->calorie_amount > 100)) {
 800246c:	2104      	movs	r1, #4
 800246e:	4849      	ldr	r0, [pc, #292]	; (8002594 <calorieAmountMode+0x194>)
 8002470:	f001 f95c 	bl	800372c <HAL_GPIO_ReadPin>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d015      	beq.n	80024a6 <calorieAmountMode+0xa6>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	885b      	ldrh	r3, [r3, #2]
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d911      	bls.n	80024a6 <calorieAmountMode+0xa6>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8002482:	bf00      	nop
 8002484:	2104      	movs	r1, #4
 8002486:	4843      	ldr	r0, [pc, #268]	; (8002594 <calorieAmountMode+0x194>)
 8002488:	f001 f950 	bl	800372c <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f8      	bne.n	8002484 <calorieAmountMode+0x84>
			;
		HAL_Delay(300);
 8002492:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002496:	f000 fe93 	bl	80031c0 <HAL_Delay>
		person_cal_info->calorie_amount -= 100;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	885b      	ldrh	r3, [r3, #2]
 800249e:	3b64      	subs	r3, #100	; 0x64
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	805a      	strh	r2, [r3, #2]
	}

	ST7735_WriteString(0, 20, "(L) : - \\/ + : (R)", TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <calorieAmountMode+0x198>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	9202      	str	r2, [sp, #8]
 80024ac:	221f      	movs	r2, #31
 80024ae:	9201      	str	r2, [sp, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	9200      	str	r2, [sp, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a39      	ldr	r2, [pc, #228]	; (800259c <calorieAmountMode+0x19c>)
 80024b8:	2114      	movs	r1, #20
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe ff06 	bl	80012cc <ST7735_WriteString>

	char calorie_text1[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 80024c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
 80024d0:	615a      	str	r2, [r3, #20]
 80024d2:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text1, "   Height: %d   ", person_cal_info->height);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024de:	4930      	ldr	r1, [pc, #192]	; (80025a0 <calorieAmountMode+0x1a0>)
 80024e0:	4618      	mov	r0, r3
 80024e2:	f005 f869 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 50, calorie_text1, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 80024e6:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <calorieAmountMode+0x198>)
 80024e8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80024ec:	2200      	movs	r2, #0
 80024ee:	9202      	str	r2, [sp, #8]
 80024f0:	221f      	movs	r2, #31
 80024f2:	9201      	str	r2, [sp, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	9200      	str	r2, [sp, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	460a      	mov	r2, r1
 80024fc:	2132      	movs	r1, #50	; 0x32
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe fee4 	bl	80012cc <ST7735_WriteString>

	char calorie_text2[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	615a      	str	r2, [r3, #20]
 8002516:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text2, "    Weight: %d     ", person_cal_info->weight);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	461a      	mov	r2, r3
 800251e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002522:	4920      	ldr	r1, [pc, #128]	; (80025a4 <calorieAmountMode+0x1a4>)
 8002524:	4618      	mov	r0, r3
 8002526:	f005 f847 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 80, calorie_text2, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <calorieAmountMode+0x198>)
 800252c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002530:	2200      	movs	r2, #0
 8002532:	9202      	str	r2, [sp, #8]
 8002534:	221f      	movs	r2, #31
 8002536:	9201      	str	r2, [sp, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	9200      	str	r2, [sp, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	460a      	mov	r2, r1
 8002540:	2150      	movs	r1, #80	; 0x50
 8002542:	2000      	movs	r0, #0
 8002544:	f7fe fec2 	bl	80012cc <ST7735_WriteString>

	char calorie_text3[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
 8002558:	615a      	str	r2, [r3, #20]
 800255a:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text3, "  Calorie: %d   ", person_cal_info->calorie_amount);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	885b      	ldrh	r3, [r3, #2]
 8002560:	461a      	mov	r2, r3
 8002562:	f107 030c 	add.w	r3, r7, #12
 8002566:	4910      	ldr	r1, [pc, #64]	; (80025a8 <calorieAmountMode+0x1a8>)
 8002568:	4618      	mov	r0, r3
 800256a:	f005 f825 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 110, calorie_text3, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, TEXT_BACKGROUND_COLOR_CLR_MODE);
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <calorieAmountMode+0x198>)
 8002570:	f107 010c 	add.w	r1, r7, #12
 8002574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002578:	9202      	str	r2, [sp, #8]
 800257a:	221f      	movs	r2, #31
 800257c:	9201      	str	r2, [sp, #4]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	9200      	str	r2, [sp, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	460a      	mov	r2, r1
 8002586:	216e      	movs	r1, #110	; 0x6e
 8002588:	2000      	movs	r0, #0
 800258a:	f7fe fe9f 	bl	80012cc <ST7735_WriteString>

}
 800258e:	3760      	adds	r7, #96	; 0x60
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40020800 	.word	0x40020800
 8002598:	20000000 	.word	0x20000000
 800259c:	08008c04 	.word	0x08008c04
 80025a0:	08008c18 	.word	0x08008c18
 80025a4:	08008c2c 	.word	0x08008c2c
 80025a8:	08008c40 	.word	0x08008c40

080025ac <calorieStepMode>:


void calorieStepMode(CalorieInfo* person_cal_info) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	if (person_cal_info->height <= 165) {
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2ba5      	cmp	r3, #165	; 0xa5
 80025ba:	d804      	bhi.n	80025c6 <calorieStepMode+0x1a>
		//a second update of codes and MET values. Med Sci Sports Exerc.
		//2011;43(8):1575-81. doi:10.1249/mss.0b013e31821ece12
		// simplified version of the article above(for three different height ranges, the amount of
		// calorie burned calculated only based on 1000 steps).
		//limit_vals[x][0] : weight, limit_vals[x][1] : amount of calories / 1000 steps
		calculateStepNum(person_cal_info, limit_vals_5_5);
 80025bc:	490f      	ldr	r1, [pc, #60]	; (80025fc <calorieStepMode+0x50>)
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f824 	bl	800260c <calculateStepNum>
 80025c4:	e010      	b.n	80025e8 <calorieStepMode+0x3c>
	}
	else if ((person_cal_info->height > 165) && (person_cal_info->height < 180)) {
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2ba5      	cmp	r3, #165	; 0xa5
 80025cc:	d908      	bls.n	80025e0 <calorieStepMode+0x34>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2bb3      	cmp	r3, #179	; 0xb3
 80025d4:	d804      	bhi.n	80025e0 <calorieStepMode+0x34>
		calculateStepNum(person_cal_info, limit_vals_5_6_5_11);
 80025d6:	490a      	ldr	r1, [pc, #40]	; (8002600 <calorieStepMode+0x54>)
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f817 	bl	800260c <calculateStepNum>
 80025de:	e003      	b.n	80025e8 <calorieStepMode+0x3c>
	}
	else { // person_cal_info->height >= 180
		calculateStepNum(person_cal_info, limit_vals_6);
 80025e0:	4908      	ldr	r1, [pc, #32]	; (8002604 <calorieStepMode+0x58>)
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f812 	bl	800260c <calculateStepNum>
	}
	current_state = main_mode;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <calorieStepMode+0x5c>)
 80025ea:	2204      	movs	r2, #4
 80025ec:	701a      	strb	r2, [r3, #0]
	ST7735_FillScreen(BACKGROUND_COLOR_STP_MODE);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe ff2c 	bl	800144c <ST7735_FillScreen>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000024 	.word	0x20000024
 8002600:	20000038 	.word	0x20000038
 8002604:	2000004c 	.word	0x2000004c
 8002608:	20000254 	.word	0x20000254

0800260c <calculateStepNum>:


void calculateStepNum(CalorieInfo* person_cal_info, uint8_t limit_vals[10][2]) {
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
	if (person_cal_info->weight <= 45) {
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	785b      	ldrb	r3, [r3, #1]
 800261a:	2b2d      	cmp	r3, #45	; 0x2d
 800261c:	d80e      	bhi.n	800263c <calculateStepNum+0x30>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[0][1];
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	885b      	ldrh	r3, [r3, #2]
 8002622:	461a      	mov	r2, r3
 8002624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002628:	fb03 f302 	mul.w	r3, r3, r2
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	7852      	ldrb	r2, [r2, #1]
 8002630:	fb93 f3f2 	sdiv	r3, r3, r2
 8002634:	461a      	mov	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	e0db      	b.n	80027f4 <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[0][0]) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	785a      	ldrb	r2, [r3, #1]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d80e      	bhi.n	8002666 <calculateStepNum+0x5a>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[0][1];
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	885b      	ldrh	r3, [r3, #2]
 800264c:	461a      	mov	r2, r3
 800264e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002652:	fb03 f302 	mul.w	r3, r3, r2
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	7852      	ldrb	r2, [r2, #1]
 800265a:	fb93 f3f2 	sdiv	r3, r3, r2
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	e0c6      	b.n	80027f4 <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[1][0]) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	785a      	ldrb	r2, [r3, #1]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	3302      	adds	r3, #2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d80f      	bhi.n	8002694 <calculateStepNum+0x88>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[1][1];
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	885b      	ldrh	r3, [r3, #2]
 8002678:	461a      	mov	r2, r3
 800267a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267e:	fb03 f302 	mul.w	r3, r3, r2
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	3202      	adds	r2, #2
 8002686:	7852      	ldrb	r2, [r2, #1]
 8002688:	fb93 f3f2 	sdiv	r3, r3, r2
 800268c:	461a      	mov	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	e0af      	b.n	80027f4 <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[2][0]) {
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	785a      	ldrb	r2, [r3, #1]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	3304      	adds	r3, #4
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d80f      	bhi.n	80026c2 <calculateStepNum+0xb6>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[2][1];
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	885b      	ldrh	r3, [r3, #2]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ac:	fb03 f302 	mul.w	r3, r3, r2
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	3204      	adds	r2, #4
 80026b4:	7852      	ldrb	r2, [r2, #1]
 80026b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80026ba:	461a      	mov	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	e098      	b.n	80027f4 <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[3][0]) {
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	785a      	ldrb	r2, [r3, #1]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	3306      	adds	r3, #6
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d80f      	bhi.n	80026f0 <calculateStepNum+0xe4>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[3][1];
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	885b      	ldrh	r3, [r3, #2]
 80026d4:	461a      	mov	r2, r3
 80026d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026da:	fb03 f302 	mul.w	r3, r3, r2
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	3206      	adds	r2, #6
 80026e2:	7852      	ldrb	r2, [r2, #1]
 80026e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	e081      	b.n	80027f4 <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[4][0]) {
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	785a      	ldrb	r2, [r3, #1]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	3308      	adds	r3, #8
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d80f      	bhi.n	800271e <calculateStepNum+0x112>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[4][1];
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	885b      	ldrh	r3, [r3, #2]
 8002702:	461a      	mov	r2, r3
 8002704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002708:	fb03 f302 	mul.w	r3, r3, r2
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	3208      	adds	r2, #8
 8002710:	7852      	ldrb	r2, [r2, #1]
 8002712:	fb93 f3f2 	sdiv	r3, r3, r2
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	e06a      	b.n	80027f4 <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[5][0]) {
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	785a      	ldrb	r2, [r3, #1]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	330a      	adds	r3, #10
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d80f      	bhi.n	800274c <calculateStepNum+0x140>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[5][1];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	885b      	ldrh	r3, [r3, #2]
 8002730:	461a      	mov	r2, r3
 8002732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002736:	fb03 f302 	mul.w	r3, r3, r2
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	320a      	adds	r2, #10
 800273e:	7852      	ldrb	r2, [r2, #1]
 8002740:	fb93 f3f2 	sdiv	r3, r3, r2
 8002744:	461a      	mov	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	e053      	b.n	80027f4 <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[6][0]) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	785a      	ldrb	r2, [r3, #1]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d80f      	bhi.n	800277a <calculateStepNum+0x16e>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[6][1];
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	885b      	ldrh	r3, [r3, #2]
 800275e:	461a      	mov	r2, r3
 8002760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002764:	fb03 f302 	mul.w	r3, r3, r2
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	320c      	adds	r2, #12
 800276c:	7852      	ldrb	r2, [r2, #1]
 800276e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002772:	461a      	mov	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	e03c      	b.n	80027f4 <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[7][0]) {
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	785a      	ldrb	r2, [r3, #1]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	330e      	adds	r3, #14
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d80f      	bhi.n	80027a8 <calculateStepNum+0x19c>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[7][1];
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	885b      	ldrh	r3, [r3, #2]
 800278c:	461a      	mov	r2, r3
 800278e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002792:	fb03 f302 	mul.w	r3, r3, r2
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	320e      	adds	r2, #14
 800279a:	7852      	ldrb	r2, [r2, #1]
 800279c:	fb93 f3f2 	sdiv	r3, r3, r2
 80027a0:	461a      	mov	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	e025      	b.n	80027f4 <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[8][0]) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	785a      	ldrb	r2, [r3, #1]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	3310      	adds	r3, #16
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d80f      	bhi.n	80027d6 <calculateStepNum+0x1ca>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[8][1];
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	885b      	ldrh	r3, [r3, #2]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c0:	fb03 f302 	mul.w	r3, r3, r2
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	3210      	adds	r2, #16
 80027c8:	7852      	ldrb	r2, [r2, #1]
 80027ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80027ce:	461a      	mov	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	e00e      	b.n	80027f4 <calculateStepNum+0x1e8>
	}
	else {
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[9][1];
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	885b      	ldrh	r3, [r3, #2]
 80027da:	461a      	mov	r2, r3
 80027dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e0:	fb03 f302 	mul.w	r3, r3, r2
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	3212      	adds	r2, #18
 80027e8:	7852      	ldrb	r2, [r2, #1]
 80027ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	605a      	str	r2, [r3, #4]
	}
	step_num = person_cal_info->step_num;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a03      	ldr	r2, [pc, #12]	; (8002808 <calculateStepNum+0x1fc>)
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	20000014 	.word	0x20000014

0800280c <chooseModeScreen>:
#include "states/choose_mode.h"

extern state current_state;
extern state mode_state;

void chooseModeScreen() {
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af04      	add	r7, sp, #16
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8002812:	2101      	movs	r1, #1
 8002814:	4828      	ldr	r0, [pc, #160]	; (80028b8 <chooseModeScreen+0xac>)
 8002816:	f000 ff89 	bl	800372c <HAL_GPIO_ReadPin>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <chooseModeScreen+0x40>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8002820:	bf00      	nop
 8002822:	2101      	movs	r1, #1
 8002824:	4824      	ldr	r0, [pc, #144]	; (80028b8 <chooseModeScreen+0xac>)
 8002826:	f000 ff81 	bl	800372c <HAL_GPIO_ReadPin>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f8      	bne.n	8002822 <chooseModeScreen+0x16>
			;
		HAL_Delay(300);
 8002830:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002834:	f000 fcc4 	bl	80031c0 <HAL_Delay>
		current_state = calorie_mode;
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <chooseModeScreen+0xb0>)
 800283a:	2203      	movs	r2, #3
 800283c:	701a      	strb	r2, [r3, #0]
		mode_state = calorie_mode;
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <chooseModeScreen+0xb4>)
 8002840:	2203      	movs	r2, #3
 8002842:	701a      	strb	r2, [r3, #0]
		ST7735_FillScreen(BACKGROUND_COLOR_CHS_MODE);
 8002844:	2000      	movs	r0, #0
 8002846:	f7fe fe01 	bl	800144c <ST7735_FillScreen>
		return;
 800284a:	e032      	b.n	80028b2 <chooseModeScreen+0xa6>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 800284c:	2104      	movs	r1, #4
 800284e:	481a      	ldr	r0, [pc, #104]	; (80028b8 <chooseModeScreen+0xac>)
 8002850:	f000 ff6c 	bl	800372c <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d011      	beq.n	800287e <chooseModeScreen+0x72>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 800285a:	bf00      	nop
 800285c:	2104      	movs	r1, #4
 800285e:	4816      	ldr	r0, [pc, #88]	; (80028b8 <chooseModeScreen+0xac>)
 8002860:	f000 ff64 	bl	800372c <HAL_GPIO_ReadPin>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f8      	bne.n	800285c <chooseModeScreen+0x50>
			;
		current_state = step_mode;
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <chooseModeScreen+0xb0>)
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]
		mode_state = step_mode;
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <chooseModeScreen+0xb4>)
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
		ST7735_FillScreen(BACKGROUND_COLOR_CHS_MODE);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe fde8 	bl	800144c <ST7735_FillScreen>
		return;
 800287c:	e019      	b.n	80028b2 <chooseModeScreen+0xa6>
	}
	ST7735_WriteString(0, 50, "  Step Mode (L) ", TEXT_FONT_CHS_MODE, TEXT_COLOR_CHS_MODE, TEXT_BACKGROUND_COLOR_CHS_MODE);
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <chooseModeScreen+0xb8>)
 8002880:	2200      	movs	r2, #0
 8002882:	9202      	str	r2, [sp, #8]
 8002884:	221f      	movs	r2, #31
 8002886:	9201      	str	r2, [sp, #4]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <chooseModeScreen+0xbc>)
 8002890:	2132      	movs	r1, #50	; 0x32
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe fd1a 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 100, " Calorie Mode (R)", TEXT_FONT_CHS_MODE, TEXT_COLOR_CHS_MODE, TEXT_BACKGROUND_COLOR_CHS_MODE);
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <chooseModeScreen+0xb8>)
 800289a:	2200      	movs	r2, #0
 800289c:	9202      	str	r2, [sp, #8]
 800289e:	221f      	movs	r2, #31
 80028a0:	9201      	str	r2, [sp, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	9200      	str	r2, [sp, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a08      	ldr	r2, [pc, #32]	; (80028cc <chooseModeScreen+0xc0>)
 80028aa:	2164      	movs	r1, #100	; 0x64
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe fd0d 	bl	80012cc <ST7735_WriteString>
}
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40020800 	.word	0x40020800
 80028bc:	20000254 	.word	0x20000254
 80028c0:	20000304 	.word	0x20000304
 80028c4:	20000000 	.word	0x20000000
 80028c8:	08008c54 	.word	0x08008c54
 80028cc:	08008c68 	.word	0x08008c68

080028d0 <finalModeScreen>:
extern state current_state;
extern state mode_state;
extern TIM_HandleTypeDef htim2;
extern CalorieState calorie_state;

void finalModeScreen(CalorieInfo *person_cal_info) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b0a0      	sub	sp, #128	; 0x80
 80028d4:	af04      	add	r7, sp, #16
 80028d6:	6078      	str	r0, [r7, #4]
	while (1) {
		char t1[50] = { 0 };
 80028d8:	f107 0308 	add.w	r3, r7, #8
 80028dc:	2232      	movs	r2, #50	; 0x32
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 f93f 	bl	8006b64 <memset>
		ST7735_WriteString(0, 10, "==================", TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 80028e6:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <finalModeScreen+0x1a4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	9202      	str	r2, [sp, #8]
 80028ec:	221f      	movs	r2, #31
 80028ee:	9201      	str	r2, [sp, #4]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	9200      	str	r2, [sp, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a60      	ldr	r2, [pc, #384]	; (8002a78 <finalModeScreen+0x1a8>)
 80028f8:	210a      	movs	r1, #10
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe fce6 	bl	80012cc <ST7735_WriteString>
		ST7735_WriteString(0, 40, "     CONGRATS", TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 8002900:	4b5c      	ldr	r3, [pc, #368]	; (8002a74 <finalModeScreen+0x1a4>)
 8002902:	2200      	movs	r2, #0
 8002904:	9202      	str	r2, [sp, #8]
 8002906:	221f      	movs	r2, #31
 8002908:	9201      	str	r2, [sp, #4]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	9200      	str	r2, [sp, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5a      	ldr	r2, [pc, #360]	; (8002a7c <finalModeScreen+0x1ac>)
 8002912:	2128      	movs	r1, #40	; 0x28
 8002914:	2000      	movs	r0, #0
 8002916:	f7fe fcd9 	bl	80012cc <ST7735_WriteString>
		if (mode_state == step_mode) { // step mode
 800291a:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <finalModeScreen+0x1b0>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d117      	bne.n	8002952 <finalModeScreen+0x82>
			sprintf(t1, " %ld step taken", step_num);
 8002922:	4b58      	ldr	r3, [pc, #352]	; (8002a84 <finalModeScreen+0x1b4>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f107 0308 	add.w	r3, r7, #8
 800292a:	4957      	ldr	r1, [pc, #348]	; (8002a88 <finalModeScreen+0x1b8>)
 800292c:	4618      	mov	r0, r3
 800292e:	f004 fe43 	bl	80075b8 <siprintf>
			ST7735_WriteString(0, 70, t1, TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 8002932:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <finalModeScreen+0x1a4>)
 8002934:	f107 0108 	add.w	r1, r7, #8
 8002938:	2200      	movs	r2, #0
 800293a:	9202      	str	r2, [sp, #8]
 800293c:	221f      	movs	r2, #31
 800293e:	9201      	str	r2, [sp, #4]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	9200      	str	r2, [sp, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	460a      	mov	r2, r1
 8002948:	2146      	movs	r1, #70	; 0x46
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe fcbe 	bl	80012cc <ST7735_WriteString>
 8002950:	e01f      	b.n	8002992 <finalModeScreen+0xc2>
		}
		else { // calorie mode
			char t3[20] = { 0 };
 8002952:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	611a      	str	r2, [r3, #16]
			sprintf(t3, "%d calorie burned", person_cal_info->calorie_amount);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	885b      	ldrh	r3, [r3, #2]
 8002966:	461a      	mov	r2, r3
 8002968:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800296c:	4947      	ldr	r1, [pc, #284]	; (8002a8c <finalModeScreen+0x1bc>)
 800296e:	4618      	mov	r0, r3
 8002970:	f004 fe22 	bl	80075b8 <siprintf>
			ST7735_WriteString(0, 70, t3, TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 8002974:	4b3f      	ldr	r3, [pc, #252]	; (8002a74 <finalModeScreen+0x1a4>)
 8002976:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800297a:	2200      	movs	r2, #0
 800297c:	9202      	str	r2, [sp, #8]
 800297e:	221f      	movs	r2, #31
 8002980:	9201      	str	r2, [sp, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	9200      	str	r2, [sp, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	460a      	mov	r2, r1
 800298a:	2146      	movs	r1, #70	; 0x46
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe fc9d 	bl	80012cc <ST7735_WriteString>
		}
		char t4[20] = { 0 };
 8002992:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	611a      	str	r2, [r3, #16]
		uint32_t hour = 0, min = 0, sec = elapsed_time;
 80029a2:	2300      	movs	r3, #0
 80029a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80029a6:	2300      	movs	r3, #0
 80029a8:	657b      	str	r3, [r7, #84]	; 0x54
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <finalModeScreen+0x1c0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	653b      	str	r3, [r7, #80]	; 0x50
		convertSecToTimeStamp(elapsed_time, &hour, &min, &sec);
 80029b0:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <finalModeScreen+0x1c0>)
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029b8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80029bc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80029c0:	f000 f900 	bl	8002bc4 <convertSecToTimeStamp>
		sprintf(t4, " Elapsed : %ld:%ld:%ld", hour, min, sec);
 80029c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ca:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	460b      	mov	r3, r1
 80029d2:	4930      	ldr	r1, [pc, #192]	; (8002a94 <finalModeScreen+0x1c4>)
 80029d4:	f004 fdf0 	bl	80075b8 <siprintf>
		ST7735_WriteString(0, 100, t4, TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <finalModeScreen+0x1a4>)
 80029da:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80029de:	2200      	movs	r2, #0
 80029e0:	9202      	str	r2, [sp, #8]
 80029e2:	221f      	movs	r2, #31
 80029e4:	9201      	str	r2, [sp, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	9200      	str	r2, [sp, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	460a      	mov	r2, r1
 80029ee:	2164      	movs	r1, #100	; 0x64
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fe fc6b 	bl	80012cc <ST7735_WriteString>
		ST7735_WriteString(0, 130, "==================", TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <finalModeScreen+0x1a4>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	9202      	str	r2, [sp, #8]
 80029fc:	221f      	movs	r2, #31
 80029fe:	9201      	str	r2, [sp, #4]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	9200      	str	r2, [sp, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <finalModeScreen+0x1a8>)
 8002a08:	2182      	movs	r1, #130	; 0x82
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7fe fc5e 	bl	80012cc <ST7735_WriteString>
		htim2.Instance->CCR1 = 125;
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <finalModeScreen+0x1c8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	227d      	movs	r2, #125	; 0x7d
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8002a18:	2102      	movs	r1, #2
 8002a1a:	4820      	ldr	r0, [pc, #128]	; (8002a9c <finalModeScreen+0x1cc>)
 8002a1c:	f000 fe86 	bl	800372c <HAL_GPIO_ReadPin>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f43f af58 	beq.w	80028d8 <finalModeScreen+0x8>
			current_state = choose_mode;
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <finalModeScreen+0x1d0>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
			current_step = 1;
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <finalModeScreen+0x1d4>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
			step_num = 1000;
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <finalModeScreen+0x1b4>)
 8002a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a3a:	601a      	str	r2, [r3, #0]
			elapsed_time = 1;
 8002a3c:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <finalModeScreen+0x1c0>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
			htim2.Instance->CCR1 = 0;
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <finalModeScreen+0x1c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34
			calorie_state = calorie_height_mode;
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <finalModeScreen+0x1d8>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
			person_cal_info->calorie_amount = 1000;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a56:	805a      	strh	r2, [r3, #2]
			person_cal_info->height = 160;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	22a0      	movs	r2, #160	; 0xa0
 8002a5c:	701a      	strb	r2, [r3, #0]
			person_cal_info->weight = 60;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	223c      	movs	r2, #60	; 0x3c
 8002a62:	705a      	strb	r2, [r3, #1]
			ST7735_FillScreen(BACKGROUND_COLOR_FNL_MODE);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe fcf1 	bl	800144c <ST7735_FillScreen>
			break;
		}
	}
}
 8002a6a:	bf00      	nop
 8002a6c:	3770      	adds	r7, #112	; 0x70
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000
 8002a78:	08008c7c 	.word	0x08008c7c
 8002a7c:	08008c90 	.word	0x08008c90
 8002a80:	20000304 	.word	0x20000304
 8002a84:	20000014 	.word	0x20000014
 8002a88:	08008ca0 	.word	0x08008ca0
 8002a8c:	08008cb0 	.word	0x08008cb0
 8002a90:	20000018 	.word	0x20000018
 8002a94:	08008cc4 	.word	0x08008cc4
 8002a98:	200003a4 	.word	0x200003a4
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	20000254 	.word	0x20000254
 8002aa4:	20000010 	.word	0x20000010
 8002aa8:	2000026c 	.word	0x2000026c

08002aac <mainScreen>:
extern uint32_t haha_step;
extern uint32_t elapsed_time;
extern uint8_t walk_permission;
extern uint32_t my_new_num;

void mainScreen(const CalorieInfo *person_cal_info) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b098      	sub	sp, #96	; 0x60
 8002ab0:	af04      	add	r7, sp, #16
 8002ab2:	6078      	str	r0, [r7, #4]
	char text1[25] = { 0 };
 8002ab4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
 8002ac4:	615a      	str	r2, [r3, #20]
 8002ac6:	761a      	strb	r2, [r3, #24]
	sprintf(text1, "  %ld / %ld step", current_step, step_num);
 8002ac8:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <mainScreen+0xfc>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b37      	ldr	r3, [pc, #220]	; (8002bac <mainScreen+0x100>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002ad4:	4936      	ldr	r1, [pc, #216]	; (8002bb0 <mainScreen+0x104>)
 8002ad6:	f004 fd6f 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 50, text1, TEXT_FONT_MAIN_MODE, TEXT_COLOR_MAIN_MODE, TEXT_BACKGROUND_COLOR_MAIN_MODE);
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <mainScreen+0x108>)
 8002adc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	9202      	str	r2, [sp, #8]
 8002ae4:	221f      	movs	r2, #31
 8002ae6:	9201      	str	r2, [sp, #4]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	9200      	str	r2, [sp, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	460a      	mov	r2, r1
 8002af0:	2132      	movs	r1, #50	; 0x32
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fe fbea 	bl	80012cc <ST7735_WriteString>
	uint32_t eta_time = ((step_num - current_step) * elapsed_time) / current_step;
 8002af8:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <mainScreen+0x100>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <mainScreen+0xfc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	4a2d      	ldr	r2, [pc, #180]	; (8002bb8 <mainScreen+0x10c>)
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	fb02 f203 	mul.w	r2, r2, r3
 8002b0a:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <mainScreen+0xfc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (current_step >= step_num) {
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <mainScreen+0xfc>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b24      	ldr	r3, [pc, #144]	; (8002bac <mainScreen+0x100>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d306      	bcc.n	8002b2e <mainScreen+0x82>
		ST7735_FillScreen(BACKGROUND_COLOR_MAIN_MODE);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7fe fc93 	bl	800144c <ST7735_FillScreen>
		current_state = final_mode;
 8002b26:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <mainScreen+0x110>)
 8002b28:	2205      	movs	r2, #5
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e039      	b.n	8002ba2 <mainScreen+0xf6>
		return;
	}
	uint32_t hour = 0, min = 0, sec = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b32:	2300      	movs	r3, #0
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
	convertSecToTimeStamp(eta_time, &hour, &min, &sec);
 8002b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b42:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002b46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b48:	f000 f83c 	bl	8002bc4 <convertSecToTimeStamp>
	char text2[25] = { 0 };
 8002b4c:	f107 0308 	add.w	r3, r7, #8
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
 8002b5c:	615a      	str	r2, [r3, #20]
 8002b5e:	761a      	strb	r2, [r3, #24]
	sprintf(text2, "   ETA:  %ld:%ld:%ld ", hour, min, sec); // black character at the end of the string here
 8002b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	f107 0008 	add.w	r0, r7, #8
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4914      	ldr	r1, [pc, #80]	; (8002bc0 <mainScreen+0x114>)
 8002b70:	f004 fd22 	bl	80075b8 <siprintf>
	// is important. for example 59 sec is displayed as 0:0:59 at the format above. as the seconds decrease,
	// assume it will be 49, 39, .... even going further, it will be 9 seconds. in this situation
	// what we expect would be 0:0:9. however, since before 9 seconds, there was 19 seconds, the lsb digit
	// of 19, which is 9, stays on the screen. thus we see 0:0:99 instead of 0:0:9. to avoid that we use
	// extra black so that it covers the extra digit coming from early calculations.
	ST7735_WriteString(0, 100, text2, TEXT_FONT_MAIN_MODE, TEXT_COLOR_MAIN_MODE, TEXT_BACKGROUND_COLOR_MAIN_MODE);
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <mainScreen+0x108>)
 8002b76:	f107 0108 	add.w	r1, r7, #8
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	9202      	str	r2, [sp, #8]
 8002b7e:	221f      	movs	r2, #31
 8002b80:	9201      	str	r2, [sp, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	9200      	str	r2, [sp, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	460a      	mov	r2, r1
 8002b8a:	2164      	movs	r1, #100	; 0x64
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fe fb9d 	bl	80012cc <ST7735_WriteString>
	getAccData(eta_time, current_step, step_num);
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <mainScreen+0xfc>)
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <mainScreen+0x100>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b9e:	f000 f849 	bl	8002c34 <getAccData>
}
 8002ba2:	3750      	adds	r7, #80	; 0x50
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000010 	.word	0x20000010
 8002bac:	20000014 	.word	0x20000014
 8002bb0:	08008cdc 	.word	0x08008cdc
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000018 	.word	0x20000018
 8002bbc:	20000254 	.word	0x20000254
 8002bc0:	08008cf0 	.word	0x08008cf0

08002bc4 <convertSecToTimeStamp>:


void convertSecToTimeStamp(uint32_t elapsed_time, uint32_t* hour_ptr, uint32_t* min_ptr, uint32_t* sec_ptr) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
	*hour_ptr = elapsed_time / 3600;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <convertSecToTimeStamp+0x68>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0ada      	lsrs	r2, r3, #11
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	601a      	str	r2, [r3, #0]
	*min_ptr = (elapsed_time - (3600 * *hour_ptr)) / 60;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <convertSecToTimeStamp+0x6c>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	095a      	lsrs	r2, r3, #5
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	601a      	str	r2, [r3, #0]
	*sec_ptr = elapsed_time - (3600 * *hour_ptr) - (*min_ptr * 60);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002c04:	fb02 f303 	mul.w	r3, r2, r3
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	1ad1      	subs	r1, r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	1aca      	subs	r2, r1, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	601a      	str	r2, [r3, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	91a2b3c5 	.word	0x91a2b3c5
 8002c30:	88888889 	.word	0x88888889

08002c34 <getAccData>:


void getAccData(uint32_t elapsed_time, uint32_t current_step, uint32_t step_num) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0ac      	sub	sp, #176	; 0xb0
 8002c38:	af06      	add	r7, sp, #24
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	AccData acc_3d;
	//while (1)
	//{

		HAL_StatusTypeDef is_mma8452q_read_ok = mma8452qRead(&hi2c1, 0x00, 7, acc_3d.acc_info);
 8002c40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c44:	2207      	movs	r2, #7
 8002c46:	2100      	movs	r1, #0
 8002c48:	4845      	ldr	r0, [pc, #276]	; (8002d60 <getAccData+0x12c>)
 8002c4a:	f7fe f94f 	bl	8000eec <mma8452qRead>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		if (is_mma8452q_read_ok == HAL_OK) {
 8002c54:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d17c      	bne.n	8002d56 <getAccData+0x122>
			getAccXYZ(&acc_3d);
 8002c5c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe f989 	bl	8000f78 <getAccXYZ>
			char acc_message[100] = { 0 };
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	2264      	movs	r2, #100	; 0x64
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 ff78 	bl	8006b64 <memset>
			//sprintf(message, "acc_x: %d, acc_y: %d, acc_z: %d\r\n", acc_3d.x_acc, acc_3d.y_acc, acc_3d.z_acc);
			int x_acc = acc_3d.x_acc ;
 8002c74:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8002c78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			int y_acc = acc_3d.y_acc ;
 8002c7c:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8002c80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			int z_acc = acc_3d.z_acc ;
 8002c84:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8002c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			enqueue(window_acc_y, y_acc);
 8002c8c:	4b35      	ldr	r3, [pc, #212]	; (8002d64 <getAccData+0x130>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe ff65 	bl	8001b64 <enqueue>
			if (isFull(window_acc_y)) {
 8002c9a:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <getAccData+0x130>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe ff0e 	bl	8001ac0 <isFull>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d039      	beq.n	8002d1e <getAccData+0xea>
				dequeue(window_acc_y);
 8002caa:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <getAccData+0x130>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe ff2b 	bl	8001b0a <dequeue>
				if ((window_acc_y->array[2] - window_acc_y->array[0] < -50) &&
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <getAccData+0x130>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	3308      	adds	r3, #8
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <getAccData+0x130>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8002ccc:	da24      	bge.n	8002d18 <getAccData+0xe4>
					(window_acc_y->array[4] - window_acc_y->array[2] > 50)) {
 8002cce:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <getAccData+0x130>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	3310      	adds	r3, #16
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <getAccData+0x130>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	1ad3      	subs	r3, r2, r3
				if ((window_acc_y->array[2] - window_acc_y->array[0] < -50) &&
 8002ce4:	2b32      	cmp	r3, #50	; 0x32
 8002ce6:	dd17      	ble.n	8002d18 <getAccData+0xe4>
					if (haha_step == 0 && walk_permission) {
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <getAccData+0x134>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10f      	bne.n	8002d10 <getAccData+0xdc>
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <getAccData+0x138>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <getAccData+0xdc>
						my_new_num += 1;
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <getAccData+0x13c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <getAccData+0x13c>)
 8002d00:	6013      	str	r3, [r2, #0]
						haha_step = 1;
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <getAccData+0x134>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
						walk_permission = 0;
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <getAccData+0x138>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
					if (haha_step == 0 && walk_permission) {
 8002d0e:	e006      	b.n	8002d1e <getAccData+0xea>
					}

					else
						haha_step = 0;
 8002d10:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <getAccData+0x134>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
					if (haha_step == 0 && walk_permission) {
 8002d16:	e002      	b.n	8002d1e <getAccData+0xea>
				}
				else {
					haha_step = 0;
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <getAccData+0x134>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
				}
			}

			sprintf(acc_message, " %d %d %d %ld %ld %ld %ld\r\n", x_acc, y_acc, z_acc, elapsed_time, current_step, step_num, my_new_num);
 8002d1e:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <getAccData+0x13c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f107 0014 	add.w	r0, r7, #20
 8002d26:	9304      	str	r3, [sp, #16]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	9303      	str	r3, [sp, #12]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	9302      	str	r3, [sp, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002d42:	490c      	ldr	r1, [pc, #48]	; (8002d74 <getAccData+0x140>)
 8002d44:	f004 fc38 	bl	80075b8 <siprintf>
			//ST7735_WriteString(0, 50, message, TEXT_FONT_MAIN_MODE, TEXT_COLOR_MAIN_MODE, TEXT_BACKGROUND_COLOR_MAIN_MODE);
			/*HAL_StatusTypeDef blue_ok = */HAL_UART_Transmit(&huart6, (uint8_t *)acc_message, sizeof(acc_message), 100);
 8002d48:	f107 0114 	add.w	r1, r7, #20
 8002d4c:	2364      	movs	r3, #100	; 0x64
 8002d4e:	2264      	movs	r2, #100	; 0x64
 8002d50:	4809      	ldr	r0, [pc, #36]	; (8002d78 <getAccData+0x144>)
 8002d52:	f003 fa6e 	bl	8006232 <HAL_UART_Transmit>
		else {
			// uart ile buraya mesaj bas
		}

	//}
}
 8002d56:	bf00      	nop
 8002d58:	3798      	adds	r7, #152	; 0x98
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000270 	.word	0x20000270
 8002d64:	200003a0 	.word	0x200003a0
 8002d68:	20000258 	.word	0x20000258
 8002d6c:	2000001c 	.word	0x2000001c
 8002d70:	2000025c 	.word	0x2000025c
 8002d74:	08008d08 	.word	0x08008d08
 8002d78:	20000360 	.word	0x20000360

08002d7c <stepScreen>:
#include "states/step_mode.h"
extern state current_state;
extern uint32_t step_num;


void stepScreen(uint32_t step_no) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	; 0x30
 8002d80:	af04      	add	r7, sp, #16
 8002d82:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8002d84:	2101      	movs	r1, #1
 8002d86:	4840      	ldr	r0, [pc, #256]	; (8002e88 <stepScreen+0x10c>)
 8002d88:	f000 fcd0 	bl	800372c <HAL_GPIO_ReadPin>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d012      	beq.n	8002db8 <stepScreen+0x3c>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8002d92:	bf00      	nop
 8002d94:	2101      	movs	r1, #1
 8002d96:	483c      	ldr	r0, [pc, #240]	; (8002e88 <stepScreen+0x10c>)
 8002d98:	f000 fcc8 	bl	800372c <HAL_GPIO_ReadPin>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f8      	bne.n	8002d94 <stepScreen+0x18>
			;
		HAL_Delay(300);
 8002da2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002da6:	f000 fa0b 	bl	80031c0 <HAL_Delay>
		step_num += 1000;
 8002daa:	4b38      	ldr	r3, [pc, #224]	; (8002e8c <stepScreen+0x110>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002db2:	4a36      	ldr	r2, [pc, #216]	; (8002e8c <stepScreen+0x110>)
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e037      	b.n	8002e28 <stepScreen+0xac>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8002db8:	2102      	movs	r1, #2
 8002dba:	4833      	ldr	r0, [pc, #204]	; (8002e88 <stepScreen+0x10c>)
 8002dbc:	f000 fcb6 	bl	800372c <HAL_GPIO_ReadPin>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d012      	beq.n	8002dec <stepScreen+0x70>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8002dc6:	bf00      	nop
 8002dc8:	2104      	movs	r1, #4
 8002dca:	482f      	ldr	r0, [pc, #188]	; (8002e88 <stepScreen+0x10c>)
 8002dcc:	f000 fcae 	bl	800372c <HAL_GPIO_ReadPin>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f8      	bne.n	8002dc8 <stepScreen+0x4c>
				;
			HAL_Delay(300);
 8002dd6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002dda:	f000 f9f1 	bl	80031c0 <HAL_Delay>
			current_state = main_mode;
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <stepScreen+0x114>)
 8002de0:	2204      	movs	r2, #4
 8002de2:	701a      	strb	r2, [r3, #0]
			ST7735_FillScreen(BACKGROUND_COLOR_STP_MODE);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fe fb31 	bl	800144c <ST7735_FillScreen>
 8002dea:	e049      	b.n	8002e80 <stepScreen+0x104>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && step_num > 1000) {
 8002dec:	2104      	movs	r1, #4
 8002dee:	4826      	ldr	r0, [pc, #152]	; (8002e88 <stepScreen+0x10c>)
 8002df0:	f000 fc9c 	bl	800372c <HAL_GPIO_ReadPin>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d016      	beq.n	8002e28 <stepScreen+0xac>
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <stepScreen+0x110>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e02:	d911      	bls.n	8002e28 <stepScreen+0xac>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8002e04:	bf00      	nop
 8002e06:	2104      	movs	r1, #4
 8002e08:	481f      	ldr	r0, [pc, #124]	; (8002e88 <stepScreen+0x10c>)
 8002e0a:	f000 fc8f 	bl	800372c <HAL_GPIO_ReadPin>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f8      	bne.n	8002e06 <stepScreen+0x8a>
			;
		HAL_Delay(300);
 8002e14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e18:	f000 f9d2 	bl	80031c0 <HAL_Delay>
		step_num -= 1000;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <stepScreen+0x110>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002e24:	4a19      	ldr	r2, [pc, #100]	; (8002e8c <stepScreen+0x110>)
 8002e26:	6013      	str	r3, [r2, #0]
	}

	char step_text[22] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002e28:	f107 0308 	add.w	r3, r7, #8
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
 8002e38:	829a      	strh	r2, [r3, #20]
	sprintf(step_text, "Step Number: %ld", step_no);
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4914      	ldr	r1, [pc, #80]	; (8002e94 <stepScreen+0x118>)
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fbb8 	bl	80075b8 <siprintf>
	ST7735_WriteString(0, 40, step_text, TEXT_FONT_STP_MODE, TEXT_COLOR_STP_MODE, TEXT_BACKGROUND_COLOR_STP_MODE);
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <stepScreen+0x11c>)
 8002e4a:	f107 0108 	add.w	r1, r7, #8
 8002e4e:	2200      	movs	r2, #0
 8002e50:	9202      	str	r2, [sp, #8]
 8002e52:	221f      	movs	r2, #31
 8002e54:	9201      	str	r2, [sp, #4]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	9200      	str	r2, [sp, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	460a      	mov	r2, r1
 8002e5e:	2128      	movs	r1, #40	; 0x28
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7fe fa33 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 100, "(L) : - \\/ + : (R)", TEXT_FONT_STP_MODE, TEXT_COLOR_STP_MODE, TEXT_BACKGROUND_COLOR_STP_MODE);
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <stepScreen+0x11c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	9202      	str	r2, [sp, #8]
 8002e6c:	221f      	movs	r2, #31
 8002e6e:	9201      	str	r2, [sp, #4]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	9200      	str	r2, [sp, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <stepScreen+0x120>)
 8002e78:	2164      	movs	r1, #100	; 0x64
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fe fa26 	bl	80012cc <ST7735_WriteString>

}
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	20000014 	.word	0x20000014
 8002e90:	20000254 	.word	0x20000254
 8002e94:	08008d24 	.word	0x08008d24
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	08008d38 	.word	0x08008d38

08002ea0 <welcomeScreen>:
extern state current_state;
/*
 * Fills opening screen in a fancy way:)
 * current_state : its value is changed here so that the next state can be executed.
 * */
void welcomeScreen() {
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b08f      	sub	sp, #60	; 0x3c
 8002ea4:	af04      	add	r7, sp, #16
	char text1[] = " Wrist Band ";
 8002ea6:	4b74      	ldr	r3, [pc, #464]	; (8003078 <welcomeScreen+0x1d8>)
 8002ea8:	f107 0410 	add.w	r4, r7, #16
 8002eac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eae:	c407      	stmia	r4!, {r0, r1, r2}
 8002eb0:	7023      	strb	r3, [r4, #0]
	char text2[] = "  Welcome ";
 8002eb2:	4a72      	ldr	r2, [pc, #456]	; (800307c <welcomeScreen+0x1dc>)
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eb8:	c303      	stmia	r3!, {r0, r1}
 8002eba:	801a      	strh	r2, [r3, #0]
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	0c12      	lsrs	r2, r2, #16
 8002ec0:	701a      	strb	r2, [r3, #0]
	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fe fac2 	bl	800144c <ST7735_FillScreen>

	for (int i = 0; i < strlen(text1); ++i) {
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ecc:	e020      	b.n	8002f10 <welcomeScreen+0x70>
		text1[i] = '\0';
 8002ece:	f107 0210 	add.w	r2, r7, #16
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	4413      	add	r3, r2
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
		ST7735_WriteString(0, 50, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8002eda:	4b69      	ldr	r3, [pc, #420]	; (8003080 <welcomeScreen+0x1e0>)
 8002edc:	f107 0110 	add.w	r1, r7, #16
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	9202      	str	r2, [sp, #8]
 8002ee4:	221f      	movs	r2, #31
 8002ee6:	9201      	str	r2, [sp, #4]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	9200      	str	r2, [sp, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	460a      	mov	r2, r1
 8002ef0:	2132      	movs	r1, #50	; 0x32
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fe f9ea 	bl	80012cc <ST7735_WriteString>
		HAL_Delay(15);
 8002ef8:	200f      	movs	r0, #15
 8002efa:	f000 f961 	bl	80031c0 <HAL_Delay>
		strcpy(text1, " Wrist Band ");
 8002efe:	4b5e      	ldr	r3, [pc, #376]	; (8003078 <welcomeScreen+0x1d8>)
 8002f00:	f107 0410 	add.w	r4, r7, #16
 8002f04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f06:	c407      	stmia	r4!, {r0, r1, r2}
 8002f08:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < strlen(text1); ++i) {
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f10:	f107 0310 	add.w	r3, r7, #16
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd f963 	bl	80001e0 <strlen>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d8d5      	bhi.n	8002ece <welcomeScreen+0x2e>
	}

	HAL_Delay(100);
 8002f22:	2064      	movs	r0, #100	; 0x64
 8002f24:	f000 f94c 	bl	80031c0 <HAL_Delay>

	for (int i = 0; i < strlen(text2); ++i) {
 8002f28:	2300      	movs	r3, #0
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	e020      	b.n	8002f70 <welcomeScreen+0xd0>
		text2[i] = '\0';
 8002f2e:	1d3a      	adds	r2, r7, #4
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	4413      	add	r3, r2
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
		ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8002f38:	4b51      	ldr	r3, [pc, #324]	; (8003080 <welcomeScreen+0x1e0>)
 8002f3a:	1d39      	adds	r1, r7, #4
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	9202      	str	r2, [sp, #8]
 8002f40:	221f      	movs	r2, #31
 8002f42:	9201      	str	r2, [sp, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	9200      	str	r2, [sp, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	2150      	movs	r1, #80	; 0x50
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7fe f9bc 	bl	80012cc <ST7735_WriteString>
		HAL_Delay(15);
 8002f54:	200f      	movs	r0, #15
 8002f56:	f000 f933 	bl	80031c0 <HAL_Delay>
		strcpy(text2, "  Welcome ");
 8002f5a:	4a48      	ldr	r2, [pc, #288]	; (800307c <welcomeScreen+0x1dc>)
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f60:	c303      	stmia	r3!, {r0, r1}
 8002f62:	801a      	strh	r2, [r3, #0]
 8002f64:	3302      	adds	r3, #2
 8002f66:	0c12      	lsrs	r2, r2, #16
 8002f68:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < strlen(text2); ++i) {
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	623b      	str	r3, [r7, #32]
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd f934 	bl	80001e0 <strlen>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d8d6      	bhi.n	8002f2e <welcomeScreen+0x8e>
	}

	HAL_Delay(1000);
 8002f80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f84:	f000 f91c 	bl	80031c0 <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fe fa5f 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8002f8e:	4b3c      	ldr	r3, [pc, #240]	; (8003080 <welcomeScreen+0x1e0>)
 8002f90:	f107 0110 	add.w	r1, r7, #16
 8002f94:	2200      	movs	r2, #0
 8002f96:	9202      	str	r2, [sp, #8]
 8002f98:	221f      	movs	r2, #31
 8002f9a:	9201      	str	r2, [sp, #4]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	9200      	str	r2, [sp, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	460a      	mov	r2, r1
 8002fa4:	213c      	movs	r1, #60	; 0x3c
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7fe f990 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8002fac:	4b34      	ldr	r3, [pc, #208]	; (8003080 <welcomeScreen+0x1e0>)
 8002fae:	1d39      	adds	r1, r7, #4
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	9202      	str	r2, [sp, #8]
 8002fb4:	221f      	movs	r2, #31
 8002fb6:	9201      	str	r2, [sp, #4]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	9200      	str	r2, [sp, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	460a      	mov	r2, r1
 8002fc0:	2150      	movs	r1, #80	; 0x50
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7fe f982 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(100);
 8002fc8:	2064      	movs	r0, #100	; 0x64
 8002fca:	f000 f8f9 	bl	80031c0 <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fe fa3c 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <welcomeScreen+0x1e0>)
 8002fd6:	f107 0110 	add.w	r1, r7, #16
 8002fda:	2200      	movs	r2, #0
 8002fdc:	9202      	str	r2, [sp, #8]
 8002fde:	221f      	movs	r2, #31
 8002fe0:	9201      	str	r2, [sp, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	9200      	str	r2, [sp, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	460a      	mov	r2, r1
 8002fea:	213c      	movs	r1, #60	; 0x3c
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7fe f96d 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8002ff2:	4b23      	ldr	r3, [pc, #140]	; (8003080 <welcomeScreen+0x1e0>)
 8002ff4:	1d39      	adds	r1, r7, #4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	9202      	str	r2, [sp, #8]
 8002ffa:	221f      	movs	r2, #31
 8002ffc:	9201      	str	r2, [sp, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	9200      	str	r2, [sp, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	460a      	mov	r2, r1
 8003006:	2150      	movs	r1, #80	; 0x50
 8003008:	2000      	movs	r0, #0
 800300a:	f7fe f95f 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(100);
 800300e:	2064      	movs	r0, #100	; 0x64
 8003010:	f000 f8d6 	bl	80031c0 <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8003014:	2000      	movs	r0, #0
 8003016:	f7fe fa19 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 800301a:	4b19      	ldr	r3, [pc, #100]	; (8003080 <welcomeScreen+0x1e0>)
 800301c:	f107 0110 	add.w	r1, r7, #16
 8003020:	2200      	movs	r2, #0
 8003022:	9202      	str	r2, [sp, #8]
 8003024:	221f      	movs	r2, #31
 8003026:	9201      	str	r2, [sp, #4]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	9200      	str	r2, [sp, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	460a      	mov	r2, r1
 8003030:	213c      	movs	r1, #60	; 0x3c
 8003032:	2000      	movs	r0, #0
 8003034:	f7fe f94a 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <welcomeScreen+0x1e0>)
 800303a:	1d39      	adds	r1, r7, #4
 800303c:	2200      	movs	r2, #0
 800303e:	9202      	str	r2, [sp, #8]
 8003040:	221f      	movs	r2, #31
 8003042:	9201      	str	r2, [sp, #4]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	9200      	str	r2, [sp, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	460a      	mov	r2, r1
 800304c:	2150      	movs	r1, #80	; 0x50
 800304e:	2000      	movs	r0, #0
 8003050:	f7fe f93c 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(100);
 8003054:	2064      	movs	r0, #100	; 0x64
 8003056:	f000 f8b3 	bl	80031c0 <HAL_Delay>

	current_state = choose_mode;
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <welcomeScreen+0x1e4>)
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8003060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003064:	f000 f8ac 	bl	80031c0 <HAL_Delay>
	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8003068:	2000      	movs	r0, #0
 800306a:	f7fe f9ef 	bl	800144c <ST7735_FillScreen>

}
 800306e:	bf00      	nop
 8003070:	372c      	adds	r7, #44	; 0x2c
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}
 8003076:	bf00      	nop
 8003078:	08008d4c 	.word	0x08008d4c
 800307c:	08008d5c 	.word	0x08008d5c
 8003080:	20000008 	.word	0x20000008
 8003084:	20000254 	.word	0x20000254

08003088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800308c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800308e:	e003      	b.n	8003098 <LoopCopyDataInit>

08003090 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003092:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003094:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003096:	3104      	adds	r1, #4

08003098 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003098:	480b      	ldr	r0, [pc, #44]	; (80030c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800309c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800309e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030a0:	d3f6      	bcc.n	8003090 <CopyDataInit>
  ldr  r2, =_sbss
 80030a2:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030a4:	e002      	b.n	80030ac <LoopFillZerobss>

080030a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030a8:	f842 3b04 	str.w	r3, [r2], #4

080030ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030b0:	d3f9      	bcc.n	80030a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030b2:	f7fe ff9b 	bl	8001fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030b6:	f003 fd29 	bl	8006b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ba:	f7fe f9d9 	bl	8001470 <main>
  bx  lr    
 80030be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80030c4:	0800a530 	.word	0x0800a530
  ldr  r0, =_sdata
 80030c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030cc:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 80030d0:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 80030d4:	200003ec 	.word	0x200003ec

080030d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030d8:	e7fe      	b.n	80030d8 <ADC_IRQHandler>
	...

080030dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e0:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_Init+0x40>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0d      	ldr	r2, [pc, #52]	; (800311c <HAL_Init+0x40>)
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_Init+0x40>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0a      	ldr	r2, [pc, #40]	; (800311c <HAL_Init+0x40>)
 80030f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <HAL_Init+0x40>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a07      	ldr	r2, [pc, #28]	; (800311c <HAL_Init+0x40>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003104:	2003      	movs	r0, #3
 8003106:	f000 f94d 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800310a:	2000      	movs	r0, #0
 800310c:	f000 f808 	bl	8003120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003110:	f7fe fd54 	bl	8001bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023c00 	.word	0x40023c00

08003120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003128:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_InitTick+0x54>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_InitTick+0x58>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	4619      	mov	r1, r3
 8003132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003136:	fbb3 f3f1 	udiv	r3, r3, r1
 800313a:	fbb2 f3f3 	udiv	r3, r2, r3
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f965 	bl	800340e <HAL_SYSTICK_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e00e      	b.n	800316c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b0f      	cmp	r3, #15
 8003152:	d80a      	bhi.n	800316a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003154:	2200      	movs	r2, #0
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	f000 f92d 	bl	80033ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003160:	4a06      	ldr	r2, [pc, #24]	; (800317c <HAL_InitTick+0x5c>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000020 	.word	0x20000020
 8003178:	20000064 	.word	0x20000064
 800317c:	20000060 	.word	0x20000060

08003180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_IncTick+0x20>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_IncTick+0x24>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4413      	add	r3, r2
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <HAL_IncTick+0x24>)
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000064 	.word	0x20000064
 80031a4:	200003e4 	.word	0x200003e4

080031a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return uwTick;
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <HAL_GetTick+0x14>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200003e4 	.word	0x200003e4

080031c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c8:	f7ff ffee 	bl	80031a8 <HAL_GetTick>
 80031cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d005      	beq.n	80031e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_Delay+0x40>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031e6:	bf00      	nop
 80031e8:	f7ff ffde 	bl	80031a8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d8f7      	bhi.n	80031e8 <HAL_Delay+0x28>
  {
  }
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20000064 	.word	0x20000064

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	; (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003370:	d301      	bcc.n	8003376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <SysTick_Config+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337e:	210f      	movs	r1, #15
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f7ff ff8e 	bl	80032a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SysTick_Config+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <SysTick_Config+0x40>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff29 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033cc:	f7ff ff3e 	bl	800324c <__NVIC_GetPriorityGrouping>
 80033d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff8e 	bl	80032f8 <NVIC_EncodePriority>
 80033dc:	4602      	mov	r2, r0
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff5d 	bl	80032a4 <__NVIC_SetPriority>
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff31 	bl	8003268 <__NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ffa2 	bl	8003360 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	e159      	b.n	80036f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	f040 8148 	bne.w	80036f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d00b      	beq.n	8003482 <HAL_GPIO_Init+0x5a>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d007      	beq.n	8003482 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003476:	2b11      	cmp	r3, #17
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b12      	cmp	r3, #18
 8003480:	d130      	bne.n	80034e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b8:	2201      	movs	r2, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0201 	and.w	r2, r3, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0xfc>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b12      	cmp	r3, #18
 8003522:	d123      	bne.n	800356c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	08da      	lsrs	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	69b9      	ldr	r1, [r7, #24]
 8003568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80a2 	beq.w	80036f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b56      	ldr	r3, [pc, #344]	; (800370c <HAL_GPIO_Init+0x2e4>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	4a55      	ldr	r2, [pc, #340]	; (800370c <HAL_GPIO_Init+0x2e4>)
 80035b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035bc:	6453      	str	r3, [r2, #68]	; 0x44
 80035be:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_GPIO_Init+0x2e4>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ca:	4a51      	ldr	r2, [pc, #324]	; (8003710 <HAL_GPIO_Init+0x2e8>)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	3302      	adds	r3, #2
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	220f      	movs	r2, #15
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a48      	ldr	r2, [pc, #288]	; (8003714 <HAL_GPIO_Init+0x2ec>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d019      	beq.n	800362a <HAL_GPIO_Init+0x202>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a47      	ldr	r2, [pc, #284]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_GPIO_Init+0x1fe>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a46      	ldr	r2, [pc, #280]	; (800371c <HAL_GPIO_Init+0x2f4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00d      	beq.n	8003622 <HAL_GPIO_Init+0x1fa>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a45      	ldr	r2, [pc, #276]	; (8003720 <HAL_GPIO_Init+0x2f8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <HAL_GPIO_Init+0x1f6>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a44      	ldr	r2, [pc, #272]	; (8003724 <HAL_GPIO_Init+0x2fc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_GPIO_Init+0x1f2>
 8003616:	2304      	movs	r3, #4
 8003618:	e008      	b.n	800362c <HAL_GPIO_Init+0x204>
 800361a:	2307      	movs	r3, #7
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x204>
 800361e:	2303      	movs	r3, #3
 8003620:	e004      	b.n	800362c <HAL_GPIO_Init+0x204>
 8003622:	2302      	movs	r3, #2
 8003624:	e002      	b.n	800362c <HAL_GPIO_Init+0x204>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_GPIO_Init+0x204>
 800362a:	2300      	movs	r3, #0
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f002 0203 	and.w	r2, r2, #3
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	4093      	lsls	r3, r2
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800363c:	4934      	ldr	r1, [pc, #208]	; (8003710 <HAL_GPIO_Init+0x2e8>)
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3302      	adds	r3, #2
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800364a:	4b37      	ldr	r3, [pc, #220]	; (8003728 <HAL_GPIO_Init+0x300>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800366e:	4a2e      	ldr	r2, [pc, #184]	; (8003728 <HAL_GPIO_Init+0x300>)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003674:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <HAL_GPIO_Init+0x300>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003698:	4a23      	ldr	r2, [pc, #140]	; (8003728 <HAL_GPIO_Init+0x300>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <HAL_GPIO_Init+0x300>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036c2:	4a19      	ldr	r2, [pc, #100]	; (8003728 <HAL_GPIO_Init+0x300>)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_GPIO_Init+0x300>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036ec:	4a0e      	ldr	r2, [pc, #56]	; (8003728 <HAL_GPIO_Init+0x300>)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3301      	adds	r3, #1
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	f67f aea2 	bls.w	8003444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003700:	bf00      	nop
 8003702:	3724      	adds	r7, #36	; 0x24
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40023800 	.word	0x40023800
 8003710:	40013800 	.word	0x40013800
 8003714:	40020000 	.word	0x40020000
 8003718:	40020400 	.word	0x40020400
 800371c:	40020800 	.word	0x40020800
 8003720:	40020c00 	.word	0x40020c00
 8003724:	40021000 	.word	0x40021000
 8003728:	40013c00 	.word	0x40013c00

0800372c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e001      	b.n	800374e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800376c:	787b      	ldrb	r3, [r7, #1]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003778:	e003      	b.n	8003782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	041a      	lsls	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	619a      	str	r2, [r3, #24]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e11f      	b.n	80039e2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fe fa28 	bl	8001c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f4:	f001 fba8 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 80037f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4a7b      	ldr	r2, [pc, #492]	; (80039ec <HAL_I2C_Init+0x25c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d807      	bhi.n	8003814 <HAL_I2C_Init+0x84>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a7a      	ldr	r2, [pc, #488]	; (80039f0 <HAL_I2C_Init+0x260>)
 8003808:	4293      	cmp	r3, r2
 800380a:	bf94      	ite	ls
 800380c:	2301      	movls	r3, #1
 800380e:	2300      	movhi	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	e006      	b.n	8003822 <HAL_I2C_Init+0x92>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4a77      	ldr	r2, [pc, #476]	; (80039f4 <HAL_I2C_Init+0x264>)
 8003818:	4293      	cmp	r3, r2
 800381a:	bf94      	ite	ls
 800381c:	2301      	movls	r3, #1
 800381e:	2300      	movhi	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e0db      	b.n	80039e2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a72      	ldr	r2, [pc, #456]	; (80039f8 <HAL_I2C_Init+0x268>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	0c9b      	lsrs	r3, r3, #18
 8003834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a64      	ldr	r2, [pc, #400]	; (80039ec <HAL_I2C_Init+0x25c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d802      	bhi.n	8003864 <HAL_I2C_Init+0xd4>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	3301      	adds	r3, #1
 8003862:	e009      	b.n	8003878 <HAL_I2C_Init+0xe8>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	4a63      	ldr	r2, [pc, #396]	; (80039fc <HAL_I2C_Init+0x26c>)
 8003870:	fba2 2303 	umull	r2, r3, r2, r3
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	3301      	adds	r3, #1
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	430b      	orrs	r3, r1
 800387e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800388a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4956      	ldr	r1, [pc, #344]	; (80039ec <HAL_I2C_Init+0x25c>)
 8003894:	428b      	cmp	r3, r1
 8003896:	d80d      	bhi.n	80038b4 <HAL_I2C_Init+0x124>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e59      	subs	r1, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a6:	3301      	adds	r3, #1
 80038a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	bf38      	it	cc
 80038b0:	2304      	movcc	r3, #4
 80038b2:	e04f      	b.n	8003954 <HAL_I2C_Init+0x1c4>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d111      	bne.n	80038e0 <HAL_I2C_Init+0x150>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e012      	b.n	8003906 <HAL_I2C_Init+0x176>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e58      	subs	r0, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	0099      	lsls	r1, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Init+0x17e>
 800390a:	2301      	movs	r3, #1
 800390c:	e022      	b.n	8003954 <HAL_I2C_Init+0x1c4>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10e      	bne.n	8003934 <HAL_I2C_Init+0x1a4>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1e58      	subs	r0, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	fbb0 f3f3 	udiv	r3, r0, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003932:	e00f      	b.n	8003954 <HAL_I2C_Init+0x1c4>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e58      	subs	r0, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	0099      	lsls	r1, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	fbb0 f3f3 	udiv	r3, r0, r3
 800394a:	3301      	adds	r3, #1
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	6809      	ldr	r1, [r1, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003982:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6911      	ldr	r1, [r2, #16]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	430b      	orrs	r3, r1
 8003996:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	000186a0 	.word	0x000186a0
 80039f0:	001e847f 	.word	0x001e847f
 80039f4:	003d08ff 	.word	0x003d08ff
 80039f8:	431bde83 	.word	0x431bde83
 80039fc:	10624dd3 	.word	0x10624dd3

08003a00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	817b      	strh	r3, [r7, #10]
 8003a10:	4613      	mov	r3, r2
 8003a12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a14:	f7ff fbc8 	bl	80031a8 <HAL_GetTick>
 8003a18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	f040 80e0 	bne.w	8003be8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2319      	movs	r3, #25
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4970      	ldr	r1, [pc, #448]	; (8003bf4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fc70 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e0d3      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_I2C_Master_Transmit+0x50>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e0cc      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d007      	beq.n	8003a76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2221      	movs	r2, #33	; 0x21
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2210      	movs	r2, #16
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	893a      	ldrh	r2, [r7, #8]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a50      	ldr	r2, [pc, #320]	; (8003bf8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ab8:	8979      	ldrh	r1, [r7, #10]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fac2 	bl	8004048 <I2C_MasterRequestWrite>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e08d      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ae4:	e066      	b.n	8003bb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	6a39      	ldr	r1, [r7, #32]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fcea 	bl	80044c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d107      	bne.n	8003b0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e06b      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d11b      	bne.n	8003b88 <HAL_I2C_Master_Transmit+0x188>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d017      	beq.n	8003b88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	6a39      	ldr	r1, [r7, #32]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fcda 	bl	8004546 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d107      	bne.n	8003bb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e01a      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d194      	bne.n	8003ae6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	00100002 	.word	0x00100002
 8003bf8:	ffff0000 	.word	0xffff0000

08003bfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	817b      	strh	r3, [r7, #10]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	813b      	strh	r3, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c16:	f7ff fac7 	bl	80031a8 <HAL_GetTick>
 8003c1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	f040 8208 	bne.w	800403a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	2319      	movs	r3, #25
 8003c30:	2201      	movs	r2, #1
 8003c32:	497b      	ldr	r1, [pc, #492]	; (8003e20 <HAL_I2C_Mem_Read+0x224>)
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fb6f 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c40:	2302      	movs	r3, #2
 8003c42:	e1fb      	b.n	800403c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2C_Mem_Read+0x56>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e1f4      	b.n	800403c <HAL_I2C_Mem_Read+0x440>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d007      	beq.n	8003c78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2222      	movs	r2, #34	; 0x22
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2240      	movs	r2, #64	; 0x40
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4a5b      	ldr	r2, [pc, #364]	; (8003e24 <HAL_I2C_Mem_Read+0x228>)
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cba:	88f8      	ldrh	r0, [r7, #6]
 8003cbc:	893a      	ldrh	r2, [r7, #8]
 8003cbe:	8979      	ldrh	r1, [r7, #10]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	9301      	str	r3, [sp, #4]
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	4603      	mov	r3, r0
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fa3e 	bl	800414c <I2C_RequestMemoryRead>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e1b0      	b.n	800403c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d113      	bne.n	8003d0a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	623b      	str	r3, [r7, #32]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	623b      	str	r3, [r7, #32]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e184      	b.n	8004014 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d11b      	bne.n	8003d4a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	e164      	b.n	8004014 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d11b      	bne.n	8003d8a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	e144      	b.n	8004014 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003da0:	e138      	b.n	8004014 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	f200 80f1 	bhi.w	8003f8e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d123      	bne.n	8003dfc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fc05 	bl	80045c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e139      	b.n	800403c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dfa:	e10b      	b.n	8004014 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d14e      	bne.n	8003ea2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	4906      	ldr	r1, [pc, #24]	; (8003e28 <HAL_I2C_Mem_Read+0x22c>)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fa82 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e10e      	b.n	800403c <HAL_I2C_Mem_Read+0x440>
 8003e1e:	bf00      	nop
 8003e20:	00100002 	.word	0x00100002
 8003e24:	ffff0000 	.word	0xffff0000
 8003e28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ea0:	e0b8      	b.n	8004014 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4966      	ldr	r1, [pc, #408]	; (8004044 <HAL_I2C_Mem_Read+0x448>)
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fa33 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0bf      	b.n	800403c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	2200      	movs	r2, #0
 8003f06:	494f      	ldr	r1, [pc, #316]	; (8004044 <HAL_I2C_Mem_Read+0x448>)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa05 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e091      	b.n	800403c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f8c:	e042      	b.n	8004014 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 fb18 	bl	80045c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e04c      	b.n	800403c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d118      	bne.n	8004014 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f aec2 	bne.w	8003da2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	3728      	adds	r7, #40	; 0x28
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	00010004 	.word	0x00010004

08004048 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	460b      	mov	r3, r1
 8004056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d006      	beq.n	8004072 <I2C_MasterRequestWrite+0x2a>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d003      	beq.n	8004072 <I2C_MasterRequestWrite+0x2a>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004070:	d108      	bne.n	8004084 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e00b      	b.n	800409c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	2b12      	cmp	r3, #18
 800408a:	d107      	bne.n	800409c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f935 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00c      	beq.n	80040ce <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e035      	b.n	800413a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d6:	d108      	bne.n	80040ea <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040d8:	897b      	ldrh	r3, [r7, #10]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040e6:	611a      	str	r2, [r3, #16]
 80040e8:	e01b      	b.n	8004122 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040ea:	897b      	ldrh	r3, [r7, #10]
 80040ec:	11db      	asrs	r3, r3, #7
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f003 0306 	and.w	r3, r3, #6
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f063 030f 	orn	r3, r3, #15
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	490f      	ldr	r1, [pc, #60]	; (8004144 <I2C_MasterRequestWrite+0xfc>)
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f95c 	bl	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e010      	b.n	800413a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004118:	897b      	ldrh	r3, [r7, #10]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4908      	ldr	r1, [pc, #32]	; (8004148 <I2C_MasterRequestWrite+0x100>)
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f94c 	bl	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	00010008 	.word	0x00010008
 8004148:	00010002 	.word	0x00010002

0800414c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	4608      	mov	r0, r1
 8004156:	4611      	mov	r1, r2
 8004158:	461a      	mov	r2, r3
 800415a:	4603      	mov	r3, r0
 800415c:	817b      	strh	r3, [r7, #10]
 800415e:	460b      	mov	r3, r1
 8004160:	813b      	strh	r3, [r7, #8]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004174:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004184:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	2200      	movs	r2, #0
 800418e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f8c0 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00c      	beq.n	80041b8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e0a9      	b.n	800430c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041b8:	897b      	ldrh	r3, [r7, #10]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	6a3a      	ldr	r2, [r7, #32]
 80041cc:	4951      	ldr	r1, [pc, #324]	; (8004314 <I2C_RequestMemoryRead+0x1c8>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f8f9 	bl	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e096      	b.n	800430c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f6:	6a39      	ldr	r1, [r7, #32]
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f963 	bl	80044c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00d      	beq.n	8004220 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	2b04      	cmp	r3, #4
 800420a:	d107      	bne.n	800421c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e075      	b.n	800430c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004226:	893b      	ldrh	r3, [r7, #8]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]
 8004230:	e021      	b.n	8004276 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004232:	893b      	ldrh	r3, [r7, #8]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	b29b      	uxth	r3, r3
 8004238:	b2da      	uxtb	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004242:	6a39      	ldr	r1, [r7, #32]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f93d 	bl	80044c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	2b04      	cmp	r3, #4
 8004256:	d107      	bne.n	8004268 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e04f      	b.n	800430c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800426c:	893b      	ldrh	r3, [r7, #8]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f922 	bl	80044c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2b04      	cmp	r3, #4
 800428c:	d107      	bne.n	800429e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e034      	b.n	800430c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f82a 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e013      	b.n	800430c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042e4:	897b      	ldrh	r3, [r7, #10]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	6a3a      	ldr	r2, [r7, #32]
 80042f8:	4906      	ldr	r1, [pc, #24]	; (8004314 <I2C_RequestMemoryRead+0x1c8>)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f863 	bl	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	00010002 	.word	0x00010002

08004318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004328:	e025      	b.n	8004376 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d021      	beq.n	8004376 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fe ff39 	bl	80031a8 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d116      	bne.n	8004376 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f043 0220 	orr.w	r2, r3, #32
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e023      	b.n	80043be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d10d      	bne.n	800439c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	43da      	mvns	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4013      	ands	r3, r2
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	bf0c      	ite	eq
 8004392:	2301      	moveq	r3, #1
 8004394:	2300      	movne	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	e00c      	b.n	80043b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	43da      	mvns	r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4013      	ands	r3, r2
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d0b6      	beq.n	800432a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d4:	e051      	b.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e4:	d123      	bne.n	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f043 0204 	orr.w	r2, r3, #4
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e046      	b.n	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d021      	beq.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fe feb7 	bl	80031a8 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d116      	bne.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e020      	b.n	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10c      	bne.n	800449e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf14      	ite	ne
 8004496:	2301      	movne	r3, #1
 8004498:	2300      	moveq	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	e00b      	b.n	80044b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	43da      	mvns	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4013      	ands	r3, r2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d18d      	bne.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d0:	e02d      	b.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f8ce 	bl	8004674 <I2C_IsAcknowledgeFailed>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e02d      	b.n	800453e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d021      	beq.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fe fe5d 	bl	80031a8 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d116      	bne.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e007      	b.n	800453e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d1ca      	bne.n	80044d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004552:	e02d      	b.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f88d 	bl	8004674 <I2C_IsAcknowledgeFailed>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e02d      	b.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d021      	beq.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456c:	f7fe fe1c 	bl	80031a8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d116      	bne.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e007      	b.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d1ca      	bne.n	8004554 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d4:	e042      	b.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d119      	bne.n	8004618 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0210 	mvn.w	r2, #16
 80045ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e029      	b.n	800466c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004618:	f7fe fdc6 	bl	80031a8 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d116      	bne.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e007      	b.n	800466c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	d1b5      	bne.n	80045d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468a:	d11b      	bne.n	80046c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004694:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f043 0204 	orr.w	r2, r3, #4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e25b      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d075      	beq.n	80047de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046f2:	4ba3      	ldr	r3, [pc, #652]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d00c      	beq.n	8004718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fe:	4ba0      	ldr	r3, [pc, #640]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004706:	2b08      	cmp	r3, #8
 8004708:	d112      	bne.n	8004730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800470a:	4b9d      	ldr	r3, [pc, #628]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004716:	d10b      	bne.n	8004730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	4b99      	ldr	r3, [pc, #612]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d05b      	beq.n	80047dc <HAL_RCC_OscConfig+0x108>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d157      	bne.n	80047dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e236      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d106      	bne.n	8004748 <HAL_RCC_OscConfig+0x74>
 800473a:	4b91      	ldr	r3, [pc, #580]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a90      	ldr	r2, [pc, #576]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e01d      	b.n	8004784 <HAL_RCC_OscConfig+0xb0>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x98>
 8004752:	4b8b      	ldr	r3, [pc, #556]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a8a      	ldr	r2, [pc, #552]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b88      	ldr	r3, [pc, #544]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a87      	ldr	r2, [pc, #540]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0xb0>
 800476c:	4b84      	ldr	r3, [pc, #528]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a83      	ldr	r2, [pc, #524]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b81      	ldr	r3, [pc, #516]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a80      	ldr	r2, [pc, #512]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 800477e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fe fd0c 	bl	80031a8 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004794:	f7fe fd08 	bl	80031a8 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	; 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e1fb      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b76      	ldr	r3, [pc, #472]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0xc0>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7fe fcf8 	bl	80031a8 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047bc:	f7fe fcf4 	bl	80031a8 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	; 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e1e7      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	4b6c      	ldr	r3, [pc, #432]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0xe8>
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d063      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ea:	4b65      	ldr	r3, [pc, #404]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f6:	4b62      	ldr	r3, [pc, #392]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d11c      	bne.n	800483c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004802:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d116      	bne.n	800483c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480e:	4b5c      	ldr	r3, [pc, #368]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_RCC_OscConfig+0x152>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d001      	beq.n	8004826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e1bb      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004826:	4b56      	ldr	r3, [pc, #344]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4952      	ldr	r1, [pc, #328]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	e03a      	b.n	80048b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004844:	4b4f      	ldr	r3, [pc, #316]	; (8004984 <HAL_RCC_OscConfig+0x2b0>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fe fcad 	bl	80031a8 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004852:	f7fe fca9 	bl	80031a8 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e19c      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004864:	4b46      	ldr	r3, [pc, #280]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4940      	ldr	r1, [pc, #256]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]
 8004884:	e015      	b.n	80048b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004886:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <HAL_RCC_OscConfig+0x2b0>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fe fc8c 	bl	80031a8 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004894:	f7fe fc88 	bl	80031a8 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e17b      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	4b36      	ldr	r3, [pc, #216]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d030      	beq.n	8004920 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d016      	beq.n	80048f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c6:	4b30      	ldr	r3, [pc, #192]	; (8004988 <HAL_RCC_OscConfig+0x2b4>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fe fc6c 	bl	80031a8 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d4:	f7fe fc68 	bl	80031a8 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e15b      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	4b26      	ldr	r3, [pc, #152]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0x200>
 80048f2:	e015      	b.n	8004920 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f4:	4b24      	ldr	r3, [pc, #144]	; (8004988 <HAL_RCC_OscConfig+0x2b4>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fa:	f7fe fc55 	bl	80031a8 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004902:	f7fe fc51 	bl	80031a8 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e144      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f0      	bne.n	8004902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80a0 	beq.w	8004a6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800492e:	2300      	movs	r3, #0
 8004930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004932:	4b13      	ldr	r3, [pc, #76]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494c:	6413      	str	r3, [r2, #64]	; 0x40
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495a:	2301      	movs	r3, #1
 800495c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_OscConfig+0x2b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d121      	bne.n	80049ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <HAL_RCC_OscConfig+0x2b8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a07      	ldr	r2, [pc, #28]	; (800498c <HAL_RCC_OscConfig+0x2b8>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004976:	f7fe fc17 	bl	80031a8 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497c:	e011      	b.n	80049a2 <HAL_RCC_OscConfig+0x2ce>
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800
 8004984:	42470000 	.word	0x42470000
 8004988:	42470e80 	.word	0x42470e80
 800498c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004990:	f7fe fc0a 	bl	80031a8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e0fd      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a2:	4b81      	ldr	r3, [pc, #516]	; (8004ba8 <HAL_RCC_OscConfig+0x4d4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d106      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2f0>
 80049b6:	4b7d      	ldr	r3, [pc, #500]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a7c      	ldr	r2, [pc, #496]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
 80049c2:	e01c      	b.n	80049fe <HAL_RCC_OscConfig+0x32a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCC_OscConfig+0x312>
 80049cc:	4b77      	ldr	r3, [pc, #476]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a76      	ldr	r2, [pc, #472]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 80049d2:	f043 0304 	orr.w	r3, r3, #4
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	4b74      	ldr	r3, [pc, #464]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a73      	ldr	r2, [pc, #460]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
 80049e4:	e00b      	b.n	80049fe <HAL_RCC_OscConfig+0x32a>
 80049e6:	4b71      	ldr	r3, [pc, #452]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a70      	ldr	r2, [pc, #448]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
 80049f2:	4b6e      	ldr	r3, [pc, #440]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a6d      	ldr	r2, [pc, #436]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d015      	beq.n	8004a32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a06:	f7fe fbcf 	bl	80031a8 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f7fe fbcb 	bl	80031a8 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e0bc      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a24:	4b61      	ldr	r3, [pc, #388]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ee      	beq.n	8004a0e <HAL_RCC_OscConfig+0x33a>
 8004a30:	e014      	b.n	8004a5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a32:	f7fe fbb9 	bl	80031a8 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a38:	e00a      	b.n	8004a50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fe fbb5 	bl	80031a8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0a6      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a50:	4b56      	ldr	r3, [pc, #344]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1ee      	bne.n	8004a3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d105      	bne.n	8004a6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a62:	4b52      	ldr	r3, [pc, #328]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	4a51      	ldr	r2, [pc, #324]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 8004a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8092 	beq.w	8004b9c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a78:	4b4c      	ldr	r3, [pc, #304]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 030c 	and.w	r3, r3, #12
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d05c      	beq.n	8004b3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d141      	bne.n	8004b10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8c:	4b48      	ldr	r3, [pc, #288]	; (8004bb0 <HAL_RCC_OscConfig+0x4dc>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a92:	f7fe fb89 	bl	80031a8 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a9a:	f7fe fb85 	bl	80031a8 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e078      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aac:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	019b      	lsls	r3, r3, #6
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	061b      	lsls	r3, r3, #24
 8004adc:	4933      	ldr	r1, [pc, #204]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae2:	4b33      	ldr	r3, [pc, #204]	; (8004bb0 <HAL_RCC_OscConfig+0x4dc>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae8:	f7fe fb5e 	bl	80031a8 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fe fb5a 	bl	80031a8 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e04d      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b02:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x41c>
 8004b0e:	e045      	b.n	8004b9c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b10:	4b27      	ldr	r3, [pc, #156]	; (8004bb0 <HAL_RCC_OscConfig+0x4dc>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fe fb47 	bl	80031a8 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fe fb43 	bl	80031a8 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e036      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b30:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x44a>
 8004b3c:	e02e      	b.n	8004b9c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e029      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b4a:	4b18      	ldr	r3, [pc, #96]	; (8004bac <HAL_RCC_OscConfig+0x4d8>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d11c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d115      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b72:	4013      	ands	r3, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d10d      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d106      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40007000 	.word	0x40007000
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	42470060 	.word	0x42470060

08004bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0cc      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d90c      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b65      	ldr	r3, [pc, #404]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bde:	4b63      	ldr	r3, [pc, #396]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0b8      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d020      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c08:	4b59      	ldr	r3, [pc, #356]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a58      	ldr	r2, [pc, #352]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c20:	4b53      	ldr	r3, [pc, #332]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a52      	ldr	r2, [pc, #328]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2c:	4b50      	ldr	r3, [pc, #320]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	494d      	ldr	r1, [pc, #308]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d044      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c52:	4b47      	ldr	r3, [pc, #284]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d119      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e07f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d003      	beq.n	8004c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c72:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e06f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c82:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e067      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c92:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f023 0203 	bic.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4934      	ldr	r1, [pc, #208]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca4:	f7fe fa80 	bl	80031a8 <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cac:	f7fe fa7c 	bl	80031a8 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e04f      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 020c 	and.w	r2, r3, #12
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d1eb      	bne.n	8004cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d20c      	bcs.n	8004cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b22      	ldr	r3, [pc, #136]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	4b20      	ldr	r3, [pc, #128]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e032      	b.n	8004d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d08:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4916      	ldr	r1, [pc, #88]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	490e      	ldr	r1, [pc, #56]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d3a:	f000 f821 	bl	8004d80 <HAL_RCC_GetSysClockFreq>
 8004d3e:	4601      	mov	r1, r0
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4c:	5cd3      	ldrb	r3, [r2, r3]
 8004d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d56:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <HAL_RCC_ClockConfig+0x1c8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe f9e0 	bl	8003120 <HAL_InitTick>

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023c00 	.word	0x40023c00
 8004d70:	40023800 	.word	0x40023800
 8004d74:	0800a2a8 	.word	0x0800a2a8
 8004d78:	20000020 	.word	0x20000020
 8004d7c:	20000060 	.word	0x20000060

08004d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d96:	4b63      	ldr	r3, [pc, #396]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 030c 	and.w	r3, r3, #12
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d007      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0x32>
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d008      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x38>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 80b4 	bne.w	8004f14 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dac:	4b5e      	ldr	r3, [pc, #376]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004dae:	60bb      	str	r3, [r7, #8]
       break;
 8004db0:	e0b3      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004db2:	4b5e      	ldr	r3, [pc, #376]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004db4:	60bb      	str	r3, [r7, #8]
      break;
 8004db6:	e0b0      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004db8:	4b5a      	ldr	r3, [pc, #360]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dc2:	4b58      	ldr	r3, [pc, #352]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d04a      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dce:	4b55      	ldr	r3, [pc, #340]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	099b      	lsrs	r3, r3, #6
 8004dd4:	f04f 0400 	mov.w	r4, #0
 8004dd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	ea03 0501 	and.w	r5, r3, r1
 8004de4:	ea04 0602 	and.w	r6, r4, r2
 8004de8:	4629      	mov	r1, r5
 8004dea:	4632      	mov	r2, r6
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	f04f 0400 	mov.w	r4, #0
 8004df4:	0154      	lsls	r4, r2, #5
 8004df6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dfa:	014b      	lsls	r3, r1, #5
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4622      	mov	r2, r4
 8004e00:	1b49      	subs	r1, r1, r5
 8004e02:	eb62 0206 	sbc.w	r2, r2, r6
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	f04f 0400 	mov.w	r4, #0
 8004e0e:	0194      	lsls	r4, r2, #6
 8004e10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e14:	018b      	lsls	r3, r1, #6
 8004e16:	1a5b      	subs	r3, r3, r1
 8004e18:	eb64 0402 	sbc.w	r4, r4, r2
 8004e1c:	f04f 0100 	mov.w	r1, #0
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	00e2      	lsls	r2, r4, #3
 8004e26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e2a:	00d9      	lsls	r1, r3, #3
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4614      	mov	r4, r2
 8004e30:	195b      	adds	r3, r3, r5
 8004e32:	eb44 0406 	adc.w	r4, r4, r6
 8004e36:	f04f 0100 	mov.w	r1, #0
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	0262      	lsls	r2, r4, #9
 8004e40:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004e44:	0259      	lsls	r1, r3, #9
 8004e46:	460b      	mov	r3, r1
 8004e48:	4614      	mov	r4, r2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f04f 0400 	mov.w	r4, #0
 8004e54:	461a      	mov	r2, r3
 8004e56:	4623      	mov	r3, r4
 8004e58:	f7fb feae 	bl	8000bb8 <__aeabi_uldivmod>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e049      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e64:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	099b      	lsrs	r3, r3, #6
 8004e6a:	f04f 0400 	mov.w	r4, #0
 8004e6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	ea03 0501 	and.w	r5, r3, r1
 8004e7a:	ea04 0602 	and.w	r6, r4, r2
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4632      	mov	r2, r6
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	f04f 0400 	mov.w	r4, #0
 8004e8a:	0154      	lsls	r4, r2, #5
 8004e8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e90:	014b      	lsls	r3, r1, #5
 8004e92:	4619      	mov	r1, r3
 8004e94:	4622      	mov	r2, r4
 8004e96:	1b49      	subs	r1, r1, r5
 8004e98:	eb62 0206 	sbc.w	r2, r2, r6
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	f04f 0400 	mov.w	r4, #0
 8004ea4:	0194      	lsls	r4, r2, #6
 8004ea6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004eaa:	018b      	lsls	r3, r1, #6
 8004eac:	1a5b      	subs	r3, r3, r1
 8004eae:	eb64 0402 	sbc.w	r4, r4, r2
 8004eb2:	f04f 0100 	mov.w	r1, #0
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	00e2      	lsls	r2, r4, #3
 8004ebc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ec0:	00d9      	lsls	r1, r3, #3
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	195b      	adds	r3, r3, r5
 8004ec8:	eb44 0406 	adc.w	r4, r4, r6
 8004ecc:	f04f 0100 	mov.w	r1, #0
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	02a2      	lsls	r2, r4, #10
 8004ed6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004eda:	0299      	lsls	r1, r3, #10
 8004edc:	460b      	mov	r3, r1
 8004ede:	4614      	mov	r4, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f04f 0400 	mov.w	r4, #0
 8004eea:	461a      	mov	r2, r3
 8004eec:	4623      	mov	r3, r4
 8004eee:	f7fb fe63 	bl	8000bb8 <__aeabi_uldivmod>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	3301      	adds	r3, #1
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	60bb      	str	r3, [r7, #8]
      break;
 8004f12:	e002      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f16:	60bb      	str	r3, [r7, #8]
      break;
 8004f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	00f42400 	.word	0x00f42400
 8004f2c:	007a1200 	.word	0x007a1200

08004f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f34:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f36:	681b      	ldr	r3, [r3, #0]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20000020 	.word	0x20000020

08004f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f4c:	f7ff fff0 	bl	8004f30 <HAL_RCC_GetHCLKFreq>
 8004f50:	4601      	mov	r1, r0
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	0a9b      	lsrs	r3, r3, #10
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f5e:	5cd3      	ldrb	r3, [r2, r3]
 8004f60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	0800a2b8 	.word	0x0800a2b8

08004f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f74:	f7ff ffdc 	bl	8004f30 <HAL_RCC_GetHCLKFreq>
 8004f78:	4601      	mov	r1, r0
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	0b5b      	lsrs	r3, r3, #13
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4a03      	ldr	r2, [pc, #12]	; (8004f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f86:	5cd3      	ldrb	r3, [r2, r3]
 8004f88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40023800 	.word	0x40023800
 8004f94:	0800a2b8 	.word	0x0800a2b8

08004f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e056      	b.n	8005058 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fc fe69 	bl	8001c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	ea42 0103 	orr.w	r1, r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	0c1b      	lsrs	r3, r3, #16
 8005028:	f003 0104 	and.w	r1, r3, #4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005046:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_SPI_Transmit+0x22>
 800507e:	2302      	movs	r3, #2
 8005080:	e11e      	b.n	80052c0 <HAL_SPI_Transmit+0x260>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800508a:	f7fe f88d 	bl	80031a8 <HAL_GetTick>
 800508e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	d002      	beq.n	80050a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
 80050a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050a4:	e103      	b.n	80052ae <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_SPI_Transmit+0x52>
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050b6:	e0fa      	b.n	80052ae <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2203      	movs	r2, #3
 80050bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	88fa      	ldrh	r2, [r7, #6]
 80050d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	88fa      	ldrh	r2, [r7, #6]
 80050d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fe:	d107      	bne.n	8005110 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800510e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d007      	beq.n	800512e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800512c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005136:	d14b      	bne.n	80051d0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <HAL_SPI_Transmit+0xe6>
 8005140:	8afb      	ldrh	r3, [r7, #22]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d13e      	bne.n	80051c4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	881a      	ldrh	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	1c9a      	adds	r2, r3, #2
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800516a:	e02b      	b.n	80051c4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d112      	bne.n	80051a0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	881a      	ldrh	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	1c9a      	adds	r2, r3, #2
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	86da      	strh	r2, [r3, #54]	; 0x36
 800519e:	e011      	b.n	80051c4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051a0:	f7fe f802 	bl	80031a8 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d803      	bhi.n	80051b8 <HAL_SPI_Transmit+0x158>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b6:	d102      	bne.n	80051be <HAL_SPI_Transmit+0x15e>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051c2:	e074      	b.n	80052ae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1ce      	bne.n	800516c <HAL_SPI_Transmit+0x10c>
 80051ce:	e04c      	b.n	800526a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_SPI_Transmit+0x17e>
 80051d8:	8afb      	ldrh	r3, [r7, #22]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d140      	bne.n	8005260 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	7812      	ldrb	r2, [r2, #0]
 80051ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005204:	e02c      	b.n	8005260 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b02      	cmp	r3, #2
 8005212:	d113      	bne.n	800523c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	86da      	strh	r2, [r3, #54]	; 0x36
 800523a:	e011      	b.n	8005260 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800523c:	f7fd ffb4 	bl	80031a8 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d803      	bhi.n	8005254 <HAL_SPI_Transmit+0x1f4>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d102      	bne.n	800525a <HAL_SPI_Transmit+0x1fa>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800525e:	e026      	b.n	80052ae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1cd      	bne.n	8005206 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f894 	bl	800539c <SPI_EndRxTxTransaction>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e000      	b.n	80052ae <HAL_SPI_Transmit+0x24e>
  }

error:
 80052ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052be:	7ffb      	ldrb	r3, [r7, #31]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052d8:	e04c      	b.n	8005374 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e0:	d048      	beq.n	8005374 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80052e2:	f7fd ff61 	bl	80031a8 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d902      	bls.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d13d      	bne.n	8005374 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005306:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005310:	d111      	bne.n	8005336 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531a:	d004      	beq.n	8005326 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005324:	d107      	bne.n	8005336 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005334:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533e:	d10f      	bne.n	8005360 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800535e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e00f      	b.n	8005394 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4013      	ands	r3, r2
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	429a      	cmp	r2, r3
 8005382:	bf0c      	ite	eq
 8005384:	2301      	moveq	r3, #1
 8005386:	2300      	movne	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	429a      	cmp	r2, r3
 8005390:	d1a3      	bne.n	80052da <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053a8:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <SPI_EndRxTxTransaction+0x7c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1b      	ldr	r2, [pc, #108]	; (800541c <SPI_EndRxTxTransaction+0x80>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	0d5b      	lsrs	r3, r3, #21
 80053b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053b8:	fb02 f303 	mul.w	r3, r2, r3
 80053bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053c6:	d112      	bne.n	80053ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2200      	movs	r2, #0
 80053d0:	2180      	movs	r1, #128	; 0x80
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff ff78 	bl	80052c8 <SPI_WaitFlagStateUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	f043 0220 	orr.w	r2, r3, #32
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e00f      	b.n	800540e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d0f2      	beq.n	80053ee <SPI_EndRxTxTransaction+0x52>
 8005408:	e000      	b.n	800540c <SPI_EndRxTxTransaction+0x70>
        break;
 800540a:	bf00      	nop
  }

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000020 	.word	0x20000020
 800541c:	165e9f81 	.word	0x165e9f81

08005420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e01d      	b.n	800546e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fc fc70 	bl	8001d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f000 fb4c 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b06      	cmp	r3, #6
 800549e:	d007      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e01d      	b.n	800550c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f815 	bl	8005514 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4610      	mov	r0, r2
 80054fe:	f000 fafd 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2201      	movs	r2, #1
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fd84 	bl	8006048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a10      	ldr	r2, [pc, #64]	; (8005588 <HAL_TIM_PWM_Start+0x60>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d107      	bne.n	800555a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005558:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b06      	cmp	r3, #6
 800556a:	d007      	beq.n	800557c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	40010000 	.word	0x40010000

0800558c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d122      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d11b      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0202 	mvn.w	r2, #2
 80055b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fa75 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa67 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fa78 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d122      	bne.n	800563c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b04      	cmp	r3, #4
 8005602:	d11b      	bne.n	800563c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0204 	mvn.w	r2, #4
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa4b 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa3d 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fa4e 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b08      	cmp	r3, #8
 8005648:	d122      	bne.n	8005690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b08      	cmp	r3, #8
 8005656:	d11b      	bne.n	8005690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0208 	mvn.w	r2, #8
 8005660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2204      	movs	r2, #4
 8005666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa21 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 800567c:	e005      	b.n	800568a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa13 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fa24 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b10      	cmp	r3, #16
 800569c:	d122      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d11b      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0210 	mvn.w	r2, #16
 80056b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2208      	movs	r2, #8
 80056ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f9f7 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 80056d0:	e005      	b.n	80056de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f9e9 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f9fa 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d10e      	bne.n	8005710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d107      	bne.n	8005710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0201 	mvn.w	r2, #1
 8005708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9c3 	bl	8005a96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571a:	2b80      	cmp	r3, #128	; 0x80
 800571c:	d10e      	bne.n	800573c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005728:	2b80      	cmp	r3, #128	; 0x80
 800572a:	d107      	bne.n	800573c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fd24 	bl	8006184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d10e      	bne.n	8005768 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d107      	bne.n	8005768 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f9bf 	bl	8005ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b20      	cmp	r3, #32
 8005774:	d10e      	bne.n	8005794 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b20      	cmp	r3, #32
 8005782:	d107      	bne.n	8005794 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0220 	mvn.w	r2, #32
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fcee 	bl	8006170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0b4      	b.n	8005920 <HAL_TIM_PWM_ConfigChannel+0x184>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2202      	movs	r2, #2
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b0c      	cmp	r3, #12
 80057ca:	f200 809f 	bhi.w	800590c <HAL_TIM_PWM_ConfigChannel+0x170>
 80057ce:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	08005809 	.word	0x08005809
 80057d8:	0800590d 	.word	0x0800590d
 80057dc:	0800590d 	.word	0x0800590d
 80057e0:	0800590d 	.word	0x0800590d
 80057e4:	08005849 	.word	0x08005849
 80057e8:	0800590d 	.word	0x0800590d
 80057ec:	0800590d 	.word	0x0800590d
 80057f0:	0800590d 	.word	0x0800590d
 80057f4:	0800588b 	.word	0x0800588b
 80057f8:	0800590d 	.word	0x0800590d
 80057fc:	0800590d 	.word	0x0800590d
 8005800:	0800590d 	.word	0x0800590d
 8005804:	080058cb 	.word	0x080058cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f9f4 	bl	8005bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0208 	orr.w	r2, r2, #8
 8005822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0204 	bic.w	r2, r2, #4
 8005832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6999      	ldr	r1, [r3, #24]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	619a      	str	r2, [r3, #24]
      break;
 8005846:	e062      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fa3a 	bl	8005cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6999      	ldr	r1, [r3, #24]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	619a      	str	r2, [r3, #24]
      break;
 8005888:	e041      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fa85 	bl	8005da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0208 	orr.w	r2, r2, #8
 80058a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0204 	bic.w	r2, r2, #4
 80058b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69d9      	ldr	r1, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	61da      	str	r2, [r3, #28]
      break;
 80058c8:	e021      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 facf 	bl	8005e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69d9      	ldr	r1, [r3, #28]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	021a      	lsls	r2, r3, #8
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	61da      	str	r2, [r3, #28]
      break;
 800590a:	e000      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800590c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_TIM_ConfigClockSource+0x18>
 800593c:	2302      	movs	r3, #2
 800593e:	e0a6      	b.n	8005a8e <HAL_TIM_ConfigClockSource+0x166>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800595e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005966:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d067      	beq.n	8005a48 <HAL_TIM_ConfigClockSource+0x120>
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	d80b      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x6c>
 800597c:	2b10      	cmp	r3, #16
 800597e:	d073      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x140>
 8005980:	2b10      	cmp	r3, #16
 8005982:	d802      	bhi.n	800598a <HAL_TIM_ConfigClockSource+0x62>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d06f      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005988:	e078      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800598a:	2b20      	cmp	r3, #32
 800598c:	d06c      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x140>
 800598e:	2b30      	cmp	r3, #48	; 0x30
 8005990:	d06a      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005992:	e073      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005994:	2b70      	cmp	r3, #112	; 0x70
 8005996:	d00d      	beq.n	80059b4 <HAL_TIM_ConfigClockSource+0x8c>
 8005998:	2b70      	cmp	r3, #112	; 0x70
 800599a:	d804      	bhi.n	80059a6 <HAL_TIM_ConfigClockSource+0x7e>
 800599c:	2b50      	cmp	r3, #80	; 0x50
 800599e:	d033      	beq.n	8005a08 <HAL_TIM_ConfigClockSource+0xe0>
 80059a0:	2b60      	cmp	r3, #96	; 0x60
 80059a2:	d041      	beq.n	8005a28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80059a4:	e06a      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059aa:	d066      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x152>
 80059ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b0:	d017      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80059b2:	e063      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6899      	ldr	r1, [r3, #8]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f000 fb20 	bl	8006008 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]
      break;
 80059e0:	e04c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f000 fb09 	bl	8006008 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a04:	609a      	str	r2, [r3, #8]
      break;
 8005a06:	e039      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	461a      	mov	r2, r3
 8005a16:	f000 fa7d 	bl	8005f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2150      	movs	r1, #80	; 0x50
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fad6 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a26:	e029      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6859      	ldr	r1, [r3, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f000 fa9c 	bl	8005f72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2160      	movs	r1, #96	; 0x60
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fac6 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a46:	e019      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	461a      	mov	r2, r3
 8005a56:	f000 fa5d 	bl	8005f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2140      	movs	r1, #64	; 0x40
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fab6 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a66:	e009      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 faad 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005a78:	e000      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a34      	ldr	r2, [pc, #208]	; (8005be0 <TIM_Base_SetConfig+0xe4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00f      	beq.n	8005b34 <TIM_Base_SetConfig+0x38>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1a:	d00b      	beq.n	8005b34 <TIM_Base_SetConfig+0x38>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a31      	ldr	r2, [pc, #196]	; (8005be4 <TIM_Base_SetConfig+0xe8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_Base_SetConfig+0x38>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <TIM_Base_SetConfig+0xec>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_Base_SetConfig+0x38>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a2f      	ldr	r2, [pc, #188]	; (8005bec <TIM_Base_SetConfig+0xf0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d108      	bne.n	8005b46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a25      	ldr	r2, [pc, #148]	; (8005be0 <TIM_Base_SetConfig+0xe4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01b      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d017      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a22      	ldr	r2, [pc, #136]	; (8005be4 <TIM_Base_SetConfig+0xe8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d013      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a21      	ldr	r2, [pc, #132]	; (8005be8 <TIM_Base_SetConfig+0xec>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00f      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a20      	ldr	r2, [pc, #128]	; (8005bec <TIM_Base_SetConfig+0xf0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00b      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <TIM_Base_SetConfig+0xf4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d007      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <TIM_Base_SetConfig+0xf8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <TIM_Base_SetConfig+0x8a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1d      	ldr	r2, [pc, #116]	; (8005bf8 <TIM_Base_SetConfig+0xfc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d108      	bne.n	8005b98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <TIM_Base_SetConfig+0xe4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d103      	bne.n	8005bcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	615a      	str	r2, [r3, #20]
}
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40014400 	.word	0x40014400
 8005bf8:	40014800 	.word	0x40014800

08005bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f023 0201 	bic.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f023 0302 	bic.w	r3, r3, #2
 8005c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <TIM_OC1_SetConfig+0xc8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d10c      	bne.n	8005c72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 0308 	bic.w	r3, r3, #8
 8005c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f023 0304 	bic.w	r3, r3, #4
 8005c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <TIM_OC1_SetConfig+0xc8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d111      	bne.n	8005c9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	621a      	str	r2, [r3, #32]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40010000 	.word	0x40010000

08005cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0210 	bic.w	r2, r3, #16
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0320 	bic.w	r3, r3, #32
 8005d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <TIM_OC2_SetConfig+0xd4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d10d      	bne.n	8005d44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <TIM_OC2_SetConfig+0xd4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d113      	bne.n	8005d74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000

08005da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1d      	ldr	r2, [pc, #116]	; (8005e70 <TIM_OC3_SetConfig+0xd0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10d      	bne.n	8005e1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a14      	ldr	r2, [pc, #80]	; (8005e70 <TIM_OC3_SetConfig+0xd0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d113      	bne.n	8005e4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	621a      	str	r2, [r3, #32]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	40010000 	.word	0x40010000

08005e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	031b      	lsls	r3, r3, #12
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a10      	ldr	r2, [pc, #64]	; (8005f10 <TIM_OC4_SetConfig+0x9c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d109      	bne.n	8005ee8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	019b      	lsls	r3, r3, #6
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000

08005f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0201 	bic.w	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 030a 	bic.w	r3, r3, #10
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b087      	sub	sp, #28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0210 	bic.w	r2, r3, #16
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f043 0307 	orr.w	r3, r3, #7
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	021a      	lsls	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	431a      	orrs	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	609a      	str	r2, [r3, #8]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2201      	movs	r2, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	43db      	mvns	r3, r3
 800606a:	401a      	ands	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	431a      	orrs	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e050      	b.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f8:	d013      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a18      	ldr	r2, [pc, #96]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a16      	ldr	r2, [pc, #88]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a15      	ldr	r2, [pc, #84]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d10c      	bne.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	4313      	orrs	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40010000 	.word	0x40010000
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40014000 	.word	0x40014000

08006170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e03f      	b.n	800622a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fb fe50 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2224      	movs	r2, #36	; 0x24
 80061c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f90b 	bl	80063f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b088      	sub	sp, #32
 8006236:	af02      	add	r7, sp, #8
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	603b      	str	r3, [r7, #0]
 800623e:	4613      	mov	r3, r2
 8006240:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b20      	cmp	r3, #32
 8006250:	f040 8083 	bne.w	800635a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HAL_UART_Transmit+0x2e>
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e07b      	b.n	800635c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_UART_Transmit+0x40>
 800626e:	2302      	movs	r3, #2
 8006270:	e074      	b.n	800635c <HAL_UART_Transmit+0x12a>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2221      	movs	r2, #33	; 0x21
 8006284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006288:	f7fc ff8e 	bl	80031a8 <HAL_GetTick>
 800628c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	88fa      	ldrh	r2, [r7, #6]
 8006292:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80062a2:	e042      	b.n	800632a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ba:	d122      	bne.n	8006302 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2200      	movs	r2, #0
 80062c4:	2180      	movs	r1, #128	; 0x80
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f84c 	bl	8006364 <UART_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e042      	b.n	800635c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	3302      	adds	r3, #2
 80062f6:	60bb      	str	r3, [r7, #8]
 80062f8:	e017      	b.n	800632a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	3301      	adds	r3, #1
 80062fe:	60bb      	str	r3, [r7, #8]
 8006300:	e013      	b.n	800632a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	2180      	movs	r1, #128	; 0x80
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f829 	bl	8006364 <UART_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e01f      	b.n	800635c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	60ba      	str	r2, [r7, #8]
 8006322:	781a      	ldrb	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1b7      	bne.n	80062a4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2200      	movs	r2, #0
 800633c:	2140      	movs	r1, #64	; 0x40
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f810 	bl	8006364 <UART_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e006      	b.n	800635c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	e000      	b.n	800635c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800635a:	2302      	movs	r3, #2
  }
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	4613      	mov	r3, r2
 8006372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006374:	e02c      	b.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d028      	beq.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <UART_WaitOnFlagUntilTimeout+0x30>
 8006384:	f7fc ff10 	bl	80031a8 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	429a      	cmp	r2, r3
 8006392:	d21d      	bcs.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695a      	ldr	r2, [r3, #20]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e00f      	b.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4013      	ands	r3, r2
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	429a      	cmp	r2, r3
 80063de:	bf0c      	ite	eq
 80063e0:	2301      	moveq	r3, #1
 80063e2:	2300      	movne	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d0c3      	beq.n	8006376 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800643a:	f023 030c 	bic.w	r3, r3, #12
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	430b      	orrs	r3, r1
 8006446:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006466:	f040 818b 	bne.w	8006780 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4ac1      	ldr	r2, [pc, #772]	; (8006774 <UART_SetConfig+0x37c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d005      	beq.n	8006480 <UART_SetConfig+0x88>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4abf      	ldr	r2, [pc, #764]	; (8006778 <UART_SetConfig+0x380>)
 800647a:	4293      	cmp	r3, r2
 800647c:	f040 80bd 	bne.w	80065fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006480:	f7fe fd76 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8006484:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	461d      	mov	r5, r3
 800648a:	f04f 0600 	mov.w	r6, #0
 800648e:	46a8      	mov	r8, r5
 8006490:	46b1      	mov	r9, r6
 8006492:	eb18 0308 	adds.w	r3, r8, r8
 8006496:	eb49 0409 	adc.w	r4, r9, r9
 800649a:	4698      	mov	r8, r3
 800649c:	46a1      	mov	r9, r4
 800649e:	eb18 0805 	adds.w	r8, r8, r5
 80064a2:	eb49 0906 	adc.w	r9, r9, r6
 80064a6:	f04f 0100 	mov.w	r1, #0
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064ba:	4688      	mov	r8, r1
 80064bc:	4691      	mov	r9, r2
 80064be:	eb18 0005 	adds.w	r0, r8, r5
 80064c2:	eb49 0106 	adc.w	r1, r9, r6
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	461d      	mov	r5, r3
 80064cc:	f04f 0600 	mov.w	r6, #0
 80064d0:	196b      	adds	r3, r5, r5
 80064d2:	eb46 0406 	adc.w	r4, r6, r6
 80064d6:	461a      	mov	r2, r3
 80064d8:	4623      	mov	r3, r4
 80064da:	f7fa fb6d 	bl	8000bb8 <__aeabi_uldivmod>
 80064de:	4603      	mov	r3, r0
 80064e0:	460c      	mov	r4, r1
 80064e2:	461a      	mov	r2, r3
 80064e4:	4ba5      	ldr	r3, [pc, #660]	; (800677c <UART_SetConfig+0x384>)
 80064e6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	461d      	mov	r5, r3
 80064f4:	f04f 0600 	mov.w	r6, #0
 80064f8:	46a9      	mov	r9, r5
 80064fa:	46b2      	mov	sl, r6
 80064fc:	eb19 0309 	adds.w	r3, r9, r9
 8006500:	eb4a 040a 	adc.w	r4, sl, sl
 8006504:	4699      	mov	r9, r3
 8006506:	46a2      	mov	sl, r4
 8006508:	eb19 0905 	adds.w	r9, r9, r5
 800650c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006510:	f04f 0100 	mov.w	r1, #0
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800651c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006520:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006524:	4689      	mov	r9, r1
 8006526:	4692      	mov	sl, r2
 8006528:	eb19 0005 	adds.w	r0, r9, r5
 800652c:	eb4a 0106 	adc.w	r1, sl, r6
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	461d      	mov	r5, r3
 8006536:	f04f 0600 	mov.w	r6, #0
 800653a:	196b      	adds	r3, r5, r5
 800653c:	eb46 0406 	adc.w	r4, r6, r6
 8006540:	461a      	mov	r2, r3
 8006542:	4623      	mov	r3, r4
 8006544:	f7fa fb38 	bl	8000bb8 <__aeabi_uldivmod>
 8006548:	4603      	mov	r3, r0
 800654a:	460c      	mov	r4, r1
 800654c:	461a      	mov	r2, r3
 800654e:	4b8b      	ldr	r3, [pc, #556]	; (800677c <UART_SetConfig+0x384>)
 8006550:	fba3 1302 	umull	r1, r3, r3, r2
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	2164      	movs	r1, #100	; 0x64
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	3332      	adds	r3, #50	; 0x32
 8006562:	4a86      	ldr	r2, [pc, #536]	; (800677c <UART_SetConfig+0x384>)
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006570:	4498      	add	r8, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	461d      	mov	r5, r3
 8006576:	f04f 0600 	mov.w	r6, #0
 800657a:	46a9      	mov	r9, r5
 800657c:	46b2      	mov	sl, r6
 800657e:	eb19 0309 	adds.w	r3, r9, r9
 8006582:	eb4a 040a 	adc.w	r4, sl, sl
 8006586:	4699      	mov	r9, r3
 8006588:	46a2      	mov	sl, r4
 800658a:	eb19 0905 	adds.w	r9, r9, r5
 800658e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006592:	f04f 0100 	mov.w	r1, #0
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800659e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065a6:	4689      	mov	r9, r1
 80065a8:	4692      	mov	sl, r2
 80065aa:	eb19 0005 	adds.w	r0, r9, r5
 80065ae:	eb4a 0106 	adc.w	r1, sl, r6
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	461d      	mov	r5, r3
 80065b8:	f04f 0600 	mov.w	r6, #0
 80065bc:	196b      	adds	r3, r5, r5
 80065be:	eb46 0406 	adc.w	r4, r6, r6
 80065c2:	461a      	mov	r2, r3
 80065c4:	4623      	mov	r3, r4
 80065c6:	f7fa faf7 	bl	8000bb8 <__aeabi_uldivmod>
 80065ca:	4603      	mov	r3, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	461a      	mov	r2, r3
 80065d0:	4b6a      	ldr	r3, [pc, #424]	; (800677c <UART_SetConfig+0x384>)
 80065d2:	fba3 1302 	umull	r1, r3, r3, r2
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	2164      	movs	r1, #100	; 0x64
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	3332      	adds	r3, #50	; 0x32
 80065e4:	4a65      	ldr	r2, [pc, #404]	; (800677c <UART_SetConfig+0x384>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	f003 0207 	and.w	r2, r3, #7
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4442      	add	r2, r8
 80065f6:	609a      	str	r2, [r3, #8]
 80065f8:	e26f      	b.n	8006ada <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065fa:	f7fe fca5 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 80065fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	461d      	mov	r5, r3
 8006604:	f04f 0600 	mov.w	r6, #0
 8006608:	46a8      	mov	r8, r5
 800660a:	46b1      	mov	r9, r6
 800660c:	eb18 0308 	adds.w	r3, r8, r8
 8006610:	eb49 0409 	adc.w	r4, r9, r9
 8006614:	4698      	mov	r8, r3
 8006616:	46a1      	mov	r9, r4
 8006618:	eb18 0805 	adds.w	r8, r8, r5
 800661c:	eb49 0906 	adc.w	r9, r9, r6
 8006620:	f04f 0100 	mov.w	r1, #0
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800662c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006630:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006634:	4688      	mov	r8, r1
 8006636:	4691      	mov	r9, r2
 8006638:	eb18 0005 	adds.w	r0, r8, r5
 800663c:	eb49 0106 	adc.w	r1, r9, r6
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	461d      	mov	r5, r3
 8006646:	f04f 0600 	mov.w	r6, #0
 800664a:	196b      	adds	r3, r5, r5
 800664c:	eb46 0406 	adc.w	r4, r6, r6
 8006650:	461a      	mov	r2, r3
 8006652:	4623      	mov	r3, r4
 8006654:	f7fa fab0 	bl	8000bb8 <__aeabi_uldivmod>
 8006658:	4603      	mov	r3, r0
 800665a:	460c      	mov	r4, r1
 800665c:	461a      	mov	r2, r3
 800665e:	4b47      	ldr	r3, [pc, #284]	; (800677c <UART_SetConfig+0x384>)
 8006660:	fba3 2302 	umull	r2, r3, r3, r2
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	461d      	mov	r5, r3
 800666e:	f04f 0600 	mov.w	r6, #0
 8006672:	46a9      	mov	r9, r5
 8006674:	46b2      	mov	sl, r6
 8006676:	eb19 0309 	adds.w	r3, r9, r9
 800667a:	eb4a 040a 	adc.w	r4, sl, sl
 800667e:	4699      	mov	r9, r3
 8006680:	46a2      	mov	sl, r4
 8006682:	eb19 0905 	adds.w	r9, r9, r5
 8006686:	eb4a 0a06 	adc.w	sl, sl, r6
 800668a:	f04f 0100 	mov.w	r1, #0
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006696:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800669a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800669e:	4689      	mov	r9, r1
 80066a0:	4692      	mov	sl, r2
 80066a2:	eb19 0005 	adds.w	r0, r9, r5
 80066a6:	eb4a 0106 	adc.w	r1, sl, r6
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	461d      	mov	r5, r3
 80066b0:	f04f 0600 	mov.w	r6, #0
 80066b4:	196b      	adds	r3, r5, r5
 80066b6:	eb46 0406 	adc.w	r4, r6, r6
 80066ba:	461a      	mov	r2, r3
 80066bc:	4623      	mov	r3, r4
 80066be:	f7fa fa7b 	bl	8000bb8 <__aeabi_uldivmod>
 80066c2:	4603      	mov	r3, r0
 80066c4:	460c      	mov	r4, r1
 80066c6:	461a      	mov	r2, r3
 80066c8:	4b2c      	ldr	r3, [pc, #176]	; (800677c <UART_SetConfig+0x384>)
 80066ca:	fba3 1302 	umull	r1, r3, r3, r2
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	2164      	movs	r1, #100	; 0x64
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	3332      	adds	r3, #50	; 0x32
 80066dc:	4a27      	ldr	r2, [pc, #156]	; (800677c <UART_SetConfig+0x384>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066ea:	4498      	add	r8, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	461d      	mov	r5, r3
 80066f0:	f04f 0600 	mov.w	r6, #0
 80066f4:	46a9      	mov	r9, r5
 80066f6:	46b2      	mov	sl, r6
 80066f8:	eb19 0309 	adds.w	r3, r9, r9
 80066fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006700:	4699      	mov	r9, r3
 8006702:	46a2      	mov	sl, r4
 8006704:	eb19 0905 	adds.w	r9, r9, r5
 8006708:	eb4a 0a06 	adc.w	sl, sl, r6
 800670c:	f04f 0100 	mov.w	r1, #0
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006718:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800671c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006720:	4689      	mov	r9, r1
 8006722:	4692      	mov	sl, r2
 8006724:	eb19 0005 	adds.w	r0, r9, r5
 8006728:	eb4a 0106 	adc.w	r1, sl, r6
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	461d      	mov	r5, r3
 8006732:	f04f 0600 	mov.w	r6, #0
 8006736:	196b      	adds	r3, r5, r5
 8006738:	eb46 0406 	adc.w	r4, r6, r6
 800673c:	461a      	mov	r2, r3
 800673e:	4623      	mov	r3, r4
 8006740:	f7fa fa3a 	bl	8000bb8 <__aeabi_uldivmod>
 8006744:	4603      	mov	r3, r0
 8006746:	460c      	mov	r4, r1
 8006748:	461a      	mov	r2, r3
 800674a:	4b0c      	ldr	r3, [pc, #48]	; (800677c <UART_SetConfig+0x384>)
 800674c:	fba3 1302 	umull	r1, r3, r3, r2
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	2164      	movs	r1, #100	; 0x64
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	3332      	adds	r3, #50	; 0x32
 800675e:	4a07      	ldr	r2, [pc, #28]	; (800677c <UART_SetConfig+0x384>)
 8006760:	fba2 2303 	umull	r2, r3, r2, r3
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	f003 0207 	and.w	r2, r3, #7
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4442      	add	r2, r8
 8006770:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006772:	e1b2      	b.n	8006ada <UART_SetConfig+0x6e2>
 8006774:	40011000 	.word	0x40011000
 8006778:	40011400 	.word	0x40011400
 800677c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4ad7      	ldr	r2, [pc, #860]	; (8006ae4 <UART_SetConfig+0x6ec>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d005      	beq.n	8006796 <UART_SetConfig+0x39e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4ad6      	ldr	r2, [pc, #856]	; (8006ae8 <UART_SetConfig+0x6f0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	f040 80d1 	bne.w	8006938 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006796:	f7fe fbeb 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 800679a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	469a      	mov	sl, r3
 80067a0:	f04f 0b00 	mov.w	fp, #0
 80067a4:	46d0      	mov	r8, sl
 80067a6:	46d9      	mov	r9, fp
 80067a8:	eb18 0308 	adds.w	r3, r8, r8
 80067ac:	eb49 0409 	adc.w	r4, r9, r9
 80067b0:	4698      	mov	r8, r3
 80067b2:	46a1      	mov	r9, r4
 80067b4:	eb18 080a 	adds.w	r8, r8, sl
 80067b8:	eb49 090b 	adc.w	r9, r9, fp
 80067bc:	f04f 0100 	mov.w	r1, #0
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067d0:	4688      	mov	r8, r1
 80067d2:	4691      	mov	r9, r2
 80067d4:	eb1a 0508 	adds.w	r5, sl, r8
 80067d8:	eb4b 0609 	adc.w	r6, fp, r9
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4619      	mov	r1, r3
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	f04f 0400 	mov.w	r4, #0
 80067ee:	0094      	lsls	r4, r2, #2
 80067f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067f4:	008b      	lsls	r3, r1, #2
 80067f6:	461a      	mov	r2, r3
 80067f8:	4623      	mov	r3, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	4631      	mov	r1, r6
 80067fe:	f7fa f9db 	bl	8000bb8 <__aeabi_uldivmod>
 8006802:	4603      	mov	r3, r0
 8006804:	460c      	mov	r4, r1
 8006806:	461a      	mov	r2, r3
 8006808:	4bb8      	ldr	r3, [pc, #736]	; (8006aec <UART_SetConfig+0x6f4>)
 800680a:	fba3 2302 	umull	r2, r3, r3, r2
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	469b      	mov	fp, r3
 8006818:	f04f 0c00 	mov.w	ip, #0
 800681c:	46d9      	mov	r9, fp
 800681e:	46e2      	mov	sl, ip
 8006820:	eb19 0309 	adds.w	r3, r9, r9
 8006824:	eb4a 040a 	adc.w	r4, sl, sl
 8006828:	4699      	mov	r9, r3
 800682a:	46a2      	mov	sl, r4
 800682c:	eb19 090b 	adds.w	r9, r9, fp
 8006830:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006834:	f04f 0100 	mov.w	r1, #0
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006840:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006844:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006848:	4689      	mov	r9, r1
 800684a:	4692      	mov	sl, r2
 800684c:	eb1b 0509 	adds.w	r5, fp, r9
 8006850:	eb4c 060a 	adc.w	r6, ip, sl
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	4619      	mov	r1, r3
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	f04f 0400 	mov.w	r4, #0
 8006866:	0094      	lsls	r4, r2, #2
 8006868:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800686c:	008b      	lsls	r3, r1, #2
 800686e:	461a      	mov	r2, r3
 8006870:	4623      	mov	r3, r4
 8006872:	4628      	mov	r0, r5
 8006874:	4631      	mov	r1, r6
 8006876:	f7fa f99f 	bl	8000bb8 <__aeabi_uldivmod>
 800687a:	4603      	mov	r3, r0
 800687c:	460c      	mov	r4, r1
 800687e:	461a      	mov	r2, r3
 8006880:	4b9a      	ldr	r3, [pc, #616]	; (8006aec <UART_SetConfig+0x6f4>)
 8006882:	fba3 1302 	umull	r1, r3, r3, r2
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	2164      	movs	r1, #100	; 0x64
 800688a:	fb01 f303 	mul.w	r3, r1, r3
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	3332      	adds	r3, #50	; 0x32
 8006894:	4a95      	ldr	r2, [pc, #596]	; (8006aec <UART_SetConfig+0x6f4>)
 8006896:	fba2 2303 	umull	r2, r3, r2, r3
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068a0:	4498      	add	r8, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	469b      	mov	fp, r3
 80068a6:	f04f 0c00 	mov.w	ip, #0
 80068aa:	46d9      	mov	r9, fp
 80068ac:	46e2      	mov	sl, ip
 80068ae:	eb19 0309 	adds.w	r3, r9, r9
 80068b2:	eb4a 040a 	adc.w	r4, sl, sl
 80068b6:	4699      	mov	r9, r3
 80068b8:	46a2      	mov	sl, r4
 80068ba:	eb19 090b 	adds.w	r9, r9, fp
 80068be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068c2:	f04f 0100 	mov.w	r1, #0
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068d6:	4689      	mov	r9, r1
 80068d8:	4692      	mov	sl, r2
 80068da:	eb1b 0509 	adds.w	r5, fp, r9
 80068de:	eb4c 060a 	adc.w	r6, ip, sl
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	4619      	mov	r1, r3
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	f04f 0300 	mov.w	r3, #0
 80068f0:	f04f 0400 	mov.w	r4, #0
 80068f4:	0094      	lsls	r4, r2, #2
 80068f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068fa:	008b      	lsls	r3, r1, #2
 80068fc:	461a      	mov	r2, r3
 80068fe:	4623      	mov	r3, r4
 8006900:	4628      	mov	r0, r5
 8006902:	4631      	mov	r1, r6
 8006904:	f7fa f958 	bl	8000bb8 <__aeabi_uldivmod>
 8006908:	4603      	mov	r3, r0
 800690a:	460c      	mov	r4, r1
 800690c:	461a      	mov	r2, r3
 800690e:	4b77      	ldr	r3, [pc, #476]	; (8006aec <UART_SetConfig+0x6f4>)
 8006910:	fba3 1302 	umull	r1, r3, r3, r2
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	2164      	movs	r1, #100	; 0x64
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	3332      	adds	r3, #50	; 0x32
 8006922:	4a72      	ldr	r2, [pc, #456]	; (8006aec <UART_SetConfig+0x6f4>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	f003 020f 	and.w	r2, r3, #15
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4442      	add	r2, r8
 8006934:	609a      	str	r2, [r3, #8]
 8006936:	e0d0      	b.n	8006ada <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006938:	f7fe fb06 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 800693c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	469a      	mov	sl, r3
 8006942:	f04f 0b00 	mov.w	fp, #0
 8006946:	46d0      	mov	r8, sl
 8006948:	46d9      	mov	r9, fp
 800694a:	eb18 0308 	adds.w	r3, r8, r8
 800694e:	eb49 0409 	adc.w	r4, r9, r9
 8006952:	4698      	mov	r8, r3
 8006954:	46a1      	mov	r9, r4
 8006956:	eb18 080a 	adds.w	r8, r8, sl
 800695a:	eb49 090b 	adc.w	r9, r9, fp
 800695e:	f04f 0100 	mov.w	r1, #0
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800696a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800696e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006972:	4688      	mov	r8, r1
 8006974:	4691      	mov	r9, r2
 8006976:	eb1a 0508 	adds.w	r5, sl, r8
 800697a:	eb4b 0609 	adc.w	r6, fp, r9
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	4619      	mov	r1, r3
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	f04f 0400 	mov.w	r4, #0
 8006990:	0094      	lsls	r4, r2, #2
 8006992:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006996:	008b      	lsls	r3, r1, #2
 8006998:	461a      	mov	r2, r3
 800699a:	4623      	mov	r3, r4
 800699c:	4628      	mov	r0, r5
 800699e:	4631      	mov	r1, r6
 80069a0:	f7fa f90a 	bl	8000bb8 <__aeabi_uldivmod>
 80069a4:	4603      	mov	r3, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	461a      	mov	r2, r3
 80069aa:	4b50      	ldr	r3, [pc, #320]	; (8006aec <UART_SetConfig+0x6f4>)
 80069ac:	fba3 2302 	umull	r2, r3, r3, r2
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	469b      	mov	fp, r3
 80069ba:	f04f 0c00 	mov.w	ip, #0
 80069be:	46d9      	mov	r9, fp
 80069c0:	46e2      	mov	sl, ip
 80069c2:	eb19 0309 	adds.w	r3, r9, r9
 80069c6:	eb4a 040a 	adc.w	r4, sl, sl
 80069ca:	4699      	mov	r9, r3
 80069cc:	46a2      	mov	sl, r4
 80069ce:	eb19 090b 	adds.w	r9, r9, fp
 80069d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069d6:	f04f 0100 	mov.w	r1, #0
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069ea:	4689      	mov	r9, r1
 80069ec:	4692      	mov	sl, r2
 80069ee:	eb1b 0509 	adds.w	r5, fp, r9
 80069f2:	eb4c 060a 	adc.w	r6, ip, sl
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4619      	mov	r1, r3
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	f04f 0400 	mov.w	r4, #0
 8006a08:	0094      	lsls	r4, r2, #2
 8006a0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a0e:	008b      	lsls	r3, r1, #2
 8006a10:	461a      	mov	r2, r3
 8006a12:	4623      	mov	r3, r4
 8006a14:	4628      	mov	r0, r5
 8006a16:	4631      	mov	r1, r6
 8006a18:	f7fa f8ce 	bl	8000bb8 <__aeabi_uldivmod>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	461a      	mov	r2, r3
 8006a22:	4b32      	ldr	r3, [pc, #200]	; (8006aec <UART_SetConfig+0x6f4>)
 8006a24:	fba3 1302 	umull	r1, r3, r3, r2
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	2164      	movs	r1, #100	; 0x64
 8006a2c:	fb01 f303 	mul.w	r3, r1, r3
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	3332      	adds	r3, #50	; 0x32
 8006a36:	4a2d      	ldr	r2, [pc, #180]	; (8006aec <UART_SetConfig+0x6f4>)
 8006a38:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a42:	4498      	add	r8, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	469b      	mov	fp, r3
 8006a48:	f04f 0c00 	mov.w	ip, #0
 8006a4c:	46d9      	mov	r9, fp
 8006a4e:	46e2      	mov	sl, ip
 8006a50:	eb19 0309 	adds.w	r3, r9, r9
 8006a54:	eb4a 040a 	adc.w	r4, sl, sl
 8006a58:	4699      	mov	r9, r3
 8006a5a:	46a2      	mov	sl, r4
 8006a5c:	eb19 090b 	adds.w	r9, r9, fp
 8006a60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a64:	f04f 0100 	mov.w	r1, #0
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a78:	4689      	mov	r9, r1
 8006a7a:	4692      	mov	sl, r2
 8006a7c:	eb1b 0509 	adds.w	r5, fp, r9
 8006a80:	eb4c 060a 	adc.w	r6, ip, sl
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	f04f 0400 	mov.w	r4, #0
 8006a96:	0094      	lsls	r4, r2, #2
 8006a98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a9c:	008b      	lsls	r3, r1, #2
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4623      	mov	r3, r4
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	f7fa f887 	bl	8000bb8 <__aeabi_uldivmod>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <UART_SetConfig+0x6f4>)
 8006ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	2164      	movs	r1, #100	; 0x64
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	3332      	adds	r3, #50	; 0x32
 8006ac4:	4a09      	ldr	r2, [pc, #36]	; (8006aec <UART_SetConfig+0x6f4>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	f003 020f 	and.w	r2, r3, #15
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4442      	add	r2, r8
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	e7ff      	b.n	8006ada <UART_SetConfig+0x6e2>
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae4:	40011000 	.word	0x40011000
 8006ae8:	40011400 	.word	0x40011400
 8006aec:	51eb851f 	.word	0x51eb851f

08006af0 <calloc>:
 8006af0:	4b02      	ldr	r3, [pc, #8]	; (8006afc <calloc+0xc>)
 8006af2:	460a      	mov	r2, r1
 8006af4:	4601      	mov	r1, r0
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	f000 b83c 	b.w	8006b74 <_calloc_r>
 8006afc:	20000068 	.word	0x20000068

08006b00 <__errno>:
 8006b00:	4b01      	ldr	r3, [pc, #4]	; (8006b08 <__errno+0x8>)
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	20000068 	.word	0x20000068

08006b0c <__libc_init_array>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4e0d      	ldr	r6, [pc, #52]	; (8006b44 <__libc_init_array+0x38>)
 8006b10:	4c0d      	ldr	r4, [pc, #52]	; (8006b48 <__libc_init_array+0x3c>)
 8006b12:	1ba4      	subs	r4, r4, r6
 8006b14:	10a4      	asrs	r4, r4, #2
 8006b16:	2500      	movs	r5, #0
 8006b18:	42a5      	cmp	r5, r4
 8006b1a:	d109      	bne.n	8006b30 <__libc_init_array+0x24>
 8006b1c:	4e0b      	ldr	r6, [pc, #44]	; (8006b4c <__libc_init_array+0x40>)
 8006b1e:	4c0c      	ldr	r4, [pc, #48]	; (8006b50 <__libc_init_array+0x44>)
 8006b20:	f002 f85c 	bl	8008bdc <_init>
 8006b24:	1ba4      	subs	r4, r4, r6
 8006b26:	10a4      	asrs	r4, r4, #2
 8006b28:	2500      	movs	r5, #0
 8006b2a:	42a5      	cmp	r5, r4
 8006b2c:	d105      	bne.n	8006b3a <__libc_init_array+0x2e>
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b34:	4798      	blx	r3
 8006b36:	3501      	adds	r5, #1
 8006b38:	e7ee      	b.n	8006b18 <__libc_init_array+0xc>
 8006b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b3e:	4798      	blx	r3
 8006b40:	3501      	adds	r5, #1
 8006b42:	e7f2      	b.n	8006b2a <__libc_init_array+0x1e>
 8006b44:	0800a528 	.word	0x0800a528
 8006b48:	0800a528 	.word	0x0800a528
 8006b4c:	0800a528 	.word	0x0800a528
 8006b50:	0800a52c 	.word	0x0800a52c

08006b54 <malloc>:
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <malloc+0xc>)
 8006b56:	4601      	mov	r1, r0
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	f000 b867 	b.w	8006c2c <_malloc_r>
 8006b5e:	bf00      	nop
 8006b60:	20000068 	.word	0x20000068

08006b64 <memset>:
 8006b64:	4402      	add	r2, r0
 8006b66:	4603      	mov	r3, r0
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d100      	bne.n	8006b6e <memset+0xa>
 8006b6c:	4770      	bx	lr
 8006b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b72:	e7f9      	b.n	8006b68 <memset+0x4>

08006b74 <_calloc_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	fb02 f401 	mul.w	r4, r2, r1
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	f000 f856 	bl	8006c2c <_malloc_r>
 8006b80:	4605      	mov	r5, r0
 8006b82:	b118      	cbz	r0, 8006b8c <_calloc_r+0x18>
 8006b84:	4622      	mov	r2, r4
 8006b86:	2100      	movs	r1, #0
 8006b88:	f7ff ffec 	bl	8006b64 <memset>
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}

08006b90 <_free_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4605      	mov	r5, r0
 8006b94:	2900      	cmp	r1, #0
 8006b96:	d045      	beq.n	8006c24 <_free_r+0x94>
 8006b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b9c:	1f0c      	subs	r4, r1, #4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	bfb8      	it	lt
 8006ba2:	18e4      	addlt	r4, r4, r3
 8006ba4:	f001 fb85 	bl	80082b2 <__malloc_lock>
 8006ba8:	4a1f      	ldr	r2, [pc, #124]	; (8006c28 <_free_r+0x98>)
 8006baa:	6813      	ldr	r3, [r2, #0]
 8006bac:	4610      	mov	r0, r2
 8006bae:	b933      	cbnz	r3, 8006bbe <_free_r+0x2e>
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	6014      	str	r4, [r2, #0]
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bba:	f001 bb7b 	b.w	80082b4 <__malloc_unlock>
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	d90c      	bls.n	8006bdc <_free_r+0x4c>
 8006bc2:	6821      	ldr	r1, [r4, #0]
 8006bc4:	1862      	adds	r2, r4, r1
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	bf04      	itt	eq
 8006bca:	681a      	ldreq	r2, [r3, #0]
 8006bcc:	685b      	ldreq	r3, [r3, #4]
 8006bce:	6063      	str	r3, [r4, #4]
 8006bd0:	bf04      	itt	eq
 8006bd2:	1852      	addeq	r2, r2, r1
 8006bd4:	6022      	streq	r2, [r4, #0]
 8006bd6:	6004      	str	r4, [r0, #0]
 8006bd8:	e7ec      	b.n	8006bb4 <_free_r+0x24>
 8006bda:	4613      	mov	r3, r2
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	b10a      	cbz	r2, 8006be4 <_free_r+0x54>
 8006be0:	42a2      	cmp	r2, r4
 8006be2:	d9fa      	bls.n	8006bda <_free_r+0x4a>
 8006be4:	6819      	ldr	r1, [r3, #0]
 8006be6:	1858      	adds	r0, r3, r1
 8006be8:	42a0      	cmp	r0, r4
 8006bea:	d10b      	bne.n	8006c04 <_free_r+0x74>
 8006bec:	6820      	ldr	r0, [r4, #0]
 8006bee:	4401      	add	r1, r0
 8006bf0:	1858      	adds	r0, r3, r1
 8006bf2:	4282      	cmp	r2, r0
 8006bf4:	6019      	str	r1, [r3, #0]
 8006bf6:	d1dd      	bne.n	8006bb4 <_free_r+0x24>
 8006bf8:	6810      	ldr	r0, [r2, #0]
 8006bfa:	6852      	ldr	r2, [r2, #4]
 8006bfc:	605a      	str	r2, [r3, #4]
 8006bfe:	4401      	add	r1, r0
 8006c00:	6019      	str	r1, [r3, #0]
 8006c02:	e7d7      	b.n	8006bb4 <_free_r+0x24>
 8006c04:	d902      	bls.n	8006c0c <_free_r+0x7c>
 8006c06:	230c      	movs	r3, #12
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	e7d3      	b.n	8006bb4 <_free_r+0x24>
 8006c0c:	6820      	ldr	r0, [r4, #0]
 8006c0e:	1821      	adds	r1, r4, r0
 8006c10:	428a      	cmp	r2, r1
 8006c12:	bf04      	itt	eq
 8006c14:	6811      	ldreq	r1, [r2, #0]
 8006c16:	6852      	ldreq	r2, [r2, #4]
 8006c18:	6062      	str	r2, [r4, #4]
 8006c1a:	bf04      	itt	eq
 8006c1c:	1809      	addeq	r1, r1, r0
 8006c1e:	6021      	streq	r1, [r4, #0]
 8006c20:	605c      	str	r4, [r3, #4]
 8006c22:	e7c7      	b.n	8006bb4 <_free_r+0x24>
 8006c24:	bd38      	pop	{r3, r4, r5, pc}
 8006c26:	bf00      	nop
 8006c28:	20000264 	.word	0x20000264

08006c2c <_malloc_r>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	1ccd      	adds	r5, r1, #3
 8006c30:	f025 0503 	bic.w	r5, r5, #3
 8006c34:	3508      	adds	r5, #8
 8006c36:	2d0c      	cmp	r5, #12
 8006c38:	bf38      	it	cc
 8006c3a:	250c      	movcc	r5, #12
 8006c3c:	2d00      	cmp	r5, #0
 8006c3e:	4606      	mov	r6, r0
 8006c40:	db01      	blt.n	8006c46 <_malloc_r+0x1a>
 8006c42:	42a9      	cmp	r1, r5
 8006c44:	d903      	bls.n	8006c4e <_malloc_r+0x22>
 8006c46:	230c      	movs	r3, #12
 8006c48:	6033      	str	r3, [r6, #0]
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	bd70      	pop	{r4, r5, r6, pc}
 8006c4e:	f001 fb30 	bl	80082b2 <__malloc_lock>
 8006c52:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <_malloc_r+0xac>)
 8006c54:	6814      	ldr	r4, [r2, #0]
 8006c56:	4621      	mov	r1, r4
 8006c58:	b991      	cbnz	r1, 8006c80 <_malloc_r+0x54>
 8006c5a:	4c20      	ldr	r4, [pc, #128]	; (8006cdc <_malloc_r+0xb0>)
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	b91b      	cbnz	r3, 8006c68 <_malloc_r+0x3c>
 8006c60:	4630      	mov	r0, r6
 8006c62:	f000 fc99 	bl	8007598 <_sbrk_r>
 8006c66:	6020      	str	r0, [r4, #0]
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 fc94 	bl	8007598 <_sbrk_r>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d124      	bne.n	8006cbe <_malloc_r+0x92>
 8006c74:	230c      	movs	r3, #12
 8006c76:	6033      	str	r3, [r6, #0]
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f001 fb1b 	bl	80082b4 <__malloc_unlock>
 8006c7e:	e7e4      	b.n	8006c4a <_malloc_r+0x1e>
 8006c80:	680b      	ldr	r3, [r1, #0]
 8006c82:	1b5b      	subs	r3, r3, r5
 8006c84:	d418      	bmi.n	8006cb8 <_malloc_r+0x8c>
 8006c86:	2b0b      	cmp	r3, #11
 8006c88:	d90f      	bls.n	8006caa <_malloc_r+0x7e>
 8006c8a:	600b      	str	r3, [r1, #0]
 8006c8c:	50cd      	str	r5, [r1, r3]
 8006c8e:	18cc      	adds	r4, r1, r3
 8006c90:	4630      	mov	r0, r6
 8006c92:	f001 fb0f 	bl	80082b4 <__malloc_unlock>
 8006c96:	f104 000b 	add.w	r0, r4, #11
 8006c9a:	1d23      	adds	r3, r4, #4
 8006c9c:	f020 0007 	bic.w	r0, r0, #7
 8006ca0:	1ac3      	subs	r3, r0, r3
 8006ca2:	d0d3      	beq.n	8006c4c <_malloc_r+0x20>
 8006ca4:	425a      	negs	r2, r3
 8006ca6:	50e2      	str	r2, [r4, r3]
 8006ca8:	e7d0      	b.n	8006c4c <_malloc_r+0x20>
 8006caa:	428c      	cmp	r4, r1
 8006cac:	684b      	ldr	r3, [r1, #4]
 8006cae:	bf16      	itet	ne
 8006cb0:	6063      	strne	r3, [r4, #4]
 8006cb2:	6013      	streq	r3, [r2, #0]
 8006cb4:	460c      	movne	r4, r1
 8006cb6:	e7eb      	b.n	8006c90 <_malloc_r+0x64>
 8006cb8:	460c      	mov	r4, r1
 8006cba:	6849      	ldr	r1, [r1, #4]
 8006cbc:	e7cc      	b.n	8006c58 <_malloc_r+0x2c>
 8006cbe:	1cc4      	adds	r4, r0, #3
 8006cc0:	f024 0403 	bic.w	r4, r4, #3
 8006cc4:	42a0      	cmp	r0, r4
 8006cc6:	d005      	beq.n	8006cd4 <_malloc_r+0xa8>
 8006cc8:	1a21      	subs	r1, r4, r0
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f000 fc64 	bl	8007598 <_sbrk_r>
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d0cf      	beq.n	8006c74 <_malloc_r+0x48>
 8006cd4:	6025      	str	r5, [r4, #0]
 8006cd6:	e7db      	b.n	8006c90 <_malloc_r+0x64>
 8006cd8:	20000264 	.word	0x20000264
 8006cdc:	20000268 	.word	0x20000268

08006ce0 <__cvt>:
 8006ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce4:	ec55 4b10 	vmov	r4, r5, d0
 8006ce8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006cea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cee:	2d00      	cmp	r5, #0
 8006cf0:	460e      	mov	r6, r1
 8006cf2:	4691      	mov	r9, r2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	bfb8      	it	lt
 8006cf8:	4622      	movlt	r2, r4
 8006cfa:	462b      	mov	r3, r5
 8006cfc:	f027 0720 	bic.w	r7, r7, #32
 8006d00:	bfbb      	ittet	lt
 8006d02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d06:	461d      	movlt	r5, r3
 8006d08:	2300      	movge	r3, #0
 8006d0a:	232d      	movlt	r3, #45	; 0x2d
 8006d0c:	bfb8      	it	lt
 8006d0e:	4614      	movlt	r4, r2
 8006d10:	2f46      	cmp	r7, #70	; 0x46
 8006d12:	700b      	strb	r3, [r1, #0]
 8006d14:	d004      	beq.n	8006d20 <__cvt+0x40>
 8006d16:	2f45      	cmp	r7, #69	; 0x45
 8006d18:	d100      	bne.n	8006d1c <__cvt+0x3c>
 8006d1a:	3601      	adds	r6, #1
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	e000      	b.n	8006d22 <__cvt+0x42>
 8006d20:	2103      	movs	r1, #3
 8006d22:	ab03      	add	r3, sp, #12
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	ab02      	add	r3, sp, #8
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4632      	mov	r2, r6
 8006d2c:	4653      	mov	r3, sl
 8006d2e:	ec45 4b10 	vmov	d0, r4, r5
 8006d32:	f000 fced 	bl	8007710 <_dtoa_r>
 8006d36:	2f47      	cmp	r7, #71	; 0x47
 8006d38:	4680      	mov	r8, r0
 8006d3a:	d102      	bne.n	8006d42 <__cvt+0x62>
 8006d3c:	f019 0f01 	tst.w	r9, #1
 8006d40:	d026      	beq.n	8006d90 <__cvt+0xb0>
 8006d42:	2f46      	cmp	r7, #70	; 0x46
 8006d44:	eb08 0906 	add.w	r9, r8, r6
 8006d48:	d111      	bne.n	8006d6e <__cvt+0x8e>
 8006d4a:	f898 3000 	ldrb.w	r3, [r8]
 8006d4e:	2b30      	cmp	r3, #48	; 0x30
 8006d50:	d10a      	bne.n	8006d68 <__cvt+0x88>
 8006d52:	2200      	movs	r2, #0
 8006d54:	2300      	movs	r3, #0
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 febd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d5e:	b918      	cbnz	r0, 8006d68 <__cvt+0x88>
 8006d60:	f1c6 0601 	rsb	r6, r6, #1
 8006d64:	f8ca 6000 	str.w	r6, [sl]
 8006d68:	f8da 3000 	ldr.w	r3, [sl]
 8006d6c:	4499      	add	r9, r3
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2300      	movs	r3, #0
 8006d72:	4620      	mov	r0, r4
 8006d74:	4629      	mov	r1, r5
 8006d76:	f7f9 feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d7a:	b938      	cbnz	r0, 8006d8c <__cvt+0xac>
 8006d7c:	2230      	movs	r2, #48	; 0x30
 8006d7e:	9b03      	ldr	r3, [sp, #12]
 8006d80:	454b      	cmp	r3, r9
 8006d82:	d205      	bcs.n	8006d90 <__cvt+0xb0>
 8006d84:	1c59      	adds	r1, r3, #1
 8006d86:	9103      	str	r1, [sp, #12]
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	e7f8      	b.n	8006d7e <__cvt+0x9e>
 8006d8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d94:	eba3 0308 	sub.w	r3, r3, r8
 8006d98:	4640      	mov	r0, r8
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	b004      	add	sp, #16
 8006d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006da2 <__exponent>:
 8006da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006da4:	2900      	cmp	r1, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	bfba      	itte	lt
 8006daa:	4249      	neglt	r1, r1
 8006dac:	232d      	movlt	r3, #45	; 0x2d
 8006dae:	232b      	movge	r3, #43	; 0x2b
 8006db0:	2909      	cmp	r1, #9
 8006db2:	f804 2b02 	strb.w	r2, [r4], #2
 8006db6:	7043      	strb	r3, [r0, #1]
 8006db8:	dd20      	ble.n	8006dfc <__exponent+0x5a>
 8006dba:	f10d 0307 	add.w	r3, sp, #7
 8006dbe:	461f      	mov	r7, r3
 8006dc0:	260a      	movs	r6, #10
 8006dc2:	fb91 f5f6 	sdiv	r5, r1, r6
 8006dc6:	fb06 1115 	mls	r1, r6, r5, r1
 8006dca:	3130      	adds	r1, #48	; 0x30
 8006dcc:	2d09      	cmp	r5, #9
 8006dce:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006dd2:	f103 32ff 	add.w	r2, r3, #4294967295
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	dc09      	bgt.n	8006dee <__exponent+0x4c>
 8006dda:	3130      	adds	r1, #48	; 0x30
 8006ddc:	3b02      	subs	r3, #2
 8006dde:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006de2:	42bb      	cmp	r3, r7
 8006de4:	4622      	mov	r2, r4
 8006de6:	d304      	bcc.n	8006df2 <__exponent+0x50>
 8006de8:	1a10      	subs	r0, r2, r0
 8006dea:	b003      	add	sp, #12
 8006dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dee:	4613      	mov	r3, r2
 8006df0:	e7e7      	b.n	8006dc2 <__exponent+0x20>
 8006df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006df6:	f804 2b01 	strb.w	r2, [r4], #1
 8006dfa:	e7f2      	b.n	8006de2 <__exponent+0x40>
 8006dfc:	2330      	movs	r3, #48	; 0x30
 8006dfe:	4419      	add	r1, r3
 8006e00:	7083      	strb	r3, [r0, #2]
 8006e02:	1d02      	adds	r2, r0, #4
 8006e04:	70c1      	strb	r1, [r0, #3]
 8006e06:	e7ef      	b.n	8006de8 <__exponent+0x46>

08006e08 <_printf_float>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	b08d      	sub	sp, #52	; 0x34
 8006e0e:	460c      	mov	r4, r1
 8006e10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006e14:	4616      	mov	r6, r2
 8006e16:	461f      	mov	r7, r3
 8006e18:	4605      	mov	r5, r0
 8006e1a:	f001 fa31 	bl	8008280 <_localeconv_r>
 8006e1e:	6803      	ldr	r3, [r0, #0]
 8006e20:	9304      	str	r3, [sp, #16]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7f9 f9dc 	bl	80001e0 <strlen>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e30:	9005      	str	r0, [sp, #20]
 8006e32:	3307      	adds	r3, #7
 8006e34:	f023 0307 	bic.w	r3, r3, #7
 8006e38:	f103 0208 	add.w	r2, r3, #8
 8006e3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006e40:	f8d4 b000 	ldr.w	fp, [r4]
 8006e44:	f8c8 2000 	str.w	r2, [r8]
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e58:	9307      	str	r3, [sp, #28]
 8006e5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e62:	4ba7      	ldr	r3, [pc, #668]	; (8007100 <_printf_float+0x2f8>)
 8006e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e68:	f7f9 fe68 	bl	8000b3c <__aeabi_dcmpun>
 8006e6c:	bb70      	cbnz	r0, 8006ecc <_printf_float+0xc4>
 8006e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e72:	4ba3      	ldr	r3, [pc, #652]	; (8007100 <_printf_float+0x2f8>)
 8006e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e78:	f7f9 fe42 	bl	8000b00 <__aeabi_dcmple>
 8006e7c:	bb30      	cbnz	r0, 8006ecc <_printf_float+0xc4>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2300      	movs	r3, #0
 8006e82:	4640      	mov	r0, r8
 8006e84:	4649      	mov	r1, r9
 8006e86:	f7f9 fe31 	bl	8000aec <__aeabi_dcmplt>
 8006e8a:	b110      	cbz	r0, 8006e92 <_printf_float+0x8a>
 8006e8c:	232d      	movs	r3, #45	; 0x2d
 8006e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e92:	4a9c      	ldr	r2, [pc, #624]	; (8007104 <_printf_float+0x2fc>)
 8006e94:	4b9c      	ldr	r3, [pc, #624]	; (8007108 <_printf_float+0x300>)
 8006e96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006e9a:	bf8c      	ite	hi
 8006e9c:	4690      	movhi	r8, r2
 8006e9e:	4698      	movls	r8, r3
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	f02b 0204 	bic.w	r2, fp, #4
 8006ea6:	6123      	str	r3, [r4, #16]
 8006ea8:	6022      	str	r2, [r4, #0]
 8006eaa:	f04f 0900 	mov.w	r9, #0
 8006eae:	9700      	str	r7, [sp, #0]
 8006eb0:	4633      	mov	r3, r6
 8006eb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 f9e6 	bl	8007288 <_printf_common>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f040 808d 	bne.w	8006fdc <_printf_float+0x1d4>
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	b00d      	add	sp, #52	; 0x34
 8006ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	f7f9 fe32 	bl	8000b3c <__aeabi_dcmpun>
 8006ed8:	b110      	cbz	r0, 8006ee0 <_printf_float+0xd8>
 8006eda:	4a8c      	ldr	r2, [pc, #560]	; (800710c <_printf_float+0x304>)
 8006edc:	4b8c      	ldr	r3, [pc, #560]	; (8007110 <_printf_float+0x308>)
 8006ede:	e7da      	b.n	8006e96 <_printf_float+0x8e>
 8006ee0:	6861      	ldr	r1, [r4, #4]
 8006ee2:	1c4b      	adds	r3, r1, #1
 8006ee4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006ee8:	a80a      	add	r0, sp, #40	; 0x28
 8006eea:	d13e      	bne.n	8006f6a <_printf_float+0x162>
 8006eec:	2306      	movs	r3, #6
 8006eee:	6063      	str	r3, [r4, #4]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006ef6:	ab09      	add	r3, sp, #36	; 0x24
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	ec49 8b10 	vmov	d0, r8, r9
 8006efe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f02:	6022      	str	r2, [r4, #0]
 8006f04:	f8cd a004 	str.w	sl, [sp, #4]
 8006f08:	6861      	ldr	r1, [r4, #4]
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f7ff fee8 	bl	8006ce0 <__cvt>
 8006f10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006f14:	2b47      	cmp	r3, #71	; 0x47
 8006f16:	4680      	mov	r8, r0
 8006f18:	d109      	bne.n	8006f2e <_printf_float+0x126>
 8006f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1c:	1cd8      	adds	r0, r3, #3
 8006f1e:	db02      	blt.n	8006f26 <_printf_float+0x11e>
 8006f20:	6862      	ldr	r2, [r4, #4]
 8006f22:	4293      	cmp	r3, r2
 8006f24:	dd47      	ble.n	8006fb6 <_printf_float+0x1ae>
 8006f26:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f2a:	fa5f fa8a 	uxtb.w	sl, sl
 8006f2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f34:	d824      	bhi.n	8006f80 <_printf_float+0x178>
 8006f36:	3901      	subs	r1, #1
 8006f38:	4652      	mov	r2, sl
 8006f3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f3e:	9109      	str	r1, [sp, #36]	; 0x24
 8006f40:	f7ff ff2f 	bl	8006da2 <__exponent>
 8006f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f46:	1813      	adds	r3, r2, r0
 8006f48:	2a01      	cmp	r2, #1
 8006f4a:	4681      	mov	r9, r0
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	dc02      	bgt.n	8006f56 <_printf_float+0x14e>
 8006f50:	6822      	ldr	r2, [r4, #0]
 8006f52:	07d1      	lsls	r1, r2, #31
 8006f54:	d501      	bpl.n	8006f5a <_printf_float+0x152>
 8006f56:	3301      	adds	r3, #1
 8006f58:	6123      	str	r3, [r4, #16]
 8006f5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0a5      	beq.n	8006eae <_printf_float+0xa6>
 8006f62:	232d      	movs	r3, #45	; 0x2d
 8006f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f68:	e7a1      	b.n	8006eae <_printf_float+0xa6>
 8006f6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006f6e:	f000 8177 	beq.w	8007260 <_printf_float+0x458>
 8006f72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006f76:	d1bb      	bne.n	8006ef0 <_printf_float+0xe8>
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	d1b9      	bne.n	8006ef0 <_printf_float+0xe8>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e7b6      	b.n	8006eee <_printf_float+0xe6>
 8006f80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006f84:	d119      	bne.n	8006fba <_printf_float+0x1b2>
 8006f86:	2900      	cmp	r1, #0
 8006f88:	6863      	ldr	r3, [r4, #4]
 8006f8a:	dd0c      	ble.n	8006fa6 <_printf_float+0x19e>
 8006f8c:	6121      	str	r1, [r4, #16]
 8006f8e:	b913      	cbnz	r3, 8006f96 <_printf_float+0x18e>
 8006f90:	6822      	ldr	r2, [r4, #0]
 8006f92:	07d2      	lsls	r2, r2, #31
 8006f94:	d502      	bpl.n	8006f9c <_printf_float+0x194>
 8006f96:	3301      	adds	r3, #1
 8006f98:	440b      	add	r3, r1
 8006f9a:	6123      	str	r3, [r4, #16]
 8006f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006fa0:	f04f 0900 	mov.w	r9, #0
 8006fa4:	e7d9      	b.n	8006f5a <_printf_float+0x152>
 8006fa6:	b913      	cbnz	r3, 8006fae <_printf_float+0x1a6>
 8006fa8:	6822      	ldr	r2, [r4, #0]
 8006faa:	07d0      	lsls	r0, r2, #31
 8006fac:	d501      	bpl.n	8006fb2 <_printf_float+0x1aa>
 8006fae:	3302      	adds	r3, #2
 8006fb0:	e7f3      	b.n	8006f9a <_printf_float+0x192>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e7f1      	b.n	8006f9a <_printf_float+0x192>
 8006fb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006fba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	db05      	blt.n	8006fce <_printf_float+0x1c6>
 8006fc2:	6822      	ldr	r2, [r4, #0]
 8006fc4:	6123      	str	r3, [r4, #16]
 8006fc6:	07d1      	lsls	r1, r2, #31
 8006fc8:	d5e8      	bpl.n	8006f9c <_printf_float+0x194>
 8006fca:	3301      	adds	r3, #1
 8006fcc:	e7e5      	b.n	8006f9a <_printf_float+0x192>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bfd4      	ite	le
 8006fd2:	f1c3 0302 	rsble	r3, r3, #2
 8006fd6:	2301      	movgt	r3, #1
 8006fd8:	4413      	add	r3, r2
 8006fda:	e7de      	b.n	8006f9a <_printf_float+0x192>
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	055a      	lsls	r2, r3, #21
 8006fe0:	d407      	bmi.n	8006ff2 <_printf_float+0x1ea>
 8006fe2:	6923      	ldr	r3, [r4, #16]
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	d12b      	bne.n	8007048 <_printf_float+0x240>
 8006ff0:	e767      	b.n	8006ec2 <_printf_float+0xba>
 8006ff2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006ff6:	f240 80dc 	bls.w	80071b2 <_printf_float+0x3aa>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007002:	f7f9 fd69 	bl	8000ad8 <__aeabi_dcmpeq>
 8007006:	2800      	cmp	r0, #0
 8007008:	d033      	beq.n	8007072 <_printf_float+0x26a>
 800700a:	2301      	movs	r3, #1
 800700c:	4a41      	ldr	r2, [pc, #260]	; (8007114 <_printf_float+0x30c>)
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f af54 	beq.w	8006ec2 <_printf_float+0xba>
 800701a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800701e:	429a      	cmp	r2, r3
 8007020:	db02      	blt.n	8007028 <_printf_float+0x220>
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	07d8      	lsls	r0, r3, #31
 8007026:	d50f      	bpl.n	8007048 <_printf_float+0x240>
 8007028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800702c:	4631      	mov	r1, r6
 800702e:	4628      	mov	r0, r5
 8007030:	47b8      	blx	r7
 8007032:	3001      	adds	r0, #1
 8007034:	f43f af45 	beq.w	8006ec2 <_printf_float+0xba>
 8007038:	f04f 0800 	mov.w	r8, #0
 800703c:	f104 091a 	add.w	r9, r4, #26
 8007040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007042:	3b01      	subs	r3, #1
 8007044:	4543      	cmp	r3, r8
 8007046:	dc09      	bgt.n	800705c <_printf_float+0x254>
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	079b      	lsls	r3, r3, #30
 800704c:	f100 8103 	bmi.w	8007256 <_printf_float+0x44e>
 8007050:	68e0      	ldr	r0, [r4, #12]
 8007052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007054:	4298      	cmp	r0, r3
 8007056:	bfb8      	it	lt
 8007058:	4618      	movlt	r0, r3
 800705a:	e734      	b.n	8006ec6 <_printf_float+0xbe>
 800705c:	2301      	movs	r3, #1
 800705e:	464a      	mov	r2, r9
 8007060:	4631      	mov	r1, r6
 8007062:	4628      	mov	r0, r5
 8007064:	47b8      	blx	r7
 8007066:	3001      	adds	r0, #1
 8007068:	f43f af2b 	beq.w	8006ec2 <_printf_float+0xba>
 800706c:	f108 0801 	add.w	r8, r8, #1
 8007070:	e7e6      	b.n	8007040 <_printf_float+0x238>
 8007072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	dc2b      	bgt.n	80070d0 <_printf_float+0x2c8>
 8007078:	2301      	movs	r3, #1
 800707a:	4a26      	ldr	r2, [pc, #152]	; (8007114 <_printf_float+0x30c>)
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	47b8      	blx	r7
 8007082:	3001      	adds	r0, #1
 8007084:	f43f af1d 	beq.w	8006ec2 <_printf_float+0xba>
 8007088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708a:	b923      	cbnz	r3, 8007096 <_printf_float+0x28e>
 800708c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708e:	b913      	cbnz	r3, 8007096 <_printf_float+0x28e>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	07d9      	lsls	r1, r3, #31
 8007094:	d5d8      	bpl.n	8007048 <_printf_float+0x240>
 8007096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	f43f af0e 	beq.w	8006ec2 <_printf_float+0xba>
 80070a6:	f04f 0900 	mov.w	r9, #0
 80070aa:	f104 0a1a 	add.w	sl, r4, #26
 80070ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b0:	425b      	negs	r3, r3
 80070b2:	454b      	cmp	r3, r9
 80070b4:	dc01      	bgt.n	80070ba <_printf_float+0x2b2>
 80070b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b8:	e794      	b.n	8006fe4 <_printf_float+0x1dc>
 80070ba:	2301      	movs	r3, #1
 80070bc:	4652      	mov	r2, sl
 80070be:	4631      	mov	r1, r6
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b8      	blx	r7
 80070c4:	3001      	adds	r0, #1
 80070c6:	f43f aefc 	beq.w	8006ec2 <_printf_float+0xba>
 80070ca:	f109 0901 	add.w	r9, r9, #1
 80070ce:	e7ee      	b.n	80070ae <_printf_float+0x2a6>
 80070d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070d4:	429a      	cmp	r2, r3
 80070d6:	bfa8      	it	ge
 80070d8:	461a      	movge	r2, r3
 80070da:	2a00      	cmp	r2, #0
 80070dc:	4691      	mov	r9, r2
 80070de:	dd07      	ble.n	80070f0 <_printf_float+0x2e8>
 80070e0:	4613      	mov	r3, r2
 80070e2:	4631      	mov	r1, r6
 80070e4:	4642      	mov	r2, r8
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	f43f aee9 	beq.w	8006ec2 <_printf_float+0xba>
 80070f0:	f104 031a 	add.w	r3, r4, #26
 80070f4:	f04f 0b00 	mov.w	fp, #0
 80070f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070fc:	9306      	str	r3, [sp, #24]
 80070fe:	e015      	b.n	800712c <_printf_float+0x324>
 8007100:	7fefffff 	.word	0x7fefffff
 8007104:	0800a2c4 	.word	0x0800a2c4
 8007108:	0800a2c0 	.word	0x0800a2c0
 800710c:	0800a2cc 	.word	0x0800a2cc
 8007110:	0800a2c8 	.word	0x0800a2c8
 8007114:	0800a2d0 	.word	0x0800a2d0
 8007118:	2301      	movs	r3, #1
 800711a:	9a06      	ldr	r2, [sp, #24]
 800711c:	4631      	mov	r1, r6
 800711e:	4628      	mov	r0, r5
 8007120:	47b8      	blx	r7
 8007122:	3001      	adds	r0, #1
 8007124:	f43f aecd 	beq.w	8006ec2 <_printf_float+0xba>
 8007128:	f10b 0b01 	add.w	fp, fp, #1
 800712c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007130:	ebaa 0309 	sub.w	r3, sl, r9
 8007134:	455b      	cmp	r3, fp
 8007136:	dcef      	bgt.n	8007118 <_printf_float+0x310>
 8007138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800713c:	429a      	cmp	r2, r3
 800713e:	44d0      	add	r8, sl
 8007140:	db15      	blt.n	800716e <_printf_float+0x366>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	07da      	lsls	r2, r3, #31
 8007146:	d412      	bmi.n	800716e <_printf_float+0x366>
 8007148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800714c:	eba3 020a 	sub.w	r2, r3, sl
 8007150:	eba3 0a01 	sub.w	sl, r3, r1
 8007154:	4592      	cmp	sl, r2
 8007156:	bfa8      	it	ge
 8007158:	4692      	movge	sl, r2
 800715a:	f1ba 0f00 	cmp.w	sl, #0
 800715e:	dc0e      	bgt.n	800717e <_printf_float+0x376>
 8007160:	f04f 0800 	mov.w	r8, #0
 8007164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007168:	f104 091a 	add.w	r9, r4, #26
 800716c:	e019      	b.n	80071a2 <_printf_float+0x39a>
 800716e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007172:	4631      	mov	r1, r6
 8007174:	4628      	mov	r0, r5
 8007176:	47b8      	blx	r7
 8007178:	3001      	adds	r0, #1
 800717a:	d1e5      	bne.n	8007148 <_printf_float+0x340>
 800717c:	e6a1      	b.n	8006ec2 <_printf_float+0xba>
 800717e:	4653      	mov	r3, sl
 8007180:	4642      	mov	r2, r8
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	47b8      	blx	r7
 8007188:	3001      	adds	r0, #1
 800718a:	d1e9      	bne.n	8007160 <_printf_float+0x358>
 800718c:	e699      	b.n	8006ec2 <_printf_float+0xba>
 800718e:	2301      	movs	r3, #1
 8007190:	464a      	mov	r2, r9
 8007192:	4631      	mov	r1, r6
 8007194:	4628      	mov	r0, r5
 8007196:	47b8      	blx	r7
 8007198:	3001      	adds	r0, #1
 800719a:	f43f ae92 	beq.w	8006ec2 <_printf_float+0xba>
 800719e:	f108 0801 	add.w	r8, r8, #1
 80071a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071a6:	1a9b      	subs	r3, r3, r2
 80071a8:	eba3 030a 	sub.w	r3, r3, sl
 80071ac:	4543      	cmp	r3, r8
 80071ae:	dcee      	bgt.n	800718e <_printf_float+0x386>
 80071b0:	e74a      	b.n	8007048 <_printf_float+0x240>
 80071b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071b4:	2a01      	cmp	r2, #1
 80071b6:	dc01      	bgt.n	80071bc <_printf_float+0x3b4>
 80071b8:	07db      	lsls	r3, r3, #31
 80071ba:	d53a      	bpl.n	8007232 <_printf_float+0x42a>
 80071bc:	2301      	movs	r3, #1
 80071be:	4642      	mov	r2, r8
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f ae7b 	beq.w	8006ec2 <_printf_float+0xba>
 80071cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071d0:	4631      	mov	r1, r6
 80071d2:	4628      	mov	r0, r5
 80071d4:	47b8      	blx	r7
 80071d6:	3001      	adds	r0, #1
 80071d8:	f108 0801 	add.w	r8, r8, #1
 80071dc:	f43f ae71 	beq.w	8006ec2 <_printf_float+0xba>
 80071e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e2:	2200      	movs	r2, #0
 80071e4:	f103 3aff 	add.w	sl, r3, #4294967295
 80071e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071ec:	2300      	movs	r3, #0
 80071ee:	f7f9 fc73 	bl	8000ad8 <__aeabi_dcmpeq>
 80071f2:	b9c8      	cbnz	r0, 8007228 <_printf_float+0x420>
 80071f4:	4653      	mov	r3, sl
 80071f6:	4642      	mov	r2, r8
 80071f8:	4631      	mov	r1, r6
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	d10e      	bne.n	8007220 <_printf_float+0x418>
 8007202:	e65e      	b.n	8006ec2 <_printf_float+0xba>
 8007204:	2301      	movs	r3, #1
 8007206:	4652      	mov	r2, sl
 8007208:	4631      	mov	r1, r6
 800720a:	4628      	mov	r0, r5
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	f43f ae57 	beq.w	8006ec2 <_printf_float+0xba>
 8007214:	f108 0801 	add.w	r8, r8, #1
 8007218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721a:	3b01      	subs	r3, #1
 800721c:	4543      	cmp	r3, r8
 800721e:	dcf1      	bgt.n	8007204 <_printf_float+0x3fc>
 8007220:	464b      	mov	r3, r9
 8007222:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007226:	e6de      	b.n	8006fe6 <_printf_float+0x1de>
 8007228:	f04f 0800 	mov.w	r8, #0
 800722c:	f104 0a1a 	add.w	sl, r4, #26
 8007230:	e7f2      	b.n	8007218 <_printf_float+0x410>
 8007232:	2301      	movs	r3, #1
 8007234:	e7df      	b.n	80071f6 <_printf_float+0x3ee>
 8007236:	2301      	movs	r3, #1
 8007238:	464a      	mov	r2, r9
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f ae3e 	beq.w	8006ec2 <_printf_float+0xba>
 8007246:	f108 0801 	add.w	r8, r8, #1
 800724a:	68e3      	ldr	r3, [r4, #12]
 800724c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800724e:	1a9b      	subs	r3, r3, r2
 8007250:	4543      	cmp	r3, r8
 8007252:	dcf0      	bgt.n	8007236 <_printf_float+0x42e>
 8007254:	e6fc      	b.n	8007050 <_printf_float+0x248>
 8007256:	f04f 0800 	mov.w	r8, #0
 800725a:	f104 0919 	add.w	r9, r4, #25
 800725e:	e7f4      	b.n	800724a <_printf_float+0x442>
 8007260:	2900      	cmp	r1, #0
 8007262:	f43f ae8b 	beq.w	8006f7c <_printf_float+0x174>
 8007266:	2300      	movs	r3, #0
 8007268:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800726c:	ab09      	add	r3, sp, #36	; 0x24
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	ec49 8b10 	vmov	d0, r8, r9
 8007274:	6022      	str	r2, [r4, #0]
 8007276:	f8cd a004 	str.w	sl, [sp, #4]
 800727a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800727e:	4628      	mov	r0, r5
 8007280:	f7ff fd2e 	bl	8006ce0 <__cvt>
 8007284:	4680      	mov	r8, r0
 8007286:	e648      	b.n	8006f1a <_printf_float+0x112>

08007288 <_printf_common>:
 8007288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800728c:	4691      	mov	r9, r2
 800728e:	461f      	mov	r7, r3
 8007290:	688a      	ldr	r2, [r1, #8]
 8007292:	690b      	ldr	r3, [r1, #16]
 8007294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007298:	4293      	cmp	r3, r2
 800729a:	bfb8      	it	lt
 800729c:	4613      	movlt	r3, r2
 800729e:	f8c9 3000 	str.w	r3, [r9]
 80072a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072a6:	4606      	mov	r6, r0
 80072a8:	460c      	mov	r4, r1
 80072aa:	b112      	cbz	r2, 80072b2 <_printf_common+0x2a>
 80072ac:	3301      	adds	r3, #1
 80072ae:	f8c9 3000 	str.w	r3, [r9]
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	0699      	lsls	r1, r3, #26
 80072b6:	bf42      	ittt	mi
 80072b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072bc:	3302      	addmi	r3, #2
 80072be:	f8c9 3000 	strmi.w	r3, [r9]
 80072c2:	6825      	ldr	r5, [r4, #0]
 80072c4:	f015 0506 	ands.w	r5, r5, #6
 80072c8:	d107      	bne.n	80072da <_printf_common+0x52>
 80072ca:	f104 0a19 	add.w	sl, r4, #25
 80072ce:	68e3      	ldr	r3, [r4, #12]
 80072d0:	f8d9 2000 	ldr.w	r2, [r9]
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	42ab      	cmp	r3, r5
 80072d8:	dc28      	bgt.n	800732c <_printf_common+0xa4>
 80072da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80072de:	6822      	ldr	r2, [r4, #0]
 80072e0:	3300      	adds	r3, #0
 80072e2:	bf18      	it	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	0692      	lsls	r2, r2, #26
 80072e8:	d42d      	bmi.n	8007346 <_printf_common+0xbe>
 80072ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072ee:	4639      	mov	r1, r7
 80072f0:	4630      	mov	r0, r6
 80072f2:	47c0      	blx	r8
 80072f4:	3001      	adds	r0, #1
 80072f6:	d020      	beq.n	800733a <_printf_common+0xb2>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	68e5      	ldr	r5, [r4, #12]
 80072fc:	f8d9 2000 	ldr.w	r2, [r9]
 8007300:	f003 0306 	and.w	r3, r3, #6
 8007304:	2b04      	cmp	r3, #4
 8007306:	bf08      	it	eq
 8007308:	1aad      	subeq	r5, r5, r2
 800730a:	68a3      	ldr	r3, [r4, #8]
 800730c:	6922      	ldr	r2, [r4, #16]
 800730e:	bf0c      	ite	eq
 8007310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007314:	2500      	movne	r5, #0
 8007316:	4293      	cmp	r3, r2
 8007318:	bfc4      	itt	gt
 800731a:	1a9b      	subgt	r3, r3, r2
 800731c:	18ed      	addgt	r5, r5, r3
 800731e:	f04f 0900 	mov.w	r9, #0
 8007322:	341a      	adds	r4, #26
 8007324:	454d      	cmp	r5, r9
 8007326:	d11a      	bne.n	800735e <_printf_common+0xd6>
 8007328:	2000      	movs	r0, #0
 800732a:	e008      	b.n	800733e <_printf_common+0xb6>
 800732c:	2301      	movs	r3, #1
 800732e:	4652      	mov	r2, sl
 8007330:	4639      	mov	r1, r7
 8007332:	4630      	mov	r0, r6
 8007334:	47c0      	blx	r8
 8007336:	3001      	adds	r0, #1
 8007338:	d103      	bne.n	8007342 <_printf_common+0xba>
 800733a:	f04f 30ff 	mov.w	r0, #4294967295
 800733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007342:	3501      	adds	r5, #1
 8007344:	e7c3      	b.n	80072ce <_printf_common+0x46>
 8007346:	18e1      	adds	r1, r4, r3
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	2030      	movs	r0, #48	; 0x30
 800734c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007350:	4422      	add	r2, r4
 8007352:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007356:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800735a:	3302      	adds	r3, #2
 800735c:	e7c5      	b.n	80072ea <_printf_common+0x62>
 800735e:	2301      	movs	r3, #1
 8007360:	4622      	mov	r2, r4
 8007362:	4639      	mov	r1, r7
 8007364:	4630      	mov	r0, r6
 8007366:	47c0      	blx	r8
 8007368:	3001      	adds	r0, #1
 800736a:	d0e6      	beq.n	800733a <_printf_common+0xb2>
 800736c:	f109 0901 	add.w	r9, r9, #1
 8007370:	e7d8      	b.n	8007324 <_printf_common+0x9c>
	...

08007374 <_printf_i>:
 8007374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007378:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800737c:	460c      	mov	r4, r1
 800737e:	7e09      	ldrb	r1, [r1, #24]
 8007380:	b085      	sub	sp, #20
 8007382:	296e      	cmp	r1, #110	; 0x6e
 8007384:	4617      	mov	r7, r2
 8007386:	4606      	mov	r6, r0
 8007388:	4698      	mov	r8, r3
 800738a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800738c:	f000 80b3 	beq.w	80074f6 <_printf_i+0x182>
 8007390:	d822      	bhi.n	80073d8 <_printf_i+0x64>
 8007392:	2963      	cmp	r1, #99	; 0x63
 8007394:	d036      	beq.n	8007404 <_printf_i+0x90>
 8007396:	d80a      	bhi.n	80073ae <_printf_i+0x3a>
 8007398:	2900      	cmp	r1, #0
 800739a:	f000 80b9 	beq.w	8007510 <_printf_i+0x19c>
 800739e:	2958      	cmp	r1, #88	; 0x58
 80073a0:	f000 8083 	beq.w	80074aa <_printf_i+0x136>
 80073a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073ac:	e032      	b.n	8007414 <_printf_i+0xa0>
 80073ae:	2964      	cmp	r1, #100	; 0x64
 80073b0:	d001      	beq.n	80073b6 <_printf_i+0x42>
 80073b2:	2969      	cmp	r1, #105	; 0x69
 80073b4:	d1f6      	bne.n	80073a4 <_printf_i+0x30>
 80073b6:	6820      	ldr	r0, [r4, #0]
 80073b8:	6813      	ldr	r3, [r2, #0]
 80073ba:	0605      	lsls	r5, r0, #24
 80073bc:	f103 0104 	add.w	r1, r3, #4
 80073c0:	d52a      	bpl.n	8007418 <_printf_i+0xa4>
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6011      	str	r1, [r2, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	da03      	bge.n	80073d2 <_printf_i+0x5e>
 80073ca:	222d      	movs	r2, #45	; 0x2d
 80073cc:	425b      	negs	r3, r3
 80073ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80073d2:	486f      	ldr	r0, [pc, #444]	; (8007590 <_printf_i+0x21c>)
 80073d4:	220a      	movs	r2, #10
 80073d6:	e039      	b.n	800744c <_printf_i+0xd8>
 80073d8:	2973      	cmp	r1, #115	; 0x73
 80073da:	f000 809d 	beq.w	8007518 <_printf_i+0x1a4>
 80073de:	d808      	bhi.n	80073f2 <_printf_i+0x7e>
 80073e0:	296f      	cmp	r1, #111	; 0x6f
 80073e2:	d020      	beq.n	8007426 <_printf_i+0xb2>
 80073e4:	2970      	cmp	r1, #112	; 0x70
 80073e6:	d1dd      	bne.n	80073a4 <_printf_i+0x30>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	f043 0320 	orr.w	r3, r3, #32
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	e003      	b.n	80073fa <_printf_i+0x86>
 80073f2:	2975      	cmp	r1, #117	; 0x75
 80073f4:	d017      	beq.n	8007426 <_printf_i+0xb2>
 80073f6:	2978      	cmp	r1, #120	; 0x78
 80073f8:	d1d4      	bne.n	80073a4 <_printf_i+0x30>
 80073fa:	2378      	movs	r3, #120	; 0x78
 80073fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007400:	4864      	ldr	r0, [pc, #400]	; (8007594 <_printf_i+0x220>)
 8007402:	e055      	b.n	80074b0 <_printf_i+0x13c>
 8007404:	6813      	ldr	r3, [r2, #0]
 8007406:	1d19      	adds	r1, r3, #4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6011      	str	r1, [r2, #0]
 800740c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007414:	2301      	movs	r3, #1
 8007416:	e08c      	b.n	8007532 <_printf_i+0x1be>
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6011      	str	r1, [r2, #0]
 800741c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007420:	bf18      	it	ne
 8007422:	b21b      	sxthne	r3, r3
 8007424:	e7cf      	b.n	80073c6 <_printf_i+0x52>
 8007426:	6813      	ldr	r3, [r2, #0]
 8007428:	6825      	ldr	r5, [r4, #0]
 800742a:	1d18      	adds	r0, r3, #4
 800742c:	6010      	str	r0, [r2, #0]
 800742e:	0628      	lsls	r0, r5, #24
 8007430:	d501      	bpl.n	8007436 <_printf_i+0xc2>
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	e002      	b.n	800743c <_printf_i+0xc8>
 8007436:	0668      	lsls	r0, r5, #25
 8007438:	d5fb      	bpl.n	8007432 <_printf_i+0xbe>
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	4854      	ldr	r0, [pc, #336]	; (8007590 <_printf_i+0x21c>)
 800743e:	296f      	cmp	r1, #111	; 0x6f
 8007440:	bf14      	ite	ne
 8007442:	220a      	movne	r2, #10
 8007444:	2208      	moveq	r2, #8
 8007446:	2100      	movs	r1, #0
 8007448:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800744c:	6865      	ldr	r5, [r4, #4]
 800744e:	60a5      	str	r5, [r4, #8]
 8007450:	2d00      	cmp	r5, #0
 8007452:	f2c0 8095 	blt.w	8007580 <_printf_i+0x20c>
 8007456:	6821      	ldr	r1, [r4, #0]
 8007458:	f021 0104 	bic.w	r1, r1, #4
 800745c:	6021      	str	r1, [r4, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d13d      	bne.n	80074de <_printf_i+0x16a>
 8007462:	2d00      	cmp	r5, #0
 8007464:	f040 808e 	bne.w	8007584 <_printf_i+0x210>
 8007468:	4665      	mov	r5, ip
 800746a:	2a08      	cmp	r2, #8
 800746c:	d10b      	bne.n	8007486 <_printf_i+0x112>
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	07db      	lsls	r3, r3, #31
 8007472:	d508      	bpl.n	8007486 <_printf_i+0x112>
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	6862      	ldr	r2, [r4, #4]
 8007478:	429a      	cmp	r2, r3
 800747a:	bfde      	ittt	le
 800747c:	2330      	movle	r3, #48	; 0x30
 800747e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007482:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007486:	ebac 0305 	sub.w	r3, ip, r5
 800748a:	6123      	str	r3, [r4, #16]
 800748c:	f8cd 8000 	str.w	r8, [sp]
 8007490:	463b      	mov	r3, r7
 8007492:	aa03      	add	r2, sp, #12
 8007494:	4621      	mov	r1, r4
 8007496:	4630      	mov	r0, r6
 8007498:	f7ff fef6 	bl	8007288 <_printf_common>
 800749c:	3001      	adds	r0, #1
 800749e:	d14d      	bne.n	800753c <_printf_i+0x1c8>
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	b005      	add	sp, #20
 80074a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074aa:	4839      	ldr	r0, [pc, #228]	; (8007590 <_printf_i+0x21c>)
 80074ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074b0:	6813      	ldr	r3, [r2, #0]
 80074b2:	6821      	ldr	r1, [r4, #0]
 80074b4:	1d1d      	adds	r5, r3, #4
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6015      	str	r5, [r2, #0]
 80074ba:	060a      	lsls	r2, r1, #24
 80074bc:	d50b      	bpl.n	80074d6 <_printf_i+0x162>
 80074be:	07ca      	lsls	r2, r1, #31
 80074c0:	bf44      	itt	mi
 80074c2:	f041 0120 	orrmi.w	r1, r1, #32
 80074c6:	6021      	strmi	r1, [r4, #0]
 80074c8:	b91b      	cbnz	r3, 80074d2 <_printf_i+0x15e>
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	f022 0220 	bic.w	r2, r2, #32
 80074d0:	6022      	str	r2, [r4, #0]
 80074d2:	2210      	movs	r2, #16
 80074d4:	e7b7      	b.n	8007446 <_printf_i+0xd2>
 80074d6:	064d      	lsls	r5, r1, #25
 80074d8:	bf48      	it	mi
 80074da:	b29b      	uxthmi	r3, r3
 80074dc:	e7ef      	b.n	80074be <_printf_i+0x14a>
 80074de:	4665      	mov	r5, ip
 80074e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80074e4:	fb02 3311 	mls	r3, r2, r1, r3
 80074e8:	5cc3      	ldrb	r3, [r0, r3]
 80074ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80074ee:	460b      	mov	r3, r1
 80074f0:	2900      	cmp	r1, #0
 80074f2:	d1f5      	bne.n	80074e0 <_printf_i+0x16c>
 80074f4:	e7b9      	b.n	800746a <_printf_i+0xf6>
 80074f6:	6813      	ldr	r3, [r2, #0]
 80074f8:	6825      	ldr	r5, [r4, #0]
 80074fa:	6961      	ldr	r1, [r4, #20]
 80074fc:	1d18      	adds	r0, r3, #4
 80074fe:	6010      	str	r0, [r2, #0]
 8007500:	0628      	lsls	r0, r5, #24
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	d501      	bpl.n	800750a <_printf_i+0x196>
 8007506:	6019      	str	r1, [r3, #0]
 8007508:	e002      	b.n	8007510 <_printf_i+0x19c>
 800750a:	066a      	lsls	r2, r5, #25
 800750c:	d5fb      	bpl.n	8007506 <_printf_i+0x192>
 800750e:	8019      	strh	r1, [r3, #0]
 8007510:	2300      	movs	r3, #0
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	4665      	mov	r5, ip
 8007516:	e7b9      	b.n	800748c <_printf_i+0x118>
 8007518:	6813      	ldr	r3, [r2, #0]
 800751a:	1d19      	adds	r1, r3, #4
 800751c:	6011      	str	r1, [r2, #0]
 800751e:	681d      	ldr	r5, [r3, #0]
 8007520:	6862      	ldr	r2, [r4, #4]
 8007522:	2100      	movs	r1, #0
 8007524:	4628      	mov	r0, r5
 8007526:	f7f8 fe63 	bl	80001f0 <memchr>
 800752a:	b108      	cbz	r0, 8007530 <_printf_i+0x1bc>
 800752c:	1b40      	subs	r0, r0, r5
 800752e:	6060      	str	r0, [r4, #4]
 8007530:	6863      	ldr	r3, [r4, #4]
 8007532:	6123      	str	r3, [r4, #16]
 8007534:	2300      	movs	r3, #0
 8007536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800753a:	e7a7      	b.n	800748c <_printf_i+0x118>
 800753c:	6923      	ldr	r3, [r4, #16]
 800753e:	462a      	mov	r2, r5
 8007540:	4639      	mov	r1, r7
 8007542:	4630      	mov	r0, r6
 8007544:	47c0      	blx	r8
 8007546:	3001      	adds	r0, #1
 8007548:	d0aa      	beq.n	80074a0 <_printf_i+0x12c>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	079b      	lsls	r3, r3, #30
 800754e:	d413      	bmi.n	8007578 <_printf_i+0x204>
 8007550:	68e0      	ldr	r0, [r4, #12]
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	4298      	cmp	r0, r3
 8007556:	bfb8      	it	lt
 8007558:	4618      	movlt	r0, r3
 800755a:	e7a3      	b.n	80074a4 <_printf_i+0x130>
 800755c:	2301      	movs	r3, #1
 800755e:	464a      	mov	r2, r9
 8007560:	4639      	mov	r1, r7
 8007562:	4630      	mov	r0, r6
 8007564:	47c0      	blx	r8
 8007566:	3001      	adds	r0, #1
 8007568:	d09a      	beq.n	80074a0 <_printf_i+0x12c>
 800756a:	3501      	adds	r5, #1
 800756c:	68e3      	ldr	r3, [r4, #12]
 800756e:	9a03      	ldr	r2, [sp, #12]
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	42ab      	cmp	r3, r5
 8007574:	dcf2      	bgt.n	800755c <_printf_i+0x1e8>
 8007576:	e7eb      	b.n	8007550 <_printf_i+0x1dc>
 8007578:	2500      	movs	r5, #0
 800757a:	f104 0919 	add.w	r9, r4, #25
 800757e:	e7f5      	b.n	800756c <_printf_i+0x1f8>
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1ac      	bne.n	80074de <_printf_i+0x16a>
 8007584:	7803      	ldrb	r3, [r0, #0]
 8007586:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800758a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800758e:	e76c      	b.n	800746a <_printf_i+0xf6>
 8007590:	0800a2d2 	.word	0x0800a2d2
 8007594:	0800a2e3 	.word	0x0800a2e3

08007598 <_sbrk_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4c06      	ldr	r4, [pc, #24]	; (80075b4 <_sbrk_r+0x1c>)
 800759c:	2300      	movs	r3, #0
 800759e:	4605      	mov	r5, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	f7fa fcf6 	bl	8001f94 <_sbrk>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_sbrk_r+0x1a>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_sbrk_r+0x1a>
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	200003e8 	.word	0x200003e8

080075b8 <siprintf>:
 80075b8:	b40e      	push	{r1, r2, r3}
 80075ba:	b500      	push	{lr}
 80075bc:	b09c      	sub	sp, #112	; 0x70
 80075be:	ab1d      	add	r3, sp, #116	; 0x74
 80075c0:	9002      	str	r0, [sp, #8]
 80075c2:	9006      	str	r0, [sp, #24]
 80075c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075c8:	4809      	ldr	r0, [pc, #36]	; (80075f0 <siprintf+0x38>)
 80075ca:	9107      	str	r1, [sp, #28]
 80075cc:	9104      	str	r1, [sp, #16]
 80075ce:	4909      	ldr	r1, [pc, #36]	; (80075f4 <siprintf+0x3c>)
 80075d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d4:	9105      	str	r1, [sp, #20]
 80075d6:	6800      	ldr	r0, [r0, #0]
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	a902      	add	r1, sp, #8
 80075dc:	f001 f9a0 	bl	8008920 <_svfiprintf_r>
 80075e0:	9b02      	ldr	r3, [sp, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	b01c      	add	sp, #112	; 0x70
 80075e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075ec:	b003      	add	sp, #12
 80075ee:	4770      	bx	lr
 80075f0:	20000068 	.word	0x20000068
 80075f4:	ffff0208 	.word	0xffff0208

080075f8 <quorem>:
 80075f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	6903      	ldr	r3, [r0, #16]
 80075fe:	690c      	ldr	r4, [r1, #16]
 8007600:	42a3      	cmp	r3, r4
 8007602:	4680      	mov	r8, r0
 8007604:	f2c0 8082 	blt.w	800770c <quorem+0x114>
 8007608:	3c01      	subs	r4, #1
 800760a:	f101 0714 	add.w	r7, r1, #20
 800760e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007612:	f100 0614 	add.w	r6, r0, #20
 8007616:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800761a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800761e:	eb06 030c 	add.w	r3, r6, ip
 8007622:	3501      	adds	r5, #1
 8007624:	eb07 090c 	add.w	r9, r7, ip
 8007628:	9301      	str	r3, [sp, #4]
 800762a:	fbb0 f5f5 	udiv	r5, r0, r5
 800762e:	b395      	cbz	r5, 8007696 <quorem+0x9e>
 8007630:	f04f 0a00 	mov.w	sl, #0
 8007634:	4638      	mov	r0, r7
 8007636:	46b6      	mov	lr, r6
 8007638:	46d3      	mov	fp, sl
 800763a:	f850 2b04 	ldr.w	r2, [r0], #4
 800763e:	b293      	uxth	r3, r2
 8007640:	fb05 a303 	mla	r3, r5, r3, sl
 8007644:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007648:	b29b      	uxth	r3, r3
 800764a:	ebab 0303 	sub.w	r3, fp, r3
 800764e:	0c12      	lsrs	r2, r2, #16
 8007650:	f8de b000 	ldr.w	fp, [lr]
 8007654:	fb05 a202 	mla	r2, r5, r2, sl
 8007658:	fa13 f38b 	uxtah	r3, r3, fp
 800765c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007660:	fa1f fb82 	uxth.w	fp, r2
 8007664:	f8de 2000 	ldr.w	r2, [lr]
 8007668:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800766c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007670:	b29b      	uxth	r3, r3
 8007672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007676:	4581      	cmp	r9, r0
 8007678:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800767c:	f84e 3b04 	str.w	r3, [lr], #4
 8007680:	d2db      	bcs.n	800763a <quorem+0x42>
 8007682:	f856 300c 	ldr.w	r3, [r6, ip]
 8007686:	b933      	cbnz	r3, 8007696 <quorem+0x9e>
 8007688:	9b01      	ldr	r3, [sp, #4]
 800768a:	3b04      	subs	r3, #4
 800768c:	429e      	cmp	r6, r3
 800768e:	461a      	mov	r2, r3
 8007690:	d330      	bcc.n	80076f4 <quorem+0xfc>
 8007692:	f8c8 4010 	str.w	r4, [r8, #16]
 8007696:	4640      	mov	r0, r8
 8007698:	f001 f822 	bl	80086e0 <__mcmp>
 800769c:	2800      	cmp	r0, #0
 800769e:	db25      	blt.n	80076ec <quorem+0xf4>
 80076a0:	3501      	adds	r5, #1
 80076a2:	4630      	mov	r0, r6
 80076a4:	f04f 0c00 	mov.w	ip, #0
 80076a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80076ac:	f8d0 e000 	ldr.w	lr, [r0]
 80076b0:	b293      	uxth	r3, r2
 80076b2:	ebac 0303 	sub.w	r3, ip, r3
 80076b6:	0c12      	lsrs	r2, r2, #16
 80076b8:	fa13 f38e 	uxtah	r3, r3, lr
 80076bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ca:	45b9      	cmp	r9, r7
 80076cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076d0:	f840 3b04 	str.w	r3, [r0], #4
 80076d4:	d2e8      	bcs.n	80076a8 <quorem+0xb0>
 80076d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80076da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80076de:	b92a      	cbnz	r2, 80076ec <quorem+0xf4>
 80076e0:	3b04      	subs	r3, #4
 80076e2:	429e      	cmp	r6, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	d30b      	bcc.n	8007700 <quorem+0x108>
 80076e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80076ec:	4628      	mov	r0, r5
 80076ee:	b003      	add	sp, #12
 80076f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	3b04      	subs	r3, #4
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	d1ca      	bne.n	8007692 <quorem+0x9a>
 80076fc:	3c01      	subs	r4, #1
 80076fe:	e7c5      	b.n	800768c <quorem+0x94>
 8007700:	6812      	ldr	r2, [r2, #0]
 8007702:	3b04      	subs	r3, #4
 8007704:	2a00      	cmp	r2, #0
 8007706:	d1ef      	bne.n	80076e8 <quorem+0xf0>
 8007708:	3c01      	subs	r4, #1
 800770a:	e7ea      	b.n	80076e2 <quorem+0xea>
 800770c:	2000      	movs	r0, #0
 800770e:	e7ee      	b.n	80076ee <quorem+0xf6>

08007710 <_dtoa_r>:
 8007710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	ec57 6b10 	vmov	r6, r7, d0
 8007718:	b097      	sub	sp, #92	; 0x5c
 800771a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800771c:	9106      	str	r1, [sp, #24]
 800771e:	4604      	mov	r4, r0
 8007720:	920b      	str	r2, [sp, #44]	; 0x2c
 8007722:	9312      	str	r3, [sp, #72]	; 0x48
 8007724:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007728:	e9cd 6700 	strd	r6, r7, [sp]
 800772c:	b93d      	cbnz	r5, 800773e <_dtoa_r+0x2e>
 800772e:	2010      	movs	r0, #16
 8007730:	f7ff fa10 	bl	8006b54 <malloc>
 8007734:	6260      	str	r0, [r4, #36]	; 0x24
 8007736:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800773a:	6005      	str	r5, [r0, #0]
 800773c:	60c5      	str	r5, [r0, #12]
 800773e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007740:	6819      	ldr	r1, [r3, #0]
 8007742:	b151      	cbz	r1, 800775a <_dtoa_r+0x4a>
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	604a      	str	r2, [r1, #4]
 8007748:	2301      	movs	r3, #1
 800774a:	4093      	lsls	r3, r2
 800774c:	608b      	str	r3, [r1, #8]
 800774e:	4620      	mov	r0, r4
 8007750:	f000 fde5 	bl	800831e <_Bfree>
 8007754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	1e3b      	subs	r3, r7, #0
 800775c:	bfbb      	ittet	lt
 800775e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007762:	9301      	strlt	r3, [sp, #4]
 8007764:	2300      	movge	r3, #0
 8007766:	2201      	movlt	r2, #1
 8007768:	bfac      	ite	ge
 800776a:	f8c8 3000 	strge.w	r3, [r8]
 800776e:	f8c8 2000 	strlt.w	r2, [r8]
 8007772:	4baf      	ldr	r3, [pc, #700]	; (8007a30 <_dtoa_r+0x320>)
 8007774:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007778:	ea33 0308 	bics.w	r3, r3, r8
 800777c:	d114      	bne.n	80077a8 <_dtoa_r+0x98>
 800777e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007780:	f242 730f 	movw	r3, #9999	; 0x270f
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	9b00      	ldr	r3, [sp, #0]
 8007788:	b923      	cbnz	r3, 8007794 <_dtoa_r+0x84>
 800778a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800778e:	2800      	cmp	r0, #0
 8007790:	f000 8542 	beq.w	8008218 <_dtoa_r+0xb08>
 8007794:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007796:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007a44 <_dtoa_r+0x334>
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 8544 	beq.w	8008228 <_dtoa_r+0xb18>
 80077a0:	f10b 0303 	add.w	r3, fp, #3
 80077a4:	f000 bd3e 	b.w	8008224 <_dtoa_r+0xb14>
 80077a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80077ac:	2200      	movs	r2, #0
 80077ae:	2300      	movs	r3, #0
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7f9 f990 	bl	8000ad8 <__aeabi_dcmpeq>
 80077b8:	4681      	mov	r9, r0
 80077ba:	b168      	cbz	r0, 80077d8 <_dtoa_r+0xc8>
 80077bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077be:	2301      	movs	r3, #1
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8524 	beq.w	8008212 <_dtoa_r+0xb02>
 80077ca:	4b9a      	ldr	r3, [pc, #616]	; (8007a34 <_dtoa_r+0x324>)
 80077cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	f000 bd28 	b.w	8008228 <_dtoa_r+0xb18>
 80077d8:	aa14      	add	r2, sp, #80	; 0x50
 80077da:	a915      	add	r1, sp, #84	; 0x54
 80077dc:	ec47 6b10 	vmov	d0, r6, r7
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fff4 	bl	80087ce <__d2b>
 80077e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80077ea:	9004      	str	r0, [sp, #16]
 80077ec:	2d00      	cmp	r5, #0
 80077ee:	d07c      	beq.n	80078ea <_dtoa_r+0x1da>
 80077f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80077f8:	46b2      	mov	sl, r6
 80077fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80077fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007802:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007806:	2200      	movs	r2, #0
 8007808:	4b8b      	ldr	r3, [pc, #556]	; (8007a38 <_dtoa_r+0x328>)
 800780a:	4650      	mov	r0, sl
 800780c:	4659      	mov	r1, fp
 800780e:	f7f8 fd43 	bl	8000298 <__aeabi_dsub>
 8007812:	a381      	add	r3, pc, #516	; (adr r3, 8007a18 <_dtoa_r+0x308>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 fef6 	bl	8000608 <__aeabi_dmul>
 800781c:	a380      	add	r3, pc, #512	; (adr r3, 8007a20 <_dtoa_r+0x310>)
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f7f8 fd3b 	bl	800029c <__adddf3>
 8007826:	4606      	mov	r6, r0
 8007828:	4628      	mov	r0, r5
 800782a:	460f      	mov	r7, r1
 800782c:	f7f8 fe82 	bl	8000534 <__aeabi_i2d>
 8007830:	a37d      	add	r3, pc, #500	; (adr r3, 8007a28 <_dtoa_r+0x318>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fee7 	bl	8000608 <__aeabi_dmul>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	f7f8 fd2b 	bl	800029c <__adddf3>
 8007846:	4606      	mov	r6, r0
 8007848:	460f      	mov	r7, r1
 800784a:	f7f9 f98d 	bl	8000b68 <__aeabi_d2iz>
 800784e:	2200      	movs	r2, #0
 8007850:	4682      	mov	sl, r0
 8007852:	2300      	movs	r3, #0
 8007854:	4630      	mov	r0, r6
 8007856:	4639      	mov	r1, r7
 8007858:	f7f9 f948 	bl	8000aec <__aeabi_dcmplt>
 800785c:	b148      	cbz	r0, 8007872 <_dtoa_r+0x162>
 800785e:	4650      	mov	r0, sl
 8007860:	f7f8 fe68 	bl	8000534 <__aeabi_i2d>
 8007864:	4632      	mov	r2, r6
 8007866:	463b      	mov	r3, r7
 8007868:	f7f9 f936 	bl	8000ad8 <__aeabi_dcmpeq>
 800786c:	b908      	cbnz	r0, 8007872 <_dtoa_r+0x162>
 800786e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007872:	f1ba 0f16 	cmp.w	sl, #22
 8007876:	d859      	bhi.n	800792c <_dtoa_r+0x21c>
 8007878:	4970      	ldr	r1, [pc, #448]	; (8007a3c <_dtoa_r+0x32c>)
 800787a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800787e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007886:	f7f9 f94f 	bl	8000b28 <__aeabi_dcmpgt>
 800788a:	2800      	cmp	r0, #0
 800788c:	d050      	beq.n	8007930 <_dtoa_r+0x220>
 800788e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007892:	2300      	movs	r3, #0
 8007894:	930f      	str	r3, [sp, #60]	; 0x3c
 8007896:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007898:	1b5d      	subs	r5, r3, r5
 800789a:	f1b5 0801 	subs.w	r8, r5, #1
 800789e:	bf49      	itett	mi
 80078a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80078a4:	2300      	movpl	r3, #0
 80078a6:	9305      	strmi	r3, [sp, #20]
 80078a8:	f04f 0800 	movmi.w	r8, #0
 80078ac:	bf58      	it	pl
 80078ae:	9305      	strpl	r3, [sp, #20]
 80078b0:	f1ba 0f00 	cmp.w	sl, #0
 80078b4:	db3e      	blt.n	8007934 <_dtoa_r+0x224>
 80078b6:	2300      	movs	r3, #0
 80078b8:	44d0      	add	r8, sl
 80078ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80078be:	9307      	str	r3, [sp, #28]
 80078c0:	9b06      	ldr	r3, [sp, #24]
 80078c2:	2b09      	cmp	r3, #9
 80078c4:	f200 8090 	bhi.w	80079e8 <_dtoa_r+0x2d8>
 80078c8:	2b05      	cmp	r3, #5
 80078ca:	bfc4      	itt	gt
 80078cc:	3b04      	subgt	r3, #4
 80078ce:	9306      	strgt	r3, [sp, #24]
 80078d0:	9b06      	ldr	r3, [sp, #24]
 80078d2:	f1a3 0302 	sub.w	r3, r3, #2
 80078d6:	bfcc      	ite	gt
 80078d8:	2500      	movgt	r5, #0
 80078da:	2501      	movle	r5, #1
 80078dc:	2b03      	cmp	r3, #3
 80078de:	f200 808f 	bhi.w	8007a00 <_dtoa_r+0x2f0>
 80078e2:	e8df f003 	tbb	[pc, r3]
 80078e6:	7f7d      	.short	0x7f7d
 80078e8:	7131      	.short	0x7131
 80078ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80078ee:	441d      	add	r5, r3
 80078f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80078f4:	2820      	cmp	r0, #32
 80078f6:	dd13      	ble.n	8007920 <_dtoa_r+0x210>
 80078f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80078fc:	9b00      	ldr	r3, [sp, #0]
 80078fe:	fa08 f800 	lsl.w	r8, r8, r0
 8007902:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007906:	fa23 f000 	lsr.w	r0, r3, r0
 800790a:	ea48 0000 	orr.w	r0, r8, r0
 800790e:	f7f8 fe01 	bl	8000514 <__aeabi_ui2d>
 8007912:	2301      	movs	r3, #1
 8007914:	4682      	mov	sl, r0
 8007916:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800791a:	3d01      	subs	r5, #1
 800791c:	9313      	str	r3, [sp, #76]	; 0x4c
 800791e:	e772      	b.n	8007806 <_dtoa_r+0xf6>
 8007920:	9b00      	ldr	r3, [sp, #0]
 8007922:	f1c0 0020 	rsb	r0, r0, #32
 8007926:	fa03 f000 	lsl.w	r0, r3, r0
 800792a:	e7f0      	b.n	800790e <_dtoa_r+0x1fe>
 800792c:	2301      	movs	r3, #1
 800792e:	e7b1      	b.n	8007894 <_dtoa_r+0x184>
 8007930:	900f      	str	r0, [sp, #60]	; 0x3c
 8007932:	e7b0      	b.n	8007896 <_dtoa_r+0x186>
 8007934:	9b05      	ldr	r3, [sp, #20]
 8007936:	eba3 030a 	sub.w	r3, r3, sl
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	f1ca 0300 	rsb	r3, sl, #0
 8007940:	9307      	str	r3, [sp, #28]
 8007942:	2300      	movs	r3, #0
 8007944:	930e      	str	r3, [sp, #56]	; 0x38
 8007946:	e7bb      	b.n	80078c0 <_dtoa_r+0x1b0>
 8007948:	2301      	movs	r3, #1
 800794a:	930a      	str	r3, [sp, #40]	; 0x28
 800794c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800794e:	2b00      	cmp	r3, #0
 8007950:	dd59      	ble.n	8007a06 <_dtoa_r+0x2f6>
 8007952:	9302      	str	r3, [sp, #8]
 8007954:	4699      	mov	r9, r3
 8007956:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007958:	2200      	movs	r2, #0
 800795a:	6072      	str	r2, [r6, #4]
 800795c:	2204      	movs	r2, #4
 800795e:	f102 0014 	add.w	r0, r2, #20
 8007962:	4298      	cmp	r0, r3
 8007964:	6871      	ldr	r1, [r6, #4]
 8007966:	d953      	bls.n	8007a10 <_dtoa_r+0x300>
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fca4 	bl	80082b6 <_Balloc>
 800796e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007970:	6030      	str	r0, [r6, #0]
 8007972:	f1b9 0f0e 	cmp.w	r9, #14
 8007976:	f8d3 b000 	ldr.w	fp, [r3]
 800797a:	f200 80e6 	bhi.w	8007b4a <_dtoa_r+0x43a>
 800797e:	2d00      	cmp	r5, #0
 8007980:	f000 80e3 	beq.w	8007b4a <_dtoa_r+0x43a>
 8007984:	ed9d 7b00 	vldr	d7, [sp]
 8007988:	f1ba 0f00 	cmp.w	sl, #0
 800798c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007990:	dd74      	ble.n	8007a7c <_dtoa_r+0x36c>
 8007992:	4a2a      	ldr	r2, [pc, #168]	; (8007a3c <_dtoa_r+0x32c>)
 8007994:	f00a 030f 	and.w	r3, sl, #15
 8007998:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800799c:	ed93 7b00 	vldr	d7, [r3]
 80079a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80079a4:	06f0      	lsls	r0, r6, #27
 80079a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80079aa:	d565      	bpl.n	8007a78 <_dtoa_r+0x368>
 80079ac:	4b24      	ldr	r3, [pc, #144]	; (8007a40 <_dtoa_r+0x330>)
 80079ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079b6:	f7f8 ff51 	bl	800085c <__aeabi_ddiv>
 80079ba:	e9cd 0100 	strd	r0, r1, [sp]
 80079be:	f006 060f 	and.w	r6, r6, #15
 80079c2:	2503      	movs	r5, #3
 80079c4:	4f1e      	ldr	r7, [pc, #120]	; (8007a40 <_dtoa_r+0x330>)
 80079c6:	e04c      	b.n	8007a62 <_dtoa_r+0x352>
 80079c8:	2301      	movs	r3, #1
 80079ca:	930a      	str	r3, [sp, #40]	; 0x28
 80079cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ce:	4453      	add	r3, sl
 80079d0:	f103 0901 	add.w	r9, r3, #1
 80079d4:	9302      	str	r3, [sp, #8]
 80079d6:	464b      	mov	r3, r9
 80079d8:	2b01      	cmp	r3, #1
 80079da:	bfb8      	it	lt
 80079dc:	2301      	movlt	r3, #1
 80079de:	e7ba      	b.n	8007956 <_dtoa_r+0x246>
 80079e0:	2300      	movs	r3, #0
 80079e2:	e7b2      	b.n	800794a <_dtoa_r+0x23a>
 80079e4:	2300      	movs	r3, #0
 80079e6:	e7f0      	b.n	80079ca <_dtoa_r+0x2ba>
 80079e8:	2501      	movs	r5, #1
 80079ea:	2300      	movs	r3, #0
 80079ec:	9306      	str	r3, [sp, #24]
 80079ee:	950a      	str	r5, [sp, #40]	; 0x28
 80079f0:	f04f 33ff 	mov.w	r3, #4294967295
 80079f4:	9302      	str	r3, [sp, #8]
 80079f6:	4699      	mov	r9, r3
 80079f8:	2200      	movs	r2, #0
 80079fa:	2312      	movs	r3, #18
 80079fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80079fe:	e7aa      	b.n	8007956 <_dtoa_r+0x246>
 8007a00:	2301      	movs	r3, #1
 8007a02:	930a      	str	r3, [sp, #40]	; 0x28
 8007a04:	e7f4      	b.n	80079f0 <_dtoa_r+0x2e0>
 8007a06:	2301      	movs	r3, #1
 8007a08:	9302      	str	r3, [sp, #8]
 8007a0a:	4699      	mov	r9, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	e7f5      	b.n	80079fc <_dtoa_r+0x2ec>
 8007a10:	3101      	adds	r1, #1
 8007a12:	6071      	str	r1, [r6, #4]
 8007a14:	0052      	lsls	r2, r2, #1
 8007a16:	e7a2      	b.n	800795e <_dtoa_r+0x24e>
 8007a18:	636f4361 	.word	0x636f4361
 8007a1c:	3fd287a7 	.word	0x3fd287a7
 8007a20:	8b60c8b3 	.word	0x8b60c8b3
 8007a24:	3fc68a28 	.word	0x3fc68a28
 8007a28:	509f79fb 	.word	0x509f79fb
 8007a2c:	3fd34413 	.word	0x3fd34413
 8007a30:	7ff00000 	.word	0x7ff00000
 8007a34:	0800a2d1 	.word	0x0800a2d1
 8007a38:	3ff80000 	.word	0x3ff80000
 8007a3c:	0800a330 	.word	0x0800a330
 8007a40:	0800a308 	.word	0x0800a308
 8007a44:	0800a2fd 	.word	0x0800a2fd
 8007a48:	07f1      	lsls	r1, r6, #31
 8007a4a:	d508      	bpl.n	8007a5e <_dtoa_r+0x34e>
 8007a4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a54:	f7f8 fdd8 	bl	8000608 <__aeabi_dmul>
 8007a58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	1076      	asrs	r6, r6, #1
 8007a60:	3708      	adds	r7, #8
 8007a62:	2e00      	cmp	r6, #0
 8007a64:	d1f0      	bne.n	8007a48 <_dtoa_r+0x338>
 8007a66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a6e:	f7f8 fef5 	bl	800085c <__aeabi_ddiv>
 8007a72:	e9cd 0100 	strd	r0, r1, [sp]
 8007a76:	e01a      	b.n	8007aae <_dtoa_r+0x39e>
 8007a78:	2502      	movs	r5, #2
 8007a7a:	e7a3      	b.n	80079c4 <_dtoa_r+0x2b4>
 8007a7c:	f000 80a0 	beq.w	8007bc0 <_dtoa_r+0x4b0>
 8007a80:	f1ca 0600 	rsb	r6, sl, #0
 8007a84:	4b9f      	ldr	r3, [pc, #636]	; (8007d04 <_dtoa_r+0x5f4>)
 8007a86:	4fa0      	ldr	r7, [pc, #640]	; (8007d08 <_dtoa_r+0x5f8>)
 8007a88:	f006 020f 	and.w	r2, r6, #15
 8007a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a98:	f7f8 fdb6 	bl	8000608 <__aeabi_dmul>
 8007a9c:	e9cd 0100 	strd	r0, r1, [sp]
 8007aa0:	1136      	asrs	r6, r6, #4
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2502      	movs	r5, #2
 8007aa6:	2e00      	cmp	r6, #0
 8007aa8:	d17f      	bne.n	8007baa <_dtoa_r+0x49a>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e1      	bne.n	8007a72 <_dtoa_r+0x362>
 8007aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 8087 	beq.w	8007bc4 <_dtoa_r+0x4b4>
 8007ab6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007aba:	2200      	movs	r2, #0
 8007abc:	4b93      	ldr	r3, [pc, #588]	; (8007d0c <_dtoa_r+0x5fc>)
 8007abe:	4630      	mov	r0, r6
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	f7f9 f813 	bl	8000aec <__aeabi_dcmplt>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d07c      	beq.n	8007bc4 <_dtoa_r+0x4b4>
 8007aca:	f1b9 0f00 	cmp.w	r9, #0
 8007ace:	d079      	beq.n	8007bc4 <_dtoa_r+0x4b4>
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	dd35      	ble.n	8007b42 <_dtoa_r+0x432>
 8007ad6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ada:	9308      	str	r3, [sp, #32]
 8007adc:	4639      	mov	r1, r7
 8007ade:	2200      	movs	r2, #0
 8007ae0:	4b8b      	ldr	r3, [pc, #556]	; (8007d10 <_dtoa_r+0x600>)
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f7f8 fd90 	bl	8000608 <__aeabi_dmul>
 8007ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8007aec:	9f02      	ldr	r7, [sp, #8]
 8007aee:	3501      	adds	r5, #1
 8007af0:	4628      	mov	r0, r5
 8007af2:	f7f8 fd1f 	bl	8000534 <__aeabi_i2d>
 8007af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007afa:	f7f8 fd85 	bl	8000608 <__aeabi_dmul>
 8007afe:	2200      	movs	r2, #0
 8007b00:	4b84      	ldr	r3, [pc, #528]	; (8007d14 <_dtoa_r+0x604>)
 8007b02:	f7f8 fbcb 	bl	800029c <__adddf3>
 8007b06:	4605      	mov	r5, r0
 8007b08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007b0c:	2f00      	cmp	r7, #0
 8007b0e:	d15d      	bne.n	8007bcc <_dtoa_r+0x4bc>
 8007b10:	2200      	movs	r2, #0
 8007b12:	4b81      	ldr	r3, [pc, #516]	; (8007d18 <_dtoa_r+0x608>)
 8007b14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b18:	f7f8 fbbe 	bl	8000298 <__aeabi_dsub>
 8007b1c:	462a      	mov	r2, r5
 8007b1e:	4633      	mov	r3, r6
 8007b20:	e9cd 0100 	strd	r0, r1, [sp]
 8007b24:	f7f9 f800 	bl	8000b28 <__aeabi_dcmpgt>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f040 8288 	bne.w	800803e <_dtoa_r+0x92e>
 8007b2e:	462a      	mov	r2, r5
 8007b30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b38:	f7f8 ffd8 	bl	8000aec <__aeabi_dcmplt>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f040 827c 	bne.w	800803a <_dtoa_r+0x92a>
 8007b42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b46:	e9cd 2300 	strd	r2, r3, [sp]
 8007b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f2c0 8150 	blt.w	8007df2 <_dtoa_r+0x6e2>
 8007b52:	f1ba 0f0e 	cmp.w	sl, #14
 8007b56:	f300 814c 	bgt.w	8007df2 <_dtoa_r+0x6e2>
 8007b5a:	4b6a      	ldr	r3, [pc, #424]	; (8007d04 <_dtoa_r+0x5f4>)
 8007b5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b60:	ed93 7b00 	vldr	d7, [r3]
 8007b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b6c:	f280 80d8 	bge.w	8007d20 <_dtoa_r+0x610>
 8007b70:	f1b9 0f00 	cmp.w	r9, #0
 8007b74:	f300 80d4 	bgt.w	8007d20 <_dtoa_r+0x610>
 8007b78:	f040 825e 	bne.w	8008038 <_dtoa_r+0x928>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4b66      	ldr	r3, [pc, #408]	; (8007d18 <_dtoa_r+0x608>)
 8007b80:	ec51 0b17 	vmov	r0, r1, d7
 8007b84:	f7f8 fd40 	bl	8000608 <__aeabi_dmul>
 8007b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b8c:	f7f8 ffc2 	bl	8000b14 <__aeabi_dcmpge>
 8007b90:	464f      	mov	r7, r9
 8007b92:	464e      	mov	r6, r9
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f040 8234 	bne.w	8008002 <_dtoa_r+0x8f2>
 8007b9a:	2331      	movs	r3, #49	; 0x31
 8007b9c:	f10b 0501 	add.w	r5, fp, #1
 8007ba0:	f88b 3000 	strb.w	r3, [fp]
 8007ba4:	f10a 0a01 	add.w	sl, sl, #1
 8007ba8:	e22f      	b.n	800800a <_dtoa_r+0x8fa>
 8007baa:	07f2      	lsls	r2, r6, #31
 8007bac:	d505      	bpl.n	8007bba <_dtoa_r+0x4aa>
 8007bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb2:	f7f8 fd29 	bl	8000608 <__aeabi_dmul>
 8007bb6:	3501      	adds	r5, #1
 8007bb8:	2301      	movs	r3, #1
 8007bba:	1076      	asrs	r6, r6, #1
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	e772      	b.n	8007aa6 <_dtoa_r+0x396>
 8007bc0:	2502      	movs	r5, #2
 8007bc2:	e774      	b.n	8007aae <_dtoa_r+0x39e>
 8007bc4:	f8cd a020 	str.w	sl, [sp, #32]
 8007bc8:	464f      	mov	r7, r9
 8007bca:	e791      	b.n	8007af0 <_dtoa_r+0x3e0>
 8007bcc:	4b4d      	ldr	r3, [pc, #308]	; (8007d04 <_dtoa_r+0x5f4>)
 8007bce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bd2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d047      	beq.n	8007c6c <_dtoa_r+0x55c>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	2000      	movs	r0, #0
 8007be2:	494e      	ldr	r1, [pc, #312]	; (8007d1c <_dtoa_r+0x60c>)
 8007be4:	f7f8 fe3a 	bl	800085c <__aeabi_ddiv>
 8007be8:	462a      	mov	r2, r5
 8007bea:	4633      	mov	r3, r6
 8007bec:	f7f8 fb54 	bl	8000298 <__aeabi_dsub>
 8007bf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007bf4:	465d      	mov	r5, fp
 8007bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bfa:	f7f8 ffb5 	bl	8000b68 <__aeabi_d2iz>
 8007bfe:	4606      	mov	r6, r0
 8007c00:	f7f8 fc98 	bl	8000534 <__aeabi_i2d>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c0c:	f7f8 fb44 	bl	8000298 <__aeabi_dsub>
 8007c10:	3630      	adds	r6, #48	; 0x30
 8007c12:	f805 6b01 	strb.w	r6, [r5], #1
 8007c16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c1a:	e9cd 0100 	strd	r0, r1, [sp]
 8007c1e:	f7f8 ff65 	bl	8000aec <__aeabi_dcmplt>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d163      	bne.n	8007cee <_dtoa_r+0x5de>
 8007c26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	4937      	ldr	r1, [pc, #220]	; (8007d0c <_dtoa_r+0x5fc>)
 8007c2e:	f7f8 fb33 	bl	8000298 <__aeabi_dsub>
 8007c32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c36:	f7f8 ff59 	bl	8000aec <__aeabi_dcmplt>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f040 80b7 	bne.w	8007dae <_dtoa_r+0x69e>
 8007c40:	eba5 030b 	sub.w	r3, r5, fp
 8007c44:	429f      	cmp	r7, r3
 8007c46:	f77f af7c 	ble.w	8007b42 <_dtoa_r+0x432>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4b30      	ldr	r3, [pc, #192]	; (8007d10 <_dtoa_r+0x600>)
 8007c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c52:	f7f8 fcd9 	bl	8000608 <__aeabi_dmul>
 8007c56:	2200      	movs	r2, #0
 8007c58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c5c:	4b2c      	ldr	r3, [pc, #176]	; (8007d10 <_dtoa_r+0x600>)
 8007c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c62:	f7f8 fcd1 	bl	8000608 <__aeabi_dmul>
 8007c66:	e9cd 0100 	strd	r0, r1, [sp]
 8007c6a:	e7c4      	b.n	8007bf6 <_dtoa_r+0x4e6>
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	4633      	mov	r3, r6
 8007c70:	f7f8 fcca 	bl	8000608 <__aeabi_dmul>
 8007c74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c78:	eb0b 0507 	add.w	r5, fp, r7
 8007c7c:	465e      	mov	r6, fp
 8007c7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c82:	f7f8 ff71 	bl	8000b68 <__aeabi_d2iz>
 8007c86:	4607      	mov	r7, r0
 8007c88:	f7f8 fc54 	bl	8000534 <__aeabi_i2d>
 8007c8c:	3730      	adds	r7, #48	; 0x30
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c96:	f7f8 faff 	bl	8000298 <__aeabi_dsub>
 8007c9a:	f806 7b01 	strb.w	r7, [r6], #1
 8007c9e:	42ae      	cmp	r6, r5
 8007ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	d126      	bne.n	8007cf8 <_dtoa_r+0x5e8>
 8007caa:	4b1c      	ldr	r3, [pc, #112]	; (8007d1c <_dtoa_r+0x60c>)
 8007cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cb0:	f7f8 faf4 	bl	800029c <__adddf3>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cbc:	f7f8 ff34 	bl	8000b28 <__aeabi_dcmpgt>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d174      	bne.n	8007dae <_dtoa_r+0x69e>
 8007cc4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007cc8:	2000      	movs	r0, #0
 8007cca:	4914      	ldr	r1, [pc, #80]	; (8007d1c <_dtoa_r+0x60c>)
 8007ccc:	f7f8 fae4 	bl	8000298 <__aeabi_dsub>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cd8:	f7f8 ff08 	bl	8000aec <__aeabi_dcmplt>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f43f af30 	beq.w	8007b42 <_dtoa_r+0x432>
 8007ce2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ce6:	2b30      	cmp	r3, #48	; 0x30
 8007ce8:	f105 32ff 	add.w	r2, r5, #4294967295
 8007cec:	d002      	beq.n	8007cf4 <_dtoa_r+0x5e4>
 8007cee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007cf2:	e04a      	b.n	8007d8a <_dtoa_r+0x67a>
 8007cf4:	4615      	mov	r5, r2
 8007cf6:	e7f4      	b.n	8007ce2 <_dtoa_r+0x5d2>
 8007cf8:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <_dtoa_r+0x600>)
 8007cfa:	f7f8 fc85 	bl	8000608 <__aeabi_dmul>
 8007cfe:	e9cd 0100 	strd	r0, r1, [sp]
 8007d02:	e7bc      	b.n	8007c7e <_dtoa_r+0x56e>
 8007d04:	0800a330 	.word	0x0800a330
 8007d08:	0800a308 	.word	0x0800a308
 8007d0c:	3ff00000 	.word	0x3ff00000
 8007d10:	40240000 	.word	0x40240000
 8007d14:	401c0000 	.word	0x401c0000
 8007d18:	40140000 	.word	0x40140000
 8007d1c:	3fe00000 	.word	0x3fe00000
 8007d20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007d24:	465d      	mov	r5, fp
 8007d26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	f7f8 fd95 	bl	800085c <__aeabi_ddiv>
 8007d32:	f7f8 ff19 	bl	8000b68 <__aeabi_d2iz>
 8007d36:	4680      	mov	r8, r0
 8007d38:	f7f8 fbfc 	bl	8000534 <__aeabi_i2d>
 8007d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d40:	f7f8 fc62 	bl	8000608 <__aeabi_dmul>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007d50:	f7f8 faa2 	bl	8000298 <__aeabi_dsub>
 8007d54:	f805 6b01 	strb.w	r6, [r5], #1
 8007d58:	eba5 060b 	sub.w	r6, r5, fp
 8007d5c:	45b1      	cmp	r9, r6
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	d139      	bne.n	8007dd8 <_dtoa_r+0x6c8>
 8007d64:	f7f8 fa9a 	bl	800029c <__adddf3>
 8007d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	460f      	mov	r7, r1
 8007d70:	f7f8 feda 	bl	8000b28 <__aeabi_dcmpgt>
 8007d74:	b9c8      	cbnz	r0, 8007daa <_dtoa_r+0x69a>
 8007d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	f7f8 feab 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d82:	b110      	cbz	r0, 8007d8a <_dtoa_r+0x67a>
 8007d84:	f018 0f01 	tst.w	r8, #1
 8007d88:	d10f      	bne.n	8007daa <_dtoa_r+0x69a>
 8007d8a:	9904      	ldr	r1, [sp, #16]
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f000 fac6 	bl	800831e <_Bfree>
 8007d92:	2300      	movs	r3, #0
 8007d94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d96:	702b      	strb	r3, [r5, #0]
 8007d98:	f10a 0301 	add.w	r3, sl, #1
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8241 	beq.w	8008228 <_dtoa_r+0xb18>
 8007da6:	601d      	str	r5, [r3, #0]
 8007da8:	e23e      	b.n	8008228 <_dtoa_r+0xb18>
 8007daa:	f8cd a020 	str.w	sl, [sp, #32]
 8007dae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007db2:	2a39      	cmp	r2, #57	; 0x39
 8007db4:	f105 33ff 	add.w	r3, r5, #4294967295
 8007db8:	d108      	bne.n	8007dcc <_dtoa_r+0x6bc>
 8007dba:	459b      	cmp	fp, r3
 8007dbc:	d10a      	bne.n	8007dd4 <_dtoa_r+0x6c4>
 8007dbe:	9b08      	ldr	r3, [sp, #32]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	9308      	str	r3, [sp, #32]
 8007dc4:	2330      	movs	r3, #48	; 0x30
 8007dc6:	f88b 3000 	strb.w	r3, [fp]
 8007dca:	465b      	mov	r3, fp
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	3201      	adds	r2, #1
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	e78c      	b.n	8007cee <_dtoa_r+0x5de>
 8007dd4:	461d      	mov	r5, r3
 8007dd6:	e7ea      	b.n	8007dae <_dtoa_r+0x69e>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4b9b      	ldr	r3, [pc, #620]	; (8008048 <_dtoa_r+0x938>)
 8007ddc:	f7f8 fc14 	bl	8000608 <__aeabi_dmul>
 8007de0:	2200      	movs	r2, #0
 8007de2:	2300      	movs	r3, #0
 8007de4:	4606      	mov	r6, r0
 8007de6:	460f      	mov	r7, r1
 8007de8:	f7f8 fe76 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d09a      	beq.n	8007d26 <_dtoa_r+0x616>
 8007df0:	e7cb      	b.n	8007d8a <_dtoa_r+0x67a>
 8007df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007df4:	2a00      	cmp	r2, #0
 8007df6:	f000 808b 	beq.w	8007f10 <_dtoa_r+0x800>
 8007dfa:	9a06      	ldr	r2, [sp, #24]
 8007dfc:	2a01      	cmp	r2, #1
 8007dfe:	dc6e      	bgt.n	8007ede <_dtoa_r+0x7ce>
 8007e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	d067      	beq.n	8007ed6 <_dtoa_r+0x7c6>
 8007e06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e0a:	9f07      	ldr	r7, [sp, #28]
 8007e0c:	9d05      	ldr	r5, [sp, #20]
 8007e0e:	9a05      	ldr	r2, [sp, #20]
 8007e10:	2101      	movs	r1, #1
 8007e12:	441a      	add	r2, r3
 8007e14:	4620      	mov	r0, r4
 8007e16:	9205      	str	r2, [sp, #20]
 8007e18:	4498      	add	r8, r3
 8007e1a:	f000 fb20 	bl	800845e <__i2b>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	dd0c      	ble.n	8007e3e <_dtoa_r+0x72e>
 8007e24:	f1b8 0f00 	cmp.w	r8, #0
 8007e28:	dd09      	ble.n	8007e3e <_dtoa_r+0x72e>
 8007e2a:	4545      	cmp	r5, r8
 8007e2c:	9a05      	ldr	r2, [sp, #20]
 8007e2e:	462b      	mov	r3, r5
 8007e30:	bfa8      	it	ge
 8007e32:	4643      	movge	r3, r8
 8007e34:	1ad2      	subs	r2, r2, r3
 8007e36:	9205      	str	r2, [sp, #20]
 8007e38:	1aed      	subs	r5, r5, r3
 8007e3a:	eba8 0803 	sub.w	r8, r8, r3
 8007e3e:	9b07      	ldr	r3, [sp, #28]
 8007e40:	b1eb      	cbz	r3, 8007e7e <_dtoa_r+0x76e>
 8007e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d067      	beq.n	8007f18 <_dtoa_r+0x808>
 8007e48:	b18f      	cbz	r7, 8007e6e <_dtoa_r+0x75e>
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	463a      	mov	r2, r7
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 fba4 	bl	800859c <__pow5mult>
 8007e54:	9a04      	ldr	r2, [sp, #16]
 8007e56:	4601      	mov	r1, r0
 8007e58:	4606      	mov	r6, r0
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 fb08 	bl	8008470 <__multiply>
 8007e60:	9904      	ldr	r1, [sp, #16]
 8007e62:	9008      	str	r0, [sp, #32]
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 fa5a 	bl	800831e <_Bfree>
 8007e6a:	9b08      	ldr	r3, [sp, #32]
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	9b07      	ldr	r3, [sp, #28]
 8007e70:	1bda      	subs	r2, r3, r7
 8007e72:	d004      	beq.n	8007e7e <_dtoa_r+0x76e>
 8007e74:	9904      	ldr	r1, [sp, #16]
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 fb90 	bl	800859c <__pow5mult>
 8007e7c:	9004      	str	r0, [sp, #16]
 8007e7e:	2101      	movs	r1, #1
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 faec 	bl	800845e <__i2b>
 8007e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e88:	4607      	mov	r7, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 81d0 	beq.w	8008230 <_dtoa_r+0xb20>
 8007e90:	461a      	mov	r2, r3
 8007e92:	4601      	mov	r1, r0
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fb81 	bl	800859c <__pow5mult>
 8007e9a:	9b06      	ldr	r3, [sp, #24]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	dc40      	bgt.n	8007f24 <_dtoa_r+0x814>
 8007ea2:	9b00      	ldr	r3, [sp, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d139      	bne.n	8007f1c <_dtoa_r+0x80c>
 8007ea8:	9b01      	ldr	r3, [sp, #4]
 8007eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d136      	bne.n	8007f20 <_dtoa_r+0x810>
 8007eb2:	9b01      	ldr	r3, [sp, #4]
 8007eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eb8:	0d1b      	lsrs	r3, r3, #20
 8007eba:	051b      	lsls	r3, r3, #20
 8007ebc:	b12b      	cbz	r3, 8007eca <_dtoa_r+0x7ba>
 8007ebe:	9b05      	ldr	r3, [sp, #20]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	f108 0801 	add.w	r8, r8, #1
 8007ec8:	2301      	movs	r3, #1
 8007eca:	9307      	str	r3, [sp, #28]
 8007ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d12a      	bne.n	8007f28 <_dtoa_r+0x818>
 8007ed2:	2001      	movs	r0, #1
 8007ed4:	e030      	b.n	8007f38 <_dtoa_r+0x828>
 8007ed6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ed8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007edc:	e795      	b.n	8007e0a <_dtoa_r+0x6fa>
 8007ede:	9b07      	ldr	r3, [sp, #28]
 8007ee0:	f109 37ff 	add.w	r7, r9, #4294967295
 8007ee4:	42bb      	cmp	r3, r7
 8007ee6:	bfbf      	itttt	lt
 8007ee8:	9b07      	ldrlt	r3, [sp, #28]
 8007eea:	9707      	strlt	r7, [sp, #28]
 8007eec:	1afa      	sublt	r2, r7, r3
 8007eee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007ef0:	bfbb      	ittet	lt
 8007ef2:	189b      	addlt	r3, r3, r2
 8007ef4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007ef6:	1bdf      	subge	r7, r3, r7
 8007ef8:	2700      	movlt	r7, #0
 8007efa:	f1b9 0f00 	cmp.w	r9, #0
 8007efe:	bfb5      	itete	lt
 8007f00:	9b05      	ldrlt	r3, [sp, #20]
 8007f02:	9d05      	ldrge	r5, [sp, #20]
 8007f04:	eba3 0509 	sublt.w	r5, r3, r9
 8007f08:	464b      	movge	r3, r9
 8007f0a:	bfb8      	it	lt
 8007f0c:	2300      	movlt	r3, #0
 8007f0e:	e77e      	b.n	8007e0e <_dtoa_r+0x6fe>
 8007f10:	9f07      	ldr	r7, [sp, #28]
 8007f12:	9d05      	ldr	r5, [sp, #20]
 8007f14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007f16:	e783      	b.n	8007e20 <_dtoa_r+0x710>
 8007f18:	9a07      	ldr	r2, [sp, #28]
 8007f1a:	e7ab      	b.n	8007e74 <_dtoa_r+0x764>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	e7d4      	b.n	8007eca <_dtoa_r+0x7ba>
 8007f20:	9b00      	ldr	r3, [sp, #0]
 8007f22:	e7d2      	b.n	8007eca <_dtoa_r+0x7ba>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9307      	str	r3, [sp, #28]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007f2e:	6918      	ldr	r0, [r3, #16]
 8007f30:	f000 fa47 	bl	80083c2 <__hi0bits>
 8007f34:	f1c0 0020 	rsb	r0, r0, #32
 8007f38:	4440      	add	r0, r8
 8007f3a:	f010 001f 	ands.w	r0, r0, #31
 8007f3e:	d047      	beq.n	8007fd0 <_dtoa_r+0x8c0>
 8007f40:	f1c0 0320 	rsb	r3, r0, #32
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	dd3b      	ble.n	8007fc0 <_dtoa_r+0x8b0>
 8007f48:	9b05      	ldr	r3, [sp, #20]
 8007f4a:	f1c0 001c 	rsb	r0, r0, #28
 8007f4e:	4403      	add	r3, r0
 8007f50:	9305      	str	r3, [sp, #20]
 8007f52:	4405      	add	r5, r0
 8007f54:	4480      	add	r8, r0
 8007f56:	9b05      	ldr	r3, [sp, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	dd05      	ble.n	8007f68 <_dtoa_r+0x858>
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	9904      	ldr	r1, [sp, #16]
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 fb69 	bl	8008638 <__lshift>
 8007f66:	9004      	str	r0, [sp, #16]
 8007f68:	f1b8 0f00 	cmp.w	r8, #0
 8007f6c:	dd05      	ble.n	8007f7a <_dtoa_r+0x86a>
 8007f6e:	4639      	mov	r1, r7
 8007f70:	4642      	mov	r2, r8
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 fb60 	bl	8008638 <__lshift>
 8007f78:	4607      	mov	r7, r0
 8007f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f7c:	b353      	cbz	r3, 8007fd4 <_dtoa_r+0x8c4>
 8007f7e:	4639      	mov	r1, r7
 8007f80:	9804      	ldr	r0, [sp, #16]
 8007f82:	f000 fbad 	bl	80086e0 <__mcmp>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	da24      	bge.n	8007fd4 <_dtoa_r+0x8c4>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	220a      	movs	r2, #10
 8007f8e:	9904      	ldr	r1, [sp, #16]
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 f9db 	bl	800834c <__multadd>
 8007f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f98:	9004      	str	r0, [sp, #16]
 8007f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 814d 	beq.w	800823e <_dtoa_r+0xb2e>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	220a      	movs	r2, #10
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f9ce 	bl	800834c <__multadd>
 8007fb0:	9b02      	ldr	r3, [sp, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	dc4f      	bgt.n	8008058 <_dtoa_r+0x948>
 8007fb8:	9b06      	ldr	r3, [sp, #24]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	dd4c      	ble.n	8008058 <_dtoa_r+0x948>
 8007fbe:	e011      	b.n	8007fe4 <_dtoa_r+0x8d4>
 8007fc0:	d0c9      	beq.n	8007f56 <_dtoa_r+0x846>
 8007fc2:	9a05      	ldr	r2, [sp, #20]
 8007fc4:	331c      	adds	r3, #28
 8007fc6:	441a      	add	r2, r3
 8007fc8:	9205      	str	r2, [sp, #20]
 8007fca:	441d      	add	r5, r3
 8007fcc:	4498      	add	r8, r3
 8007fce:	e7c2      	b.n	8007f56 <_dtoa_r+0x846>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	e7f6      	b.n	8007fc2 <_dtoa_r+0x8b2>
 8007fd4:	f1b9 0f00 	cmp.w	r9, #0
 8007fd8:	dc38      	bgt.n	800804c <_dtoa_r+0x93c>
 8007fda:	9b06      	ldr	r3, [sp, #24]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	dd35      	ble.n	800804c <_dtoa_r+0x93c>
 8007fe0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fe4:	9b02      	ldr	r3, [sp, #8]
 8007fe6:	b963      	cbnz	r3, 8008002 <_dtoa_r+0x8f2>
 8007fe8:	4639      	mov	r1, r7
 8007fea:	2205      	movs	r2, #5
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 f9ad 	bl	800834c <__multadd>
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	9804      	ldr	r0, [sp, #16]
 8007ff8:	f000 fb72 	bl	80086e0 <__mcmp>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f73f adcc 	bgt.w	8007b9a <_dtoa_r+0x48a>
 8008002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008004:	465d      	mov	r5, fp
 8008006:	ea6f 0a03 	mvn.w	sl, r3
 800800a:	f04f 0900 	mov.w	r9, #0
 800800e:	4639      	mov	r1, r7
 8008010:	4620      	mov	r0, r4
 8008012:	f000 f984 	bl	800831e <_Bfree>
 8008016:	2e00      	cmp	r6, #0
 8008018:	f43f aeb7 	beq.w	8007d8a <_dtoa_r+0x67a>
 800801c:	f1b9 0f00 	cmp.w	r9, #0
 8008020:	d005      	beq.n	800802e <_dtoa_r+0x91e>
 8008022:	45b1      	cmp	r9, r6
 8008024:	d003      	beq.n	800802e <_dtoa_r+0x91e>
 8008026:	4649      	mov	r1, r9
 8008028:	4620      	mov	r0, r4
 800802a:	f000 f978 	bl	800831e <_Bfree>
 800802e:	4631      	mov	r1, r6
 8008030:	4620      	mov	r0, r4
 8008032:	f000 f974 	bl	800831e <_Bfree>
 8008036:	e6a8      	b.n	8007d8a <_dtoa_r+0x67a>
 8008038:	2700      	movs	r7, #0
 800803a:	463e      	mov	r6, r7
 800803c:	e7e1      	b.n	8008002 <_dtoa_r+0x8f2>
 800803e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008042:	463e      	mov	r6, r7
 8008044:	e5a9      	b.n	8007b9a <_dtoa_r+0x48a>
 8008046:	bf00      	nop
 8008048:	40240000 	.word	0x40240000
 800804c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800804e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 80fa 	beq.w	800824c <_dtoa_r+0xb3c>
 8008058:	2d00      	cmp	r5, #0
 800805a:	dd05      	ble.n	8008068 <_dtoa_r+0x958>
 800805c:	4631      	mov	r1, r6
 800805e:	462a      	mov	r2, r5
 8008060:	4620      	mov	r0, r4
 8008062:	f000 fae9 	bl	8008638 <__lshift>
 8008066:	4606      	mov	r6, r0
 8008068:	9b07      	ldr	r3, [sp, #28]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d04c      	beq.n	8008108 <_dtoa_r+0x9f8>
 800806e:	6871      	ldr	r1, [r6, #4]
 8008070:	4620      	mov	r0, r4
 8008072:	f000 f920 	bl	80082b6 <_Balloc>
 8008076:	6932      	ldr	r2, [r6, #16]
 8008078:	3202      	adds	r2, #2
 800807a:	4605      	mov	r5, r0
 800807c:	0092      	lsls	r2, r2, #2
 800807e:	f106 010c 	add.w	r1, r6, #12
 8008082:	300c      	adds	r0, #12
 8008084:	f000 f90a 	bl	800829c <memcpy>
 8008088:	2201      	movs	r2, #1
 800808a:	4629      	mov	r1, r5
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fad3 	bl	8008638 <__lshift>
 8008092:	9b00      	ldr	r3, [sp, #0]
 8008094:	f8cd b014 	str.w	fp, [sp, #20]
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	46b1      	mov	r9, r6
 800809e:	9307      	str	r3, [sp, #28]
 80080a0:	4606      	mov	r6, r0
 80080a2:	4639      	mov	r1, r7
 80080a4:	9804      	ldr	r0, [sp, #16]
 80080a6:	f7ff faa7 	bl	80075f8 <quorem>
 80080aa:	4649      	mov	r1, r9
 80080ac:	4605      	mov	r5, r0
 80080ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80080b2:	9804      	ldr	r0, [sp, #16]
 80080b4:	f000 fb14 	bl	80086e0 <__mcmp>
 80080b8:	4632      	mov	r2, r6
 80080ba:	9000      	str	r0, [sp, #0]
 80080bc:	4639      	mov	r1, r7
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 fb28 	bl	8008714 <__mdiff>
 80080c4:	68c3      	ldr	r3, [r0, #12]
 80080c6:	4602      	mov	r2, r0
 80080c8:	bb03      	cbnz	r3, 800810c <_dtoa_r+0x9fc>
 80080ca:	4601      	mov	r1, r0
 80080cc:	9008      	str	r0, [sp, #32]
 80080ce:	9804      	ldr	r0, [sp, #16]
 80080d0:	f000 fb06 	bl	80086e0 <__mcmp>
 80080d4:	9a08      	ldr	r2, [sp, #32]
 80080d6:	4603      	mov	r3, r0
 80080d8:	4611      	mov	r1, r2
 80080da:	4620      	mov	r0, r4
 80080dc:	9308      	str	r3, [sp, #32]
 80080de:	f000 f91e 	bl	800831e <_Bfree>
 80080e2:	9b08      	ldr	r3, [sp, #32]
 80080e4:	b9a3      	cbnz	r3, 8008110 <_dtoa_r+0xa00>
 80080e6:	9a06      	ldr	r2, [sp, #24]
 80080e8:	b992      	cbnz	r2, 8008110 <_dtoa_r+0xa00>
 80080ea:	9a07      	ldr	r2, [sp, #28]
 80080ec:	b982      	cbnz	r2, 8008110 <_dtoa_r+0xa00>
 80080ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80080f2:	d029      	beq.n	8008148 <_dtoa_r+0xa38>
 80080f4:	9b00      	ldr	r3, [sp, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	dd01      	ble.n	80080fe <_dtoa_r+0x9ee>
 80080fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80080fe:	9b05      	ldr	r3, [sp, #20]
 8008100:	1c5d      	adds	r5, r3, #1
 8008102:	f883 8000 	strb.w	r8, [r3]
 8008106:	e782      	b.n	800800e <_dtoa_r+0x8fe>
 8008108:	4630      	mov	r0, r6
 800810a:	e7c2      	b.n	8008092 <_dtoa_r+0x982>
 800810c:	2301      	movs	r3, #1
 800810e:	e7e3      	b.n	80080d8 <_dtoa_r+0x9c8>
 8008110:	9a00      	ldr	r2, [sp, #0]
 8008112:	2a00      	cmp	r2, #0
 8008114:	db04      	blt.n	8008120 <_dtoa_r+0xa10>
 8008116:	d125      	bne.n	8008164 <_dtoa_r+0xa54>
 8008118:	9a06      	ldr	r2, [sp, #24]
 800811a:	bb1a      	cbnz	r2, 8008164 <_dtoa_r+0xa54>
 800811c:	9a07      	ldr	r2, [sp, #28]
 800811e:	bb0a      	cbnz	r2, 8008164 <_dtoa_r+0xa54>
 8008120:	2b00      	cmp	r3, #0
 8008122:	ddec      	ble.n	80080fe <_dtoa_r+0x9ee>
 8008124:	2201      	movs	r2, #1
 8008126:	9904      	ldr	r1, [sp, #16]
 8008128:	4620      	mov	r0, r4
 800812a:	f000 fa85 	bl	8008638 <__lshift>
 800812e:	4639      	mov	r1, r7
 8008130:	9004      	str	r0, [sp, #16]
 8008132:	f000 fad5 	bl	80086e0 <__mcmp>
 8008136:	2800      	cmp	r0, #0
 8008138:	dc03      	bgt.n	8008142 <_dtoa_r+0xa32>
 800813a:	d1e0      	bne.n	80080fe <_dtoa_r+0x9ee>
 800813c:	f018 0f01 	tst.w	r8, #1
 8008140:	d0dd      	beq.n	80080fe <_dtoa_r+0x9ee>
 8008142:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008146:	d1d8      	bne.n	80080fa <_dtoa_r+0x9ea>
 8008148:	9b05      	ldr	r3, [sp, #20]
 800814a:	9a05      	ldr	r2, [sp, #20]
 800814c:	1c5d      	adds	r5, r3, #1
 800814e:	2339      	movs	r3, #57	; 0x39
 8008150:	7013      	strb	r3, [r2, #0]
 8008152:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008156:	2b39      	cmp	r3, #57	; 0x39
 8008158:	f105 32ff 	add.w	r2, r5, #4294967295
 800815c:	d04f      	beq.n	80081fe <_dtoa_r+0xaee>
 800815e:	3301      	adds	r3, #1
 8008160:	7013      	strb	r3, [r2, #0]
 8008162:	e754      	b.n	800800e <_dtoa_r+0x8fe>
 8008164:	9a05      	ldr	r2, [sp, #20]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f102 0501 	add.w	r5, r2, #1
 800816c:	dd06      	ble.n	800817c <_dtoa_r+0xa6c>
 800816e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008172:	d0e9      	beq.n	8008148 <_dtoa_r+0xa38>
 8008174:	f108 0801 	add.w	r8, r8, #1
 8008178:	9b05      	ldr	r3, [sp, #20]
 800817a:	e7c2      	b.n	8008102 <_dtoa_r+0x9f2>
 800817c:	9a02      	ldr	r2, [sp, #8]
 800817e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008182:	eba5 030b 	sub.w	r3, r5, fp
 8008186:	4293      	cmp	r3, r2
 8008188:	d021      	beq.n	80081ce <_dtoa_r+0xabe>
 800818a:	2300      	movs	r3, #0
 800818c:	220a      	movs	r2, #10
 800818e:	9904      	ldr	r1, [sp, #16]
 8008190:	4620      	mov	r0, r4
 8008192:	f000 f8db 	bl	800834c <__multadd>
 8008196:	45b1      	cmp	r9, r6
 8008198:	9004      	str	r0, [sp, #16]
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	f04f 020a 	mov.w	r2, #10
 80081a2:	4649      	mov	r1, r9
 80081a4:	4620      	mov	r0, r4
 80081a6:	d105      	bne.n	80081b4 <_dtoa_r+0xaa4>
 80081a8:	f000 f8d0 	bl	800834c <__multadd>
 80081ac:	4681      	mov	r9, r0
 80081ae:	4606      	mov	r6, r0
 80081b0:	9505      	str	r5, [sp, #20]
 80081b2:	e776      	b.n	80080a2 <_dtoa_r+0x992>
 80081b4:	f000 f8ca 	bl	800834c <__multadd>
 80081b8:	4631      	mov	r1, r6
 80081ba:	4681      	mov	r9, r0
 80081bc:	2300      	movs	r3, #0
 80081be:	220a      	movs	r2, #10
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 f8c3 	bl	800834c <__multadd>
 80081c6:	4606      	mov	r6, r0
 80081c8:	e7f2      	b.n	80081b0 <_dtoa_r+0xaa0>
 80081ca:	f04f 0900 	mov.w	r9, #0
 80081ce:	2201      	movs	r2, #1
 80081d0:	9904      	ldr	r1, [sp, #16]
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 fa30 	bl	8008638 <__lshift>
 80081d8:	4639      	mov	r1, r7
 80081da:	9004      	str	r0, [sp, #16]
 80081dc:	f000 fa80 	bl	80086e0 <__mcmp>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	dcb6      	bgt.n	8008152 <_dtoa_r+0xa42>
 80081e4:	d102      	bne.n	80081ec <_dtoa_r+0xadc>
 80081e6:	f018 0f01 	tst.w	r8, #1
 80081ea:	d1b2      	bne.n	8008152 <_dtoa_r+0xa42>
 80081ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081f0:	2b30      	cmp	r3, #48	; 0x30
 80081f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80081f6:	f47f af0a 	bne.w	800800e <_dtoa_r+0x8fe>
 80081fa:	4615      	mov	r5, r2
 80081fc:	e7f6      	b.n	80081ec <_dtoa_r+0xadc>
 80081fe:	4593      	cmp	fp, r2
 8008200:	d105      	bne.n	800820e <_dtoa_r+0xafe>
 8008202:	2331      	movs	r3, #49	; 0x31
 8008204:	f10a 0a01 	add.w	sl, sl, #1
 8008208:	f88b 3000 	strb.w	r3, [fp]
 800820c:	e6ff      	b.n	800800e <_dtoa_r+0x8fe>
 800820e:	4615      	mov	r5, r2
 8008210:	e79f      	b.n	8008152 <_dtoa_r+0xa42>
 8008212:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008278 <_dtoa_r+0xb68>
 8008216:	e007      	b.n	8008228 <_dtoa_r+0xb18>
 8008218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800821a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800827c <_dtoa_r+0xb6c>
 800821e:	b11b      	cbz	r3, 8008228 <_dtoa_r+0xb18>
 8008220:	f10b 0308 	add.w	r3, fp, #8
 8008224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	4658      	mov	r0, fp
 800822a:	b017      	add	sp, #92	; 0x5c
 800822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008230:	9b06      	ldr	r3, [sp, #24]
 8008232:	2b01      	cmp	r3, #1
 8008234:	f77f ae35 	ble.w	8007ea2 <_dtoa_r+0x792>
 8008238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800823a:	9307      	str	r3, [sp, #28]
 800823c:	e649      	b.n	8007ed2 <_dtoa_r+0x7c2>
 800823e:	9b02      	ldr	r3, [sp, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	dc03      	bgt.n	800824c <_dtoa_r+0xb3c>
 8008244:	9b06      	ldr	r3, [sp, #24]
 8008246:	2b02      	cmp	r3, #2
 8008248:	f73f aecc 	bgt.w	8007fe4 <_dtoa_r+0x8d4>
 800824c:	465d      	mov	r5, fp
 800824e:	4639      	mov	r1, r7
 8008250:	9804      	ldr	r0, [sp, #16]
 8008252:	f7ff f9d1 	bl	80075f8 <quorem>
 8008256:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800825a:	f805 8b01 	strb.w	r8, [r5], #1
 800825e:	9a02      	ldr	r2, [sp, #8]
 8008260:	eba5 030b 	sub.w	r3, r5, fp
 8008264:	429a      	cmp	r2, r3
 8008266:	ddb0      	ble.n	80081ca <_dtoa_r+0xaba>
 8008268:	2300      	movs	r3, #0
 800826a:	220a      	movs	r2, #10
 800826c:	9904      	ldr	r1, [sp, #16]
 800826e:	4620      	mov	r0, r4
 8008270:	f000 f86c 	bl	800834c <__multadd>
 8008274:	9004      	str	r0, [sp, #16]
 8008276:	e7ea      	b.n	800824e <_dtoa_r+0xb3e>
 8008278:	0800a2d0 	.word	0x0800a2d0
 800827c:	0800a2f4 	.word	0x0800a2f4

08008280 <_localeconv_r>:
 8008280:	4b04      	ldr	r3, [pc, #16]	; (8008294 <_localeconv_r+0x14>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6a18      	ldr	r0, [r3, #32]
 8008286:	4b04      	ldr	r3, [pc, #16]	; (8008298 <_localeconv_r+0x18>)
 8008288:	2800      	cmp	r0, #0
 800828a:	bf08      	it	eq
 800828c:	4618      	moveq	r0, r3
 800828e:	30f0      	adds	r0, #240	; 0xf0
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	20000068 	.word	0x20000068
 8008298:	200000cc 	.word	0x200000cc

0800829c <memcpy>:
 800829c:	b510      	push	{r4, lr}
 800829e:	1e43      	subs	r3, r0, #1
 80082a0:	440a      	add	r2, r1
 80082a2:	4291      	cmp	r1, r2
 80082a4:	d100      	bne.n	80082a8 <memcpy+0xc>
 80082a6:	bd10      	pop	{r4, pc}
 80082a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082b0:	e7f7      	b.n	80082a2 <memcpy+0x6>

080082b2 <__malloc_lock>:
 80082b2:	4770      	bx	lr

080082b4 <__malloc_unlock>:
 80082b4:	4770      	bx	lr

080082b6 <_Balloc>:
 80082b6:	b570      	push	{r4, r5, r6, lr}
 80082b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082ba:	4604      	mov	r4, r0
 80082bc:	460e      	mov	r6, r1
 80082be:	b93d      	cbnz	r5, 80082d0 <_Balloc+0x1a>
 80082c0:	2010      	movs	r0, #16
 80082c2:	f7fe fc47 	bl	8006b54 <malloc>
 80082c6:	6260      	str	r0, [r4, #36]	; 0x24
 80082c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082cc:	6005      	str	r5, [r0, #0]
 80082ce:	60c5      	str	r5, [r0, #12]
 80082d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80082d2:	68eb      	ldr	r3, [r5, #12]
 80082d4:	b183      	cbz	r3, 80082f8 <_Balloc+0x42>
 80082d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80082de:	b9b8      	cbnz	r0, 8008310 <_Balloc+0x5a>
 80082e0:	2101      	movs	r1, #1
 80082e2:	fa01 f506 	lsl.w	r5, r1, r6
 80082e6:	1d6a      	adds	r2, r5, #5
 80082e8:	0092      	lsls	r2, r2, #2
 80082ea:	4620      	mov	r0, r4
 80082ec:	f7fe fc42 	bl	8006b74 <_calloc_r>
 80082f0:	b160      	cbz	r0, 800830c <_Balloc+0x56>
 80082f2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80082f6:	e00e      	b.n	8008316 <_Balloc+0x60>
 80082f8:	2221      	movs	r2, #33	; 0x21
 80082fa:	2104      	movs	r1, #4
 80082fc:	4620      	mov	r0, r4
 80082fe:	f7fe fc39 	bl	8006b74 <_calloc_r>
 8008302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008304:	60e8      	str	r0, [r5, #12]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e4      	bne.n	80082d6 <_Balloc+0x20>
 800830c:	2000      	movs	r0, #0
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	6802      	ldr	r2, [r0, #0]
 8008312:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008316:	2300      	movs	r3, #0
 8008318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800831c:	e7f7      	b.n	800830e <_Balloc+0x58>

0800831e <_Bfree>:
 800831e:	b570      	push	{r4, r5, r6, lr}
 8008320:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008322:	4606      	mov	r6, r0
 8008324:	460d      	mov	r5, r1
 8008326:	b93c      	cbnz	r4, 8008338 <_Bfree+0x1a>
 8008328:	2010      	movs	r0, #16
 800832a:	f7fe fc13 	bl	8006b54 <malloc>
 800832e:	6270      	str	r0, [r6, #36]	; 0x24
 8008330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008334:	6004      	str	r4, [r0, #0]
 8008336:	60c4      	str	r4, [r0, #12]
 8008338:	b13d      	cbz	r5, 800834a <_Bfree+0x2c>
 800833a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800833c:	686a      	ldr	r2, [r5, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008344:	6029      	str	r1, [r5, #0]
 8008346:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800834a:	bd70      	pop	{r4, r5, r6, pc}

0800834c <__multadd>:
 800834c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008350:	690d      	ldr	r5, [r1, #16]
 8008352:	461f      	mov	r7, r3
 8008354:	4606      	mov	r6, r0
 8008356:	460c      	mov	r4, r1
 8008358:	f101 0c14 	add.w	ip, r1, #20
 800835c:	2300      	movs	r3, #0
 800835e:	f8dc 0000 	ldr.w	r0, [ip]
 8008362:	b281      	uxth	r1, r0
 8008364:	fb02 7101 	mla	r1, r2, r1, r7
 8008368:	0c0f      	lsrs	r7, r1, #16
 800836a:	0c00      	lsrs	r0, r0, #16
 800836c:	fb02 7000 	mla	r0, r2, r0, r7
 8008370:	b289      	uxth	r1, r1
 8008372:	3301      	adds	r3, #1
 8008374:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008378:	429d      	cmp	r5, r3
 800837a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800837e:	f84c 1b04 	str.w	r1, [ip], #4
 8008382:	dcec      	bgt.n	800835e <__multadd+0x12>
 8008384:	b1d7      	cbz	r7, 80083bc <__multadd+0x70>
 8008386:	68a3      	ldr	r3, [r4, #8]
 8008388:	42ab      	cmp	r3, r5
 800838a:	dc12      	bgt.n	80083b2 <__multadd+0x66>
 800838c:	6861      	ldr	r1, [r4, #4]
 800838e:	4630      	mov	r0, r6
 8008390:	3101      	adds	r1, #1
 8008392:	f7ff ff90 	bl	80082b6 <_Balloc>
 8008396:	6922      	ldr	r2, [r4, #16]
 8008398:	3202      	adds	r2, #2
 800839a:	f104 010c 	add.w	r1, r4, #12
 800839e:	4680      	mov	r8, r0
 80083a0:	0092      	lsls	r2, r2, #2
 80083a2:	300c      	adds	r0, #12
 80083a4:	f7ff ff7a 	bl	800829c <memcpy>
 80083a8:	4621      	mov	r1, r4
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7ff ffb7 	bl	800831e <_Bfree>
 80083b0:	4644      	mov	r4, r8
 80083b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083b6:	3501      	adds	r5, #1
 80083b8:	615f      	str	r7, [r3, #20]
 80083ba:	6125      	str	r5, [r4, #16]
 80083bc:	4620      	mov	r0, r4
 80083be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083c2 <__hi0bits>:
 80083c2:	0c02      	lsrs	r2, r0, #16
 80083c4:	0412      	lsls	r2, r2, #16
 80083c6:	4603      	mov	r3, r0
 80083c8:	b9b2      	cbnz	r2, 80083f8 <__hi0bits+0x36>
 80083ca:	0403      	lsls	r3, r0, #16
 80083cc:	2010      	movs	r0, #16
 80083ce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80083d2:	bf04      	itt	eq
 80083d4:	021b      	lsleq	r3, r3, #8
 80083d6:	3008      	addeq	r0, #8
 80083d8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80083dc:	bf04      	itt	eq
 80083de:	011b      	lsleq	r3, r3, #4
 80083e0:	3004      	addeq	r0, #4
 80083e2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80083e6:	bf04      	itt	eq
 80083e8:	009b      	lsleq	r3, r3, #2
 80083ea:	3002      	addeq	r0, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	db06      	blt.n	80083fe <__hi0bits+0x3c>
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	d503      	bpl.n	80083fc <__hi0bits+0x3a>
 80083f4:	3001      	adds	r0, #1
 80083f6:	4770      	bx	lr
 80083f8:	2000      	movs	r0, #0
 80083fa:	e7e8      	b.n	80083ce <__hi0bits+0xc>
 80083fc:	2020      	movs	r0, #32
 80083fe:	4770      	bx	lr

08008400 <__lo0bits>:
 8008400:	6803      	ldr	r3, [r0, #0]
 8008402:	f013 0207 	ands.w	r2, r3, #7
 8008406:	4601      	mov	r1, r0
 8008408:	d00b      	beq.n	8008422 <__lo0bits+0x22>
 800840a:	07da      	lsls	r2, r3, #31
 800840c:	d423      	bmi.n	8008456 <__lo0bits+0x56>
 800840e:	0798      	lsls	r0, r3, #30
 8008410:	bf49      	itett	mi
 8008412:	085b      	lsrmi	r3, r3, #1
 8008414:	089b      	lsrpl	r3, r3, #2
 8008416:	2001      	movmi	r0, #1
 8008418:	600b      	strmi	r3, [r1, #0]
 800841a:	bf5c      	itt	pl
 800841c:	600b      	strpl	r3, [r1, #0]
 800841e:	2002      	movpl	r0, #2
 8008420:	4770      	bx	lr
 8008422:	b298      	uxth	r0, r3
 8008424:	b9a8      	cbnz	r0, 8008452 <__lo0bits+0x52>
 8008426:	0c1b      	lsrs	r3, r3, #16
 8008428:	2010      	movs	r0, #16
 800842a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800842e:	bf04      	itt	eq
 8008430:	0a1b      	lsreq	r3, r3, #8
 8008432:	3008      	addeq	r0, #8
 8008434:	071a      	lsls	r2, r3, #28
 8008436:	bf04      	itt	eq
 8008438:	091b      	lsreq	r3, r3, #4
 800843a:	3004      	addeq	r0, #4
 800843c:	079a      	lsls	r2, r3, #30
 800843e:	bf04      	itt	eq
 8008440:	089b      	lsreq	r3, r3, #2
 8008442:	3002      	addeq	r0, #2
 8008444:	07da      	lsls	r2, r3, #31
 8008446:	d402      	bmi.n	800844e <__lo0bits+0x4e>
 8008448:	085b      	lsrs	r3, r3, #1
 800844a:	d006      	beq.n	800845a <__lo0bits+0x5a>
 800844c:	3001      	adds	r0, #1
 800844e:	600b      	str	r3, [r1, #0]
 8008450:	4770      	bx	lr
 8008452:	4610      	mov	r0, r2
 8008454:	e7e9      	b.n	800842a <__lo0bits+0x2a>
 8008456:	2000      	movs	r0, #0
 8008458:	4770      	bx	lr
 800845a:	2020      	movs	r0, #32
 800845c:	4770      	bx	lr

0800845e <__i2b>:
 800845e:	b510      	push	{r4, lr}
 8008460:	460c      	mov	r4, r1
 8008462:	2101      	movs	r1, #1
 8008464:	f7ff ff27 	bl	80082b6 <_Balloc>
 8008468:	2201      	movs	r2, #1
 800846a:	6144      	str	r4, [r0, #20]
 800846c:	6102      	str	r2, [r0, #16]
 800846e:	bd10      	pop	{r4, pc}

08008470 <__multiply>:
 8008470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	4614      	mov	r4, r2
 8008476:	690a      	ldr	r2, [r1, #16]
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	429a      	cmp	r2, r3
 800847c:	bfb8      	it	lt
 800847e:	460b      	movlt	r3, r1
 8008480:	4688      	mov	r8, r1
 8008482:	bfbc      	itt	lt
 8008484:	46a0      	movlt	r8, r4
 8008486:	461c      	movlt	r4, r3
 8008488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800848c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008490:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008494:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008498:	eb07 0609 	add.w	r6, r7, r9
 800849c:	42b3      	cmp	r3, r6
 800849e:	bfb8      	it	lt
 80084a0:	3101      	addlt	r1, #1
 80084a2:	f7ff ff08 	bl	80082b6 <_Balloc>
 80084a6:	f100 0514 	add.w	r5, r0, #20
 80084aa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80084ae:	462b      	mov	r3, r5
 80084b0:	2200      	movs	r2, #0
 80084b2:	4573      	cmp	r3, lr
 80084b4:	d316      	bcc.n	80084e4 <__multiply+0x74>
 80084b6:	f104 0214 	add.w	r2, r4, #20
 80084ba:	f108 0114 	add.w	r1, r8, #20
 80084be:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80084c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	9b00      	ldr	r3, [sp, #0]
 80084ca:	9201      	str	r2, [sp, #4]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d80c      	bhi.n	80084ea <__multiply+0x7a>
 80084d0:	2e00      	cmp	r6, #0
 80084d2:	dd03      	ble.n	80084dc <__multiply+0x6c>
 80084d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d05d      	beq.n	8008598 <__multiply+0x128>
 80084dc:	6106      	str	r6, [r0, #16]
 80084de:	b003      	add	sp, #12
 80084e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e4:	f843 2b04 	str.w	r2, [r3], #4
 80084e8:	e7e3      	b.n	80084b2 <__multiply+0x42>
 80084ea:	f8b2 b000 	ldrh.w	fp, [r2]
 80084ee:	f1bb 0f00 	cmp.w	fp, #0
 80084f2:	d023      	beq.n	800853c <__multiply+0xcc>
 80084f4:	4689      	mov	r9, r1
 80084f6:	46ac      	mov	ip, r5
 80084f8:	f04f 0800 	mov.w	r8, #0
 80084fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8008500:	f8dc a000 	ldr.w	sl, [ip]
 8008504:	b2a3      	uxth	r3, r4
 8008506:	fa1f fa8a 	uxth.w	sl, sl
 800850a:	fb0b a303 	mla	r3, fp, r3, sl
 800850e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008512:	f8dc 4000 	ldr.w	r4, [ip]
 8008516:	4443      	add	r3, r8
 8008518:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800851c:	fb0b 840a 	mla	r4, fp, sl, r8
 8008520:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008524:	46e2      	mov	sl, ip
 8008526:	b29b      	uxth	r3, r3
 8008528:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800852c:	454f      	cmp	r7, r9
 800852e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008532:	f84a 3b04 	str.w	r3, [sl], #4
 8008536:	d82b      	bhi.n	8008590 <__multiply+0x120>
 8008538:	f8cc 8004 	str.w	r8, [ip, #4]
 800853c:	9b01      	ldr	r3, [sp, #4]
 800853e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008542:	3204      	adds	r2, #4
 8008544:	f1ba 0f00 	cmp.w	sl, #0
 8008548:	d020      	beq.n	800858c <__multiply+0x11c>
 800854a:	682b      	ldr	r3, [r5, #0]
 800854c:	4689      	mov	r9, r1
 800854e:	46a8      	mov	r8, r5
 8008550:	f04f 0b00 	mov.w	fp, #0
 8008554:	f8b9 c000 	ldrh.w	ip, [r9]
 8008558:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800855c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008560:	445c      	add	r4, fp
 8008562:	46c4      	mov	ip, r8
 8008564:	b29b      	uxth	r3, r3
 8008566:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800856a:	f84c 3b04 	str.w	r3, [ip], #4
 800856e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008572:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008576:	0c1b      	lsrs	r3, r3, #16
 8008578:	fb0a b303 	mla	r3, sl, r3, fp
 800857c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008580:	454f      	cmp	r7, r9
 8008582:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008586:	d805      	bhi.n	8008594 <__multiply+0x124>
 8008588:	f8c8 3004 	str.w	r3, [r8, #4]
 800858c:	3504      	adds	r5, #4
 800858e:	e79b      	b.n	80084c8 <__multiply+0x58>
 8008590:	46d4      	mov	ip, sl
 8008592:	e7b3      	b.n	80084fc <__multiply+0x8c>
 8008594:	46e0      	mov	r8, ip
 8008596:	e7dd      	b.n	8008554 <__multiply+0xe4>
 8008598:	3e01      	subs	r6, #1
 800859a:	e799      	b.n	80084d0 <__multiply+0x60>

0800859c <__pow5mult>:
 800859c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a0:	4615      	mov	r5, r2
 80085a2:	f012 0203 	ands.w	r2, r2, #3
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	d007      	beq.n	80085bc <__pow5mult+0x20>
 80085ac:	3a01      	subs	r2, #1
 80085ae:	4c21      	ldr	r4, [pc, #132]	; (8008634 <__pow5mult+0x98>)
 80085b0:	2300      	movs	r3, #0
 80085b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085b6:	f7ff fec9 	bl	800834c <__multadd>
 80085ba:	4607      	mov	r7, r0
 80085bc:	10ad      	asrs	r5, r5, #2
 80085be:	d035      	beq.n	800862c <__pow5mult+0x90>
 80085c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80085c2:	b93c      	cbnz	r4, 80085d4 <__pow5mult+0x38>
 80085c4:	2010      	movs	r0, #16
 80085c6:	f7fe fac5 	bl	8006b54 <malloc>
 80085ca:	6270      	str	r0, [r6, #36]	; 0x24
 80085cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085d0:	6004      	str	r4, [r0, #0]
 80085d2:	60c4      	str	r4, [r0, #12]
 80085d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085dc:	b94c      	cbnz	r4, 80085f2 <__pow5mult+0x56>
 80085de:	f240 2171 	movw	r1, #625	; 0x271
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7ff ff3b 	bl	800845e <__i2b>
 80085e8:	2300      	movs	r3, #0
 80085ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80085ee:	4604      	mov	r4, r0
 80085f0:	6003      	str	r3, [r0, #0]
 80085f2:	f04f 0800 	mov.w	r8, #0
 80085f6:	07eb      	lsls	r3, r5, #31
 80085f8:	d50a      	bpl.n	8008610 <__pow5mult+0x74>
 80085fa:	4639      	mov	r1, r7
 80085fc:	4622      	mov	r2, r4
 80085fe:	4630      	mov	r0, r6
 8008600:	f7ff ff36 	bl	8008470 <__multiply>
 8008604:	4639      	mov	r1, r7
 8008606:	4681      	mov	r9, r0
 8008608:	4630      	mov	r0, r6
 800860a:	f7ff fe88 	bl	800831e <_Bfree>
 800860e:	464f      	mov	r7, r9
 8008610:	106d      	asrs	r5, r5, #1
 8008612:	d00b      	beq.n	800862c <__pow5mult+0x90>
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	b938      	cbnz	r0, 8008628 <__pow5mult+0x8c>
 8008618:	4622      	mov	r2, r4
 800861a:	4621      	mov	r1, r4
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff ff27 	bl	8008470 <__multiply>
 8008622:	6020      	str	r0, [r4, #0]
 8008624:	f8c0 8000 	str.w	r8, [r0]
 8008628:	4604      	mov	r4, r0
 800862a:	e7e4      	b.n	80085f6 <__pow5mult+0x5a>
 800862c:	4638      	mov	r0, r7
 800862e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008632:	bf00      	nop
 8008634:	0800a3f8 	.word	0x0800a3f8

08008638 <__lshift>:
 8008638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800863c:	460c      	mov	r4, r1
 800863e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008642:	6923      	ldr	r3, [r4, #16]
 8008644:	6849      	ldr	r1, [r1, #4]
 8008646:	eb0a 0903 	add.w	r9, sl, r3
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	4607      	mov	r7, r0
 800864e:	4616      	mov	r6, r2
 8008650:	f109 0501 	add.w	r5, r9, #1
 8008654:	42ab      	cmp	r3, r5
 8008656:	db32      	blt.n	80086be <__lshift+0x86>
 8008658:	4638      	mov	r0, r7
 800865a:	f7ff fe2c 	bl	80082b6 <_Balloc>
 800865e:	2300      	movs	r3, #0
 8008660:	4680      	mov	r8, r0
 8008662:	f100 0114 	add.w	r1, r0, #20
 8008666:	461a      	mov	r2, r3
 8008668:	4553      	cmp	r3, sl
 800866a:	db2b      	blt.n	80086c4 <__lshift+0x8c>
 800866c:	6920      	ldr	r0, [r4, #16]
 800866e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008672:	f104 0314 	add.w	r3, r4, #20
 8008676:	f016 021f 	ands.w	r2, r6, #31
 800867a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800867e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008682:	d025      	beq.n	80086d0 <__lshift+0x98>
 8008684:	f1c2 0e20 	rsb	lr, r2, #32
 8008688:	2000      	movs	r0, #0
 800868a:	681e      	ldr	r6, [r3, #0]
 800868c:	468a      	mov	sl, r1
 800868e:	4096      	lsls	r6, r2
 8008690:	4330      	orrs	r0, r6
 8008692:	f84a 0b04 	str.w	r0, [sl], #4
 8008696:	f853 0b04 	ldr.w	r0, [r3], #4
 800869a:	459c      	cmp	ip, r3
 800869c:	fa20 f00e 	lsr.w	r0, r0, lr
 80086a0:	d814      	bhi.n	80086cc <__lshift+0x94>
 80086a2:	6048      	str	r0, [r1, #4]
 80086a4:	b108      	cbz	r0, 80086aa <__lshift+0x72>
 80086a6:	f109 0502 	add.w	r5, r9, #2
 80086aa:	3d01      	subs	r5, #1
 80086ac:	4638      	mov	r0, r7
 80086ae:	f8c8 5010 	str.w	r5, [r8, #16]
 80086b2:	4621      	mov	r1, r4
 80086b4:	f7ff fe33 	bl	800831e <_Bfree>
 80086b8:	4640      	mov	r0, r8
 80086ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086be:	3101      	adds	r1, #1
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	e7c7      	b.n	8008654 <__lshift+0x1c>
 80086c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80086c8:	3301      	adds	r3, #1
 80086ca:	e7cd      	b.n	8008668 <__lshift+0x30>
 80086cc:	4651      	mov	r1, sl
 80086ce:	e7dc      	b.n	800868a <__lshift+0x52>
 80086d0:	3904      	subs	r1, #4
 80086d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80086da:	459c      	cmp	ip, r3
 80086dc:	d8f9      	bhi.n	80086d2 <__lshift+0x9a>
 80086de:	e7e4      	b.n	80086aa <__lshift+0x72>

080086e0 <__mcmp>:
 80086e0:	6903      	ldr	r3, [r0, #16]
 80086e2:	690a      	ldr	r2, [r1, #16]
 80086e4:	1a9b      	subs	r3, r3, r2
 80086e6:	b530      	push	{r4, r5, lr}
 80086e8:	d10c      	bne.n	8008704 <__mcmp+0x24>
 80086ea:	0092      	lsls	r2, r2, #2
 80086ec:	3014      	adds	r0, #20
 80086ee:	3114      	adds	r1, #20
 80086f0:	1884      	adds	r4, r0, r2
 80086f2:	4411      	add	r1, r2
 80086f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086fc:	4295      	cmp	r5, r2
 80086fe:	d003      	beq.n	8008708 <__mcmp+0x28>
 8008700:	d305      	bcc.n	800870e <__mcmp+0x2e>
 8008702:	2301      	movs	r3, #1
 8008704:	4618      	mov	r0, r3
 8008706:	bd30      	pop	{r4, r5, pc}
 8008708:	42a0      	cmp	r0, r4
 800870a:	d3f3      	bcc.n	80086f4 <__mcmp+0x14>
 800870c:	e7fa      	b.n	8008704 <__mcmp+0x24>
 800870e:	f04f 33ff 	mov.w	r3, #4294967295
 8008712:	e7f7      	b.n	8008704 <__mcmp+0x24>

08008714 <__mdiff>:
 8008714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008718:	460d      	mov	r5, r1
 800871a:	4607      	mov	r7, r0
 800871c:	4611      	mov	r1, r2
 800871e:	4628      	mov	r0, r5
 8008720:	4614      	mov	r4, r2
 8008722:	f7ff ffdd 	bl	80086e0 <__mcmp>
 8008726:	1e06      	subs	r6, r0, #0
 8008728:	d108      	bne.n	800873c <__mdiff+0x28>
 800872a:	4631      	mov	r1, r6
 800872c:	4638      	mov	r0, r7
 800872e:	f7ff fdc2 	bl	80082b6 <_Balloc>
 8008732:	2301      	movs	r3, #1
 8008734:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873c:	bfa4      	itt	ge
 800873e:	4623      	movge	r3, r4
 8008740:	462c      	movge	r4, r5
 8008742:	4638      	mov	r0, r7
 8008744:	6861      	ldr	r1, [r4, #4]
 8008746:	bfa6      	itte	ge
 8008748:	461d      	movge	r5, r3
 800874a:	2600      	movge	r6, #0
 800874c:	2601      	movlt	r6, #1
 800874e:	f7ff fdb2 	bl	80082b6 <_Balloc>
 8008752:	692b      	ldr	r3, [r5, #16]
 8008754:	60c6      	str	r6, [r0, #12]
 8008756:	6926      	ldr	r6, [r4, #16]
 8008758:	f105 0914 	add.w	r9, r5, #20
 800875c:	f104 0214 	add.w	r2, r4, #20
 8008760:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008764:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008768:	f100 0514 	add.w	r5, r0, #20
 800876c:	f04f 0e00 	mov.w	lr, #0
 8008770:	f852 ab04 	ldr.w	sl, [r2], #4
 8008774:	f859 4b04 	ldr.w	r4, [r9], #4
 8008778:	fa1e f18a 	uxtah	r1, lr, sl
 800877c:	b2a3      	uxth	r3, r4
 800877e:	1ac9      	subs	r1, r1, r3
 8008780:	0c23      	lsrs	r3, r4, #16
 8008782:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008786:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800878a:	b289      	uxth	r1, r1
 800878c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008790:	45c8      	cmp	r8, r9
 8008792:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008796:	4694      	mov	ip, r2
 8008798:	f845 3b04 	str.w	r3, [r5], #4
 800879c:	d8e8      	bhi.n	8008770 <__mdiff+0x5c>
 800879e:	45bc      	cmp	ip, r7
 80087a0:	d304      	bcc.n	80087ac <__mdiff+0x98>
 80087a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80087a6:	b183      	cbz	r3, 80087ca <__mdiff+0xb6>
 80087a8:	6106      	str	r6, [r0, #16]
 80087aa:	e7c5      	b.n	8008738 <__mdiff+0x24>
 80087ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80087b0:	fa1e f381 	uxtah	r3, lr, r1
 80087b4:	141a      	asrs	r2, r3, #16
 80087b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80087c4:	f845 3b04 	str.w	r3, [r5], #4
 80087c8:	e7e9      	b.n	800879e <__mdiff+0x8a>
 80087ca:	3e01      	subs	r6, #1
 80087cc:	e7e9      	b.n	80087a2 <__mdiff+0x8e>

080087ce <__d2b>:
 80087ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087d2:	460e      	mov	r6, r1
 80087d4:	2101      	movs	r1, #1
 80087d6:	ec59 8b10 	vmov	r8, r9, d0
 80087da:	4615      	mov	r5, r2
 80087dc:	f7ff fd6b 	bl	80082b6 <_Balloc>
 80087e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80087e4:	4607      	mov	r7, r0
 80087e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087ea:	bb34      	cbnz	r4, 800883a <__d2b+0x6c>
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	f1b8 0300 	subs.w	r3, r8, #0
 80087f2:	d027      	beq.n	8008844 <__d2b+0x76>
 80087f4:	a802      	add	r0, sp, #8
 80087f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80087fa:	f7ff fe01 	bl	8008400 <__lo0bits>
 80087fe:	9900      	ldr	r1, [sp, #0]
 8008800:	b1f0      	cbz	r0, 8008840 <__d2b+0x72>
 8008802:	9a01      	ldr	r2, [sp, #4]
 8008804:	f1c0 0320 	rsb	r3, r0, #32
 8008808:	fa02 f303 	lsl.w	r3, r2, r3
 800880c:	430b      	orrs	r3, r1
 800880e:	40c2      	lsrs	r2, r0
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	9201      	str	r2, [sp, #4]
 8008814:	9b01      	ldr	r3, [sp, #4]
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf14      	ite	ne
 800881c:	2102      	movne	r1, #2
 800881e:	2101      	moveq	r1, #1
 8008820:	6139      	str	r1, [r7, #16]
 8008822:	b1c4      	cbz	r4, 8008856 <__d2b+0x88>
 8008824:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008828:	4404      	add	r4, r0
 800882a:	6034      	str	r4, [r6, #0]
 800882c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008830:	6028      	str	r0, [r5, #0]
 8008832:	4638      	mov	r0, r7
 8008834:	b003      	add	sp, #12
 8008836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800883a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800883e:	e7d5      	b.n	80087ec <__d2b+0x1e>
 8008840:	6179      	str	r1, [r7, #20]
 8008842:	e7e7      	b.n	8008814 <__d2b+0x46>
 8008844:	a801      	add	r0, sp, #4
 8008846:	f7ff fddb 	bl	8008400 <__lo0bits>
 800884a:	9b01      	ldr	r3, [sp, #4]
 800884c:	617b      	str	r3, [r7, #20]
 800884e:	2101      	movs	r1, #1
 8008850:	6139      	str	r1, [r7, #16]
 8008852:	3020      	adds	r0, #32
 8008854:	e7e5      	b.n	8008822 <__d2b+0x54>
 8008856:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800885a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800885e:	6030      	str	r0, [r6, #0]
 8008860:	6918      	ldr	r0, [r3, #16]
 8008862:	f7ff fdae 	bl	80083c2 <__hi0bits>
 8008866:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800886a:	e7e1      	b.n	8008830 <__d2b+0x62>

0800886c <__ssputs_r>:
 800886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	688e      	ldr	r6, [r1, #8]
 8008872:	429e      	cmp	r6, r3
 8008874:	4682      	mov	sl, r0
 8008876:	460c      	mov	r4, r1
 8008878:	4690      	mov	r8, r2
 800887a:	4699      	mov	r9, r3
 800887c:	d837      	bhi.n	80088ee <__ssputs_r+0x82>
 800887e:	898a      	ldrh	r2, [r1, #12]
 8008880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008884:	d031      	beq.n	80088ea <__ssputs_r+0x7e>
 8008886:	6825      	ldr	r5, [r4, #0]
 8008888:	6909      	ldr	r1, [r1, #16]
 800888a:	1a6f      	subs	r7, r5, r1
 800888c:	6965      	ldr	r5, [r4, #20]
 800888e:	2302      	movs	r3, #2
 8008890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008894:	fb95 f5f3 	sdiv	r5, r5, r3
 8008898:	f109 0301 	add.w	r3, r9, #1
 800889c:	443b      	add	r3, r7
 800889e:	429d      	cmp	r5, r3
 80088a0:	bf38      	it	cc
 80088a2:	461d      	movcc	r5, r3
 80088a4:	0553      	lsls	r3, r2, #21
 80088a6:	d530      	bpl.n	800890a <__ssputs_r+0x9e>
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7fe f9bf 	bl	8006c2c <_malloc_r>
 80088ae:	4606      	mov	r6, r0
 80088b0:	b950      	cbnz	r0, 80088c8 <__ssputs_r+0x5c>
 80088b2:	230c      	movs	r3, #12
 80088b4:	f8ca 3000 	str.w	r3, [sl]
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088be:	81a3      	strh	r3, [r4, #12]
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c8:	463a      	mov	r2, r7
 80088ca:	6921      	ldr	r1, [r4, #16]
 80088cc:	f7ff fce6 	bl	800829c <memcpy>
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	6126      	str	r6, [r4, #16]
 80088de:	6165      	str	r5, [r4, #20]
 80088e0:	443e      	add	r6, r7
 80088e2:	1bed      	subs	r5, r5, r7
 80088e4:	6026      	str	r6, [r4, #0]
 80088e6:	60a5      	str	r5, [r4, #8]
 80088e8:	464e      	mov	r6, r9
 80088ea:	454e      	cmp	r6, r9
 80088ec:	d900      	bls.n	80088f0 <__ssputs_r+0x84>
 80088ee:	464e      	mov	r6, r9
 80088f0:	4632      	mov	r2, r6
 80088f2:	4641      	mov	r1, r8
 80088f4:	6820      	ldr	r0, [r4, #0]
 80088f6:	f000 f91d 	bl	8008b34 <memmove>
 80088fa:	68a3      	ldr	r3, [r4, #8]
 80088fc:	1b9b      	subs	r3, r3, r6
 80088fe:	60a3      	str	r3, [r4, #8]
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	441e      	add	r6, r3
 8008904:	6026      	str	r6, [r4, #0]
 8008906:	2000      	movs	r0, #0
 8008908:	e7dc      	b.n	80088c4 <__ssputs_r+0x58>
 800890a:	462a      	mov	r2, r5
 800890c:	f000 f92b 	bl	8008b66 <_realloc_r>
 8008910:	4606      	mov	r6, r0
 8008912:	2800      	cmp	r0, #0
 8008914:	d1e2      	bne.n	80088dc <__ssputs_r+0x70>
 8008916:	6921      	ldr	r1, [r4, #16]
 8008918:	4650      	mov	r0, sl
 800891a:	f7fe f939 	bl	8006b90 <_free_r>
 800891e:	e7c8      	b.n	80088b2 <__ssputs_r+0x46>

08008920 <_svfiprintf_r>:
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	461d      	mov	r5, r3
 8008926:	898b      	ldrh	r3, [r1, #12]
 8008928:	061f      	lsls	r7, r3, #24
 800892a:	b09d      	sub	sp, #116	; 0x74
 800892c:	4680      	mov	r8, r0
 800892e:	460c      	mov	r4, r1
 8008930:	4616      	mov	r6, r2
 8008932:	d50f      	bpl.n	8008954 <_svfiprintf_r+0x34>
 8008934:	690b      	ldr	r3, [r1, #16]
 8008936:	b96b      	cbnz	r3, 8008954 <_svfiprintf_r+0x34>
 8008938:	2140      	movs	r1, #64	; 0x40
 800893a:	f7fe f977 	bl	8006c2c <_malloc_r>
 800893e:	6020      	str	r0, [r4, #0]
 8008940:	6120      	str	r0, [r4, #16]
 8008942:	b928      	cbnz	r0, 8008950 <_svfiprintf_r+0x30>
 8008944:	230c      	movs	r3, #12
 8008946:	f8c8 3000 	str.w	r3, [r8]
 800894a:	f04f 30ff 	mov.w	r0, #4294967295
 800894e:	e0c8      	b.n	8008ae2 <_svfiprintf_r+0x1c2>
 8008950:	2340      	movs	r3, #64	; 0x40
 8008952:	6163      	str	r3, [r4, #20]
 8008954:	2300      	movs	r3, #0
 8008956:	9309      	str	r3, [sp, #36]	; 0x24
 8008958:	2320      	movs	r3, #32
 800895a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800895e:	2330      	movs	r3, #48	; 0x30
 8008960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008964:	9503      	str	r5, [sp, #12]
 8008966:	f04f 0b01 	mov.w	fp, #1
 800896a:	4637      	mov	r7, r6
 800896c:	463d      	mov	r5, r7
 800896e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008972:	b10b      	cbz	r3, 8008978 <_svfiprintf_r+0x58>
 8008974:	2b25      	cmp	r3, #37	; 0x25
 8008976:	d13e      	bne.n	80089f6 <_svfiprintf_r+0xd6>
 8008978:	ebb7 0a06 	subs.w	sl, r7, r6
 800897c:	d00b      	beq.n	8008996 <_svfiprintf_r+0x76>
 800897e:	4653      	mov	r3, sl
 8008980:	4632      	mov	r2, r6
 8008982:	4621      	mov	r1, r4
 8008984:	4640      	mov	r0, r8
 8008986:	f7ff ff71 	bl	800886c <__ssputs_r>
 800898a:	3001      	adds	r0, #1
 800898c:	f000 80a4 	beq.w	8008ad8 <_svfiprintf_r+0x1b8>
 8008990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008992:	4453      	add	r3, sl
 8008994:	9309      	str	r3, [sp, #36]	; 0x24
 8008996:	783b      	ldrb	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 809d 	beq.w	8008ad8 <_svfiprintf_r+0x1b8>
 800899e:	2300      	movs	r3, #0
 80089a0:	f04f 32ff 	mov.w	r2, #4294967295
 80089a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089a8:	9304      	str	r3, [sp, #16]
 80089aa:	9307      	str	r3, [sp, #28]
 80089ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b0:	931a      	str	r3, [sp, #104]	; 0x68
 80089b2:	462f      	mov	r7, r5
 80089b4:	2205      	movs	r2, #5
 80089b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80089ba:	4850      	ldr	r0, [pc, #320]	; (8008afc <_svfiprintf_r+0x1dc>)
 80089bc:	f7f7 fc18 	bl	80001f0 <memchr>
 80089c0:	9b04      	ldr	r3, [sp, #16]
 80089c2:	b9d0      	cbnz	r0, 80089fa <_svfiprintf_r+0xda>
 80089c4:	06d9      	lsls	r1, r3, #27
 80089c6:	bf44      	itt	mi
 80089c8:	2220      	movmi	r2, #32
 80089ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089ce:	071a      	lsls	r2, r3, #28
 80089d0:	bf44      	itt	mi
 80089d2:	222b      	movmi	r2, #43	; 0x2b
 80089d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089d8:	782a      	ldrb	r2, [r5, #0]
 80089da:	2a2a      	cmp	r2, #42	; 0x2a
 80089dc:	d015      	beq.n	8008a0a <_svfiprintf_r+0xea>
 80089de:	9a07      	ldr	r2, [sp, #28]
 80089e0:	462f      	mov	r7, r5
 80089e2:	2000      	movs	r0, #0
 80089e4:	250a      	movs	r5, #10
 80089e6:	4639      	mov	r1, r7
 80089e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ec:	3b30      	subs	r3, #48	; 0x30
 80089ee:	2b09      	cmp	r3, #9
 80089f0:	d94d      	bls.n	8008a8e <_svfiprintf_r+0x16e>
 80089f2:	b1b8      	cbz	r0, 8008a24 <_svfiprintf_r+0x104>
 80089f4:	e00f      	b.n	8008a16 <_svfiprintf_r+0xf6>
 80089f6:	462f      	mov	r7, r5
 80089f8:	e7b8      	b.n	800896c <_svfiprintf_r+0x4c>
 80089fa:	4a40      	ldr	r2, [pc, #256]	; (8008afc <_svfiprintf_r+0x1dc>)
 80089fc:	1a80      	subs	r0, r0, r2
 80089fe:	fa0b f000 	lsl.w	r0, fp, r0
 8008a02:	4318      	orrs	r0, r3
 8008a04:	9004      	str	r0, [sp, #16]
 8008a06:	463d      	mov	r5, r7
 8008a08:	e7d3      	b.n	80089b2 <_svfiprintf_r+0x92>
 8008a0a:	9a03      	ldr	r2, [sp, #12]
 8008a0c:	1d11      	adds	r1, r2, #4
 8008a0e:	6812      	ldr	r2, [r2, #0]
 8008a10:	9103      	str	r1, [sp, #12]
 8008a12:	2a00      	cmp	r2, #0
 8008a14:	db01      	blt.n	8008a1a <_svfiprintf_r+0xfa>
 8008a16:	9207      	str	r2, [sp, #28]
 8008a18:	e004      	b.n	8008a24 <_svfiprintf_r+0x104>
 8008a1a:	4252      	negs	r2, r2
 8008a1c:	f043 0302 	orr.w	r3, r3, #2
 8008a20:	9207      	str	r2, [sp, #28]
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	783b      	ldrb	r3, [r7, #0]
 8008a26:	2b2e      	cmp	r3, #46	; 0x2e
 8008a28:	d10c      	bne.n	8008a44 <_svfiprintf_r+0x124>
 8008a2a:	787b      	ldrb	r3, [r7, #1]
 8008a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a2e:	d133      	bne.n	8008a98 <_svfiprintf_r+0x178>
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	1d1a      	adds	r2, r3, #4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	9203      	str	r2, [sp, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	bfb8      	it	lt
 8008a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a40:	3702      	adds	r7, #2
 8008a42:	9305      	str	r3, [sp, #20]
 8008a44:	4d2e      	ldr	r5, [pc, #184]	; (8008b00 <_svfiprintf_r+0x1e0>)
 8008a46:	7839      	ldrb	r1, [r7, #0]
 8008a48:	2203      	movs	r2, #3
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f7f7 fbd0 	bl	80001f0 <memchr>
 8008a50:	b138      	cbz	r0, 8008a62 <_svfiprintf_r+0x142>
 8008a52:	2340      	movs	r3, #64	; 0x40
 8008a54:	1b40      	subs	r0, r0, r5
 8008a56:	fa03 f000 	lsl.w	r0, r3, r0
 8008a5a:	9b04      	ldr	r3, [sp, #16]
 8008a5c:	4303      	orrs	r3, r0
 8008a5e:	3701      	adds	r7, #1
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	7839      	ldrb	r1, [r7, #0]
 8008a64:	4827      	ldr	r0, [pc, #156]	; (8008b04 <_svfiprintf_r+0x1e4>)
 8008a66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a6a:	2206      	movs	r2, #6
 8008a6c:	1c7e      	adds	r6, r7, #1
 8008a6e:	f7f7 fbbf 	bl	80001f0 <memchr>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d038      	beq.n	8008ae8 <_svfiprintf_r+0x1c8>
 8008a76:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <_svfiprintf_r+0x1e8>)
 8008a78:	bb13      	cbnz	r3, 8008ac0 <_svfiprintf_r+0x1a0>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	3307      	adds	r3, #7
 8008a7e:	f023 0307 	bic.w	r3, r3, #7
 8008a82:	3308      	adds	r3, #8
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	444b      	add	r3, r9
 8008a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8c:	e76d      	b.n	800896a <_svfiprintf_r+0x4a>
 8008a8e:	fb05 3202 	mla	r2, r5, r2, r3
 8008a92:	2001      	movs	r0, #1
 8008a94:	460f      	mov	r7, r1
 8008a96:	e7a6      	b.n	80089e6 <_svfiprintf_r+0xc6>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	3701      	adds	r7, #1
 8008a9c:	9305      	str	r3, [sp, #20]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	250a      	movs	r5, #10
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aa8:	3a30      	subs	r2, #48	; 0x30
 8008aaa:	2a09      	cmp	r2, #9
 8008aac:	d903      	bls.n	8008ab6 <_svfiprintf_r+0x196>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0c8      	beq.n	8008a44 <_svfiprintf_r+0x124>
 8008ab2:	9105      	str	r1, [sp, #20]
 8008ab4:	e7c6      	b.n	8008a44 <_svfiprintf_r+0x124>
 8008ab6:	fb05 2101 	mla	r1, r5, r1, r2
 8008aba:	2301      	movs	r3, #1
 8008abc:	4607      	mov	r7, r0
 8008abe:	e7f0      	b.n	8008aa2 <_svfiprintf_r+0x182>
 8008ac0:	ab03      	add	r3, sp, #12
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4b11      	ldr	r3, [pc, #68]	; (8008b0c <_svfiprintf_r+0x1ec>)
 8008ac8:	a904      	add	r1, sp, #16
 8008aca:	4640      	mov	r0, r8
 8008acc:	f7fe f99c 	bl	8006e08 <_printf_float>
 8008ad0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ad4:	4681      	mov	r9, r0
 8008ad6:	d1d6      	bne.n	8008a86 <_svfiprintf_r+0x166>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	065b      	lsls	r3, r3, #25
 8008adc:	f53f af35 	bmi.w	800894a <_svfiprintf_r+0x2a>
 8008ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ae2:	b01d      	add	sp, #116	; 0x74
 8008ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	ab03      	add	r3, sp, #12
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	4622      	mov	r2, r4
 8008aee:	4b07      	ldr	r3, [pc, #28]	; (8008b0c <_svfiprintf_r+0x1ec>)
 8008af0:	a904      	add	r1, sp, #16
 8008af2:	4640      	mov	r0, r8
 8008af4:	f7fe fc3e 	bl	8007374 <_printf_i>
 8008af8:	e7ea      	b.n	8008ad0 <_svfiprintf_r+0x1b0>
 8008afa:	bf00      	nop
 8008afc:	0800a404 	.word	0x0800a404
 8008b00:	0800a40a 	.word	0x0800a40a
 8008b04:	0800a40e 	.word	0x0800a40e
 8008b08:	08006e09 	.word	0x08006e09
 8008b0c:	0800886d 	.word	0x0800886d

08008b10 <__ascii_mbtowc>:
 8008b10:	b082      	sub	sp, #8
 8008b12:	b901      	cbnz	r1, 8008b16 <__ascii_mbtowc+0x6>
 8008b14:	a901      	add	r1, sp, #4
 8008b16:	b142      	cbz	r2, 8008b2a <__ascii_mbtowc+0x1a>
 8008b18:	b14b      	cbz	r3, 8008b2e <__ascii_mbtowc+0x1e>
 8008b1a:	7813      	ldrb	r3, [r2, #0]
 8008b1c:	600b      	str	r3, [r1, #0]
 8008b1e:	7812      	ldrb	r2, [r2, #0]
 8008b20:	1c10      	adds	r0, r2, #0
 8008b22:	bf18      	it	ne
 8008b24:	2001      	movne	r0, #1
 8008b26:	b002      	add	sp, #8
 8008b28:	4770      	bx	lr
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	e7fb      	b.n	8008b26 <__ascii_mbtowc+0x16>
 8008b2e:	f06f 0001 	mvn.w	r0, #1
 8008b32:	e7f8      	b.n	8008b26 <__ascii_mbtowc+0x16>

08008b34 <memmove>:
 8008b34:	4288      	cmp	r0, r1
 8008b36:	b510      	push	{r4, lr}
 8008b38:	eb01 0302 	add.w	r3, r1, r2
 8008b3c:	d807      	bhi.n	8008b4e <memmove+0x1a>
 8008b3e:	1e42      	subs	r2, r0, #1
 8008b40:	4299      	cmp	r1, r3
 8008b42:	d00a      	beq.n	8008b5a <memmove+0x26>
 8008b44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b48:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008b4c:	e7f8      	b.n	8008b40 <memmove+0xc>
 8008b4e:	4283      	cmp	r3, r0
 8008b50:	d9f5      	bls.n	8008b3e <memmove+0xa>
 8008b52:	1881      	adds	r1, r0, r2
 8008b54:	1ad2      	subs	r2, r2, r3
 8008b56:	42d3      	cmn	r3, r2
 8008b58:	d100      	bne.n	8008b5c <memmove+0x28>
 8008b5a:	bd10      	pop	{r4, pc}
 8008b5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b60:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008b64:	e7f7      	b.n	8008b56 <memmove+0x22>

08008b66 <_realloc_r>:
 8008b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b68:	4607      	mov	r7, r0
 8008b6a:	4614      	mov	r4, r2
 8008b6c:	460e      	mov	r6, r1
 8008b6e:	b921      	cbnz	r1, 8008b7a <_realloc_r+0x14>
 8008b70:	4611      	mov	r1, r2
 8008b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b76:	f7fe b859 	b.w	8006c2c <_malloc_r>
 8008b7a:	b922      	cbnz	r2, 8008b86 <_realloc_r+0x20>
 8008b7c:	f7fe f808 	bl	8006b90 <_free_r>
 8008b80:	4625      	mov	r5, r4
 8008b82:	4628      	mov	r0, r5
 8008b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b86:	f000 f821 	bl	8008bcc <_malloc_usable_size_r>
 8008b8a:	42a0      	cmp	r0, r4
 8008b8c:	d20f      	bcs.n	8008bae <_realloc_r+0x48>
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4638      	mov	r0, r7
 8008b92:	f7fe f84b 	bl	8006c2c <_malloc_r>
 8008b96:	4605      	mov	r5, r0
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d0f2      	beq.n	8008b82 <_realloc_r+0x1c>
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	f7ff fb7c 	bl	800829c <memcpy>
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	f7fd fff2 	bl	8006b90 <_free_r>
 8008bac:	e7e9      	b.n	8008b82 <_realloc_r+0x1c>
 8008bae:	4635      	mov	r5, r6
 8008bb0:	e7e7      	b.n	8008b82 <_realloc_r+0x1c>

08008bb2 <__ascii_wctomb>:
 8008bb2:	b149      	cbz	r1, 8008bc8 <__ascii_wctomb+0x16>
 8008bb4:	2aff      	cmp	r2, #255	; 0xff
 8008bb6:	bf85      	ittet	hi
 8008bb8:	238a      	movhi	r3, #138	; 0x8a
 8008bba:	6003      	strhi	r3, [r0, #0]
 8008bbc:	700a      	strbls	r2, [r1, #0]
 8008bbe:	f04f 30ff 	movhi.w	r0, #4294967295
 8008bc2:	bf98      	it	ls
 8008bc4:	2001      	movls	r0, #1
 8008bc6:	4770      	bx	lr
 8008bc8:	4608      	mov	r0, r1
 8008bca:	4770      	bx	lr

08008bcc <_malloc_usable_size_r>:
 8008bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bd0:	1f18      	subs	r0, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	bfbc      	itt	lt
 8008bd6:	580b      	ldrlt	r3, [r1, r0]
 8008bd8:	18c0      	addlt	r0, r0, r3
 8008bda:	4770      	bx	lr

08008bdc <_init>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	bf00      	nop
 8008be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be2:	bc08      	pop	{r3}
 8008be4:	469e      	mov	lr, r3
 8008be6:	4770      	bx	lr

08008be8 <_fini>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	bf00      	nop
 8008bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bee:	bc08      	pop	{r3}
 8008bf0:	469e      	mov	lr, r3
 8008bf2:	4770      	bx	lr
