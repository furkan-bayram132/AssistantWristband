
AssistantWristband.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001880  08007340  08007340  00017340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bc0  08008bc0  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bc8  08008bc8  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bcc  08008bcc  00018bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08008bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000022c  08008dfc  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08008dfc  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126c7  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002670  00000000  00000000  00032923  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  00034f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00017de4  00000000  00000000  00035c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ca9e  00000000  00000000  0004d9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0008a875  00000000  00000000  0005a482  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000e4cf7  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b38  00000000  00000000  000e4d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00003bd0  00000000  00000000  000e58b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000022c 	.word	0x2000022c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007328 	.word	0x08007328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000230 	.word	0x20000230
 80001dc:	08007328 	.word	0x08007328

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <mma8452qWrite>:
 * This function writes value to address reg using the assigned peripheral address
 * hi2c : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * reg : address of register whose value is set inside the censor
 * value : reg's new content
 * */
HAL_StatusTypeDef mma8452qWrite(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t value) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2];
	data[0] = reg;
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000ecc:	78bb      	ldrb	r3, [r7, #2]
 8000ece:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(hi2c, MMA8452Q_DEVICE_ADDR, data, 2, 10);
 8000ed0:	f107 020c 	add.w	r2, r7, #12
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2302      	movs	r3, #2
 8000eda:	2138      	movs	r1, #56	; 0x38
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f002 f8db 	bl	8003098 <HAL_I2C_Master_Transmit>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <mma8452qRead>:
 * hi2c  : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * reg   : address of register where to start reading data from
 * numberofbytes : amount of data to be read from the registers of the censor
 * data_rec : address of buffer where the data from the censor will be stored into
 * */
HAL_StatusTypeDef mma8452qRead(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t numberofbytes, uint8_t* data_rec) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	72fb      	strb	r3, [r7, #11]
 8000efa:	4613      	mov	r3, r2
 8000efc:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, MMA8452Q_DEVICE_ADDR, reg, 1, data_rec, numberofbytes, 100);
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	b299      	uxth	r1, r3
 8000f02:	7abb      	ldrb	r3, [r7, #10]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2264      	movs	r2, #100	; 0x64
 8000f08:	9202      	str	r2, [sp, #8]
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	460a      	mov	r2, r1
 8000f14:	2138      	movs	r1, #56	; 0x38
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f002 f9bc 	bl	8003294 <HAL_I2C_Mem_Read>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <mma8452qInit>:

/*
 * This function initializes all the necessary censor registers in order to read data from it
 * hi2c  : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * */
HAL_StatusTypeDef mma8452qInit(I2C_HandleTypeDef* hi2c) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	  HAL_StatusTypeDef ret1 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_1, 0x00); // 2g selected after 0x00 sent
 8000f2e:	2200      	movs	r2, #0
 8000f30:	212a      	movs	r1, #42	; 0x2a
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffc0 	bl	8000eb8 <mma8452qWrite>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
	  HAL_StatusTypeDef ret2 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_1, 0x01);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	212a      	movs	r1, #42	; 0x2a
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ffb9 	bl	8000eb8 <mma8452qWrite>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73bb      	strb	r3, [r7, #14]
	  HAL_StatusTypeDef ret3 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_2, 0x00);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb2 	bl	8000eb8 <mma8452qWrite>
 8000f54:	4603      	mov	r3, r0
 8000f56:	737b      	strb	r3, [r7, #13]
	  if (ret1 == HAL_OK && ret2 == HAL_OK && ret3 == HAL_OK)
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d107      	bne.n	8000f6e <mma8452qInit+0x48>
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d104      	bne.n	8000f6e <mma8452qInit+0x48>
 8000f64:	7b7b      	ldrb	r3, [r7, #13]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <mma8452qInit+0x48>
		  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <mma8452qInit+0x4a>
	  else
		  return HAL_BUSY;
 8000f6e:	2302      	movs	r3, #2
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <getAccXYZ>:

/*
 * This function takes 7 bytes coming from censor and converts them into meaningful acceloremeter values
 * acc_3d : struct instance that contains raw data coming from censor and variables to be set for meaningful x,y,z acceloremeter data
 * */
void getAccXYZ(AccData* acc_3d) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	int16_t xAccl = (((int16_t)(acc_3d->acc_info[1] << 8)) | acc_3d->acc_info[2]) >> 4;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	789b      	ldrb	r3, [r3, #2]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	111b      	asrs	r3, r3, #4
 8000f92:	81fb      	strh	r3, [r7, #14]
	int16_t yAccl = (((int16_t)(acc_3d->acc_info[3] << 8)) | acc_3d->acc_info[4]) >> 4;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	111b      	asrs	r3, r3, #4
 8000fa6:	81bb      	strh	r3, [r7, #12]
	int16_t zAccl = (((int16_t)(acc_3d->acc_info[5] << 8)) | acc_3d->acc_info[6]) >> 4;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	799b      	ldrb	r3, [r3, #6]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	111b      	asrs	r3, r3, #4
 8000fba:	817b      	strh	r3, [r7, #10]
	acc_3d->x_acc = xAccl;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	89fa      	ldrh	r2, [r7, #14]
 8000fc0:	811a      	strh	r2, [r3, #8]
	acc_3d->y_acc = yAccl;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	89ba      	ldrh	r2, [r7, #12]
 8000fc6:	815a      	strh	r2, [r3, #10]
	acc_3d->z_acc = zAccl;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	897a      	ldrh	r2, [r7, #10]
 8000fcc:	819a      	strh	r2, [r3, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <ST7735_Select+0x14>)
 8000fe6:	f001 ff05 	bl	8002df4 <HAL_GPIO_WritePin>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <ST7735_Unselect+0x14>)
 8000ffe:	f001 fef9 	bl	8002df4 <HAL_GPIO_WritePin>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00

0800100c <ST7735_Reset>:

static void ST7735_Reset() {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <ST7735_Reset+0x28>)
 8001018:	f001 feec 	bl	8002df4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800101c:	2005      	movs	r0, #5
 800101e:	f001 fc47 	bl	80028b0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <ST7735_Reset+0x28>)
 800102a:	f001 fee3 	bl	8002df4 <HAL_GPIO_WritePin>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020000 	.word	0x40020000

08001038 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <ST7735_WriteCommand+0x2c>)
 800104a:	f001 fed3 	bl	8002df4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800104e:	1df9      	adds	r1, r7, #7
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2201      	movs	r2, #1
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <ST7735_WriteCommand+0x30>)
 8001058:	f003 fb4e 	bl	80046f8 <HAL_SPI_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020800 	.word	0x40020800
 8001068:	200002ac 	.word	0x200002ac

0800106c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <ST7735_WriteData+0x30>)
 800107e:	f001 feb9 	bl	8002df4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b29a      	uxth	r2, r3
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <ST7735_WriteData+0x34>)
 800108e:	f003 fb33 	bl	80046f8 <HAL_SPI_Transmit>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020800 	.word	0x40020800
 80010a0:	200002ac 	.word	0x200002ac

080010a4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80010b6:	e034      	b.n	8001122 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffb7 	bl	8001038 <ST7735_WriteCommand>

        numArgs = *addr++;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80010d4:	7abb      	ldrb	r3, [r7, #10]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010dc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010e4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80010ec:	7abb      	ldrb	r3, [r7, #10]
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ffbb 	bl	800106c <ST7735_WriteData>
            addr += numArgs;
 80010f6:	7abb      	ldrb	r3, [r7, #10]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80010fe:	89bb      	ldrh	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00e      	beq.n	8001122 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800110e:	89bb      	ldrh	r3, [r7, #12]
 8001110:	2bff      	cmp	r3, #255	; 0xff
 8001112:	d102      	bne.n	800111a <ST7735_ExecuteCommandList+0x76>
 8001114:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001118:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fbc7 	bl	80028b0 <HAL_Delay>
    while(numCommands--) {
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	73fa      	strb	r2, [r7, #15]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1c5      	bne.n	80010b8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4623      	mov	r3, r4
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	4603      	mov	r3, r0
 8001148:	71bb      	strb	r3, [r7, #6]
 800114a:	460b      	mov	r3, r1
 800114c:	717b      	strb	r3, [r7, #5]
 800114e:	4613      	mov	r3, r2
 8001150:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001152:	202a      	movs	r0, #42	; 0x2a
 8001154:	f7ff ff70 	bl	8001038 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001158:	2300      	movs	r3, #0
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3302      	adds	r3, #2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]
 8001164:	2300      	movs	r3, #0
 8001166:	73bb      	strb	r3, [r7, #14]
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	3302      	adds	r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2104      	movs	r1, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff78 	bl	800106c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800117c:	202b      	movs	r0, #43	; 0x2b
 800117e:	f7ff ff5b 	bl	8001038 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	3301      	adds	r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800118a:	793b      	ldrb	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2104      	movs	r1, #4
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff67 	bl	800106c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800119e:	202c      	movs	r0, #44	; 0x2c
 80011a0:	f7ff ff4a 	bl	8001038 <ST7735_WriteCommand>
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}

080011ac <ST7735_Init>:

void ST7735_Init() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    ST7735_Select();
 80011b0:	f7ff ff14 	bl	8000fdc <ST7735_Select>
    ST7735_Reset();
 80011b4:	f7ff ff2a 	bl	800100c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <ST7735_Init+0x28>)
 80011ba:	f7ff ff73 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <ST7735_Init+0x2c>)
 80011c0:	f7ff ff70 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <ST7735_Init+0x30>)
 80011c6:	f7ff ff6d 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80011ca:	f7ff ff13 	bl	8000ff4 <ST7735_Unselect>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	080088d4 	.word	0x080088d4
 80011d8:	08008910 	.word	0x08008910
 80011dc:	08008920 	.word	0x08008920

080011e0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011e0:	b082      	sub	sp, #8
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b089      	sub	sp, #36	; 0x24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	460b      	mov	r3, r1
 80011f0:	80bb      	strh	r3, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	b2d9      	uxtb	r1, r3
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001206:	4413      	add	r3, r2
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b01      	subs	r3, #1
 800120c:	b2dc      	uxtb	r4, r3
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001216:	4413      	add	r3, r2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3b01      	subs	r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4622      	mov	r2, r4
 8001220:	f7ff ff88 	bl	8001134 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	e043      	b.n	80012b2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800122a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	3b20      	subs	r3, #32
 8001230:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	4619      	mov	r1, r3
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	440b      	add	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	e029      	b.n	80012a0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00e      	beq.n	800127a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800125c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	743b      	strb	r3, [r7, #16]
 8001266:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001268:	b2db      	uxtb	r3, r3
 800126a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2102      	movs	r1, #2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fefa 	bl	800106c <ST7735_WriteData>
 8001278:	e00f      	b.n	800129a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800127a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	b29b      	uxth	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	733b      	strb	r3, [r7, #12]
 8001286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800128a:	b2db      	uxtb	r3, r3
 800128c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2102      	movs	r1, #2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fee9 	bl	800106c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	3301      	adds	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012a4:	461a      	mov	r2, r3
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d3cf      	bcc.n	800124c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	3301      	adds	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012b6:	461a      	mov	r2, r3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d3b5      	bcc.n	800122a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012c8:	b002      	add	sp, #8
 80012ca:	4770      	bx	lr

080012cc <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012cc:	b082      	sub	sp, #8
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af04      	add	r7, sp, #16
 80012d4:	603a      	str	r2, [r7, #0]
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	4603      	mov	r3, r0
 80012da:	80fb      	strh	r3, [r7, #6]
 80012dc:	460b      	mov	r3, r1
 80012de:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80012e0:	f7ff fe7c 	bl	8000fdc <ST7735_Select>

    while(*str) {
 80012e4:	e02d      	b.n	8001342 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	7d3a      	ldrb	r2, [r7, #20]
 80012ea:	4413      	add	r3, r2
 80012ec:	2b7f      	cmp	r3, #127	; 0x7f
 80012ee:	dd13      	ble.n	8001318 <ST7735_WriteString+0x4c>
            x = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80012f4:	7d7b      	ldrb	r3, [r7, #21]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	7d7a      	ldrb	r2, [r7, #21]
 8001302:	4413      	add	r3, r2
 8001304:	2b9f      	cmp	r3, #159	; 0x9f
 8001306:	dc21      	bgt.n	800134c <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b20      	cmp	r3, #32
 800130e:	d103      	bne.n	8001318 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	603b      	str	r3, [r7, #0]
                continue;
 8001316:	e014      	b.n	8001342 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	88b9      	ldrh	r1, [r7, #4]
 800131e:	88f8      	ldrh	r0, [r7, #6]
 8001320:	8c3b      	ldrh	r3, [r7, #32]
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	8bbb      	ldrh	r3, [r7, #28]
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f7ff ff57 	bl	80011e0 <ST7735_WriteChar>
        x += font.width;
 8001332:	7d3b      	ldrb	r3, [r7, #20]
 8001334:	b29a      	uxth	r2, r3
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4413      	add	r3, r2
 800133a:	80fb      	strh	r3, [r7, #6]
        str++;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1cd      	bne.n	80012e6 <ST7735_WriteString+0x1a>
 800134a:	e000      	b.n	800134e <ST7735_WriteString+0x82>
                break;
 800134c:	bf00      	nop
    }

    ST7735_Unselect();
 800134e:	f7ff fe51 	bl	8000ff4 <ST7735_Unselect>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800135c:	b002      	add	sp, #8
 800135e:	4770      	bx	lr

08001360 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4623      	mov	r3, r4
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	4603      	mov	r3, r0
 8001374:	80bb      	strh	r3, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]
 800137a:	4613      	mov	r3, r2
 800137c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b7f      	cmp	r3, #127	; 0x7f
 8001382:	d85a      	bhi.n	800143a <ST7735_FillRectangle+0xda>
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	2b9f      	cmp	r3, #159	; 0x9f
 8001388:	d857      	bhi.n	800143a <ST7735_FillRectangle+0xda>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800138a:	88fa      	ldrh	r2, [r7, #6]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4413      	add	r3, r2
 8001390:	3b01      	subs	r3, #1
 8001392:	2b7f      	cmp	r3, #127	; 0x7f
 8001394:	dd03      	ble.n	800139e <ST7735_FillRectangle+0x3e>
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800139c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800139e:	88ba      	ldrh	r2, [r7, #4]
 80013a0:	883b      	ldrh	r3, [r7, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	3b01      	subs	r3, #1
 80013a6:	2b9f      	cmp	r3, #159	; 0x9f
 80013a8:	dd03      	ble.n	80013b2 <ST7735_FillRectangle+0x52>
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80013b0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80013b2:	f7ff fe13 	bl	8000fdc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	b2d8      	uxtb	r0, r3
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	b2d9      	uxtb	r1, r3
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	3b01      	subs	r3, #1
 80013cc:	b2dc      	uxtb	r4, r3
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	883b      	ldrh	r3, [r7, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3b01      	subs	r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4622      	mov	r2, r4
 80013e0:	f7ff fea8 	bl	8001134 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80013e4:	8c3b      	ldrh	r3, [r7, #32]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	733b      	strb	r3, [r7, #12]
 80013ee:	8c3b      	ldrh	r3, [r7, #32]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <ST7735_FillRectangle+0xe4>)
 80013fc:	f001 fcfa 	bl	8002df4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001400:	883b      	ldrh	r3, [r7, #0]
 8001402:	80bb      	strh	r3, [r7, #4]
 8001404:	e013      	b.n	800142e <ST7735_FillRectangle+0xce>
        for(x = w; x > 0; x--) {
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	80fb      	strh	r3, [r7, #6]
 800140a:	e00a      	b.n	8001422 <ST7735_FillRectangle+0xc2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800140c:	f107 010c 	add.w	r1, r7, #12
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	2202      	movs	r2, #2
 8001416:	480c      	ldr	r0, [pc, #48]	; (8001448 <ST7735_FillRectangle+0xe8>)
 8001418:	f003 f96e 	bl	80046f8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	3b01      	subs	r3, #1
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f1      	bne.n	800140c <ST7735_FillRectangle+0xac>
    for(y = h; y > 0; y--) {
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e8      	bne.n	8001406 <ST7735_FillRectangle+0xa6>
        }
    }

    ST7735_Unselect();
 8001434:	f7ff fdde 	bl	8000ff4 <ST7735_Unselect>
 8001438:	e000      	b.n	800143c <ST7735_FillRectangle+0xdc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800143a:	bf00      	nop
}
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	40020800 	.word	0x40020800
 8001448:	200002ac 	.word	0x200002ac

0800144c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af02      	add	r7, sp, #8
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	2100      	movs	r1, #0
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff ff7d 	bl	8001360 <ST7735_FillRectangle>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	CalorieInfo person_cal_info;
	CalorieState calorie_state = calorie_height_mode;
 8001476:	2300      	movs	r3, #0
 8001478:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147a:	f001 f9a7 	bl	80027cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147e:	f000 f841 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001482:	f000 f937 	bl	80016f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001486:	f000 f8a5 	bl	80015d4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800148a:	f000 f909 	bl	80016a0 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 800148e:	f000 f8cf 	bl	8001630 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

	// put all custom initialization functions here no matter which states they belong to
	ST7735_Init();
 8001492:	f7ff fe8b 	bl	80011ac <ST7735_Init>
	mma8452qInit(&hi2c1);
 8001496:	4818      	ldr	r0, [pc, #96]	; (80014f8 <main+0x88>)
 8001498:	f7ff fd45 	bl	8000f26 <mma8452qInit>
	initCalorieMode(&person_cal_info);
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fb71 	bl	8001b88 <initCalorieMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (current_state) {
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <main+0x8c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d8fb      	bhi.n	80014a6 <main+0x36>
 80014ae:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <main+0x44>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014c9 	.word	0x080014c9
 80014b8:	080014cf 	.word	0x080014cf
 80014bc:	080014d5 	.word	0x080014d5
 80014c0:	080014e1 	.word	0x080014e1
 80014c4:	080014f1 	.word	0x080014f1
			case welcome_mode:
				welcomeScreen();
 80014c8:	f001 f862 	bl	8002590 <welcomeScreen>
				break;
 80014cc:	e013      	b.n	80014f6 <main+0x86>
			case choose_mode:
				chooseModeScreen();
 80014ce:	f000 ff05 	bl	80022dc <chooseModeScreen>
				break;
 80014d2:	e010      	b.n	80014f6 <main+0x86>
			case step_mode:
				stepScreen(step_num);
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <main+0x90>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 ffc7 	bl	800246c <stepScreen>
				break;
 80014de:	e00a      	b.n	80014f6 <main+0x86>
			case calorie_mode:
				calorieScreen(&calorie_state, &person_cal_info);
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fb21 	bl	8001b30 <calorieScreen>
				break;
 80014ee:	e002      	b.n	80014f6 <main+0x86>
			case main_mode:
				mainScreen();
 80014f0:	f000 ff4e 	bl	8002390 <mainScreen>
				break;
 80014f4:	bf00      	nop
		switch (current_state) {
 80014f6:	e7d6      	b.n	80014a6 <main+0x36>
 80014f8:	20000258 	.word	0x20000258
 80014fc:	20000248 	.word	0x20000248
 8001500:	20000010 	.word	0x20000010

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	; 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2230      	movs	r2, #48	; 0x30
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fec4 	bl	80052a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <SystemClock_Config+0xc8>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a26      	ldr	r2, [pc, #152]	; (80015cc <SystemClock_Config+0xc8>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <SystemClock_Config+0xc8>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <SystemClock_Config+0xcc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <SystemClock_Config+0xcc>)
 800154e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <SystemClock_Config+0xcc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001560:	2301      	movs	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001574:	2308      	movs	r3, #8
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800157c:	2302      	movs	r3, #2
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001580:	2304      	movs	r3, #4
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fbef 	bl	8003d6c <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001594:	f000 f954 	bl	8001840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 fe4a 	bl	800424c <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80015be:	f000 f93f 	bl	8001840 <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3750      	adds	r7, #80	; 0x50
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40007000 	.word	0x40007000

080015d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C1_Init+0x50>)
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_I2C1_Init+0x54>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_I2C1_Init+0x58>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_I2C1_Init+0x50>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_I2C1_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_I2C1_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_I2C1_Init+0x50>)
 8001612:	f001 fc09 	bl	8002e28 <HAL_I2C_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800161c:	f000 f910 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000258 	.word	0x20000258
 8001628:	40005400 	.word	0x40005400
 800162c:	000186a0 	.word	0x000186a0

08001630 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_SPI3_Init+0x68>)
 8001636:	4a19      	ldr	r2, [pc, #100]	; (800169c <MX_SPI3_Init+0x6c>)
 8001638:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_SPI3_Init+0x68>)
 800163c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001640:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_SPI3_Init+0x68>)
 8001644:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001648:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_SPI3_Init+0x68>)
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_SPI3_Init+0x68>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_SPI3_Init+0x68>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_SPI3_Init+0x68>)
 800165e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001662:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_SPI3_Init+0x68>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_SPI3_Init+0x68>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_SPI3_Init+0x68>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_SPI3_Init+0x68>)
 8001678:	2200      	movs	r2, #0
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_SPI3_Init+0x68>)
 800167e:	220a      	movs	r2, #10
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_SPI3_Init+0x68>)
 8001684:	f002 ffd4 	bl	8004630 <HAL_SPI_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800168e:	f000 f8d7 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200002ac 	.word	0x200002ac
 800169c:	40003c00 	.word	0x40003c00

080016a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_USART6_UART_Init+0x4c>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_USART6_UART_Init+0x50>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_USART6_UART_Init+0x4c>)
 80016ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_USART6_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_USART6_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_USART6_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_USART6_UART_Init+0x4c>)
 80016c6:	2208      	movs	r2, #8
 80016c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_USART6_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_USART6_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_USART6_UART_Init+0x4c>)
 80016d8:	f003 f9ee 	bl	8004ab8 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80016e2:	f000 f8ad 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000304 	.word	0x20000304
 80016f0:	40011400 	.word	0x40011400

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b48      	ldr	r3, [pc, #288]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a47      	ldr	r2, [pc, #284]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b45      	ldr	r3, [pc, #276]	; (8001830 <MX_GPIO_Init+0x13c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b41      	ldr	r3, [pc, #260]	; (8001830 <MX_GPIO_Init+0x13c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a40      	ldr	r2, [pc, #256]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b3a      	ldr	r3, [pc, #232]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a39      	ldr	r2, [pc, #228]	; (8001830 <MX_GPIO_Init+0x13c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b33      	ldr	r3, [pc, #204]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a32      	ldr	r2, [pc, #200]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b30      	ldr	r3, [pc, #192]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a2b      	ldr	r2, [pc, #172]	; (8001830 <MX_GPIO_Init+0x13c>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <MX_GPIO_Init+0x13c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_RST_GPIO_Port, DISP_RST_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179c:	4825      	ldr	r0, [pc, #148]	; (8001834 <MX_GPIO_Init+0x140>)
 800179e:	f001 fb29 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_A0_DC_GPIO_Port, DISP_A0_DC_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a8:	4823      	ldr	r0, [pc, #140]	; (8001838 <MX_GPIO_Init+0x144>)
 80017aa:	f001 fb23 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2104      	movs	r1, #4
 80017b2:	4822      	ldr	r0, [pc, #136]	; (800183c <MX_GPIO_Init+0x148>)
 80017b4:	f001 fb1e 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80017b8:	2307      	movs	r3, #7
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	481b      	ldr	r0, [pc, #108]	; (8001838 <MX_GPIO_Init+0x144>)
 80017cc:	f001 f978 	bl	8002ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_RST_Pin */
  GPIO_InitStruct.Pin = DISP_RST_Pin;
 80017d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_RST_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	4812      	ldr	r0, [pc, #72]	; (8001834 <MX_GPIO_Init+0x140>)
 80017ea:	f001 f969 	bl	8002ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_A0_DC_Pin */
  GPIO_InitStruct.Pin = DISP_A0_DC_Pin;
 80017ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_A0_DC_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480c      	ldr	r0, [pc, #48]	; (8001838 <MX_GPIO_Init+0x144>)
 8001808:	f001 f95a 	bl	8002ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 800180c:	2304      	movs	r3, #4
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <MX_GPIO_Init+0x148>)
 8001824:	f001 f94c 	bl	8002ac0 <HAL_GPIO_Init>

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020800 	.word	0x40020800
 800183c:	40020c00 	.word	0x40020c00

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_MspInit+0x4c>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_MspInit+0x4c>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a19      	ldr	r2, [pc, #100]	; (8001924 <HAL_I2C_MspInit+0x84>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12c      	bne.n	800191c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_I2C_MspInit+0x88>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_I2C_MspInit+0x88>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_I2C_MspInit+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e4:	2312      	movs	r3, #18
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f0:	2304      	movs	r3, #4
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	480c      	ldr	r0, [pc, #48]	; (800192c <HAL_I2C_MspInit+0x8c>)
 80018fc:	f001 f8e0 	bl	8002ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_I2C_MspInit+0x88>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_I2C_MspInit+0x88>)
 800190a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800190e:	6413      	str	r3, [r2, #64]	; 0x40
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_I2C_MspInit+0x88>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40005400 	.word	0x40005400
 8001928:	40023800 	.word	0x40023800
 800192c:	40020400 	.word	0x40020400

08001930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <HAL_SPI_MspInit+0x84>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d12c      	bne.n	80019ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_SPI_MspInit+0x88>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <HAL_SPI_MspInit+0x88>)
 800195c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_SPI_MspInit+0x88>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_SPI_MspInit+0x88>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <HAL_SPI_MspInit+0x88>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_SPI_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800198a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800199c:	2306      	movs	r3, #6
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <HAL_SPI_MspInit+0x8c>)
 80019a8:	f001 f88a 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40003c00 	.word	0x40003c00
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020800 	.word	0x40020800

080019c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_UART_MspInit+0x84>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d12c      	bne.n	8001a3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_UART_MspInit+0x88>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_UART_MspInit+0x88>)
 80019ec:	f043 0320 	orr.w	r3, r3, #32
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_UART_MspInit+0x88>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f003 0320 	and.w	r3, r3, #32
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_UART_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_UART_MspInit+0x88>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_UART_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <HAL_UART_MspInit+0x8c>)
 8001a38:	f001 f842 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40011400 	.word	0x40011400
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 fee4 	bl	8002870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x50>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <_sbrk+0x16>
		heap_end = &end;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <_sbrk+0x50>)
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <_sbrk+0x54>)
 8001ac0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <_sbrk+0x50>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <_sbrk+0x50>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	466a      	mov	r2, sp
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d907      	bls.n	8001ae6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ad6:	f003 fbb9 	bl	800524c <__errno>
 8001ada:	4602      	mov	r2, r0
 8001adc:	230c      	movs	r3, #12
 8001ade:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	e006      	b.n	8001af4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <_sbrk+0x50>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a03      	ldr	r2, [pc, #12]	; (8001afc <_sbrk+0x50>)
 8001af0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000024c 	.word	0x2000024c
 8001b00:	20000350 	.word	0x20000350

08001b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <SystemInit+0x28>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <SystemInit+0x28>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SystemInit+0x28>)
 8001b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <calorieScreen>:
uint8_t limit_vals_6[10][2] = {{45,28}, {55,33}, {64,38}, {73,44}, {82,49},
							 {91,55}, {100,60}, {114,69}, {125,75}, {136,82}};



void calorieScreen(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
	switch (*calorie_mode) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d81d      	bhi.n	8001b7e <calorieScreen+0x4e>
 8001b42:	a201      	add	r2, pc, #4	; (adr r2, 8001b48 <calorieScreen+0x18>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001b59 	.word	0x08001b59
 8001b4c:	08001b63 	.word	0x08001b63
 8001b50:	08001b6d 	.word	0x08001b6d
 8001b54:	08001b77 	.word	0x08001b77
		case calorie_height_mode:
			calorieHeightMode(calorie_mode, person_cal_info);
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f828 	bl	8001bb0 <calorieHeightMode>
			break;
 8001b60:	e00d      	b.n	8001b7e <calorieScreen+0x4e>
		case calorie_weight_mode:
			calorieWeightMode(calorie_mode, person_cal_info);
 8001b62:	6839      	ldr	r1, [r7, #0]
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8fd 	bl	8001d64 <calorieWeightMode>
			break;
 8001b6a:	e008      	b.n	8001b7e <calorieScreen+0x4e>
		case calorie_amount_mode:
			calorieAmountMode(calorie_mode, person_cal_info);
 8001b6c:	6839      	ldr	r1, [r7, #0]
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f9d2 	bl	8001f18 <calorieAmountMode>
			break;
 8001b74:	e003      	b.n	8001b7e <calorieScreen+0x4e>
		case calorie_step_mode:
			calorieStepMode(person_cal_info);
 8001b76:	6838      	ldr	r0, [r7, #0]
 8001b78:	f000 faa8 	bl	80020cc <calorieStepMode>
			break;
 8001b7c:	bf00      	nop
	}
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop

08001b88 <initCalorieMode>:


void initCalorieMode(CalorieInfo* person_cal_info) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	person_cal_info->height = 160;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	22a0      	movs	r2, #160	; 0xa0
 8001b94:	701a      	strb	r2, [r3, #0]
	person_cal_info->weight = 60;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	223c      	movs	r2, #60	; 0x3c
 8001b9a:	705a      	strb	r2, [r3, #1]
	person_cal_info->calorie_amount = 1000;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ba2:	805a      	strh	r2, [r3, #2]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <calorieHeightMode>:


void calorieHeightMode(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b09c      	sub	sp, #112	; 0x70
 8001bb4:	af04      	add	r7, sp, #16
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) && (person_cal_info->height < 250)) {
 8001bba:	2101      	movs	r1, #1
 8001bbc:	4863      	ldr	r0, [pc, #396]	; (8001d4c <calorieHeightMode+0x19c>)
 8001bbe:	f001 f901 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d016      	beq.n	8001bf6 <calorieHeightMode+0x46>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2bf9      	cmp	r3, #249	; 0xf9
 8001bce:	d812      	bhi.n	8001bf6 <calorieHeightMode+0x46>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8001bd0:	bf00      	nop
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	485d      	ldr	r0, [pc, #372]	; (8001d4c <calorieHeightMode+0x19c>)
 8001bd6:	f001 f8f5 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f8      	bne.n	8001bd2 <calorieHeightMode+0x22>
			;
		HAL_Delay(300);
 8001be0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001be4:	f000 fe64 	bl	80028b0 <HAL_Delay>
		person_cal_info->height += 1;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	e033      	b.n	8001c5e <calorieHeightMode+0xae>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	4854      	ldr	r0, [pc, #336]	; (8001d4c <calorieHeightMode+0x19c>)
 8001bfa:	f001 f8e3 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00f      	beq.n	8001c24 <calorieHeightMode+0x74>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8001c04:	bf00      	nop
 8001c06:	2104      	movs	r1, #4
 8001c08:	4850      	ldr	r0, [pc, #320]	; (8001d4c <calorieHeightMode+0x19c>)
 8001c0a:	f001 f8db 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f8      	bne.n	8001c06 <calorieHeightMode+0x56>
				;
			HAL_Delay(300);
 8001c14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c18:	f000 fe4a 	bl	80028b0 <HAL_Delay>
			*calorie_mode = calorie_weight_mode;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e090      	b.n	8001d46 <calorieHeightMode+0x196>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && (person_cal_info->height > 100)) {
 8001c24:	2104      	movs	r1, #4
 8001c26:	4849      	ldr	r0, [pc, #292]	; (8001d4c <calorieHeightMode+0x19c>)
 8001c28:	f001 f8cc 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d015      	beq.n	8001c5e <calorieHeightMode+0xae>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d911      	bls.n	8001c5e <calorieHeightMode+0xae>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8001c3a:	bf00      	nop
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	4843      	ldr	r0, [pc, #268]	; (8001d4c <calorieHeightMode+0x19c>)
 8001c40:	f001 f8c0 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f8      	bne.n	8001c3c <calorieHeightMode+0x8c>
			;
		HAL_Delay(300);
 8001c4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c4e:	f000 fe2f 	bl	80028b0 <HAL_Delay>
		person_cal_info->height -= 1;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	701a      	strb	r2, [r3, #0]
	}

	ST7735_WriteString(0, 20, "(L) : - \\/ + : (R)", TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <calorieHeightMode+0x1a0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	9202      	str	r2, [sp, #8]
 8001c64:	221f      	movs	r2, #31
 8001c66:	9201      	str	r2, [sp, #4]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	9200      	str	r2, [sp, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a39      	ldr	r2, [pc, #228]	; (8001d54 <calorieHeightMode+0x1a4>)
 8001c70:	2114      	movs	r1, #20
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff fb2a 	bl	80012cc <ST7735_WriteString>

	char calorie_text1[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8001c78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
 8001c88:	615a      	str	r2, [r3, #20]
 8001c8a:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text1, "   Height: %d   ", person_cal_info->height);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c96:	4930      	ldr	r1, [pc, #192]	; (8001d58 <calorieHeightMode+0x1a8>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 ff65 	bl	8005b68 <siprintf>
	ST7735_WriteString(0, 50, calorie_text1, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, TEXT_BACKGROUND_COLOR_CLR_MODE);
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <calorieHeightMode+0x1a0>)
 8001ca0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca8:	9202      	str	r2, [sp, #8]
 8001caa:	221f      	movs	r2, #31
 8001cac:	9201      	str	r2, [sp, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	9200      	str	r2, [sp, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	2132      	movs	r1, #50	; 0x32
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff fb07 	bl	80012cc <ST7735_WriteString>

	char calorie_text2[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8001cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	615a      	str	r2, [r3, #20]
 8001cd0:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text2, "    Weight: %d     ", person_cal_info->weight);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cdc:	491f      	ldr	r1, [pc, #124]	; (8001d5c <calorieHeightMode+0x1ac>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 ff42 	bl	8005b68 <siprintf>
	ST7735_WriteString(0, 80, calorie_text2, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <calorieHeightMode+0x1a0>)
 8001ce6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001cea:	2200      	movs	r2, #0
 8001cec:	9202      	str	r2, [sp, #8]
 8001cee:	221f      	movs	r2, #31
 8001cf0:	9201      	str	r2, [sp, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	9200      	str	r2, [sp, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	2150      	movs	r1, #80	; 0x50
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff fae5 	bl	80012cc <ST7735_WriteString>

	char calorie_text3[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	615a      	str	r2, [r3, #20]
 8001d14:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text3, "  Calorie: %d   ", person_cal_info->calorie_amount);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	885b      	ldrh	r3, [r3, #2]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	490f      	ldr	r1, [pc, #60]	; (8001d60 <calorieHeightMode+0x1b0>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 ff20 	bl	8005b68 <siprintf>
	ST7735_WriteString(0, 110, calorie_text3, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <calorieHeightMode+0x1a0>)
 8001d2a:	f107 010c 	add.w	r1, r7, #12
 8001d2e:	2200      	movs	r2, #0
 8001d30:	9202      	str	r2, [sp, #8]
 8001d32:	221f      	movs	r2, #31
 8001d34:	9201      	str	r2, [sp, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	9200      	str	r2, [sp, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	460a      	mov	r2, r1
 8001d3e:	216e      	movs	r1, #110	; 0x6e
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7ff fac3 	bl	80012cc <ST7735_WriteString>

}
 8001d46:	3760      	adds	r7, #96	; 0x60
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	20000000 	.word	0x20000000
 8001d54:	08007340 	.word	0x08007340
 8001d58:	08007354 	.word	0x08007354
 8001d5c:	08007368 	.word	0x08007368
 8001d60:	0800737c 	.word	0x0800737c

08001d64 <calorieWeightMode>:


void calorieWeightMode(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b09c      	sub	sp, #112	; 0x70
 8001d68:	af04      	add	r7, sp, #16
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) && (person_cal_info->weight < 200)) {
 8001d6e:	2101      	movs	r1, #1
 8001d70:	4863      	ldr	r0, [pc, #396]	; (8001f00 <calorieWeightMode+0x19c>)
 8001d72:	f001 f827 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d016      	beq.n	8001daa <calorieWeightMode+0x46>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	785b      	ldrb	r3, [r3, #1]
 8001d80:	2bc7      	cmp	r3, #199	; 0xc7
 8001d82:	d812      	bhi.n	8001daa <calorieWeightMode+0x46>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8001d84:	bf00      	nop
 8001d86:	2101      	movs	r1, #1
 8001d88:	485d      	ldr	r0, [pc, #372]	; (8001f00 <calorieWeightMode+0x19c>)
 8001d8a:	f001 f81b 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f8      	bne.n	8001d86 <calorieWeightMode+0x22>
			;
		HAL_Delay(300);
 8001d94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d98:	f000 fd8a 	bl	80028b0 <HAL_Delay>
		person_cal_info->weight += 1;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	3301      	adds	r3, #1
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	705a      	strb	r2, [r3, #1]
 8001da8:	e033      	b.n	8001e12 <calorieWeightMode+0xae>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8001daa:	2102      	movs	r1, #2
 8001dac:	4854      	ldr	r0, [pc, #336]	; (8001f00 <calorieWeightMode+0x19c>)
 8001dae:	f001 f809 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00f      	beq.n	8001dd8 <calorieWeightMode+0x74>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8001db8:	bf00      	nop
 8001dba:	2104      	movs	r1, #4
 8001dbc:	4850      	ldr	r0, [pc, #320]	; (8001f00 <calorieWeightMode+0x19c>)
 8001dbe:	f001 f801 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f8      	bne.n	8001dba <calorieWeightMode+0x56>
				;
			HAL_Delay(300);
 8001dc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dcc:	f000 fd70 	bl	80028b0 <HAL_Delay>
			*calorie_mode = calorie_amount_mode;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e090      	b.n	8001efa <calorieWeightMode+0x196>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && (person_cal_info->weight > 30)) {
 8001dd8:	2104      	movs	r1, #4
 8001dda:	4849      	ldr	r0, [pc, #292]	; (8001f00 <calorieWeightMode+0x19c>)
 8001ddc:	f000 fff2 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d015      	beq.n	8001e12 <calorieWeightMode+0xae>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	785b      	ldrb	r3, [r3, #1]
 8001dea:	2b1e      	cmp	r3, #30
 8001dec:	d911      	bls.n	8001e12 <calorieWeightMode+0xae>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8001dee:	bf00      	nop
 8001df0:	2104      	movs	r1, #4
 8001df2:	4843      	ldr	r0, [pc, #268]	; (8001f00 <calorieWeightMode+0x19c>)
 8001df4:	f000 ffe6 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f8      	bne.n	8001df0 <calorieWeightMode+0x8c>
			;
		HAL_Delay(300);
 8001dfe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e02:	f000 fd55 	bl	80028b0 <HAL_Delay>
		person_cal_info->weight -= 1;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	705a      	strb	r2, [r3, #1]
	}

	ST7735_WriteString(0, 20, "(L) : - \\/ + : (R)", TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8001e12:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <calorieWeightMode+0x1a0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	9202      	str	r2, [sp, #8]
 8001e18:	221f      	movs	r2, #31
 8001e1a:	9201      	str	r2, [sp, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	9200      	str	r2, [sp, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a39      	ldr	r2, [pc, #228]	; (8001f08 <calorieWeightMode+0x1a4>)
 8001e24:	2114      	movs	r1, #20
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff fa50 	bl	80012cc <ST7735_WriteString>

	char calorie_text1[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8001e2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	615a      	str	r2, [r3, #20]
 8001e3e:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text1, "   Height: %d   ", person_cal_info->height);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e4a:	4930      	ldr	r1, [pc, #192]	; (8001f0c <calorieWeightMode+0x1a8>)
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 fe8b 	bl	8005b68 <siprintf>
	ST7735_WriteString(0, 50, calorie_text1, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <calorieWeightMode+0x1a0>)
 8001e54:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001e58:	2200      	movs	r2, #0
 8001e5a:	9202      	str	r2, [sp, #8]
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	9201      	str	r2, [sp, #4]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	9200      	str	r2, [sp, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	460a      	mov	r2, r1
 8001e68:	2132      	movs	r1, #50	; 0x32
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff fa2e 	bl	80012cc <ST7735_WriteString>

	char calorie_text2[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8001e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
 8001e80:	615a      	str	r2, [r3, #20]
 8001e82:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text2, "    Weight: %d     ", person_cal_info->weight);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e8e:	4920      	ldr	r1, [pc, #128]	; (8001f10 <calorieWeightMode+0x1ac>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fe69 	bl	8005b68 <siprintf>
	ST7735_WriteString(0, 80, calorie_text2, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, TEXT_BACKGROUND_COLOR_CLR_MODE);
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <calorieWeightMode+0x1a0>)
 8001e98:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea0:	9202      	str	r2, [sp, #8]
 8001ea2:	221f      	movs	r2, #31
 8001ea4:	9201      	str	r2, [sp, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	9200      	str	r2, [sp, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	460a      	mov	r2, r1
 8001eae:	2150      	movs	r1, #80	; 0x50
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff fa0b 	bl	80012cc <ST7735_WriteString>

	char calorie_text3[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	615a      	str	r2, [r3, #20]
 8001ec8:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text3, "  Calorie: %d   ", person_cal_info->calorie_amount);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	885b      	ldrh	r3, [r3, #2]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	490f      	ldr	r1, [pc, #60]	; (8001f14 <calorieWeightMode+0x1b0>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fe46 	bl	8005b68 <siprintf>
	ST7735_WriteString(0, 110, calorie_text3, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <calorieWeightMode+0x1a0>)
 8001ede:	f107 010c 	add.w	r1, r7, #12
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	9202      	str	r2, [sp, #8]
 8001ee6:	221f      	movs	r2, #31
 8001ee8:	9201      	str	r2, [sp, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	9200      	str	r2, [sp, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	460a      	mov	r2, r1
 8001ef2:	216e      	movs	r1, #110	; 0x6e
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff f9e9 	bl	80012cc <ST7735_WriteString>

}
 8001efa:	3760      	adds	r7, #96	; 0x60
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40020800 	.word	0x40020800
 8001f04:	20000000 	.word	0x20000000
 8001f08:	08007340 	.word	0x08007340
 8001f0c:	08007354 	.word	0x08007354
 8001f10:	08007368 	.word	0x08007368
 8001f14:	0800737c 	.word	0x0800737c

08001f18 <calorieAmountMode>:


void calorieAmountMode(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b09c      	sub	sp, #112	; 0x70
 8001f1c:	af04      	add	r7, sp, #16
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8001f22:	2101      	movs	r1, #1
 8001f24:	4863      	ldr	r0, [pc, #396]	; (80020b4 <calorieAmountMode+0x19c>)
 8001f26:	f000 ff4d 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <calorieAmountMode+0x40>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8001f30:	bf00      	nop
 8001f32:	2101      	movs	r1, #1
 8001f34:	485f      	ldr	r0, [pc, #380]	; (80020b4 <calorieAmountMode+0x19c>)
 8001f36:	f000 ff45 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f8      	bne.n	8001f32 <calorieAmountMode+0x1a>
			;
		HAL_Delay(300);
 8001f40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f44:	f000 fcb4 	bl	80028b0 <HAL_Delay>
		person_cal_info->calorie_amount += 1000;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	885b      	ldrh	r3, [r3, #2]
 8001f4c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	805a      	strh	r2, [r3, #2]
 8001f56:	e035      	b.n	8001fc4 <calorieAmountMode+0xac>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8001f58:	2102      	movs	r1, #2
 8001f5a:	4856      	ldr	r0, [pc, #344]	; (80020b4 <calorieAmountMode+0x19c>)
 8001f5c:	f000 ff32 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00f      	beq.n	8001f86 <calorieAmountMode+0x6e>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8001f66:	bf00      	nop
 8001f68:	2104      	movs	r1, #4
 8001f6a:	4852      	ldr	r0, [pc, #328]	; (80020b4 <calorieAmountMode+0x19c>)
 8001f6c:	f000 ff2a 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f8      	bne.n	8001f68 <calorieAmountMode+0x50>
				;
			HAL_Delay(300);
 8001f76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f7a:	f000 fc99 	bl	80028b0 <HAL_Delay>
			*calorie_mode = calorie_step_mode;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2203      	movs	r2, #3
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	e092      	b.n	80020ac <calorieAmountMode+0x194>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && (person_cal_info->calorie_amount > 1000)) {
 8001f86:	2104      	movs	r1, #4
 8001f88:	484a      	ldr	r0, [pc, #296]	; (80020b4 <calorieAmountMode+0x19c>)
 8001f8a:	f000 ff1b 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d017      	beq.n	8001fc4 <calorieAmountMode+0xac>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	885b      	ldrh	r3, [r3, #2]
 8001f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f9c:	d912      	bls.n	8001fc4 <calorieAmountMode+0xac>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8001f9e:	bf00      	nop
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	4844      	ldr	r0, [pc, #272]	; (80020b4 <calorieAmountMode+0x19c>)
 8001fa4:	f000 ff0e 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f8      	bne.n	8001fa0 <calorieAmountMode+0x88>
			;
		HAL_Delay(300);
 8001fae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001fb2:	f000 fc7d 	bl	80028b0 <HAL_Delay>
		person_cal_info->calorie_amount -= 1000;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	885b      	ldrh	r3, [r3, #2]
 8001fba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	805a      	strh	r2, [r3, #2]
	}

	ST7735_WriteString(0, 20, "(L) : - \\/ + : (R)", TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8001fc4:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <calorieAmountMode+0x1a0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	9202      	str	r2, [sp, #8]
 8001fca:	221f      	movs	r2, #31
 8001fcc:	9201      	str	r2, [sp, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	9200      	str	r2, [sp, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a39      	ldr	r2, [pc, #228]	; (80020bc <calorieAmountMode+0x1a4>)
 8001fd6:	2114      	movs	r1, #20
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff f977 	bl	80012cc <ST7735_WriteString>

	char calorie_text1[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8001fde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	615a      	str	r2, [r3, #20]
 8001ff0:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text1, "   Height: %d   ", person_cal_info->height);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ffc:	4930      	ldr	r1, [pc, #192]	; (80020c0 <calorieAmountMode+0x1a8>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fdb2 	bl	8005b68 <siprintf>
	ST7735_WriteString(0, 50, calorie_text1, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <calorieAmountMode+0x1a0>)
 8002006:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800200a:	2200      	movs	r2, #0
 800200c:	9202      	str	r2, [sp, #8]
 800200e:	221f      	movs	r2, #31
 8002010:	9201      	str	r2, [sp, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	9200      	str	r2, [sp, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	460a      	mov	r2, r1
 800201a:	2132      	movs	r1, #50	; 0x32
 800201c:	2000      	movs	r0, #0
 800201e:	f7ff f955 	bl	80012cc <ST7735_WriteString>

	char calorie_text2[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	615a      	str	r2, [r3, #20]
 8002034:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text2, "    Weight: %d     ", person_cal_info->weight);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	785b      	ldrb	r3, [r3, #1]
 800203a:	461a      	mov	r2, r3
 800203c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002040:	4920      	ldr	r1, [pc, #128]	; (80020c4 <calorieAmountMode+0x1ac>)
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fd90 	bl	8005b68 <siprintf>
	ST7735_WriteString(0, 80, calorie_text2, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <calorieAmountMode+0x1a0>)
 800204a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800204e:	2200      	movs	r2, #0
 8002050:	9202      	str	r2, [sp, #8]
 8002052:	221f      	movs	r2, #31
 8002054:	9201      	str	r2, [sp, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	9200      	str	r2, [sp, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	460a      	mov	r2, r1
 800205e:	2150      	movs	r1, #80	; 0x50
 8002060:	2000      	movs	r0, #0
 8002062:	f7ff f933 	bl	80012cc <ST7735_WriteString>

	char calorie_text3[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	615a      	str	r2, [r3, #20]
 8002078:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text3, "  Calorie: %d   ", person_cal_info->calorie_amount);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	885b      	ldrh	r3, [r3, #2]
 800207e:	461a      	mov	r2, r3
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	4910      	ldr	r1, [pc, #64]	; (80020c8 <calorieAmountMode+0x1b0>)
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fd6e 	bl	8005b68 <siprintf>
	ST7735_WriteString(0, 110, calorie_text3, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, TEXT_BACKGROUND_COLOR_CLR_MODE);
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <calorieAmountMode+0x1a0>)
 800208e:	f107 010c 	add.w	r1, r7, #12
 8002092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002096:	9202      	str	r2, [sp, #8]
 8002098:	221f      	movs	r2, #31
 800209a:	9201      	str	r2, [sp, #4]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	9200      	str	r2, [sp, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	460a      	mov	r2, r1
 80020a4:	216e      	movs	r1, #110	; 0x6e
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff f910 	bl	80012cc <ST7735_WriteString>

}
 80020ac:	3760      	adds	r7, #96	; 0x60
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40020800 	.word	0x40020800
 80020b8:	20000000 	.word	0x20000000
 80020bc:	08007340 	.word	0x08007340
 80020c0:	08007354 	.word	0x08007354
 80020c4:	08007368 	.word	0x08007368
 80020c8:	0800737c 	.word	0x0800737c

080020cc <calorieStepMode>:


void calorieStepMode(CalorieInfo* person_cal_info) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	if (person_cal_info->height <= 165) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2ba5      	cmp	r3, #165	; 0xa5
 80020da:	d804      	bhi.n	80020e6 <calorieStepMode+0x1a>
		//a second update of codes and MET values. Med Sci Sports Exerc.
		//2011;43(8):1575-81. doi:10.1249/mss.0b013e31821ece12
		// simplified version of the article above(for three different height ranges, the amount of
		// calorie burned calculated only based on 1000 steps).
		//limit_vals[x][0] : weight, limit_vals[x][1] : amount of calories / 1000 steps
		calculateStepNum(person_cal_info, limit_vals_5_5);
 80020dc:	490f      	ldr	r1, [pc, #60]	; (800211c <calorieStepMode+0x50>)
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f824 	bl	800212c <calculateStepNum>
 80020e4:	e010      	b.n	8002108 <calorieStepMode+0x3c>
	}
	else if ((person_cal_info->height > 165) && (person_cal_info->height < 180)) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2ba5      	cmp	r3, #165	; 0xa5
 80020ec:	d908      	bls.n	8002100 <calorieStepMode+0x34>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2bb3      	cmp	r3, #179	; 0xb3
 80020f4:	d804      	bhi.n	8002100 <calorieStepMode+0x34>
		calculateStepNum(person_cal_info, limit_vals_5_6_5_11);
 80020f6:	490a      	ldr	r1, [pc, #40]	; (8002120 <calorieStepMode+0x54>)
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f817 	bl	800212c <calculateStepNum>
 80020fe:	e003      	b.n	8002108 <calorieStepMode+0x3c>
	}
	else { // person_cal_info->height >= 180
		calculateStepNum(person_cal_info, limit_vals_6);
 8002100:	4908      	ldr	r1, [pc, #32]	; (8002124 <calorieStepMode+0x58>)
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f812 	bl	800212c <calculateStepNum>
	}
	current_state = main_mode;
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <calorieStepMode+0x5c>)
 800210a:	2204      	movs	r2, #4
 800210c:	701a      	strb	r2, [r3, #0]
	ST7735_FillScreen(BACKGROUND_COLOR_STP_MODE);
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff f99c 	bl	800144c <ST7735_FillScreen>
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000018 	.word	0x20000018
 8002120:	2000002c 	.word	0x2000002c
 8002124:	20000040 	.word	0x20000040
 8002128:	20000248 	.word	0x20000248

0800212c <calculateStepNum>:


void calculateStepNum(CalorieInfo* person_cal_info, uint8_t limit_vals[10][2]) {
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
	if (person_cal_info->weight <= 45) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	785b      	ldrb	r3, [r3, #1]
 800213a:	2b2d      	cmp	r3, #45	; 0x2d
 800213c:	d80a      	bhi.n	8002154 <calculateStepNum+0x28>
		person_cal_info->step_num = person_cal_info->calorie_amount / 23;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	885b      	ldrh	r3, [r3, #2]
 8002142:	4a65      	ldr	r2, [pc, #404]	; (80022d8 <calculateStepNum+0x1ac>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	b29b      	uxth	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	605a      	str	r2, [r3, #4]
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[8][1];
	}
	else if (person_cal_info->weight <= limit_vals[9][0]) {
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[9][1];
	}
}
 8002152:	e0ba      	b.n	80022ca <calculateStepNum+0x19e>
	else if (person_cal_info->weight <= limit_vals[0][0]) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	785a      	ldrb	r2, [r3, #1]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d80a      	bhi.n	8002176 <calculateStepNum+0x4a>
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[0][1];
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	885b      	ldrh	r3, [r3, #2]
 8002164:	461a      	mov	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	785b      	ldrb	r3, [r3, #1]
 800216a:	fb92 f3f3 	sdiv	r3, r2, r3
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	605a      	str	r2, [r3, #4]
}
 8002174:	e0a9      	b.n	80022ca <calculateStepNum+0x19e>
	else if (person_cal_info->weight <= limit_vals[1][0]) {
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	785a      	ldrb	r2, [r3, #1]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	3302      	adds	r3, #2
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d80b      	bhi.n	800219c <calculateStepNum+0x70>
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[1][1];
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	885b      	ldrh	r3, [r3, #2]
 8002188:	461a      	mov	r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3302      	adds	r3, #2
 800218e:	785b      	ldrb	r3, [r3, #1]
 8002190:	fb92 f3f3 	sdiv	r3, r2, r3
 8002194:	461a      	mov	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	605a      	str	r2, [r3, #4]
}
 800219a:	e096      	b.n	80022ca <calculateStepNum+0x19e>
	else if (person_cal_info->weight <= limit_vals[2][0]) {
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	785a      	ldrb	r2, [r3, #1]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	3304      	adds	r3, #4
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d80b      	bhi.n	80021c2 <calculateStepNum+0x96>
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[2][1];
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	885b      	ldrh	r3, [r3, #2]
 80021ae:	461a      	mov	r2, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	3304      	adds	r3, #4
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	605a      	str	r2, [r3, #4]
}
 80021c0:	e083      	b.n	80022ca <calculateStepNum+0x19e>
	else if (person_cal_info->weight <= limit_vals[3][0]) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	785a      	ldrb	r2, [r3, #1]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	3306      	adds	r3, #6
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d80b      	bhi.n	80021e8 <calculateStepNum+0xbc>
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[3][1];
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	885b      	ldrh	r3, [r3, #2]
 80021d4:	461a      	mov	r2, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	3306      	adds	r3, #6
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	605a      	str	r2, [r3, #4]
}
 80021e6:	e070      	b.n	80022ca <calculateStepNum+0x19e>
	else if (person_cal_info->weight <= limit_vals[4][0]) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	785a      	ldrb	r2, [r3, #1]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	3308      	adds	r3, #8
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d80b      	bhi.n	800220e <calculateStepNum+0xe2>
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[4][1];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	885b      	ldrh	r3, [r3, #2]
 80021fa:	461a      	mov	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	3308      	adds	r3, #8
 8002200:	785b      	ldrb	r3, [r3, #1]
 8002202:	fb92 f3f3 	sdiv	r3, r2, r3
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	605a      	str	r2, [r3, #4]
}
 800220c:	e05d      	b.n	80022ca <calculateStepNum+0x19e>
	else if (person_cal_info->weight <= limit_vals[5][0]) {
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	785a      	ldrb	r2, [r3, #1]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	330a      	adds	r3, #10
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d80b      	bhi.n	8002234 <calculateStepNum+0x108>
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[5][1];
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	885b      	ldrh	r3, [r3, #2]
 8002220:	461a      	mov	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	330a      	adds	r3, #10
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	fb92 f3f3 	sdiv	r3, r2, r3
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	605a      	str	r2, [r3, #4]
}
 8002232:	e04a      	b.n	80022ca <calculateStepNum+0x19e>
	else if (person_cal_info->weight <= limit_vals[6][0]) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	785a      	ldrb	r2, [r3, #1]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	330c      	adds	r3, #12
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d80b      	bhi.n	800225a <calculateStepNum+0x12e>
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[6][1];
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	885b      	ldrh	r3, [r3, #2]
 8002246:	461a      	mov	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	330c      	adds	r3, #12
 800224c:	785b      	ldrb	r3, [r3, #1]
 800224e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	605a      	str	r2, [r3, #4]
}
 8002258:	e037      	b.n	80022ca <calculateStepNum+0x19e>
	else if (person_cal_info->weight <= limit_vals[7][0]) {
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	785a      	ldrb	r2, [r3, #1]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	330e      	adds	r3, #14
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d80b      	bhi.n	8002280 <calculateStepNum+0x154>
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[7][1];
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	885b      	ldrh	r3, [r3, #2]
 800226c:	461a      	mov	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	330e      	adds	r3, #14
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	fb92 f3f3 	sdiv	r3, r2, r3
 8002278:	461a      	mov	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	605a      	str	r2, [r3, #4]
}
 800227e:	e024      	b.n	80022ca <calculateStepNum+0x19e>
	else if (person_cal_info->weight <= limit_vals[8][0]) {
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	785a      	ldrb	r2, [r3, #1]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	3310      	adds	r3, #16
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d80b      	bhi.n	80022a6 <calculateStepNum+0x17a>
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[8][1];
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	885b      	ldrh	r3, [r3, #2]
 8002292:	461a      	mov	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	3310      	adds	r3, #16
 8002298:	785b      	ldrb	r3, [r3, #1]
 800229a:	fb92 f3f3 	sdiv	r3, r2, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	605a      	str	r2, [r3, #4]
}
 80022a4:	e011      	b.n	80022ca <calculateStepNum+0x19e>
	else if (person_cal_info->weight <= limit_vals[9][0]) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	785a      	ldrb	r2, [r3, #1]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	3312      	adds	r3, #18
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d80a      	bhi.n	80022ca <calculateStepNum+0x19e>
		person_cal_info->step_num = person_cal_info->calorie_amount / limit_vals[9][1];
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	885b      	ldrh	r3, [r3, #2]
 80022b8:	461a      	mov	r2, r3
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	3312      	adds	r3, #18
 80022be:	785b      	ldrb	r3, [r3, #1]
 80022c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	605a      	str	r2, [r3, #4]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	b21642c9 	.word	0xb21642c9

080022dc <chooseModeScreen>:
 *      Author: hizirov
 */

#include "states/choose_mode.h"

void chooseModeScreen() {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af04      	add	r7, sp, #16
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 80022e2:	2101      	movs	r1, #1
 80022e4:	4825      	ldr	r0, [pc, #148]	; (800237c <chooseModeScreen+0xa0>)
 80022e6:	f000 fd6d 	bl	8002dc4 <HAL_GPIO_ReadPin>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d012      	beq.n	8002316 <chooseModeScreen+0x3a>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 80022f0:	bf00      	nop
 80022f2:	2101      	movs	r1, #1
 80022f4:	4821      	ldr	r0, [pc, #132]	; (800237c <chooseModeScreen+0xa0>)
 80022f6:	f000 fd65 	bl	8002dc4 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f8      	bne.n	80022f2 <chooseModeScreen+0x16>
			;
		HAL_Delay(300);
 8002300:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002304:	f000 fad4 	bl	80028b0 <HAL_Delay>
		current_state = calorie_mode;
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <chooseModeScreen+0xa4>)
 800230a:	2203      	movs	r2, #3
 800230c:	701a      	strb	r2, [r3, #0]
		ST7735_FillScreen(BACKGROUND_COLOR_CHS_MODE);
 800230e:	2000      	movs	r0, #0
 8002310:	f7ff f89c 	bl	800144c <ST7735_FillScreen>
		return;
 8002314:	e02f      	b.n	8002376 <chooseModeScreen+0x9a>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 8002316:	2104      	movs	r1, #4
 8002318:	4818      	ldr	r0, [pc, #96]	; (800237c <chooseModeScreen+0xa0>)
 800231a:	f000 fd53 	bl	8002dc4 <HAL_GPIO_ReadPin>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00e      	beq.n	8002342 <chooseModeScreen+0x66>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8002324:	bf00      	nop
 8002326:	2104      	movs	r1, #4
 8002328:	4814      	ldr	r0, [pc, #80]	; (800237c <chooseModeScreen+0xa0>)
 800232a:	f000 fd4b 	bl	8002dc4 <HAL_GPIO_ReadPin>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f8      	bne.n	8002326 <chooseModeScreen+0x4a>
			;
		current_state = step_mode;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <chooseModeScreen+0xa4>)
 8002336:	2202      	movs	r2, #2
 8002338:	701a      	strb	r2, [r3, #0]
		ST7735_FillScreen(BACKGROUND_COLOR_CHS_MODE);
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff f886 	bl	800144c <ST7735_FillScreen>
		return;
 8002340:	e019      	b.n	8002376 <chooseModeScreen+0x9a>
	}
	ST7735_WriteString(0, 50, "  Step Mode (L) ", TEXT_FONT_CHS_MODE, TEXT_COLOR_CHS_MODE, TEXT_BACKGROUND_COLOR_CHS_MODE);
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <chooseModeScreen+0xa8>)
 8002344:	2200      	movs	r2, #0
 8002346:	9202      	str	r2, [sp, #8]
 8002348:	221f      	movs	r2, #31
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	9200      	str	r2, [sp, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <chooseModeScreen+0xac>)
 8002354:	2132      	movs	r1, #50	; 0x32
 8002356:	2000      	movs	r0, #0
 8002358:	f7fe ffb8 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 100, " Calorie Mode (R)", TEXT_FONT_CHS_MODE, TEXT_COLOR_CHS_MODE, TEXT_BACKGROUND_COLOR_CHS_MODE);
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <chooseModeScreen+0xa8>)
 800235e:	2200      	movs	r2, #0
 8002360:	9202      	str	r2, [sp, #8]
 8002362:	221f      	movs	r2, #31
 8002364:	9201      	str	r2, [sp, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a07      	ldr	r2, [pc, #28]	; (800238c <chooseModeScreen+0xb0>)
 800236e:	2164      	movs	r1, #100	; 0x64
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe ffab 	bl	80012cc <ST7735_WriteString>
}
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40020800 	.word	0x40020800
 8002380:	20000248 	.word	0x20000248
 8002384:	20000000 	.word	0x20000000
 8002388:	08007390 	.word	0x08007390
 800238c:	080073a4 	.word	0x080073a4

08002390 <mainScreen>:

extern I2C_HandleTypeDef hi2c1;
extern SPI_HandleTypeDef hspi3;
extern UART_HandleTypeDef huart6;

void mainScreen() {
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b09f      	sub	sp, #124	; 0x7c
 8002394:	af04      	add	r7, sp, #16
	AccData acc_3d;
	while (1)
	{
		HAL_StatusTypeDef is_mma8452q_read_ok = mma8452qRead(&hi2c1, 0x00, 7, acc_3d.acc_info);
 8002396:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800239a:	2207      	movs	r2, #7
 800239c:	2100      	movs	r1, #0
 800239e:	482f      	ldr	r0, [pc, #188]	; (800245c <mainScreen+0xcc>)
 80023a0:	f7fe fda4 	bl	8000eec <mma8452qRead>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (is_mma8452q_read_ok == HAL_OK) {
 80023aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f1      	bne.n	8002396 <mainScreen+0x6>
			getAccXYZ(&acc_3d);
 80023b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fdde 	bl	8000f78 <getAccXYZ>
			char message[50] = { 0 };
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2232      	movs	r2, #50	; 0x32
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f002 ff6c 	bl	80052a0 <memset>
			//sprintf(message, "acc_x: %d, acc_y: %d, acc_z: %d\r\n", acc_3d.x_acc, acc_3d.y_acc, acc_3d.z_acc);
			double x_acc = acc_3d.x_acc / 1024.;
 80023c8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f8b1 	bl	8000534 <__aeabi_i2d>
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	4b22      	ldr	r3, [pc, #136]	; (8002460 <mainScreen+0xd0>)
 80023d8:	f7fe fa40 	bl	800085c <__aeabi_ddiv>
 80023dc:	4603      	mov	r3, r0
 80023de:	460c      	mov	r4, r1
 80023e0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			double y_acc = acc_3d.y_acc / 1024.;
 80023e4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8a3 	bl	8000534 <__aeabi_i2d>
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <mainScreen+0xd0>)
 80023f4:	f7fe fa32 	bl	800085c <__aeabi_ddiv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			double z_acc = acc_3d.z_acc / 1024.;
 8002400:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f895 	bl	8000534 <__aeabi_i2d>
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <mainScreen+0xd0>)
 8002410:	f7fe fa24 	bl	800085c <__aeabi_ddiv>
 8002414:	4603      	mov	r3, r0
 8002416:	460c      	mov	r4, r1
 8002418:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			//double magnitude = sqrt((x_acc * x_acc) + (y_acc * y_acc) + (z_acc * z_acc));
			sprintf(message, " %.2f %.2f %.2f", x_acc, y_acc, z_acc);
 800241c:	1d38      	adds	r0, r7, #4
 800241e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002422:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002426:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800242a:	e9cd 3400 	strd	r3, r4, [sp]
 800242e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002432:	490c      	ldr	r1, [pc, #48]	; (8002464 <mainScreen+0xd4>)
 8002434:	f003 fb98 	bl	8005b68 <siprintf>
			ST7735_WriteString(0, 50, message, TEXT_FONT_MAIN_MODE, TEXT_COLOR_MAIN_MODE, TEXT_BACKGROUND_COLOR_MAIN_MODE);
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <mainScreen+0xd8>)
 800243a:	1d39      	adds	r1, r7, #4
 800243c:	2200      	movs	r2, #0
 800243e:	9202      	str	r2, [sp, #8]
 8002440:	221f      	movs	r2, #31
 8002442:	9201      	str	r2, [sp, #4]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	9200      	str	r2, [sp, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	460a      	mov	r2, r1
 800244c:	2132      	movs	r1, #50	; 0x32
 800244e:	2000      	movs	r0, #0
 8002450:	f7fe ff3c 	bl	80012cc <ST7735_WriteString>
				ST7735_WriteString(0, 100, "ok...", Font_7x10, ST7735_BLACK, ST7735_WHITE);
			}
			else {
				ST7735_WriteString(0, 100, "not ok...", Font_7x10, ST7735_BLACK, ST7735_WHITE);
			}*/
			HAL_Delay(100);
 8002454:	2064      	movs	r0, #100	; 0x64
 8002456:	f000 fa2b 	bl	80028b0 <HAL_Delay>
	{
 800245a:	e79c      	b.n	8002396 <mainScreen+0x6>
 800245c:	20000258 	.word	0x20000258
 8002460:	40900000 	.word	0x40900000
 8002464:	080073b8 	.word	0x080073b8
 8002468:	20000000 	.word	0x20000000

0800246c <stepScreen>:
#include "states/step_mode.h"
extern state current_state;
extern uint32_t step_num;


void stepScreen(uint32_t step_no) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	; 0x30
 8002470:	af04      	add	r7, sp, #16
 8002472:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8002474:	2101      	movs	r1, #1
 8002476:	4840      	ldr	r0, [pc, #256]	; (8002578 <stepScreen+0x10c>)
 8002478:	f000 fca4 	bl	8002dc4 <HAL_GPIO_ReadPin>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d012      	beq.n	80024a8 <stepScreen+0x3c>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8002482:	bf00      	nop
 8002484:	2101      	movs	r1, #1
 8002486:	483c      	ldr	r0, [pc, #240]	; (8002578 <stepScreen+0x10c>)
 8002488:	f000 fc9c 	bl	8002dc4 <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f8      	bne.n	8002484 <stepScreen+0x18>
			;
		HAL_Delay(300);
 8002492:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002496:	f000 fa0b 	bl	80028b0 <HAL_Delay>
		step_num += 1000;
 800249a:	4b38      	ldr	r3, [pc, #224]	; (800257c <stepScreen+0x110>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80024a2:	4a36      	ldr	r2, [pc, #216]	; (800257c <stepScreen+0x110>)
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e037      	b.n	8002518 <stepScreen+0xac>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 80024a8:	2102      	movs	r1, #2
 80024aa:	4833      	ldr	r0, [pc, #204]	; (8002578 <stepScreen+0x10c>)
 80024ac:	f000 fc8a 	bl	8002dc4 <HAL_GPIO_ReadPin>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d012      	beq.n	80024dc <stepScreen+0x70>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 80024b6:	bf00      	nop
 80024b8:	2104      	movs	r1, #4
 80024ba:	482f      	ldr	r0, [pc, #188]	; (8002578 <stepScreen+0x10c>)
 80024bc:	f000 fc82 	bl	8002dc4 <HAL_GPIO_ReadPin>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f8      	bne.n	80024b8 <stepScreen+0x4c>
				;
			HAL_Delay(300);
 80024c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024ca:	f000 f9f1 	bl	80028b0 <HAL_Delay>
			current_state = main_mode;
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <stepScreen+0x114>)
 80024d0:	2204      	movs	r2, #4
 80024d2:	701a      	strb	r2, [r3, #0]
			ST7735_FillScreen(BACKGROUND_COLOR_STP_MODE);
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7fe ffb9 	bl	800144c <ST7735_FillScreen>
 80024da:	e049      	b.n	8002570 <stepScreen+0x104>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && step_num > 1000) {
 80024dc:	2104      	movs	r1, #4
 80024de:	4826      	ldr	r0, [pc, #152]	; (8002578 <stepScreen+0x10c>)
 80024e0:	f000 fc70 	bl	8002dc4 <HAL_GPIO_ReadPin>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <stepScreen+0xac>
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <stepScreen+0x110>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024f2:	d911      	bls.n	8002518 <stepScreen+0xac>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 80024f4:	bf00      	nop
 80024f6:	2104      	movs	r1, #4
 80024f8:	481f      	ldr	r0, [pc, #124]	; (8002578 <stepScreen+0x10c>)
 80024fa:	f000 fc63 	bl	8002dc4 <HAL_GPIO_ReadPin>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f8      	bne.n	80024f6 <stepScreen+0x8a>
			;
		HAL_Delay(300);
 8002504:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002508:	f000 f9d2 	bl	80028b0 <HAL_Delay>
		step_num -= 1000;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <stepScreen+0x110>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <stepScreen+0x110>)
 8002516:	6013      	str	r3, [r2, #0]
	}

	char step_text[22] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002518:	f107 0308 	add.w	r3, r7, #8
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
 8002528:	829a      	strh	r2, [r3, #20]
	sprintf(step_text, "Step Number: %ld", step_no);
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4914      	ldr	r1, [pc, #80]	; (8002584 <stepScreen+0x118>)
 8002532:	4618      	mov	r0, r3
 8002534:	f003 fb18 	bl	8005b68 <siprintf>
	ST7735_WriteString(0, 40, step_text, TEXT_FONT_STP_MODE, TEXT_COLOR_STP_MODE, TEXT_BACKGROUND_COLOR_STP_MODE);
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <stepScreen+0x11c>)
 800253a:	f107 0108 	add.w	r1, r7, #8
 800253e:	2200      	movs	r2, #0
 8002540:	9202      	str	r2, [sp, #8]
 8002542:	221f      	movs	r2, #31
 8002544:	9201      	str	r2, [sp, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	9200      	str	r2, [sp, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	460a      	mov	r2, r1
 800254e:	2128      	movs	r1, #40	; 0x28
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe febb 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 100, "(L) : - \\/ + : (R)", TEXT_FONT_STP_MODE, TEXT_COLOR_STP_MODE, TEXT_BACKGROUND_COLOR_STP_MODE);
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <stepScreen+0x11c>)
 8002558:	2200      	movs	r2, #0
 800255a:	9202      	str	r2, [sp, #8]
 800255c:	221f      	movs	r2, #31
 800255e:	9201      	str	r2, [sp, #4]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	9200      	str	r2, [sp, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <stepScreen+0x120>)
 8002568:	2164      	movs	r1, #100	; 0x64
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe feae 	bl	80012cc <ST7735_WriteString>

}
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40020800 	.word	0x40020800
 800257c:	20000010 	.word	0x20000010
 8002580:	20000248 	.word	0x20000248
 8002584:	080073c8 	.word	0x080073c8
 8002588:	20000000 	.word	0x20000000
 800258c:	080073dc 	.word	0x080073dc

08002590 <welcomeScreen>:
extern state current_state;
/*
 * Fills opening screen in a fancy way:)
 * current_state : its value is changed here so that the next state can be executed.
 * */
void welcomeScreen() {
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b08f      	sub	sp, #60	; 0x3c
 8002594:	af04      	add	r7, sp, #16
	char text1[] = " Wrist Band ";
 8002596:	4b74      	ldr	r3, [pc, #464]	; (8002768 <welcomeScreen+0x1d8>)
 8002598:	f107 0410 	add.w	r4, r7, #16
 800259c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259e:	c407      	stmia	r4!, {r0, r1, r2}
 80025a0:	7023      	strb	r3, [r4, #0]
	char text2[] = "  Welcome ";
 80025a2:	4a72      	ldr	r2, [pc, #456]	; (800276c <welcomeScreen+0x1dc>)
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80025a8:	c303      	stmia	r3!, {r0, r1}
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	3302      	adds	r3, #2
 80025ae:	0c12      	lsrs	r2, r2, #16
 80025b0:	701a      	strb	r2, [r3, #0]
	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fe ff4a 	bl	800144c <ST7735_FillScreen>

	for (int i = 0; i < strlen(text1); ++i) {
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e020      	b.n	8002600 <welcomeScreen+0x70>
		text1[i] = '\0';
 80025be:	f107 0210 	add.w	r2, r7, #16
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	4413      	add	r3, r2
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
		ST7735_WriteString(0, 50, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 80025ca:	4b69      	ldr	r3, [pc, #420]	; (8002770 <welcomeScreen+0x1e0>)
 80025cc:	f107 0110 	add.w	r1, r7, #16
 80025d0:	2200      	movs	r2, #0
 80025d2:	9202      	str	r2, [sp, #8]
 80025d4:	221f      	movs	r2, #31
 80025d6:	9201      	str	r2, [sp, #4]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	9200      	str	r2, [sp, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	460a      	mov	r2, r1
 80025e0:	2132      	movs	r1, #50	; 0x32
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fe72 	bl	80012cc <ST7735_WriteString>
		HAL_Delay(15);
 80025e8:	200f      	movs	r0, #15
 80025ea:	f000 f961 	bl	80028b0 <HAL_Delay>
		strcpy(text1, " Wrist Band ");
 80025ee:	4b5e      	ldr	r3, [pc, #376]	; (8002768 <welcomeScreen+0x1d8>)
 80025f0:	f107 0410 	add.w	r4, r7, #16
 80025f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f6:	c407      	stmia	r4!, {r0, r1, r2}
 80025f8:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < strlen(text1); ++i) {
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	3301      	adds	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd fdeb 	bl	80001e0 <strlen>
 800260a:	4602      	mov	r2, r0
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	429a      	cmp	r2, r3
 8002610:	d8d5      	bhi.n	80025be <welcomeScreen+0x2e>
	}

	HAL_Delay(100);
 8002612:	2064      	movs	r0, #100	; 0x64
 8002614:	f000 f94c 	bl	80028b0 <HAL_Delay>

	for (int i = 0; i < strlen(text2); ++i) {
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	e020      	b.n	8002660 <welcomeScreen+0xd0>
		text2[i] = '\0';
 800261e:	1d3a      	adds	r2, r7, #4
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	4413      	add	r3, r2
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
		ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8002628:	4b51      	ldr	r3, [pc, #324]	; (8002770 <welcomeScreen+0x1e0>)
 800262a:	1d39      	adds	r1, r7, #4
 800262c:	2200      	movs	r2, #0
 800262e:	9202      	str	r2, [sp, #8]
 8002630:	221f      	movs	r2, #31
 8002632:	9201      	str	r2, [sp, #4]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	9200      	str	r2, [sp, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	460a      	mov	r2, r1
 800263c:	2150      	movs	r1, #80	; 0x50
 800263e:	2000      	movs	r0, #0
 8002640:	f7fe fe44 	bl	80012cc <ST7735_WriteString>
		HAL_Delay(15);
 8002644:	200f      	movs	r0, #15
 8002646:	f000 f933 	bl	80028b0 <HAL_Delay>
		strcpy(text2, "  Welcome ");
 800264a:	4a48      	ldr	r2, [pc, #288]	; (800276c <welcomeScreen+0x1dc>)
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002650:	c303      	stmia	r3!, {r0, r1}
 8002652:	801a      	strh	r2, [r3, #0]
 8002654:	3302      	adds	r3, #2
 8002656:	0c12      	lsrs	r2, r2, #16
 8002658:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < strlen(text2); ++i) {
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	3301      	adds	r3, #1
 800265e:	623b      	str	r3, [r7, #32]
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd fdbc 	bl	80001e0 <strlen>
 8002668:	4602      	mov	r2, r0
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8d6      	bhi.n	800261e <welcomeScreen+0x8e>
	}

	HAL_Delay(1000);
 8002670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002674:	f000 f91c 	bl	80028b0 <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe fee7 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 800267e:	4b3c      	ldr	r3, [pc, #240]	; (8002770 <welcomeScreen+0x1e0>)
 8002680:	f107 0110 	add.w	r1, r7, #16
 8002684:	2200      	movs	r2, #0
 8002686:	9202      	str	r2, [sp, #8]
 8002688:	221f      	movs	r2, #31
 800268a:	9201      	str	r2, [sp, #4]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	9200      	str	r2, [sp, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	460a      	mov	r2, r1
 8002694:	213c      	movs	r1, #60	; 0x3c
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe fe18 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <welcomeScreen+0x1e0>)
 800269e:	1d39      	adds	r1, r7, #4
 80026a0:	2200      	movs	r2, #0
 80026a2:	9202      	str	r2, [sp, #8]
 80026a4:	221f      	movs	r2, #31
 80026a6:	9201      	str	r2, [sp, #4]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	9200      	str	r2, [sp, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	460a      	mov	r2, r1
 80026b0:	2150      	movs	r1, #80	; 0x50
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7fe fe0a 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(100);
 80026b8:	2064      	movs	r0, #100	; 0x64
 80026ba:	f000 f8f9 	bl	80028b0 <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fe fec4 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 80026c4:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <welcomeScreen+0x1e0>)
 80026c6:	f107 0110 	add.w	r1, r7, #16
 80026ca:	2200      	movs	r2, #0
 80026cc:	9202      	str	r2, [sp, #8]
 80026ce:	221f      	movs	r2, #31
 80026d0:	9201      	str	r2, [sp, #4]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	9200      	str	r2, [sp, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	460a      	mov	r2, r1
 80026da:	213c      	movs	r1, #60	; 0x3c
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe fdf5 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <welcomeScreen+0x1e0>)
 80026e4:	1d39      	adds	r1, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	9202      	str	r2, [sp, #8]
 80026ea:	221f      	movs	r2, #31
 80026ec:	9201      	str	r2, [sp, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	9200      	str	r2, [sp, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	460a      	mov	r2, r1
 80026f6:	2150      	movs	r1, #80	; 0x50
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe fde7 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(100);
 80026fe:	2064      	movs	r0, #100	; 0x64
 8002700:	f000 f8d6 	bl	80028b0 <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe fea1 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <welcomeScreen+0x1e0>)
 800270c:	f107 0110 	add.w	r1, r7, #16
 8002710:	2200      	movs	r2, #0
 8002712:	9202      	str	r2, [sp, #8]
 8002714:	221f      	movs	r2, #31
 8002716:	9201      	str	r2, [sp, #4]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	9200      	str	r2, [sp, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	460a      	mov	r2, r1
 8002720:	213c      	movs	r1, #60	; 0x3c
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe fdd2 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <welcomeScreen+0x1e0>)
 800272a:	1d39      	adds	r1, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	9202      	str	r2, [sp, #8]
 8002730:	221f      	movs	r2, #31
 8002732:	9201      	str	r2, [sp, #4]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	9200      	str	r2, [sp, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	460a      	mov	r2, r1
 800273c:	2150      	movs	r1, #80	; 0x50
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe fdc4 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(100);
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	f000 f8b3 	bl	80028b0 <HAL_Delay>

	current_state = choose_mode;
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <welcomeScreen+0x1e4>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8002750:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002754:	f000 f8ac 	bl	80028b0 <HAL_Delay>
	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8002758:	2000      	movs	r0, #0
 800275a:	f7fe fe77 	bl	800144c <ST7735_FillScreen>

}
 800275e:	bf00      	nop
 8002760:	372c      	adds	r7, #44	; 0x2c
 8002762:	46bd      	mov	sp, r7
 8002764:	bd90      	pop	{r4, r7, pc}
 8002766:	bf00      	nop
 8002768:	080073f0 	.word	0x080073f0
 800276c:	08007400 	.word	0x08007400
 8002770:	20000008 	.word	0x20000008
 8002774:	20000248 	.word	0x20000248

08002778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800277c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800277e:	e003      	b.n	8002788 <LoopCopyDataInit>

08002780 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002782:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002784:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002786:	3104      	adds	r1, #4

08002788 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002788:	480b      	ldr	r0, [pc, #44]	; (80027b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800278c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800278e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002790:	d3f6      	bcc.n	8002780 <CopyDataInit>
  ldr  r2, =_sbss
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002794:	e002      	b.n	800279c <LoopFillZerobss>

08002796 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002796:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002798:	f842 3b04 	str.w	r3, [r2], #4

0800279c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800279e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027a0:	d3f9      	bcc.n	8002796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027a2:	f7ff f9af 	bl	8001b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a6:	f002 fd57 	bl	8005258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027aa:	f7fe fe61 	bl	8001470 <main>
  bx  lr    
 80027ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027b4:	08008bd0 	.word	0x08008bd0
  ldr  r0, =_sdata
 80027b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027bc:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 80027c0:	2000022c 	.word	0x2000022c
  ldr  r3, = _ebss
 80027c4:	2000034c 	.word	0x2000034c

080027c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c8:	e7fe      	b.n	80027c8 <ADC_IRQHandler>
	...

080027cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_Init+0x40>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0d      	ldr	r2, [pc, #52]	; (800280c <HAL_Init+0x40>)
 80027d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_Init+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0a      	ldr	r2, [pc, #40]	; (800280c <HAL_Init+0x40>)
 80027e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_Init+0x40>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <HAL_Init+0x40>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f4:	2003      	movs	r0, #3
 80027f6:	f000 f92f 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027fa:	2000      	movs	r0, #0
 80027fc:	f000 f808 	bl	8002810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002800:	f7ff f826 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023c00 	.word	0x40023c00

08002810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_InitTick+0x54>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_InitTick+0x58>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002826:	fbb3 f3f1 	udiv	r3, r3, r1
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f939 	bl	8002aa6 <HAL_SYSTICK_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e00e      	b.n	800285c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b0f      	cmp	r3, #15
 8002842:	d80a      	bhi.n	800285a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002844:	2200      	movs	r2, #0
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	f000 f90f 	bl	8002a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002850:	4a06      	ldr	r2, [pc, #24]	; (800286c <HAL_InitTick+0x5c>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000014 	.word	0x20000014
 8002868:	20000058 	.word	0x20000058
 800286c:	20000054 	.word	0x20000054

08002870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x20>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x24>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4413      	add	r3, r2
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_IncTick+0x24>)
 8002882:	6013      	str	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000058 	.word	0x20000058
 8002894:	20000344 	.word	0x20000344

08002898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return uwTick;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_GetTick+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000344 	.word	0x20000344

080028b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff ffee 	bl	8002898 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d005      	beq.n	80028d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_Delay+0x40>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028d6:	bf00      	nop
 80028d8:	f7ff ffde 	bl	8002898 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d8f7      	bhi.n	80028d8 <HAL_Delay+0x28>
  {
  }
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000058 	.word	0x20000058

080028f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800291c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	60d3      	str	r3, [r2, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <__NVIC_GetPriorityGrouping+0x18>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff47 	bl	80028f4 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff5c 	bl	800293c <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ffb0 	bl	8002a14 <SysTick_Config>
 8002ab4:	4603      	mov	r3, r0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e159      	b.n	8002d90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 8148 	bne.w	8002d8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d00b      	beq.n	8002b1a <HAL_GPIO_Init+0x5a>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d007      	beq.n	8002b1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b0e:	2b11      	cmp	r3, #17
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b12      	cmp	r3, #18
 8002b18:	d130      	bne.n	8002b7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b50:	2201      	movs	r2, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 0201 	and.w	r2, r3, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0xfc>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b12      	cmp	r3, #18
 8002bba:	d123      	bne.n	8002c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	08da      	lsrs	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3208      	adds	r2, #8
 8002bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	08da      	lsrs	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3208      	adds	r2, #8
 8002bfe:	69b9      	ldr	r1, [r7, #24]
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0203 	and.w	r2, r3, #3
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a2 	beq.w	8002d8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b56      	ldr	r3, [pc, #344]	; (8002da4 <HAL_GPIO_Init+0x2e4>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4a55      	ldr	r2, [pc, #340]	; (8002da4 <HAL_GPIO_Init+0x2e4>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_GPIO_Init+0x2e4>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c62:	4a51      	ldr	r2, [pc, #324]	; (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_GPIO_Init+0x2ec>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d019      	beq.n	8002cc2 <HAL_GPIO_Init+0x202>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a47      	ldr	r2, [pc, #284]	; (8002db0 <HAL_GPIO_Init+0x2f0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x1fe>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a46      	ldr	r2, [pc, #280]	; (8002db4 <HAL_GPIO_Init+0x2f4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00d      	beq.n	8002cba <HAL_GPIO_Init+0x1fa>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a45      	ldr	r2, [pc, #276]	; (8002db8 <HAL_GPIO_Init+0x2f8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x1f6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a44      	ldr	r2, [pc, #272]	; (8002dbc <HAL_GPIO_Init+0x2fc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_GPIO_Init+0x1f2>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd4:	4934      	ldr	r1, [pc, #208]	; (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_GPIO_Init+0x300>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d06:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <HAL_GPIO_Init+0x300>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <HAL_GPIO_Init+0x300>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d30:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <HAL_GPIO_Init+0x300>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_GPIO_Init+0x300>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_GPIO_Init+0x300>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_GPIO_Init+0x300>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <HAL_GPIO_Init+0x300>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f aea2 	bls.w	8002adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3724      	adds	r7, #36	; 0x24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40013800 	.word	0x40013800
 8002dac:	40020000 	.word	0x40020000
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020800 	.word	0x40020800
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40013c00 	.word	0x40013c00

08002dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	e001      	b.n	8002de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
 8002e00:	4613      	mov	r3, r2
 8002e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e04:	787b      	ldrb	r3, [r7, #1]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e10:	e003      	b.n	8002e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	041a      	lsls	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	619a      	str	r2, [r3, #24]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e11f      	b.n	800307a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe fd26 	bl	80018a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e8c:	f001 fba8 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8002e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4a7b      	ldr	r2, [pc, #492]	; (8003084 <HAL_I2C_Init+0x25c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d807      	bhi.n	8002eac <HAL_I2C_Init+0x84>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a7a      	ldr	r2, [pc, #488]	; (8003088 <HAL_I2C_Init+0x260>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bf94      	ite	ls
 8002ea4:	2301      	movls	r3, #1
 8002ea6:	2300      	movhi	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e006      	b.n	8002eba <HAL_I2C_Init+0x92>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a77      	ldr	r2, [pc, #476]	; (800308c <HAL_I2C_Init+0x264>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	bf94      	ite	ls
 8002eb4:	2301      	movls	r3, #1
 8002eb6:	2300      	movhi	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e0db      	b.n	800307a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a72      	ldr	r2, [pc, #456]	; (8003090 <HAL_I2C_Init+0x268>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	0c9b      	lsrs	r3, r3, #18
 8002ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a64      	ldr	r2, [pc, #400]	; (8003084 <HAL_I2C_Init+0x25c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d802      	bhi.n	8002efc <HAL_I2C_Init+0xd4>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	e009      	b.n	8002f10 <HAL_I2C_Init+0xe8>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	4a63      	ldr	r2, [pc, #396]	; (8003094 <HAL_I2C_Init+0x26c>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	099b      	lsrs	r3, r3, #6
 8002f0e:	3301      	adds	r3, #1
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4956      	ldr	r1, [pc, #344]	; (8003084 <HAL_I2C_Init+0x25c>)
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	d80d      	bhi.n	8002f4c <HAL_I2C_Init+0x124>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e59      	subs	r1, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	bf38      	it	cc
 8002f48:	2304      	movcc	r3, #4
 8002f4a:	e04f      	b.n	8002fec <HAL_I2C_Init+0x1c4>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d111      	bne.n	8002f78 <HAL_I2C_Init+0x150>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e58      	subs	r0, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e012      	b.n	8002f9e <HAL_I2C_Init+0x176>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	0099      	lsls	r1, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Init+0x17e>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e022      	b.n	8002fec <HAL_I2C_Init+0x1c4>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10e      	bne.n	8002fcc <HAL_I2C_Init+0x1a4>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1e58      	subs	r0, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	440b      	add	r3, r1
 8002fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fca:	e00f      	b.n	8002fec <HAL_I2C_Init+0x1c4>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6809      	ldr	r1, [r1, #0]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800301a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6911      	ldr	r1, [r2, #16]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	000186a0 	.word	0x000186a0
 8003088:	001e847f 	.word	0x001e847f
 800308c:	003d08ff 	.word	0x003d08ff
 8003090:	431bde83 	.word	0x431bde83
 8003094:	10624dd3 	.word	0x10624dd3

08003098 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	461a      	mov	r2, r3
 80030a4:	460b      	mov	r3, r1
 80030a6:	817b      	strh	r3, [r7, #10]
 80030a8:	4613      	mov	r3, r2
 80030aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ac:	f7ff fbf4 	bl	8002898 <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	f040 80e0 	bne.w	8003280 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2319      	movs	r3, #25
 80030c6:	2201      	movs	r2, #1
 80030c8:	4970      	ldr	r1, [pc, #448]	; (800328c <HAL_I2C_Master_Transmit+0x1f4>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fc70 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0d3      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_I2C_Master_Transmit+0x50>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0cc      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d007      	beq.n	800310e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800311c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2221      	movs	r2, #33	; 0x21
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2210      	movs	r2, #16
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	893a      	ldrh	r2, [r7, #8]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a50      	ldr	r2, [pc, #320]	; (8003290 <HAL_I2C_Master_Transmit+0x1f8>)
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003150:	8979      	ldrh	r1, [r7, #10]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6a3a      	ldr	r2, [r7, #32]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fac2 	bl	80036e0 <I2C_MasterRequestWrite>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e08d      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800317c:	e066      	b.n	800324c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	6a39      	ldr	r1, [r7, #32]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fcea 	bl	8003b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b04      	cmp	r3, #4
 8003194:	d107      	bne.n	80031a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06b      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d11b      	bne.n	8003220 <HAL_I2C_Master_Transmit+0x188>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	6a39      	ldr	r1, [r7, #32]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fcda 	bl	8003bde <I2C_WaitOnBTFFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00d      	beq.n	800324c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	2b04      	cmp	r3, #4
 8003236:	d107      	bne.n	8003248 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e01a      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d194      	bne.n	800317e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	00100002 	.word	0x00100002
 8003290:	ffff0000 	.word	0xffff0000

08003294 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	; 0x30
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	460b      	mov	r3, r1
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ae:	f7ff faf3 	bl	8002898 <HAL_GetTick>
 80032b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b20      	cmp	r3, #32
 80032be:	f040 8208 	bne.w	80036d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2319      	movs	r3, #25
 80032c8:	2201      	movs	r2, #1
 80032ca:	497b      	ldr	r1, [pc, #492]	; (80034b8 <HAL_I2C_Mem_Read+0x224>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fb6f 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
 80032da:	e1fb      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_I2C_Mem_Read+0x56>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e1f4      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d007      	beq.n	8003310 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2222      	movs	r2, #34	; 0x22
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a5b      	ldr	r2, [pc, #364]	; (80034bc <HAL_I2C_Mem_Read+0x228>)
 8003350:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003352:	88f8      	ldrh	r0, [r7, #6]
 8003354:	893a      	ldrh	r2, [r7, #8]
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4603      	mov	r3, r0
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fa3e 	bl	80037e4 <I2C_RequestMemoryRead>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e1b0      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	2b00      	cmp	r3, #0
 8003378:	d113      	bne.n	80033a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	623b      	str	r3, [r7, #32]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	623b      	str	r3, [r7, #32]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	623b      	str	r3, [r7, #32]
 800338e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e184      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d11b      	bne.n	80033e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e164      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d11b      	bne.n	8003422 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	e144      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003438:	e138      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343e:	2b03      	cmp	r3, #3
 8003440:	f200 80f1 	bhi.w	8003626 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	2b01      	cmp	r3, #1
 800344a:	d123      	bne.n	8003494 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fc05 	bl	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e139      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003492:	e10b      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	2b02      	cmp	r3, #2
 800349a:	d14e      	bne.n	800353a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	2200      	movs	r2, #0
 80034a4:	4906      	ldr	r1, [pc, #24]	; (80034c0 <HAL_I2C_Mem_Read+0x22c>)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fa82 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e10e      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
 80034b6:	bf00      	nop
 80034b8:	00100002 	.word	0x00100002
 80034bc:	ffff0000 	.word	0xffff0000
 80034c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003538:	e0b8      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	2200      	movs	r2, #0
 8003542:	4966      	ldr	r1, [pc, #408]	; (80036dc <HAL_I2C_Mem_Read+0x448>)
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fa33 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0bf      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	2200      	movs	r2, #0
 800359e:	494f      	ldr	r1, [pc, #316]	; (80036dc <HAL_I2C_Mem_Read+0x448>)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fa05 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e091      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003624:	e042      	b.n	80036ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fb18 	bl	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e04c      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b04      	cmp	r3, #4
 8003678:	d118      	bne.n	80036ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f47f aec2 	bne.w	800343a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3728      	adds	r7, #40	; 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	00010004 	.word	0x00010004

080036e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d006      	beq.n	800370a <I2C_MasterRequestWrite+0x2a>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d003      	beq.n	800370a <I2C_MasterRequestWrite+0x2a>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003708:	d108      	bne.n	800371c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e00b      	b.n	8003734 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	2b12      	cmp	r3, #18
 8003722:	d107      	bne.n	8003734 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003732:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f935 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00c      	beq.n	8003766 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e035      	b.n	80037d2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376e:	d108      	bne.n	8003782 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003770:	897b      	ldrh	r3, [r7, #10]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800377e:	611a      	str	r2, [r3, #16]
 8003780:	e01b      	b.n	80037ba <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	11db      	asrs	r3, r3, #7
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 0306 	and.w	r3, r3, #6
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f063 030f 	orn	r3, r3, #15
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	490f      	ldr	r1, [pc, #60]	; (80037dc <I2C_MasterRequestWrite+0xfc>)
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f95c 	bl	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e010      	b.n	80037d2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037b0:	897b      	ldrh	r3, [r7, #10]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4908      	ldr	r1, [pc, #32]	; (80037e0 <I2C_MasterRequestWrite+0x100>)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f94c 	bl	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	00010008 	.word	0x00010008
 80037e0:	00010002 	.word	0x00010002

080037e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	4608      	mov	r0, r1
 80037ee:	4611      	mov	r1, r2
 80037f0:	461a      	mov	r2, r3
 80037f2:	4603      	mov	r3, r0
 80037f4:	817b      	strh	r3, [r7, #10]
 80037f6:	460b      	mov	r3, r1
 80037f8:	813b      	strh	r3, [r7, #8]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800380c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	2200      	movs	r2, #0
 8003826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f8c0 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e0a9      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003850:	897b      	ldrh	r3, [r7, #10]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800385e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	6a3a      	ldr	r2, [r7, #32]
 8003864:	4951      	ldr	r1, [pc, #324]	; (80039ac <I2C_RequestMemoryRead+0x1c8>)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f8f9 	bl	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e096      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	6a39      	ldr	r1, [r7, #32]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f963 	bl	8003b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00d      	beq.n	80038b8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d107      	bne.n	80038b4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e075      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d105      	bne.n	80038ca <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038be:	893b      	ldrh	r3, [r7, #8]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	611a      	str	r2, [r3, #16]
 80038c8:	e021      	b.n	800390e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038ca:	893b      	ldrh	r3, [r7, #8]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038da:	6a39      	ldr	r1, [r7, #32]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f93d 	bl	8003b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d107      	bne.n	8003900 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e04f      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003904:	893b      	ldrh	r3, [r7, #8]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	6a39      	ldr	r1, [r7, #32]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f922 	bl	8003b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b04      	cmp	r3, #4
 8003924:	d107      	bne.n	8003936 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e034      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	2200      	movs	r2, #0
 8003952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f82a 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003976:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e013      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800397c:	897b      	ldrh	r3, [r7, #10]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	6a3a      	ldr	r2, [r7, #32]
 8003990:	4906      	ldr	r1, [pc, #24]	; (80039ac <I2C_RequestMemoryRead+0x1c8>)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f863 	bl	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	00010002 	.word	0x00010002

080039b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c0:	e025      	b.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d021      	beq.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fe ff65 	bl	8002898 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d116      	bne.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e023      	b.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d10d      	bne.n	8003a34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4013      	ands	r3, r2
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	e00c      	b.n	8003a4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d0b6      	beq.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a6c:	e051      	b.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7c:	d123      	bne.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f043 0204 	orr.w	r2, r3, #4
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e046      	b.n	8003b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d021      	beq.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fe fee3 	bl	8002898 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d116      	bne.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f043 0220 	orr.w	r2, r3, #32
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e020      	b.n	8003b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10c      	bne.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	43da      	mvns	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bf14      	ite	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	2300      	moveq	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e00b      	b.n	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d18d      	bne.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b68:	e02d      	b.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f8ce 	bl	8003d0c <I2C_IsAcknowledgeFailed>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e02d      	b.n	8003bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d021      	beq.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b82:	f7fe fe89 	bl	8002898 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d302      	bcc.n	8003b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d116      	bne.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f043 0220 	orr.w	r2, r3, #32
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e007      	b.n	8003bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	2b80      	cmp	r3, #128	; 0x80
 8003bd2:	d1ca      	bne.n	8003b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bea:	e02d      	b.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f88d 	bl	8003d0c <I2C_IsAcknowledgeFailed>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e02d      	b.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d021      	beq.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fe fe48 	bl	8002898 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e007      	b.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d1ca      	bne.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c6c:	e042      	b.n	8003cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d119      	bne.n	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0210 	mvn.w	r2, #16
 8003c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e029      	b.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb0:	f7fe fdf2 	bl	8002898 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d302      	bcc.n	8003cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d116      	bne.n	8003cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e007      	b.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d1b5      	bne.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d11b      	bne.n	8003d5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f043 0204 	orr.w	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e25b      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d075      	beq.n	8003e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d8a:	4ba3      	ldr	r3, [pc, #652]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d00c      	beq.n	8003db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d96:	4ba0      	ldr	r3, [pc, #640]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d112      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da2:	4b9d      	ldr	r3, [pc, #628]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dae:	d10b      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db0:	4b99      	ldr	r3, [pc, #612]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d05b      	beq.n	8003e74 <HAL_RCC_OscConfig+0x108>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d157      	bne.n	8003e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e236      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd0:	d106      	bne.n	8003de0 <HAL_RCC_OscConfig+0x74>
 8003dd2:	4b91      	ldr	r3, [pc, #580]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a90      	ldr	r2, [pc, #576]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	e01d      	b.n	8003e1c <HAL_RCC_OscConfig+0xb0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x98>
 8003dea:	4b8b      	ldr	r3, [pc, #556]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a8a      	ldr	r2, [pc, #552]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	4b88      	ldr	r3, [pc, #544]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a87      	ldr	r2, [pc, #540]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e00b      	b.n	8003e1c <HAL_RCC_OscConfig+0xb0>
 8003e04:	4b84      	ldr	r3, [pc, #528]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a83      	ldr	r2, [pc, #524]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	4b81      	ldr	r3, [pc, #516]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a80      	ldr	r2, [pc, #512]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d013      	beq.n	8003e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe fd38 	bl	8002898 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fe fd34 	bl	8002898 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1fb      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3e:	4b76      	ldr	r3, [pc, #472]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0xc0>
 8003e4a:	e014      	b.n	8003e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fd24 	bl	8002898 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fe fd20 	bl	8002898 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e1e7      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e66:	4b6c      	ldr	r3, [pc, #432]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0xe8>
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d063      	beq.n	8003f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e82:	4b65      	ldr	r3, [pc, #404]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8e:	4b62      	ldr	r3, [pc, #392]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d11c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9a:	4b5f      	ldr	r3, [pc, #380]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d116      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea6:	4b5c      	ldr	r3, [pc, #368]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_RCC_OscConfig+0x152>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e1bb      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebe:	4b56      	ldr	r3, [pc, #344]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4952      	ldr	r1, [pc, #328]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed2:	e03a      	b.n	8003f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003edc:	4b4f      	ldr	r3, [pc, #316]	; (800401c <HAL_RCC_OscConfig+0x2b0>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fcd9 	bl	8002898 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eea:	f7fe fcd5 	bl	8002898 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e19c      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efc:	4b46      	ldr	r3, [pc, #280]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f08:	4b43      	ldr	r3, [pc, #268]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4940      	ldr	r1, [pc, #256]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	600b      	str	r3, [r1, #0]
 8003f1c:	e015      	b.n	8003f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1e:	4b3f      	ldr	r3, [pc, #252]	; (800401c <HAL_RCC_OscConfig+0x2b0>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fe fcb8 	bl	8002898 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7fe fcb4 	bl	8002898 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e17b      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d030      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d016      	beq.n	8003f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5e:	4b30      	ldr	r3, [pc, #192]	; (8004020 <HAL_RCC_OscConfig+0x2b4>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f64:	f7fe fc98 	bl	8002898 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6c:	f7fe fc94 	bl	8002898 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e15b      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x200>
 8003f8a:	e015      	b.n	8003fb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8c:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCC_OscConfig+0x2b4>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f92:	f7fe fc81 	bl	8002898 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9a:	f7fe fc7d 	bl	8002898 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e144      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fac:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a0 	beq.w	8004106 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fca:	4b13      	ldr	r3, [pc, #76]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_OscConfig+0x2b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d121      	bne.n	8004046 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004002:	4b08      	ldr	r3, [pc, #32]	; (8004024 <HAL_RCC_OscConfig+0x2b8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a07      	ldr	r2, [pc, #28]	; (8004024 <HAL_RCC_OscConfig+0x2b8>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400e:	f7fe fc43 	bl	8002898 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	e011      	b.n	800403a <HAL_RCC_OscConfig+0x2ce>
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	42470000 	.word	0x42470000
 8004020:	42470e80 	.word	0x42470e80
 8004024:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004028:	f7fe fc36 	bl	8002898 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0fd      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403a:	4b81      	ldr	r3, [pc, #516]	; (8004240 <HAL_RCC_OscConfig+0x4d4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d106      	bne.n	800405c <HAL_RCC_OscConfig+0x2f0>
 800404e:	4b7d      	ldr	r3, [pc, #500]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a7c      	ldr	r2, [pc, #496]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6713      	str	r3, [r2, #112]	; 0x70
 800405a:	e01c      	b.n	8004096 <HAL_RCC_OscConfig+0x32a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b05      	cmp	r3, #5
 8004062:	d10c      	bne.n	800407e <HAL_RCC_OscConfig+0x312>
 8004064:	4b77      	ldr	r3, [pc, #476]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	4a76      	ldr	r2, [pc, #472]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	6713      	str	r3, [r2, #112]	; 0x70
 8004070:	4b74      	ldr	r3, [pc, #464]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4a73      	ldr	r2, [pc, #460]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	; 0x70
 800407c:	e00b      	b.n	8004096 <HAL_RCC_OscConfig+0x32a>
 800407e:	4b71      	ldr	r3, [pc, #452]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a70      	ldr	r2, [pc, #448]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
 800408a:	4b6e      	ldr	r3, [pc, #440]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	4a6d      	ldr	r2, [pc, #436]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d015      	beq.n	80040ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fe fbfb 	bl	8002898 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fe fbf7 	bl	8002898 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0bc      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040bc:	4b61      	ldr	r3, [pc, #388]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ee      	beq.n	80040a6 <HAL_RCC_OscConfig+0x33a>
 80040c8:	e014      	b.n	80040f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ca:	f7fe fbe5 	bl	8002898 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d0:	e00a      	b.n	80040e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f7fe fbe1 	bl	8002898 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0a6      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e8:	4b56      	ldr	r3, [pc, #344]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1ee      	bne.n	80040d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d105      	bne.n	8004106 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fa:	4b52      	ldr	r3, [pc, #328]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	4a51      	ldr	r2, [pc, #324]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004104:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8092 	beq.w	8004234 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004110:	4b4c      	ldr	r3, [pc, #304]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 030c 	and.w	r3, r3, #12
 8004118:	2b08      	cmp	r3, #8
 800411a:	d05c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d141      	bne.n	80041a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004124:	4b48      	ldr	r3, [pc, #288]	; (8004248 <HAL_RCC_OscConfig+0x4dc>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412a:	f7fe fbb5 	bl	8002898 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004132:	f7fe fbb1 	bl	8002898 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e078      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004144:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	019b      	lsls	r3, r3, #6
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	3b01      	subs	r3, #1
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	061b      	lsls	r3, r3, #24
 8004174:	4933      	ldr	r1, [pc, #204]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800417a:	4b33      	ldr	r3, [pc, #204]	; (8004248 <HAL_RCC_OscConfig+0x4dc>)
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe fb8a 	bl	8002898 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe fb86 	bl	8002898 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04d      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419a:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x41c>
 80041a6:	e045      	b.n	8004234 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <HAL_RCC_OscConfig+0x4dc>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fe fb73 	bl	8002898 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fe fb6f 	bl	8002898 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e036      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c8:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f0      	bne.n	80041b6 <HAL_RCC_OscConfig+0x44a>
 80041d4:	e02e      	b.n	8004234 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e029      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_RCC_OscConfig+0x4d8>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d11c      	bne.n	8004230 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d115      	bne.n	8004230 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800420a:	4013      	ands	r3, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004210:	4293      	cmp	r3, r2
 8004212:	d10d      	bne.n	8004230 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d106      	bne.n	8004230 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40007000 	.word	0x40007000
 8004244:	40023800 	.word	0x40023800
 8004248:	42470060 	.word	0x42470060

0800424c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0cc      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b68      	ldr	r3, [pc, #416]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d90c      	bls.n	8004288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b65      	ldr	r3, [pc, #404]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b63      	ldr	r3, [pc, #396]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0b8      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d020      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a0:	4b59      	ldr	r3, [pc, #356]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a58      	ldr	r2, [pc, #352]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b8:	4b53      	ldr	r3, [pc, #332]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a52      	ldr	r2, [pc, #328]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c4:	4b50      	ldr	r3, [pc, #320]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	494d      	ldr	r1, [pc, #308]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d044      	beq.n	800436c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d119      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e07f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d003      	beq.n	800430a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004306:	2b03      	cmp	r3, #3
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e06f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431a:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e067      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432a:	4b37      	ldr	r3, [pc, #220]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f023 0203 	bic.w	r2, r3, #3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4934      	ldr	r1, [pc, #208]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	4313      	orrs	r3, r2
 800433a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800433c:	f7fe faac 	bl	8002898 <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	e00a      	b.n	800435a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004344:	f7fe faa8 	bl	8002898 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e04f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 020c 	and.w	r2, r3, #12
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	429a      	cmp	r2, r3
 800436a:	d1eb      	bne.n	8004344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800436c:	4b25      	ldr	r3, [pc, #148]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d20c      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_RCC_ClockConfig+0x1b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e032      	b.n	80043fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a0:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4916      	ldr	r1, [pc, #88]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	490e      	ldr	r1, [pc, #56]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043d2:	f000 f821 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80043d6:	4601      	mov	r1, r0
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <HAL_RCC_ClockConfig+0x1c0>)
 80043e4:	5cd3      	ldrb	r3, [r2, r3]
 80043e6:	fa21 f303 	lsr.w	r3, r1, r3
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_ClockConfig+0x1c8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe fa0c 	bl	8002810 <HAL_InitTick>

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40023c00 	.word	0x40023c00
 8004408:	40023800 	.word	0x40023800
 800440c:	0800894c 	.word	0x0800894c
 8004410:	20000014 	.word	0x20000014
 8004414:	20000054 	.word	0x20000054

08004418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	2300      	movs	r3, #0
 8004428:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800442e:	4b63      	ldr	r3, [pc, #396]	; (80045bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b04      	cmp	r3, #4
 8004438:	d007      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x32>
 800443a:	2b08      	cmp	r3, #8
 800443c:	d008      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x38>
 800443e:	2b00      	cmp	r3, #0
 8004440:	f040 80b4 	bne.w	80045ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4b5e      	ldr	r3, [pc, #376]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004446:	60bb      	str	r3, [r7, #8]
       break;
 8004448:	e0b3      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800444a:	4b5e      	ldr	r3, [pc, #376]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800444c:	60bb      	str	r3, [r7, #8]
      break;
 800444e:	e0b0      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004450:	4b5a      	ldr	r3, [pc, #360]	; (80045bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004458:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800445a:	4b58      	ldr	r3, [pc, #352]	; (80045bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04a      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004466:	4b55      	ldr	r3, [pc, #340]	; (80045bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	099b      	lsrs	r3, r3, #6
 800446c:	f04f 0400 	mov.w	r4, #0
 8004470:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	ea03 0501 	and.w	r5, r3, r1
 800447c:	ea04 0602 	and.w	r6, r4, r2
 8004480:	4629      	mov	r1, r5
 8004482:	4632      	mov	r2, r6
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	0154      	lsls	r4, r2, #5
 800448e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004492:	014b      	lsls	r3, r1, #5
 8004494:	4619      	mov	r1, r3
 8004496:	4622      	mov	r2, r4
 8004498:	1b49      	subs	r1, r1, r5
 800449a:	eb62 0206 	sbc.w	r2, r2, r6
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	0194      	lsls	r4, r2, #6
 80044a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044ac:	018b      	lsls	r3, r1, #6
 80044ae:	1a5b      	subs	r3, r3, r1
 80044b0:	eb64 0402 	sbc.w	r4, r4, r2
 80044b4:	f04f 0100 	mov.w	r1, #0
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	00e2      	lsls	r2, r4, #3
 80044be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044c2:	00d9      	lsls	r1, r3, #3
 80044c4:	460b      	mov	r3, r1
 80044c6:	4614      	mov	r4, r2
 80044c8:	195b      	adds	r3, r3, r5
 80044ca:	eb44 0406 	adc.w	r4, r4, r6
 80044ce:	f04f 0100 	mov.w	r1, #0
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	0262      	lsls	r2, r4, #9
 80044d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80044dc:	0259      	lsls	r1, r3, #9
 80044de:	460b      	mov	r3, r1
 80044e0:	4614      	mov	r4, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	4621      	mov	r1, r4
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f04f 0400 	mov.w	r4, #0
 80044ec:	461a      	mov	r2, r3
 80044ee:	4623      	mov	r3, r4
 80044f0:	f7fc fb62 	bl	8000bb8 <__aeabi_uldivmod>
 80044f4:	4603      	mov	r3, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e049      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044fc:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	099b      	lsrs	r3, r3, #6
 8004502:	f04f 0400 	mov.w	r4, #0
 8004506:	f240 11ff 	movw	r1, #511	; 0x1ff
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	ea03 0501 	and.w	r5, r3, r1
 8004512:	ea04 0602 	and.w	r6, r4, r2
 8004516:	4629      	mov	r1, r5
 8004518:	4632      	mov	r2, r6
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	f04f 0400 	mov.w	r4, #0
 8004522:	0154      	lsls	r4, r2, #5
 8004524:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004528:	014b      	lsls	r3, r1, #5
 800452a:	4619      	mov	r1, r3
 800452c:	4622      	mov	r2, r4
 800452e:	1b49      	subs	r1, r1, r5
 8004530:	eb62 0206 	sbc.w	r2, r2, r6
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	f04f 0400 	mov.w	r4, #0
 800453c:	0194      	lsls	r4, r2, #6
 800453e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004542:	018b      	lsls	r3, r1, #6
 8004544:	1a5b      	subs	r3, r3, r1
 8004546:	eb64 0402 	sbc.w	r4, r4, r2
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	00e2      	lsls	r2, r4, #3
 8004554:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004558:	00d9      	lsls	r1, r3, #3
 800455a:	460b      	mov	r3, r1
 800455c:	4614      	mov	r4, r2
 800455e:	195b      	adds	r3, r3, r5
 8004560:	eb44 0406 	adc.w	r4, r4, r6
 8004564:	f04f 0100 	mov.w	r1, #0
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	02a2      	lsls	r2, r4, #10
 800456e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004572:	0299      	lsls	r1, r3, #10
 8004574:	460b      	mov	r3, r1
 8004576:	4614      	mov	r4, r2
 8004578:	4618      	mov	r0, r3
 800457a:	4621      	mov	r1, r4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f04f 0400 	mov.w	r4, #0
 8004582:	461a      	mov	r2, r3
 8004584:	4623      	mov	r3, r4
 8004586:	f7fc fb17 	bl	8000bb8 <__aeabi_uldivmod>
 800458a:	4603      	mov	r3, r0
 800458c:	460c      	mov	r4, r1
 800458e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	3301      	adds	r3, #1
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	60bb      	str	r3, [r7, #8]
      break;
 80045aa:	e002      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045ae:	60bb      	str	r3, [r7, #8]
      break;
 80045b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b2:	68bb      	ldr	r3, [r7, #8]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045bc:	40023800 	.word	0x40023800
 80045c0:	00f42400 	.word	0x00f42400
 80045c4:	007a1200 	.word	0x007a1200

080045c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000014 	.word	0x20000014

080045e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045e4:	f7ff fff0 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 80045e8:	4601      	mov	r1, r0
 80045ea:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	0a9b      	lsrs	r3, r3, #10
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	4a03      	ldr	r2, [pc, #12]	; (8004604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f6:	5cd3      	ldrb	r3, [r2, r3]
 80045f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40023800 	.word	0x40023800
 8004604:	0800895c 	.word	0x0800895c

08004608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800460c:	f7ff ffdc 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 8004610:	4601      	mov	r1, r0
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	0b5b      	lsrs	r3, r3, #13
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	4a03      	ldr	r2, [pc, #12]	; (800462c <HAL_RCC_GetPCLK2Freq+0x24>)
 800461e:	5cd3      	ldrb	r3, [r2, r3]
 8004620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004624:	4618      	mov	r0, r3
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40023800 	.word	0x40023800
 800462c:	0800895c 	.word	0x0800895c

08004630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e056      	b.n	80046f0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d106      	bne.n	8004662 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fd f967 	bl	8001930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004678:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	ea42 0103 	orr.w	r1, r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	f003 0104 	and.w	r1, r3, #4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_SPI_Transmit+0x22>
 8004716:	2302      	movs	r3, #2
 8004718:	e11e      	b.n	8004958 <HAL_SPI_Transmit+0x260>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004722:	f7fe f8b9 	bl	8002898 <HAL_GetTick>
 8004726:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d002      	beq.n	800473e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004738:	2302      	movs	r3, #2
 800473a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800473c:	e103      	b.n	8004946 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <HAL_SPI_Transmit+0x52>
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800474e:	e0fa      	b.n	8004946 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2203      	movs	r2, #3
 8004754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004796:	d107      	bne.n	80047a8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d007      	beq.n	80047c6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ce:	d14b      	bne.n	8004868 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_SPI_Transmit+0xe6>
 80047d8:	8afb      	ldrh	r3, [r7, #22]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d13e      	bne.n	800485c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	881a      	ldrh	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	1c9a      	adds	r2, r3, #2
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004802:	e02b      	b.n	800485c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d112      	bne.n	8004838 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	881a      	ldrh	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	1c9a      	adds	r2, r3, #2
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	86da      	strh	r2, [r3, #54]	; 0x36
 8004836:	e011      	b.n	800485c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004838:	f7fe f82e 	bl	8002898 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d803      	bhi.n	8004850 <HAL_SPI_Transmit+0x158>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d102      	bne.n	8004856 <HAL_SPI_Transmit+0x15e>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	77fb      	strb	r3, [r7, #31]
          goto error;
 800485a:	e074      	b.n	8004946 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1ce      	bne.n	8004804 <HAL_SPI_Transmit+0x10c>
 8004866:	e04c      	b.n	8004902 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_SPI_Transmit+0x17e>
 8004870:	8afb      	ldrh	r3, [r7, #22]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d140      	bne.n	80048f8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800489c:	e02c      	b.n	80048f8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d113      	bne.n	80048d4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	7812      	ldrb	r2, [r2, #0]
 80048b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80048d2:	e011      	b.n	80048f8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d4:	f7fd ffe0 	bl	8002898 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d803      	bhi.n	80048ec <HAL_SPI_Transmit+0x1f4>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d102      	bne.n	80048f2 <HAL_SPI_Transmit+0x1fa>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d102      	bne.n	80048f8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048f6:	e026      	b.n	8004946 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1cd      	bne.n	800489e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f894 	bl	8004a34 <SPI_EndRxTxTransaction>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	e000      	b.n	8004946 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004944:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004956:	7ffb      	ldrb	r3, [r7, #31]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004970:	e04c      	b.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d048      	beq.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800497a:	f7fd ff8d 	bl	8002898 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d902      	bls.n	8004990 <SPI_WaitFlagStateUntilTimeout+0x30>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d13d      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800499e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049a8:	d111      	bne.n	80049ce <SPI_WaitFlagStateUntilTimeout+0x6e>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b2:	d004      	beq.n	80049be <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049bc:	d107      	bne.n	80049ce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d6:	d10f      	bne.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e00f      	b.n	8004a2c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4013      	ands	r3, r2
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	79fb      	ldrb	r3, [r7, #7]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d1a3      	bne.n	8004972 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a40:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <SPI_EndRxTxTransaction+0x7c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <SPI_EndRxTxTransaction+0x80>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	0d5b      	lsrs	r3, r3, #21
 8004a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a50:	fb02 f303 	mul.w	r3, r2, r3
 8004a54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a5e:	d112      	bne.n	8004a86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2200      	movs	r2, #0
 8004a68:	2180      	movs	r1, #128	; 0x80
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7ff ff78 	bl	8004960 <SPI_WaitFlagStateUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d016      	beq.n	8004aa4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7a:	f043 0220 	orr.w	r2, r3, #32
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e00f      	b.n	8004aa6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9c:	2b80      	cmp	r3, #128	; 0x80
 8004a9e:	d0f2      	beq.n	8004a86 <SPI_EndRxTxTransaction+0x52>
 8004aa0:	e000      	b.n	8004aa4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004aa2:	bf00      	nop
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000014 	.word	0x20000014
 8004ab4:	165e9f81 	.word	0x165e9f81

08004ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e03f      	b.n	8004b4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc ff6e 	bl	80019c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	; 0x24
 8004ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f829 	bl	8004b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b96:	f023 030c 	bic.w	r3, r3, #12
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc2:	f040 818b 	bne.w	8004edc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4ac1      	ldr	r2, [pc, #772]	; (8004ed0 <UART_SetConfig+0x37c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d005      	beq.n	8004bdc <UART_SetConfig+0x88>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4abf      	ldr	r2, [pc, #764]	; (8004ed4 <UART_SetConfig+0x380>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	f040 80bd 	bne.w	8004d56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7ff fd14 	bl	8004608 <HAL_RCC_GetPCLK2Freq>
 8004be0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	461d      	mov	r5, r3
 8004be6:	f04f 0600 	mov.w	r6, #0
 8004bea:	46a8      	mov	r8, r5
 8004bec:	46b1      	mov	r9, r6
 8004bee:	eb18 0308 	adds.w	r3, r8, r8
 8004bf2:	eb49 0409 	adc.w	r4, r9, r9
 8004bf6:	4698      	mov	r8, r3
 8004bf8:	46a1      	mov	r9, r4
 8004bfa:	eb18 0805 	adds.w	r8, r8, r5
 8004bfe:	eb49 0906 	adc.w	r9, r9, r6
 8004c02:	f04f 0100 	mov.w	r1, #0
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c16:	4688      	mov	r8, r1
 8004c18:	4691      	mov	r9, r2
 8004c1a:	eb18 0005 	adds.w	r0, r8, r5
 8004c1e:	eb49 0106 	adc.w	r1, r9, r6
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	461d      	mov	r5, r3
 8004c28:	f04f 0600 	mov.w	r6, #0
 8004c2c:	196b      	adds	r3, r5, r5
 8004c2e:	eb46 0406 	adc.w	r4, r6, r6
 8004c32:	461a      	mov	r2, r3
 8004c34:	4623      	mov	r3, r4
 8004c36:	f7fb ffbf 	bl	8000bb8 <__aeabi_uldivmod>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	461a      	mov	r2, r3
 8004c40:	4ba5      	ldr	r3, [pc, #660]	; (8004ed8 <UART_SetConfig+0x384>)
 8004c42:	fba3 2302 	umull	r2, r3, r3, r2
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	461d      	mov	r5, r3
 8004c50:	f04f 0600 	mov.w	r6, #0
 8004c54:	46a9      	mov	r9, r5
 8004c56:	46b2      	mov	sl, r6
 8004c58:	eb19 0309 	adds.w	r3, r9, r9
 8004c5c:	eb4a 040a 	adc.w	r4, sl, sl
 8004c60:	4699      	mov	r9, r3
 8004c62:	46a2      	mov	sl, r4
 8004c64:	eb19 0905 	adds.w	r9, r9, r5
 8004c68:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c6c:	f04f 0100 	mov.w	r1, #0
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c80:	4689      	mov	r9, r1
 8004c82:	4692      	mov	sl, r2
 8004c84:	eb19 0005 	adds.w	r0, r9, r5
 8004c88:	eb4a 0106 	adc.w	r1, sl, r6
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	461d      	mov	r5, r3
 8004c92:	f04f 0600 	mov.w	r6, #0
 8004c96:	196b      	adds	r3, r5, r5
 8004c98:	eb46 0406 	adc.w	r4, r6, r6
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4623      	mov	r3, r4
 8004ca0:	f7fb ff8a 	bl	8000bb8 <__aeabi_uldivmod>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4b8b      	ldr	r3, [pc, #556]	; (8004ed8 <UART_SetConfig+0x384>)
 8004cac:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	2164      	movs	r1, #100	; 0x64
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	3332      	adds	r3, #50	; 0x32
 8004cbe:	4a86      	ldr	r2, [pc, #536]	; (8004ed8 <UART_SetConfig+0x384>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ccc:	4498      	add	r8, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	f04f 0600 	mov.w	r6, #0
 8004cd6:	46a9      	mov	r9, r5
 8004cd8:	46b2      	mov	sl, r6
 8004cda:	eb19 0309 	adds.w	r3, r9, r9
 8004cde:	eb4a 040a 	adc.w	r4, sl, sl
 8004ce2:	4699      	mov	r9, r3
 8004ce4:	46a2      	mov	sl, r4
 8004ce6:	eb19 0905 	adds.w	r9, r9, r5
 8004cea:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cee:	f04f 0100 	mov.w	r1, #0
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d02:	4689      	mov	r9, r1
 8004d04:	4692      	mov	sl, r2
 8004d06:	eb19 0005 	adds.w	r0, r9, r5
 8004d0a:	eb4a 0106 	adc.w	r1, sl, r6
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	461d      	mov	r5, r3
 8004d14:	f04f 0600 	mov.w	r6, #0
 8004d18:	196b      	adds	r3, r5, r5
 8004d1a:	eb46 0406 	adc.w	r4, r6, r6
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4623      	mov	r3, r4
 8004d22:	f7fb ff49 	bl	8000bb8 <__aeabi_uldivmod>
 8004d26:	4603      	mov	r3, r0
 8004d28:	460c      	mov	r4, r1
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4b6a      	ldr	r3, [pc, #424]	; (8004ed8 <UART_SetConfig+0x384>)
 8004d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2164      	movs	r1, #100	; 0x64
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	3332      	adds	r3, #50	; 0x32
 8004d40:	4a65      	ldr	r2, [pc, #404]	; (8004ed8 <UART_SetConfig+0x384>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	f003 0207 	and.w	r2, r3, #7
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4442      	add	r2, r8
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	e26f      	b.n	8005236 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d56:	f7ff fc43 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8004d5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	461d      	mov	r5, r3
 8004d60:	f04f 0600 	mov.w	r6, #0
 8004d64:	46a8      	mov	r8, r5
 8004d66:	46b1      	mov	r9, r6
 8004d68:	eb18 0308 	adds.w	r3, r8, r8
 8004d6c:	eb49 0409 	adc.w	r4, r9, r9
 8004d70:	4698      	mov	r8, r3
 8004d72:	46a1      	mov	r9, r4
 8004d74:	eb18 0805 	adds.w	r8, r8, r5
 8004d78:	eb49 0906 	adc.w	r9, r9, r6
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d90:	4688      	mov	r8, r1
 8004d92:	4691      	mov	r9, r2
 8004d94:	eb18 0005 	adds.w	r0, r8, r5
 8004d98:	eb49 0106 	adc.w	r1, r9, r6
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	461d      	mov	r5, r3
 8004da2:	f04f 0600 	mov.w	r6, #0
 8004da6:	196b      	adds	r3, r5, r5
 8004da8:	eb46 0406 	adc.w	r4, r6, r6
 8004dac:	461a      	mov	r2, r3
 8004dae:	4623      	mov	r3, r4
 8004db0:	f7fb ff02 	bl	8000bb8 <__aeabi_uldivmod>
 8004db4:	4603      	mov	r3, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <UART_SetConfig+0x384>)
 8004dbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	461d      	mov	r5, r3
 8004dca:	f04f 0600 	mov.w	r6, #0
 8004dce:	46a9      	mov	r9, r5
 8004dd0:	46b2      	mov	sl, r6
 8004dd2:	eb19 0309 	adds.w	r3, r9, r9
 8004dd6:	eb4a 040a 	adc.w	r4, sl, sl
 8004dda:	4699      	mov	r9, r3
 8004ddc:	46a2      	mov	sl, r4
 8004dde:	eb19 0905 	adds.w	r9, r9, r5
 8004de2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004df2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004df6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dfa:	4689      	mov	r9, r1
 8004dfc:	4692      	mov	sl, r2
 8004dfe:	eb19 0005 	adds.w	r0, r9, r5
 8004e02:	eb4a 0106 	adc.w	r1, sl, r6
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	461d      	mov	r5, r3
 8004e0c:	f04f 0600 	mov.w	r6, #0
 8004e10:	196b      	adds	r3, r5, r5
 8004e12:	eb46 0406 	adc.w	r4, r6, r6
 8004e16:	461a      	mov	r2, r3
 8004e18:	4623      	mov	r3, r4
 8004e1a:	f7fb fecd 	bl	8000bb8 <__aeabi_uldivmod>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	460c      	mov	r4, r1
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <UART_SetConfig+0x384>)
 8004e26:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	2164      	movs	r1, #100	; 0x64
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	3332      	adds	r3, #50	; 0x32
 8004e38:	4a27      	ldr	r2, [pc, #156]	; (8004ed8 <UART_SetConfig+0x384>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e46:	4498      	add	r8, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	461d      	mov	r5, r3
 8004e4c:	f04f 0600 	mov.w	r6, #0
 8004e50:	46a9      	mov	r9, r5
 8004e52:	46b2      	mov	sl, r6
 8004e54:	eb19 0309 	adds.w	r3, r9, r9
 8004e58:	eb4a 040a 	adc.w	r4, sl, sl
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	46a2      	mov	sl, r4
 8004e60:	eb19 0905 	adds.w	r9, r9, r5
 8004e64:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e68:	f04f 0100 	mov.w	r1, #0
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e7c:	4689      	mov	r9, r1
 8004e7e:	4692      	mov	sl, r2
 8004e80:	eb19 0005 	adds.w	r0, r9, r5
 8004e84:	eb4a 0106 	adc.w	r1, sl, r6
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	461d      	mov	r5, r3
 8004e8e:	f04f 0600 	mov.w	r6, #0
 8004e92:	196b      	adds	r3, r5, r5
 8004e94:	eb46 0406 	adc.w	r4, r6, r6
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	f7fb fe8c 	bl	8000bb8 <__aeabi_uldivmod>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <UART_SetConfig+0x384>)
 8004ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2164      	movs	r1, #100	; 0x64
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	3332      	adds	r3, #50	; 0x32
 8004eba:	4a07      	ldr	r2, [pc, #28]	; (8004ed8 <UART_SetConfig+0x384>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f003 0207 	and.w	r2, r3, #7
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4442      	add	r2, r8
 8004ecc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ece:	e1b2      	b.n	8005236 <UART_SetConfig+0x6e2>
 8004ed0:	40011000 	.word	0x40011000
 8004ed4:	40011400 	.word	0x40011400
 8004ed8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4ad7      	ldr	r2, [pc, #860]	; (8005240 <UART_SetConfig+0x6ec>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d005      	beq.n	8004ef2 <UART_SetConfig+0x39e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4ad6      	ldr	r2, [pc, #856]	; (8005244 <UART_SetConfig+0x6f0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	f040 80d1 	bne.w	8005094 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ef2:	f7ff fb89 	bl	8004608 <HAL_RCC_GetPCLK2Freq>
 8004ef6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	469a      	mov	sl, r3
 8004efc:	f04f 0b00 	mov.w	fp, #0
 8004f00:	46d0      	mov	r8, sl
 8004f02:	46d9      	mov	r9, fp
 8004f04:	eb18 0308 	adds.w	r3, r8, r8
 8004f08:	eb49 0409 	adc.w	r4, r9, r9
 8004f0c:	4698      	mov	r8, r3
 8004f0e:	46a1      	mov	r9, r4
 8004f10:	eb18 080a 	adds.w	r8, r8, sl
 8004f14:	eb49 090b 	adc.w	r9, r9, fp
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f2c:	4688      	mov	r8, r1
 8004f2e:	4691      	mov	r9, r2
 8004f30:	eb1a 0508 	adds.w	r5, sl, r8
 8004f34:	eb4b 0609 	adc.w	r6, fp, r9
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	f04f 0400 	mov.w	r4, #0
 8004f4a:	0094      	lsls	r4, r2, #2
 8004f4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f50:	008b      	lsls	r3, r1, #2
 8004f52:	461a      	mov	r2, r3
 8004f54:	4623      	mov	r3, r4
 8004f56:	4628      	mov	r0, r5
 8004f58:	4631      	mov	r1, r6
 8004f5a:	f7fb fe2d 	bl	8000bb8 <__aeabi_uldivmod>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	461a      	mov	r2, r3
 8004f64:	4bb8      	ldr	r3, [pc, #736]	; (8005248 <UART_SetConfig+0x6f4>)
 8004f66:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	469b      	mov	fp, r3
 8004f74:	f04f 0c00 	mov.w	ip, #0
 8004f78:	46d9      	mov	r9, fp
 8004f7a:	46e2      	mov	sl, ip
 8004f7c:	eb19 0309 	adds.w	r3, r9, r9
 8004f80:	eb4a 040a 	adc.w	r4, sl, sl
 8004f84:	4699      	mov	r9, r3
 8004f86:	46a2      	mov	sl, r4
 8004f88:	eb19 090b 	adds.w	r9, r9, fp
 8004f8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fa4:	4689      	mov	r9, r1
 8004fa6:	4692      	mov	sl, r2
 8004fa8:	eb1b 0509 	adds.w	r5, fp, r9
 8004fac:	eb4c 060a 	adc.w	r6, ip, sl
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	f04f 0400 	mov.w	r4, #0
 8004fc2:	0094      	lsls	r4, r2, #2
 8004fc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fc8:	008b      	lsls	r3, r1, #2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4623      	mov	r3, r4
 8004fce:	4628      	mov	r0, r5
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	f7fb fdf1 	bl	8000bb8 <__aeabi_uldivmod>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	460c      	mov	r4, r1
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4b9a      	ldr	r3, [pc, #616]	; (8005248 <UART_SetConfig+0x6f4>)
 8004fde:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2164      	movs	r1, #100	; 0x64
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	3332      	adds	r3, #50	; 0x32
 8004ff0:	4a95      	ldr	r2, [pc, #596]	; (8005248 <UART_SetConfig+0x6f4>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ffc:	4498      	add	r8, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	469b      	mov	fp, r3
 8005002:	f04f 0c00 	mov.w	ip, #0
 8005006:	46d9      	mov	r9, fp
 8005008:	46e2      	mov	sl, ip
 800500a:	eb19 0309 	adds.w	r3, r9, r9
 800500e:	eb4a 040a 	adc.w	r4, sl, sl
 8005012:	4699      	mov	r9, r3
 8005014:	46a2      	mov	sl, r4
 8005016:	eb19 090b 	adds.w	r9, r9, fp
 800501a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800502a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800502e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005032:	4689      	mov	r9, r1
 8005034:	4692      	mov	sl, r2
 8005036:	eb1b 0509 	adds.w	r5, fp, r9
 800503a:	eb4c 060a 	adc.w	r6, ip, sl
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4619      	mov	r1, r3
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	f04f 0400 	mov.w	r4, #0
 8005050:	0094      	lsls	r4, r2, #2
 8005052:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005056:	008b      	lsls	r3, r1, #2
 8005058:	461a      	mov	r2, r3
 800505a:	4623      	mov	r3, r4
 800505c:	4628      	mov	r0, r5
 800505e:	4631      	mov	r1, r6
 8005060:	f7fb fdaa 	bl	8000bb8 <__aeabi_uldivmod>
 8005064:	4603      	mov	r3, r0
 8005066:	460c      	mov	r4, r1
 8005068:	461a      	mov	r2, r3
 800506a:	4b77      	ldr	r3, [pc, #476]	; (8005248 <UART_SetConfig+0x6f4>)
 800506c:	fba3 1302 	umull	r1, r3, r3, r2
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	2164      	movs	r1, #100	; 0x64
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	3332      	adds	r3, #50	; 0x32
 800507e:	4a72      	ldr	r2, [pc, #456]	; (8005248 <UART_SetConfig+0x6f4>)
 8005080:	fba2 2303 	umull	r2, r3, r2, r3
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	f003 020f 	and.w	r2, r3, #15
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4442      	add	r2, r8
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	e0d0      	b.n	8005236 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7ff faa4 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005098:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	469a      	mov	sl, r3
 800509e:	f04f 0b00 	mov.w	fp, #0
 80050a2:	46d0      	mov	r8, sl
 80050a4:	46d9      	mov	r9, fp
 80050a6:	eb18 0308 	adds.w	r3, r8, r8
 80050aa:	eb49 0409 	adc.w	r4, r9, r9
 80050ae:	4698      	mov	r8, r3
 80050b0:	46a1      	mov	r9, r4
 80050b2:	eb18 080a 	adds.w	r8, r8, sl
 80050b6:	eb49 090b 	adc.w	r9, r9, fp
 80050ba:	f04f 0100 	mov.w	r1, #0
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050ce:	4688      	mov	r8, r1
 80050d0:	4691      	mov	r9, r2
 80050d2:	eb1a 0508 	adds.w	r5, sl, r8
 80050d6:	eb4b 0609 	adc.w	r6, fp, r9
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4619      	mov	r1, r3
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	f04f 0400 	mov.w	r4, #0
 80050ec:	0094      	lsls	r4, r2, #2
 80050ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050f2:	008b      	lsls	r3, r1, #2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	4628      	mov	r0, r5
 80050fa:	4631      	mov	r1, r6
 80050fc:	f7fb fd5c 	bl	8000bb8 <__aeabi_uldivmod>
 8005100:	4603      	mov	r3, r0
 8005102:	460c      	mov	r4, r1
 8005104:	461a      	mov	r2, r3
 8005106:	4b50      	ldr	r3, [pc, #320]	; (8005248 <UART_SetConfig+0x6f4>)
 8005108:	fba3 2302 	umull	r2, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	469b      	mov	fp, r3
 8005116:	f04f 0c00 	mov.w	ip, #0
 800511a:	46d9      	mov	r9, fp
 800511c:	46e2      	mov	sl, ip
 800511e:	eb19 0309 	adds.w	r3, r9, r9
 8005122:	eb4a 040a 	adc.w	r4, sl, sl
 8005126:	4699      	mov	r9, r3
 8005128:	46a2      	mov	sl, r4
 800512a:	eb19 090b 	adds.w	r9, r9, fp
 800512e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005132:	f04f 0100 	mov.w	r1, #0
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800513e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005146:	4689      	mov	r9, r1
 8005148:	4692      	mov	sl, r2
 800514a:	eb1b 0509 	adds.w	r5, fp, r9
 800514e:	eb4c 060a 	adc.w	r6, ip, sl
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	4619      	mov	r1, r3
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	f04f 0400 	mov.w	r4, #0
 8005164:	0094      	lsls	r4, r2, #2
 8005166:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800516a:	008b      	lsls	r3, r1, #2
 800516c:	461a      	mov	r2, r3
 800516e:	4623      	mov	r3, r4
 8005170:	4628      	mov	r0, r5
 8005172:	4631      	mov	r1, r6
 8005174:	f7fb fd20 	bl	8000bb8 <__aeabi_uldivmod>
 8005178:	4603      	mov	r3, r0
 800517a:	460c      	mov	r4, r1
 800517c:	461a      	mov	r2, r3
 800517e:	4b32      	ldr	r3, [pc, #200]	; (8005248 <UART_SetConfig+0x6f4>)
 8005180:	fba3 1302 	umull	r1, r3, r3, r2
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	2164      	movs	r1, #100	; 0x64
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	3332      	adds	r3, #50	; 0x32
 8005192:	4a2d      	ldr	r2, [pc, #180]	; (8005248 <UART_SetConfig+0x6f4>)
 8005194:	fba2 2303 	umull	r2, r3, r2, r3
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800519e:	4498      	add	r8, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	469b      	mov	fp, r3
 80051a4:	f04f 0c00 	mov.w	ip, #0
 80051a8:	46d9      	mov	r9, fp
 80051aa:	46e2      	mov	sl, ip
 80051ac:	eb19 0309 	adds.w	r3, r9, r9
 80051b0:	eb4a 040a 	adc.w	r4, sl, sl
 80051b4:	4699      	mov	r9, r3
 80051b6:	46a2      	mov	sl, r4
 80051b8:	eb19 090b 	adds.w	r9, r9, fp
 80051bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051c0:	f04f 0100 	mov.w	r1, #0
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051d4:	4689      	mov	r9, r1
 80051d6:	4692      	mov	sl, r2
 80051d8:	eb1b 0509 	adds.w	r5, fp, r9
 80051dc:	eb4c 060a 	adc.w	r6, ip, sl
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4619      	mov	r1, r3
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	f04f 0400 	mov.w	r4, #0
 80051f2:	0094      	lsls	r4, r2, #2
 80051f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051f8:	008b      	lsls	r3, r1, #2
 80051fa:	461a      	mov	r2, r3
 80051fc:	4623      	mov	r3, r4
 80051fe:	4628      	mov	r0, r5
 8005200:	4631      	mov	r1, r6
 8005202:	f7fb fcd9 	bl	8000bb8 <__aeabi_uldivmod>
 8005206:	4603      	mov	r3, r0
 8005208:	460c      	mov	r4, r1
 800520a:	461a      	mov	r2, r3
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <UART_SetConfig+0x6f4>)
 800520e:	fba3 1302 	umull	r1, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2164      	movs	r1, #100	; 0x64
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	3332      	adds	r3, #50	; 0x32
 8005220:	4a09      	ldr	r2, [pc, #36]	; (8005248 <UART_SetConfig+0x6f4>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	f003 020f 	and.w	r2, r3, #15
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4442      	add	r2, r8
 8005232:	609a      	str	r2, [r3, #8]
}
 8005234:	e7ff      	b.n	8005236 <UART_SetConfig+0x6e2>
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005240:	40011000 	.word	0x40011000
 8005244:	40011400 	.word	0x40011400
 8005248:	51eb851f 	.word	0x51eb851f

0800524c <__errno>:
 800524c:	4b01      	ldr	r3, [pc, #4]	; (8005254 <__errno+0x8>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	2000005c 	.word	0x2000005c

08005258 <__libc_init_array>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	4e0d      	ldr	r6, [pc, #52]	; (8005290 <__libc_init_array+0x38>)
 800525c:	4c0d      	ldr	r4, [pc, #52]	; (8005294 <__libc_init_array+0x3c>)
 800525e:	1ba4      	subs	r4, r4, r6
 8005260:	10a4      	asrs	r4, r4, #2
 8005262:	2500      	movs	r5, #0
 8005264:	42a5      	cmp	r5, r4
 8005266:	d109      	bne.n	800527c <__libc_init_array+0x24>
 8005268:	4e0b      	ldr	r6, [pc, #44]	; (8005298 <__libc_init_array+0x40>)
 800526a:	4c0c      	ldr	r4, [pc, #48]	; (800529c <__libc_init_array+0x44>)
 800526c:	f002 f85c 	bl	8007328 <_init>
 8005270:	1ba4      	subs	r4, r4, r6
 8005272:	10a4      	asrs	r4, r4, #2
 8005274:	2500      	movs	r5, #0
 8005276:	42a5      	cmp	r5, r4
 8005278:	d105      	bne.n	8005286 <__libc_init_array+0x2e>
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005280:	4798      	blx	r3
 8005282:	3501      	adds	r5, #1
 8005284:	e7ee      	b.n	8005264 <__libc_init_array+0xc>
 8005286:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800528a:	4798      	blx	r3
 800528c:	3501      	adds	r5, #1
 800528e:	e7f2      	b.n	8005276 <__libc_init_array+0x1e>
 8005290:	08008bc8 	.word	0x08008bc8
 8005294:	08008bc8 	.word	0x08008bc8
 8005298:	08008bc8 	.word	0x08008bc8
 800529c:	08008bcc 	.word	0x08008bcc

080052a0 <memset>:
 80052a0:	4402      	add	r2, r0
 80052a2:	4603      	mov	r3, r0
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d100      	bne.n	80052aa <memset+0xa>
 80052a8:	4770      	bx	lr
 80052aa:	f803 1b01 	strb.w	r1, [r3], #1
 80052ae:	e7f9      	b.n	80052a4 <memset+0x4>

080052b0 <__cvt>:
 80052b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b4:	ec55 4b10 	vmov	r4, r5, d0
 80052b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80052ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052be:	2d00      	cmp	r5, #0
 80052c0:	460e      	mov	r6, r1
 80052c2:	4691      	mov	r9, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	bfb8      	it	lt
 80052c8:	4622      	movlt	r2, r4
 80052ca:	462b      	mov	r3, r5
 80052cc:	f027 0720 	bic.w	r7, r7, #32
 80052d0:	bfbb      	ittet	lt
 80052d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052d6:	461d      	movlt	r5, r3
 80052d8:	2300      	movge	r3, #0
 80052da:	232d      	movlt	r3, #45	; 0x2d
 80052dc:	bfb8      	it	lt
 80052de:	4614      	movlt	r4, r2
 80052e0:	2f46      	cmp	r7, #70	; 0x46
 80052e2:	700b      	strb	r3, [r1, #0]
 80052e4:	d004      	beq.n	80052f0 <__cvt+0x40>
 80052e6:	2f45      	cmp	r7, #69	; 0x45
 80052e8:	d100      	bne.n	80052ec <__cvt+0x3c>
 80052ea:	3601      	adds	r6, #1
 80052ec:	2102      	movs	r1, #2
 80052ee:	e000      	b.n	80052f2 <__cvt+0x42>
 80052f0:	2103      	movs	r1, #3
 80052f2:	ab03      	add	r3, sp, #12
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	ab02      	add	r3, sp, #8
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	4632      	mov	r2, r6
 80052fc:	4653      	mov	r3, sl
 80052fe:	ec45 4b10 	vmov	d0, r4, r5
 8005302:	f000 fcdd 	bl	8005cc0 <_dtoa_r>
 8005306:	2f47      	cmp	r7, #71	; 0x47
 8005308:	4680      	mov	r8, r0
 800530a:	d102      	bne.n	8005312 <__cvt+0x62>
 800530c:	f019 0f01 	tst.w	r9, #1
 8005310:	d026      	beq.n	8005360 <__cvt+0xb0>
 8005312:	2f46      	cmp	r7, #70	; 0x46
 8005314:	eb08 0906 	add.w	r9, r8, r6
 8005318:	d111      	bne.n	800533e <__cvt+0x8e>
 800531a:	f898 3000 	ldrb.w	r3, [r8]
 800531e:	2b30      	cmp	r3, #48	; 0x30
 8005320:	d10a      	bne.n	8005338 <__cvt+0x88>
 8005322:	2200      	movs	r2, #0
 8005324:	2300      	movs	r3, #0
 8005326:	4620      	mov	r0, r4
 8005328:	4629      	mov	r1, r5
 800532a:	f7fb fbd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800532e:	b918      	cbnz	r0, 8005338 <__cvt+0x88>
 8005330:	f1c6 0601 	rsb	r6, r6, #1
 8005334:	f8ca 6000 	str.w	r6, [sl]
 8005338:	f8da 3000 	ldr.w	r3, [sl]
 800533c:	4499      	add	r9, r3
 800533e:	2200      	movs	r2, #0
 8005340:	2300      	movs	r3, #0
 8005342:	4620      	mov	r0, r4
 8005344:	4629      	mov	r1, r5
 8005346:	f7fb fbc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800534a:	b938      	cbnz	r0, 800535c <__cvt+0xac>
 800534c:	2230      	movs	r2, #48	; 0x30
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	454b      	cmp	r3, r9
 8005352:	d205      	bcs.n	8005360 <__cvt+0xb0>
 8005354:	1c59      	adds	r1, r3, #1
 8005356:	9103      	str	r1, [sp, #12]
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	e7f8      	b.n	800534e <__cvt+0x9e>
 800535c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005364:	eba3 0308 	sub.w	r3, r3, r8
 8005368:	4640      	mov	r0, r8
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	b004      	add	sp, #16
 800536e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005372 <__exponent>:
 8005372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005374:	2900      	cmp	r1, #0
 8005376:	4604      	mov	r4, r0
 8005378:	bfba      	itte	lt
 800537a:	4249      	neglt	r1, r1
 800537c:	232d      	movlt	r3, #45	; 0x2d
 800537e:	232b      	movge	r3, #43	; 0x2b
 8005380:	2909      	cmp	r1, #9
 8005382:	f804 2b02 	strb.w	r2, [r4], #2
 8005386:	7043      	strb	r3, [r0, #1]
 8005388:	dd20      	ble.n	80053cc <__exponent+0x5a>
 800538a:	f10d 0307 	add.w	r3, sp, #7
 800538e:	461f      	mov	r7, r3
 8005390:	260a      	movs	r6, #10
 8005392:	fb91 f5f6 	sdiv	r5, r1, r6
 8005396:	fb06 1115 	mls	r1, r6, r5, r1
 800539a:	3130      	adds	r1, #48	; 0x30
 800539c:	2d09      	cmp	r5, #9
 800539e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053a2:	f103 32ff 	add.w	r2, r3, #4294967295
 80053a6:	4629      	mov	r1, r5
 80053a8:	dc09      	bgt.n	80053be <__exponent+0x4c>
 80053aa:	3130      	adds	r1, #48	; 0x30
 80053ac:	3b02      	subs	r3, #2
 80053ae:	f802 1c01 	strb.w	r1, [r2, #-1]
 80053b2:	42bb      	cmp	r3, r7
 80053b4:	4622      	mov	r2, r4
 80053b6:	d304      	bcc.n	80053c2 <__exponent+0x50>
 80053b8:	1a10      	subs	r0, r2, r0
 80053ba:	b003      	add	sp, #12
 80053bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053be:	4613      	mov	r3, r2
 80053c0:	e7e7      	b.n	8005392 <__exponent+0x20>
 80053c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053c6:	f804 2b01 	strb.w	r2, [r4], #1
 80053ca:	e7f2      	b.n	80053b2 <__exponent+0x40>
 80053cc:	2330      	movs	r3, #48	; 0x30
 80053ce:	4419      	add	r1, r3
 80053d0:	7083      	strb	r3, [r0, #2]
 80053d2:	1d02      	adds	r2, r0, #4
 80053d4:	70c1      	strb	r1, [r0, #3]
 80053d6:	e7ef      	b.n	80053b8 <__exponent+0x46>

080053d8 <_printf_float>:
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	b08d      	sub	sp, #52	; 0x34
 80053de:	460c      	mov	r4, r1
 80053e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80053e4:	4616      	mov	r6, r2
 80053e6:	461f      	mov	r7, r3
 80053e8:	4605      	mov	r5, r0
 80053ea:	f001 fa21 	bl	8006830 <_localeconv_r>
 80053ee:	6803      	ldr	r3, [r0, #0]
 80053f0:	9304      	str	r3, [sp, #16]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fa fef4 	bl	80001e0 <strlen>
 80053f8:	2300      	movs	r3, #0
 80053fa:	930a      	str	r3, [sp, #40]	; 0x28
 80053fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005400:	9005      	str	r0, [sp, #20]
 8005402:	3307      	adds	r3, #7
 8005404:	f023 0307 	bic.w	r3, r3, #7
 8005408:	f103 0208 	add.w	r2, r3, #8
 800540c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005410:	f8d4 b000 	ldr.w	fp, [r4]
 8005414:	f8c8 2000 	str.w	r2, [r8]
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005420:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005424:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005428:	9307      	str	r3, [sp, #28]
 800542a:	f8cd 8018 	str.w	r8, [sp, #24]
 800542e:	f04f 32ff 	mov.w	r2, #4294967295
 8005432:	4ba7      	ldr	r3, [pc, #668]	; (80056d0 <_printf_float+0x2f8>)
 8005434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005438:	f7fb fb80 	bl	8000b3c <__aeabi_dcmpun>
 800543c:	bb70      	cbnz	r0, 800549c <_printf_float+0xc4>
 800543e:	f04f 32ff 	mov.w	r2, #4294967295
 8005442:	4ba3      	ldr	r3, [pc, #652]	; (80056d0 <_printf_float+0x2f8>)
 8005444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005448:	f7fb fb5a 	bl	8000b00 <__aeabi_dcmple>
 800544c:	bb30      	cbnz	r0, 800549c <_printf_float+0xc4>
 800544e:	2200      	movs	r2, #0
 8005450:	2300      	movs	r3, #0
 8005452:	4640      	mov	r0, r8
 8005454:	4649      	mov	r1, r9
 8005456:	f7fb fb49 	bl	8000aec <__aeabi_dcmplt>
 800545a:	b110      	cbz	r0, 8005462 <_printf_float+0x8a>
 800545c:	232d      	movs	r3, #45	; 0x2d
 800545e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005462:	4a9c      	ldr	r2, [pc, #624]	; (80056d4 <_printf_float+0x2fc>)
 8005464:	4b9c      	ldr	r3, [pc, #624]	; (80056d8 <_printf_float+0x300>)
 8005466:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800546a:	bf8c      	ite	hi
 800546c:	4690      	movhi	r8, r2
 800546e:	4698      	movls	r8, r3
 8005470:	2303      	movs	r3, #3
 8005472:	f02b 0204 	bic.w	r2, fp, #4
 8005476:	6123      	str	r3, [r4, #16]
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	f04f 0900 	mov.w	r9, #0
 800547e:	9700      	str	r7, [sp, #0]
 8005480:	4633      	mov	r3, r6
 8005482:	aa0b      	add	r2, sp, #44	; 0x2c
 8005484:	4621      	mov	r1, r4
 8005486:	4628      	mov	r0, r5
 8005488:	f000 f9e6 	bl	8005858 <_printf_common>
 800548c:	3001      	adds	r0, #1
 800548e:	f040 808d 	bne.w	80055ac <_printf_float+0x1d4>
 8005492:	f04f 30ff 	mov.w	r0, #4294967295
 8005496:	b00d      	add	sp, #52	; 0x34
 8005498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549c:	4642      	mov	r2, r8
 800549e:	464b      	mov	r3, r9
 80054a0:	4640      	mov	r0, r8
 80054a2:	4649      	mov	r1, r9
 80054a4:	f7fb fb4a 	bl	8000b3c <__aeabi_dcmpun>
 80054a8:	b110      	cbz	r0, 80054b0 <_printf_float+0xd8>
 80054aa:	4a8c      	ldr	r2, [pc, #560]	; (80056dc <_printf_float+0x304>)
 80054ac:	4b8c      	ldr	r3, [pc, #560]	; (80056e0 <_printf_float+0x308>)
 80054ae:	e7da      	b.n	8005466 <_printf_float+0x8e>
 80054b0:	6861      	ldr	r1, [r4, #4]
 80054b2:	1c4b      	adds	r3, r1, #1
 80054b4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80054b8:	a80a      	add	r0, sp, #40	; 0x28
 80054ba:	d13e      	bne.n	800553a <_printf_float+0x162>
 80054bc:	2306      	movs	r3, #6
 80054be:	6063      	str	r3, [r4, #4]
 80054c0:	2300      	movs	r3, #0
 80054c2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80054c6:	ab09      	add	r3, sp, #36	; 0x24
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	ec49 8b10 	vmov	d0, r8, r9
 80054ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054d2:	6022      	str	r2, [r4, #0]
 80054d4:	f8cd a004 	str.w	sl, [sp, #4]
 80054d8:	6861      	ldr	r1, [r4, #4]
 80054da:	4628      	mov	r0, r5
 80054dc:	f7ff fee8 	bl	80052b0 <__cvt>
 80054e0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80054e4:	2b47      	cmp	r3, #71	; 0x47
 80054e6:	4680      	mov	r8, r0
 80054e8:	d109      	bne.n	80054fe <_printf_float+0x126>
 80054ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ec:	1cd8      	adds	r0, r3, #3
 80054ee:	db02      	blt.n	80054f6 <_printf_float+0x11e>
 80054f0:	6862      	ldr	r2, [r4, #4]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	dd47      	ble.n	8005586 <_printf_float+0x1ae>
 80054f6:	f1aa 0a02 	sub.w	sl, sl, #2
 80054fa:	fa5f fa8a 	uxtb.w	sl, sl
 80054fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005504:	d824      	bhi.n	8005550 <_printf_float+0x178>
 8005506:	3901      	subs	r1, #1
 8005508:	4652      	mov	r2, sl
 800550a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800550e:	9109      	str	r1, [sp, #36]	; 0x24
 8005510:	f7ff ff2f 	bl	8005372 <__exponent>
 8005514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005516:	1813      	adds	r3, r2, r0
 8005518:	2a01      	cmp	r2, #1
 800551a:	4681      	mov	r9, r0
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	dc02      	bgt.n	8005526 <_printf_float+0x14e>
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	07d1      	lsls	r1, r2, #31
 8005524:	d501      	bpl.n	800552a <_printf_float+0x152>
 8005526:	3301      	adds	r3, #1
 8005528:	6123      	str	r3, [r4, #16]
 800552a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0a5      	beq.n	800547e <_printf_float+0xa6>
 8005532:	232d      	movs	r3, #45	; 0x2d
 8005534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005538:	e7a1      	b.n	800547e <_printf_float+0xa6>
 800553a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800553e:	f000 8177 	beq.w	8005830 <_printf_float+0x458>
 8005542:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005546:	d1bb      	bne.n	80054c0 <_printf_float+0xe8>
 8005548:	2900      	cmp	r1, #0
 800554a:	d1b9      	bne.n	80054c0 <_printf_float+0xe8>
 800554c:	2301      	movs	r3, #1
 800554e:	e7b6      	b.n	80054be <_printf_float+0xe6>
 8005550:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005554:	d119      	bne.n	800558a <_printf_float+0x1b2>
 8005556:	2900      	cmp	r1, #0
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	dd0c      	ble.n	8005576 <_printf_float+0x19e>
 800555c:	6121      	str	r1, [r4, #16]
 800555e:	b913      	cbnz	r3, 8005566 <_printf_float+0x18e>
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	07d2      	lsls	r2, r2, #31
 8005564:	d502      	bpl.n	800556c <_printf_float+0x194>
 8005566:	3301      	adds	r3, #1
 8005568:	440b      	add	r3, r1
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800556e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005570:	f04f 0900 	mov.w	r9, #0
 8005574:	e7d9      	b.n	800552a <_printf_float+0x152>
 8005576:	b913      	cbnz	r3, 800557e <_printf_float+0x1a6>
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	07d0      	lsls	r0, r2, #31
 800557c:	d501      	bpl.n	8005582 <_printf_float+0x1aa>
 800557e:	3302      	adds	r3, #2
 8005580:	e7f3      	b.n	800556a <_printf_float+0x192>
 8005582:	2301      	movs	r3, #1
 8005584:	e7f1      	b.n	800556a <_printf_float+0x192>
 8005586:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800558a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800558e:	4293      	cmp	r3, r2
 8005590:	db05      	blt.n	800559e <_printf_float+0x1c6>
 8005592:	6822      	ldr	r2, [r4, #0]
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	07d1      	lsls	r1, r2, #31
 8005598:	d5e8      	bpl.n	800556c <_printf_float+0x194>
 800559a:	3301      	adds	r3, #1
 800559c:	e7e5      	b.n	800556a <_printf_float+0x192>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bfd4      	ite	le
 80055a2:	f1c3 0302 	rsble	r3, r3, #2
 80055a6:	2301      	movgt	r3, #1
 80055a8:	4413      	add	r3, r2
 80055aa:	e7de      	b.n	800556a <_printf_float+0x192>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	055a      	lsls	r2, r3, #21
 80055b0:	d407      	bmi.n	80055c2 <_printf_float+0x1ea>
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	4642      	mov	r2, r8
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b8      	blx	r7
 80055bc:	3001      	adds	r0, #1
 80055be:	d12b      	bne.n	8005618 <_printf_float+0x240>
 80055c0:	e767      	b.n	8005492 <_printf_float+0xba>
 80055c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80055c6:	f240 80dc 	bls.w	8005782 <_printf_float+0x3aa>
 80055ca:	2200      	movs	r2, #0
 80055cc:	2300      	movs	r3, #0
 80055ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055d2:	f7fb fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d033      	beq.n	8005642 <_printf_float+0x26a>
 80055da:	2301      	movs	r3, #1
 80055dc:	4a41      	ldr	r2, [pc, #260]	; (80056e4 <_printf_float+0x30c>)
 80055de:	4631      	mov	r1, r6
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b8      	blx	r7
 80055e4:	3001      	adds	r0, #1
 80055e6:	f43f af54 	beq.w	8005492 <_printf_float+0xba>
 80055ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055ee:	429a      	cmp	r2, r3
 80055f0:	db02      	blt.n	80055f8 <_printf_float+0x220>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	07d8      	lsls	r0, r3, #31
 80055f6:	d50f      	bpl.n	8005618 <_printf_float+0x240>
 80055f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055fc:	4631      	mov	r1, r6
 80055fe:	4628      	mov	r0, r5
 8005600:	47b8      	blx	r7
 8005602:	3001      	adds	r0, #1
 8005604:	f43f af45 	beq.w	8005492 <_printf_float+0xba>
 8005608:	f04f 0800 	mov.w	r8, #0
 800560c:	f104 091a 	add.w	r9, r4, #26
 8005610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005612:	3b01      	subs	r3, #1
 8005614:	4543      	cmp	r3, r8
 8005616:	dc09      	bgt.n	800562c <_printf_float+0x254>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	079b      	lsls	r3, r3, #30
 800561c:	f100 8103 	bmi.w	8005826 <_printf_float+0x44e>
 8005620:	68e0      	ldr	r0, [r4, #12]
 8005622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005624:	4298      	cmp	r0, r3
 8005626:	bfb8      	it	lt
 8005628:	4618      	movlt	r0, r3
 800562a:	e734      	b.n	8005496 <_printf_float+0xbe>
 800562c:	2301      	movs	r3, #1
 800562e:	464a      	mov	r2, r9
 8005630:	4631      	mov	r1, r6
 8005632:	4628      	mov	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	3001      	adds	r0, #1
 8005638:	f43f af2b 	beq.w	8005492 <_printf_float+0xba>
 800563c:	f108 0801 	add.w	r8, r8, #1
 8005640:	e7e6      	b.n	8005610 <_printf_float+0x238>
 8005642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	dc2b      	bgt.n	80056a0 <_printf_float+0x2c8>
 8005648:	2301      	movs	r3, #1
 800564a:	4a26      	ldr	r2, [pc, #152]	; (80056e4 <_printf_float+0x30c>)
 800564c:	4631      	mov	r1, r6
 800564e:	4628      	mov	r0, r5
 8005650:	47b8      	blx	r7
 8005652:	3001      	adds	r0, #1
 8005654:	f43f af1d 	beq.w	8005492 <_printf_float+0xba>
 8005658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565a:	b923      	cbnz	r3, 8005666 <_printf_float+0x28e>
 800565c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800565e:	b913      	cbnz	r3, 8005666 <_printf_float+0x28e>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	07d9      	lsls	r1, r3, #31
 8005664:	d5d8      	bpl.n	8005618 <_printf_float+0x240>
 8005666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	f43f af0e 	beq.w	8005492 <_printf_float+0xba>
 8005676:	f04f 0900 	mov.w	r9, #0
 800567a:	f104 0a1a 	add.w	sl, r4, #26
 800567e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005680:	425b      	negs	r3, r3
 8005682:	454b      	cmp	r3, r9
 8005684:	dc01      	bgt.n	800568a <_printf_float+0x2b2>
 8005686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005688:	e794      	b.n	80055b4 <_printf_float+0x1dc>
 800568a:	2301      	movs	r3, #1
 800568c:	4652      	mov	r2, sl
 800568e:	4631      	mov	r1, r6
 8005690:	4628      	mov	r0, r5
 8005692:	47b8      	blx	r7
 8005694:	3001      	adds	r0, #1
 8005696:	f43f aefc 	beq.w	8005492 <_printf_float+0xba>
 800569a:	f109 0901 	add.w	r9, r9, #1
 800569e:	e7ee      	b.n	800567e <_printf_float+0x2a6>
 80056a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056a4:	429a      	cmp	r2, r3
 80056a6:	bfa8      	it	ge
 80056a8:	461a      	movge	r2, r3
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	4691      	mov	r9, r2
 80056ae:	dd07      	ble.n	80056c0 <_printf_float+0x2e8>
 80056b0:	4613      	mov	r3, r2
 80056b2:	4631      	mov	r1, r6
 80056b4:	4642      	mov	r2, r8
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b8      	blx	r7
 80056ba:	3001      	adds	r0, #1
 80056bc:	f43f aee9 	beq.w	8005492 <_printf_float+0xba>
 80056c0:	f104 031a 	add.w	r3, r4, #26
 80056c4:	f04f 0b00 	mov.w	fp, #0
 80056c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056cc:	9306      	str	r3, [sp, #24]
 80056ce:	e015      	b.n	80056fc <_printf_float+0x324>
 80056d0:	7fefffff 	.word	0x7fefffff
 80056d4:	08008968 	.word	0x08008968
 80056d8:	08008964 	.word	0x08008964
 80056dc:	08008970 	.word	0x08008970
 80056e0:	0800896c 	.word	0x0800896c
 80056e4:	08008974 	.word	0x08008974
 80056e8:	2301      	movs	r3, #1
 80056ea:	9a06      	ldr	r2, [sp, #24]
 80056ec:	4631      	mov	r1, r6
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	f43f aecd 	beq.w	8005492 <_printf_float+0xba>
 80056f8:	f10b 0b01 	add.w	fp, fp, #1
 80056fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005700:	ebaa 0309 	sub.w	r3, sl, r9
 8005704:	455b      	cmp	r3, fp
 8005706:	dcef      	bgt.n	80056e8 <_printf_float+0x310>
 8005708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800570c:	429a      	cmp	r2, r3
 800570e:	44d0      	add	r8, sl
 8005710:	db15      	blt.n	800573e <_printf_float+0x366>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	07da      	lsls	r2, r3, #31
 8005716:	d412      	bmi.n	800573e <_printf_float+0x366>
 8005718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800571c:	eba3 020a 	sub.w	r2, r3, sl
 8005720:	eba3 0a01 	sub.w	sl, r3, r1
 8005724:	4592      	cmp	sl, r2
 8005726:	bfa8      	it	ge
 8005728:	4692      	movge	sl, r2
 800572a:	f1ba 0f00 	cmp.w	sl, #0
 800572e:	dc0e      	bgt.n	800574e <_printf_float+0x376>
 8005730:	f04f 0800 	mov.w	r8, #0
 8005734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005738:	f104 091a 	add.w	r9, r4, #26
 800573c:	e019      	b.n	8005772 <_printf_float+0x39a>
 800573e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	d1e5      	bne.n	8005718 <_printf_float+0x340>
 800574c:	e6a1      	b.n	8005492 <_printf_float+0xba>
 800574e:	4653      	mov	r3, sl
 8005750:	4642      	mov	r2, r8
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	d1e9      	bne.n	8005730 <_printf_float+0x358>
 800575c:	e699      	b.n	8005492 <_printf_float+0xba>
 800575e:	2301      	movs	r3, #1
 8005760:	464a      	mov	r2, r9
 8005762:	4631      	mov	r1, r6
 8005764:	4628      	mov	r0, r5
 8005766:	47b8      	blx	r7
 8005768:	3001      	adds	r0, #1
 800576a:	f43f ae92 	beq.w	8005492 <_printf_float+0xba>
 800576e:	f108 0801 	add.w	r8, r8, #1
 8005772:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	eba3 030a 	sub.w	r3, r3, sl
 800577c:	4543      	cmp	r3, r8
 800577e:	dcee      	bgt.n	800575e <_printf_float+0x386>
 8005780:	e74a      	b.n	8005618 <_printf_float+0x240>
 8005782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005784:	2a01      	cmp	r2, #1
 8005786:	dc01      	bgt.n	800578c <_printf_float+0x3b4>
 8005788:	07db      	lsls	r3, r3, #31
 800578a:	d53a      	bpl.n	8005802 <_printf_float+0x42a>
 800578c:	2301      	movs	r3, #1
 800578e:	4642      	mov	r2, r8
 8005790:	4631      	mov	r1, r6
 8005792:	4628      	mov	r0, r5
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	f43f ae7b 	beq.w	8005492 <_printf_float+0xba>
 800579c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057a0:	4631      	mov	r1, r6
 80057a2:	4628      	mov	r0, r5
 80057a4:	47b8      	blx	r7
 80057a6:	3001      	adds	r0, #1
 80057a8:	f108 0801 	add.w	r8, r8, #1
 80057ac:	f43f ae71 	beq.w	8005492 <_printf_float+0xba>
 80057b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b2:	2200      	movs	r2, #0
 80057b4:	f103 3aff 	add.w	sl, r3, #4294967295
 80057b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057bc:	2300      	movs	r3, #0
 80057be:	f7fb f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80057c2:	b9c8      	cbnz	r0, 80057f8 <_printf_float+0x420>
 80057c4:	4653      	mov	r3, sl
 80057c6:	4642      	mov	r2, r8
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	d10e      	bne.n	80057f0 <_printf_float+0x418>
 80057d2:	e65e      	b.n	8005492 <_printf_float+0xba>
 80057d4:	2301      	movs	r3, #1
 80057d6:	4652      	mov	r2, sl
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f ae57 	beq.w	8005492 <_printf_float+0xba>
 80057e4:	f108 0801 	add.w	r8, r8, #1
 80057e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ea:	3b01      	subs	r3, #1
 80057ec:	4543      	cmp	r3, r8
 80057ee:	dcf1      	bgt.n	80057d4 <_printf_float+0x3fc>
 80057f0:	464b      	mov	r3, r9
 80057f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057f6:	e6de      	b.n	80055b6 <_printf_float+0x1de>
 80057f8:	f04f 0800 	mov.w	r8, #0
 80057fc:	f104 0a1a 	add.w	sl, r4, #26
 8005800:	e7f2      	b.n	80057e8 <_printf_float+0x410>
 8005802:	2301      	movs	r3, #1
 8005804:	e7df      	b.n	80057c6 <_printf_float+0x3ee>
 8005806:	2301      	movs	r3, #1
 8005808:	464a      	mov	r2, r9
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae3e 	beq.w	8005492 <_printf_float+0xba>
 8005816:	f108 0801 	add.w	r8, r8, #1
 800581a:	68e3      	ldr	r3, [r4, #12]
 800581c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800581e:	1a9b      	subs	r3, r3, r2
 8005820:	4543      	cmp	r3, r8
 8005822:	dcf0      	bgt.n	8005806 <_printf_float+0x42e>
 8005824:	e6fc      	b.n	8005620 <_printf_float+0x248>
 8005826:	f04f 0800 	mov.w	r8, #0
 800582a:	f104 0919 	add.w	r9, r4, #25
 800582e:	e7f4      	b.n	800581a <_printf_float+0x442>
 8005830:	2900      	cmp	r1, #0
 8005832:	f43f ae8b 	beq.w	800554c <_printf_float+0x174>
 8005836:	2300      	movs	r3, #0
 8005838:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800583c:	ab09      	add	r3, sp, #36	; 0x24
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	ec49 8b10 	vmov	d0, r8, r9
 8005844:	6022      	str	r2, [r4, #0]
 8005846:	f8cd a004 	str.w	sl, [sp, #4]
 800584a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800584e:	4628      	mov	r0, r5
 8005850:	f7ff fd2e 	bl	80052b0 <__cvt>
 8005854:	4680      	mov	r8, r0
 8005856:	e648      	b.n	80054ea <_printf_float+0x112>

08005858 <_printf_common>:
 8005858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800585c:	4691      	mov	r9, r2
 800585e:	461f      	mov	r7, r3
 8005860:	688a      	ldr	r2, [r1, #8]
 8005862:	690b      	ldr	r3, [r1, #16]
 8005864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005868:	4293      	cmp	r3, r2
 800586a:	bfb8      	it	lt
 800586c:	4613      	movlt	r3, r2
 800586e:	f8c9 3000 	str.w	r3, [r9]
 8005872:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005876:	4606      	mov	r6, r0
 8005878:	460c      	mov	r4, r1
 800587a:	b112      	cbz	r2, 8005882 <_printf_common+0x2a>
 800587c:	3301      	adds	r3, #1
 800587e:	f8c9 3000 	str.w	r3, [r9]
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	0699      	lsls	r1, r3, #26
 8005886:	bf42      	ittt	mi
 8005888:	f8d9 3000 	ldrmi.w	r3, [r9]
 800588c:	3302      	addmi	r3, #2
 800588e:	f8c9 3000 	strmi.w	r3, [r9]
 8005892:	6825      	ldr	r5, [r4, #0]
 8005894:	f015 0506 	ands.w	r5, r5, #6
 8005898:	d107      	bne.n	80058aa <_printf_common+0x52>
 800589a:	f104 0a19 	add.w	sl, r4, #25
 800589e:	68e3      	ldr	r3, [r4, #12]
 80058a0:	f8d9 2000 	ldr.w	r2, [r9]
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	42ab      	cmp	r3, r5
 80058a8:	dc28      	bgt.n	80058fc <_printf_common+0xa4>
 80058aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	3300      	adds	r3, #0
 80058b2:	bf18      	it	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	0692      	lsls	r2, r2, #26
 80058b8:	d42d      	bmi.n	8005916 <_printf_common+0xbe>
 80058ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058be:	4639      	mov	r1, r7
 80058c0:	4630      	mov	r0, r6
 80058c2:	47c0      	blx	r8
 80058c4:	3001      	adds	r0, #1
 80058c6:	d020      	beq.n	800590a <_printf_common+0xb2>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	68e5      	ldr	r5, [r4, #12]
 80058cc:	f8d9 2000 	ldr.w	r2, [r9]
 80058d0:	f003 0306 	and.w	r3, r3, #6
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	bf08      	it	eq
 80058d8:	1aad      	subeq	r5, r5, r2
 80058da:	68a3      	ldr	r3, [r4, #8]
 80058dc:	6922      	ldr	r2, [r4, #16]
 80058de:	bf0c      	ite	eq
 80058e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e4:	2500      	movne	r5, #0
 80058e6:	4293      	cmp	r3, r2
 80058e8:	bfc4      	itt	gt
 80058ea:	1a9b      	subgt	r3, r3, r2
 80058ec:	18ed      	addgt	r5, r5, r3
 80058ee:	f04f 0900 	mov.w	r9, #0
 80058f2:	341a      	adds	r4, #26
 80058f4:	454d      	cmp	r5, r9
 80058f6:	d11a      	bne.n	800592e <_printf_common+0xd6>
 80058f8:	2000      	movs	r0, #0
 80058fa:	e008      	b.n	800590e <_printf_common+0xb6>
 80058fc:	2301      	movs	r3, #1
 80058fe:	4652      	mov	r2, sl
 8005900:	4639      	mov	r1, r7
 8005902:	4630      	mov	r0, r6
 8005904:	47c0      	blx	r8
 8005906:	3001      	adds	r0, #1
 8005908:	d103      	bne.n	8005912 <_printf_common+0xba>
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005912:	3501      	adds	r5, #1
 8005914:	e7c3      	b.n	800589e <_printf_common+0x46>
 8005916:	18e1      	adds	r1, r4, r3
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	2030      	movs	r0, #48	; 0x30
 800591c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005920:	4422      	add	r2, r4
 8005922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005926:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800592a:	3302      	adds	r3, #2
 800592c:	e7c5      	b.n	80058ba <_printf_common+0x62>
 800592e:	2301      	movs	r3, #1
 8005930:	4622      	mov	r2, r4
 8005932:	4639      	mov	r1, r7
 8005934:	4630      	mov	r0, r6
 8005936:	47c0      	blx	r8
 8005938:	3001      	adds	r0, #1
 800593a:	d0e6      	beq.n	800590a <_printf_common+0xb2>
 800593c:	f109 0901 	add.w	r9, r9, #1
 8005940:	e7d8      	b.n	80058f4 <_printf_common+0x9c>
	...

08005944 <_printf_i>:
 8005944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005948:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800594c:	460c      	mov	r4, r1
 800594e:	7e09      	ldrb	r1, [r1, #24]
 8005950:	b085      	sub	sp, #20
 8005952:	296e      	cmp	r1, #110	; 0x6e
 8005954:	4617      	mov	r7, r2
 8005956:	4606      	mov	r6, r0
 8005958:	4698      	mov	r8, r3
 800595a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800595c:	f000 80b3 	beq.w	8005ac6 <_printf_i+0x182>
 8005960:	d822      	bhi.n	80059a8 <_printf_i+0x64>
 8005962:	2963      	cmp	r1, #99	; 0x63
 8005964:	d036      	beq.n	80059d4 <_printf_i+0x90>
 8005966:	d80a      	bhi.n	800597e <_printf_i+0x3a>
 8005968:	2900      	cmp	r1, #0
 800596a:	f000 80b9 	beq.w	8005ae0 <_printf_i+0x19c>
 800596e:	2958      	cmp	r1, #88	; 0x58
 8005970:	f000 8083 	beq.w	8005a7a <_printf_i+0x136>
 8005974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005978:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800597c:	e032      	b.n	80059e4 <_printf_i+0xa0>
 800597e:	2964      	cmp	r1, #100	; 0x64
 8005980:	d001      	beq.n	8005986 <_printf_i+0x42>
 8005982:	2969      	cmp	r1, #105	; 0x69
 8005984:	d1f6      	bne.n	8005974 <_printf_i+0x30>
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	6813      	ldr	r3, [r2, #0]
 800598a:	0605      	lsls	r5, r0, #24
 800598c:	f103 0104 	add.w	r1, r3, #4
 8005990:	d52a      	bpl.n	80059e8 <_printf_i+0xa4>
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6011      	str	r1, [r2, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	da03      	bge.n	80059a2 <_printf_i+0x5e>
 800599a:	222d      	movs	r2, #45	; 0x2d
 800599c:	425b      	negs	r3, r3
 800599e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80059a2:	486f      	ldr	r0, [pc, #444]	; (8005b60 <_printf_i+0x21c>)
 80059a4:	220a      	movs	r2, #10
 80059a6:	e039      	b.n	8005a1c <_printf_i+0xd8>
 80059a8:	2973      	cmp	r1, #115	; 0x73
 80059aa:	f000 809d 	beq.w	8005ae8 <_printf_i+0x1a4>
 80059ae:	d808      	bhi.n	80059c2 <_printf_i+0x7e>
 80059b0:	296f      	cmp	r1, #111	; 0x6f
 80059b2:	d020      	beq.n	80059f6 <_printf_i+0xb2>
 80059b4:	2970      	cmp	r1, #112	; 0x70
 80059b6:	d1dd      	bne.n	8005974 <_printf_i+0x30>
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	f043 0320 	orr.w	r3, r3, #32
 80059be:	6023      	str	r3, [r4, #0]
 80059c0:	e003      	b.n	80059ca <_printf_i+0x86>
 80059c2:	2975      	cmp	r1, #117	; 0x75
 80059c4:	d017      	beq.n	80059f6 <_printf_i+0xb2>
 80059c6:	2978      	cmp	r1, #120	; 0x78
 80059c8:	d1d4      	bne.n	8005974 <_printf_i+0x30>
 80059ca:	2378      	movs	r3, #120	; 0x78
 80059cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059d0:	4864      	ldr	r0, [pc, #400]	; (8005b64 <_printf_i+0x220>)
 80059d2:	e055      	b.n	8005a80 <_printf_i+0x13c>
 80059d4:	6813      	ldr	r3, [r2, #0]
 80059d6:	1d19      	adds	r1, r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6011      	str	r1, [r2, #0]
 80059dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e4:	2301      	movs	r3, #1
 80059e6:	e08c      	b.n	8005b02 <_printf_i+0x1be>
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6011      	str	r1, [r2, #0]
 80059ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059f0:	bf18      	it	ne
 80059f2:	b21b      	sxthne	r3, r3
 80059f4:	e7cf      	b.n	8005996 <_printf_i+0x52>
 80059f6:	6813      	ldr	r3, [r2, #0]
 80059f8:	6825      	ldr	r5, [r4, #0]
 80059fa:	1d18      	adds	r0, r3, #4
 80059fc:	6010      	str	r0, [r2, #0]
 80059fe:	0628      	lsls	r0, r5, #24
 8005a00:	d501      	bpl.n	8005a06 <_printf_i+0xc2>
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	e002      	b.n	8005a0c <_printf_i+0xc8>
 8005a06:	0668      	lsls	r0, r5, #25
 8005a08:	d5fb      	bpl.n	8005a02 <_printf_i+0xbe>
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	4854      	ldr	r0, [pc, #336]	; (8005b60 <_printf_i+0x21c>)
 8005a0e:	296f      	cmp	r1, #111	; 0x6f
 8005a10:	bf14      	ite	ne
 8005a12:	220a      	movne	r2, #10
 8005a14:	2208      	moveq	r2, #8
 8005a16:	2100      	movs	r1, #0
 8005a18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a1c:	6865      	ldr	r5, [r4, #4]
 8005a1e:	60a5      	str	r5, [r4, #8]
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	f2c0 8095 	blt.w	8005b50 <_printf_i+0x20c>
 8005a26:	6821      	ldr	r1, [r4, #0]
 8005a28:	f021 0104 	bic.w	r1, r1, #4
 8005a2c:	6021      	str	r1, [r4, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d13d      	bne.n	8005aae <_printf_i+0x16a>
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	f040 808e 	bne.w	8005b54 <_printf_i+0x210>
 8005a38:	4665      	mov	r5, ip
 8005a3a:	2a08      	cmp	r2, #8
 8005a3c:	d10b      	bne.n	8005a56 <_printf_i+0x112>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	07db      	lsls	r3, r3, #31
 8005a42:	d508      	bpl.n	8005a56 <_printf_i+0x112>
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	6862      	ldr	r2, [r4, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	bfde      	ittt	le
 8005a4c:	2330      	movle	r3, #48	; 0x30
 8005a4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a56:	ebac 0305 	sub.w	r3, ip, r5
 8005a5a:	6123      	str	r3, [r4, #16]
 8005a5c:	f8cd 8000 	str.w	r8, [sp]
 8005a60:	463b      	mov	r3, r7
 8005a62:	aa03      	add	r2, sp, #12
 8005a64:	4621      	mov	r1, r4
 8005a66:	4630      	mov	r0, r6
 8005a68:	f7ff fef6 	bl	8005858 <_printf_common>
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d14d      	bne.n	8005b0c <_printf_i+0x1c8>
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	b005      	add	sp, #20
 8005a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a7a:	4839      	ldr	r0, [pc, #228]	; (8005b60 <_printf_i+0x21c>)
 8005a7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a80:	6813      	ldr	r3, [r2, #0]
 8005a82:	6821      	ldr	r1, [r4, #0]
 8005a84:	1d1d      	adds	r5, r3, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6015      	str	r5, [r2, #0]
 8005a8a:	060a      	lsls	r2, r1, #24
 8005a8c:	d50b      	bpl.n	8005aa6 <_printf_i+0x162>
 8005a8e:	07ca      	lsls	r2, r1, #31
 8005a90:	bf44      	itt	mi
 8005a92:	f041 0120 	orrmi.w	r1, r1, #32
 8005a96:	6021      	strmi	r1, [r4, #0]
 8005a98:	b91b      	cbnz	r3, 8005aa2 <_printf_i+0x15e>
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	f022 0220 	bic.w	r2, r2, #32
 8005aa0:	6022      	str	r2, [r4, #0]
 8005aa2:	2210      	movs	r2, #16
 8005aa4:	e7b7      	b.n	8005a16 <_printf_i+0xd2>
 8005aa6:	064d      	lsls	r5, r1, #25
 8005aa8:	bf48      	it	mi
 8005aaa:	b29b      	uxthmi	r3, r3
 8005aac:	e7ef      	b.n	8005a8e <_printf_i+0x14a>
 8005aae:	4665      	mov	r5, ip
 8005ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ab4:	fb02 3311 	mls	r3, r2, r1, r3
 8005ab8:	5cc3      	ldrb	r3, [r0, r3]
 8005aba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005abe:	460b      	mov	r3, r1
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	d1f5      	bne.n	8005ab0 <_printf_i+0x16c>
 8005ac4:	e7b9      	b.n	8005a3a <_printf_i+0xf6>
 8005ac6:	6813      	ldr	r3, [r2, #0]
 8005ac8:	6825      	ldr	r5, [r4, #0]
 8005aca:	6961      	ldr	r1, [r4, #20]
 8005acc:	1d18      	adds	r0, r3, #4
 8005ace:	6010      	str	r0, [r2, #0]
 8005ad0:	0628      	lsls	r0, r5, #24
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	d501      	bpl.n	8005ada <_printf_i+0x196>
 8005ad6:	6019      	str	r1, [r3, #0]
 8005ad8:	e002      	b.n	8005ae0 <_printf_i+0x19c>
 8005ada:	066a      	lsls	r2, r5, #25
 8005adc:	d5fb      	bpl.n	8005ad6 <_printf_i+0x192>
 8005ade:	8019      	strh	r1, [r3, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	6123      	str	r3, [r4, #16]
 8005ae4:	4665      	mov	r5, ip
 8005ae6:	e7b9      	b.n	8005a5c <_printf_i+0x118>
 8005ae8:	6813      	ldr	r3, [r2, #0]
 8005aea:	1d19      	adds	r1, r3, #4
 8005aec:	6011      	str	r1, [r2, #0]
 8005aee:	681d      	ldr	r5, [r3, #0]
 8005af0:	6862      	ldr	r2, [r4, #4]
 8005af2:	2100      	movs	r1, #0
 8005af4:	4628      	mov	r0, r5
 8005af6:	f7fa fb7b 	bl	80001f0 <memchr>
 8005afa:	b108      	cbz	r0, 8005b00 <_printf_i+0x1bc>
 8005afc:	1b40      	subs	r0, r0, r5
 8005afe:	6060      	str	r0, [r4, #4]
 8005b00:	6863      	ldr	r3, [r4, #4]
 8005b02:	6123      	str	r3, [r4, #16]
 8005b04:	2300      	movs	r3, #0
 8005b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b0a:	e7a7      	b.n	8005a5c <_printf_i+0x118>
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	462a      	mov	r2, r5
 8005b10:	4639      	mov	r1, r7
 8005b12:	4630      	mov	r0, r6
 8005b14:	47c0      	blx	r8
 8005b16:	3001      	adds	r0, #1
 8005b18:	d0aa      	beq.n	8005a70 <_printf_i+0x12c>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	079b      	lsls	r3, r3, #30
 8005b1e:	d413      	bmi.n	8005b48 <_printf_i+0x204>
 8005b20:	68e0      	ldr	r0, [r4, #12]
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	4298      	cmp	r0, r3
 8005b26:	bfb8      	it	lt
 8005b28:	4618      	movlt	r0, r3
 8005b2a:	e7a3      	b.n	8005a74 <_printf_i+0x130>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	464a      	mov	r2, r9
 8005b30:	4639      	mov	r1, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	47c0      	blx	r8
 8005b36:	3001      	adds	r0, #1
 8005b38:	d09a      	beq.n	8005a70 <_printf_i+0x12c>
 8005b3a:	3501      	adds	r5, #1
 8005b3c:	68e3      	ldr	r3, [r4, #12]
 8005b3e:	9a03      	ldr	r2, [sp, #12]
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	42ab      	cmp	r3, r5
 8005b44:	dcf2      	bgt.n	8005b2c <_printf_i+0x1e8>
 8005b46:	e7eb      	b.n	8005b20 <_printf_i+0x1dc>
 8005b48:	2500      	movs	r5, #0
 8005b4a:	f104 0919 	add.w	r9, r4, #25
 8005b4e:	e7f5      	b.n	8005b3c <_printf_i+0x1f8>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1ac      	bne.n	8005aae <_printf_i+0x16a>
 8005b54:	7803      	ldrb	r3, [r0, #0]
 8005b56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b5e:	e76c      	b.n	8005a3a <_printf_i+0xf6>
 8005b60:	08008976 	.word	0x08008976
 8005b64:	08008987 	.word	0x08008987

08005b68 <siprintf>:
 8005b68:	b40e      	push	{r1, r2, r3}
 8005b6a:	b500      	push	{lr}
 8005b6c:	b09c      	sub	sp, #112	; 0x70
 8005b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b70:	9002      	str	r0, [sp, #8]
 8005b72:	9006      	str	r0, [sp, #24]
 8005b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b78:	4809      	ldr	r0, [pc, #36]	; (8005ba0 <siprintf+0x38>)
 8005b7a:	9107      	str	r1, [sp, #28]
 8005b7c:	9104      	str	r1, [sp, #16]
 8005b7e:	4909      	ldr	r1, [pc, #36]	; (8005ba4 <siprintf+0x3c>)
 8005b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b84:	9105      	str	r1, [sp, #20]
 8005b86:	6800      	ldr	r0, [r0, #0]
 8005b88:	9301      	str	r3, [sp, #4]
 8005b8a:	a902      	add	r1, sp, #8
 8005b8c:	f001 fa5c 	bl	8007048 <_svfiprintf_r>
 8005b90:	9b02      	ldr	r3, [sp, #8]
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	b01c      	add	sp, #112	; 0x70
 8005b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b9c:	b003      	add	sp, #12
 8005b9e:	4770      	bx	lr
 8005ba0:	2000005c 	.word	0x2000005c
 8005ba4:	ffff0208 	.word	0xffff0208

08005ba8 <quorem>:
 8005ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	6903      	ldr	r3, [r0, #16]
 8005bae:	690c      	ldr	r4, [r1, #16]
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	4680      	mov	r8, r0
 8005bb4:	f2c0 8082 	blt.w	8005cbc <quorem+0x114>
 8005bb8:	3c01      	subs	r4, #1
 8005bba:	f101 0714 	add.w	r7, r1, #20
 8005bbe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005bc2:	f100 0614 	add.w	r6, r0, #20
 8005bc6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005bca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005bce:	eb06 030c 	add.w	r3, r6, ip
 8005bd2:	3501      	adds	r5, #1
 8005bd4:	eb07 090c 	add.w	r9, r7, ip
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	fbb0 f5f5 	udiv	r5, r0, r5
 8005bde:	b395      	cbz	r5, 8005c46 <quorem+0x9e>
 8005be0:	f04f 0a00 	mov.w	sl, #0
 8005be4:	4638      	mov	r0, r7
 8005be6:	46b6      	mov	lr, r6
 8005be8:	46d3      	mov	fp, sl
 8005bea:	f850 2b04 	ldr.w	r2, [r0], #4
 8005bee:	b293      	uxth	r3, r2
 8005bf0:	fb05 a303 	mla	r3, r5, r3, sl
 8005bf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	ebab 0303 	sub.w	r3, fp, r3
 8005bfe:	0c12      	lsrs	r2, r2, #16
 8005c00:	f8de b000 	ldr.w	fp, [lr]
 8005c04:	fb05 a202 	mla	r2, r5, r2, sl
 8005c08:	fa13 f38b 	uxtah	r3, r3, fp
 8005c0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005c10:	fa1f fb82 	uxth.w	fp, r2
 8005c14:	f8de 2000 	ldr.w	r2, [lr]
 8005c18:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c26:	4581      	cmp	r9, r0
 8005c28:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005c2c:	f84e 3b04 	str.w	r3, [lr], #4
 8005c30:	d2db      	bcs.n	8005bea <quorem+0x42>
 8005c32:	f856 300c 	ldr.w	r3, [r6, ip]
 8005c36:	b933      	cbnz	r3, 8005c46 <quorem+0x9e>
 8005c38:	9b01      	ldr	r3, [sp, #4]
 8005c3a:	3b04      	subs	r3, #4
 8005c3c:	429e      	cmp	r6, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	d330      	bcc.n	8005ca4 <quorem+0xfc>
 8005c42:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c46:	4640      	mov	r0, r8
 8005c48:	f001 f828 	bl	8006c9c <__mcmp>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	db25      	blt.n	8005c9c <quorem+0xf4>
 8005c50:	3501      	adds	r5, #1
 8005c52:	4630      	mov	r0, r6
 8005c54:	f04f 0c00 	mov.w	ip, #0
 8005c58:	f857 2b04 	ldr.w	r2, [r7], #4
 8005c5c:	f8d0 e000 	ldr.w	lr, [r0]
 8005c60:	b293      	uxth	r3, r2
 8005c62:	ebac 0303 	sub.w	r3, ip, r3
 8005c66:	0c12      	lsrs	r2, r2, #16
 8005c68:	fa13 f38e 	uxtah	r3, r3, lr
 8005c6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c7a:	45b9      	cmp	r9, r7
 8005c7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c80:	f840 3b04 	str.w	r3, [r0], #4
 8005c84:	d2e8      	bcs.n	8005c58 <quorem+0xb0>
 8005c86:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005c8a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005c8e:	b92a      	cbnz	r2, 8005c9c <quorem+0xf4>
 8005c90:	3b04      	subs	r3, #4
 8005c92:	429e      	cmp	r6, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	d30b      	bcc.n	8005cb0 <quorem+0x108>
 8005c98:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	b003      	add	sp, #12
 8005ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca4:	6812      	ldr	r2, [r2, #0]
 8005ca6:	3b04      	subs	r3, #4
 8005ca8:	2a00      	cmp	r2, #0
 8005caa:	d1ca      	bne.n	8005c42 <quorem+0x9a>
 8005cac:	3c01      	subs	r4, #1
 8005cae:	e7c5      	b.n	8005c3c <quorem+0x94>
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	3b04      	subs	r3, #4
 8005cb4:	2a00      	cmp	r2, #0
 8005cb6:	d1ef      	bne.n	8005c98 <quorem+0xf0>
 8005cb8:	3c01      	subs	r4, #1
 8005cba:	e7ea      	b.n	8005c92 <quorem+0xea>
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	e7ee      	b.n	8005c9e <quorem+0xf6>

08005cc0 <_dtoa_r>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	ec57 6b10 	vmov	r6, r7, d0
 8005cc8:	b097      	sub	sp, #92	; 0x5c
 8005cca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ccc:	9106      	str	r1, [sp, #24]
 8005cce:	4604      	mov	r4, r0
 8005cd0:	920b      	str	r2, [sp, #44]	; 0x2c
 8005cd2:	9312      	str	r3, [sp, #72]	; 0x48
 8005cd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005cd8:	e9cd 6700 	strd	r6, r7, [sp]
 8005cdc:	b93d      	cbnz	r5, 8005cee <_dtoa_r+0x2e>
 8005cde:	2010      	movs	r0, #16
 8005ce0:	f000 fdb4 	bl	800684c <malloc>
 8005ce4:	6260      	str	r0, [r4, #36]	; 0x24
 8005ce6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cea:	6005      	str	r5, [r0, #0]
 8005cec:	60c5      	str	r5, [r0, #12]
 8005cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cf0:	6819      	ldr	r1, [r3, #0]
 8005cf2:	b151      	cbz	r1, 8005d0a <_dtoa_r+0x4a>
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	604a      	str	r2, [r1, #4]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	4093      	lsls	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 fdeb 	bl	80068da <_Bfree>
 8005d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	1e3b      	subs	r3, r7, #0
 8005d0c:	bfbb      	ittet	lt
 8005d0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d12:	9301      	strlt	r3, [sp, #4]
 8005d14:	2300      	movge	r3, #0
 8005d16:	2201      	movlt	r2, #1
 8005d18:	bfac      	ite	ge
 8005d1a:	f8c8 3000 	strge.w	r3, [r8]
 8005d1e:	f8c8 2000 	strlt.w	r2, [r8]
 8005d22:	4baf      	ldr	r3, [pc, #700]	; (8005fe0 <_dtoa_r+0x320>)
 8005d24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005d28:	ea33 0308 	bics.w	r3, r3, r8
 8005d2c:	d114      	bne.n	8005d58 <_dtoa_r+0x98>
 8005d2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d30:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	9b00      	ldr	r3, [sp, #0]
 8005d38:	b923      	cbnz	r3, 8005d44 <_dtoa_r+0x84>
 8005d3a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f000 8542 	beq.w	80067c8 <_dtoa_r+0xb08>
 8005d44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d46:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005ff4 <_dtoa_r+0x334>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 8544 	beq.w	80067d8 <_dtoa_r+0xb18>
 8005d50:	f10b 0303 	add.w	r3, fp, #3
 8005d54:	f000 bd3e 	b.w	80067d4 <_dtoa_r+0xb14>
 8005d58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2300      	movs	r3, #0
 8005d60:	4630      	mov	r0, r6
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa feb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d68:	4681      	mov	r9, r0
 8005d6a:	b168      	cbz	r0, 8005d88 <_dtoa_r+0xc8>
 8005d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d6e:	2301      	movs	r3, #1
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8524 	beq.w	80067c2 <_dtoa_r+0xb02>
 8005d7a:	4b9a      	ldr	r3, [pc, #616]	; (8005fe4 <_dtoa_r+0x324>)
 8005d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d7e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	f000 bd28 	b.w	80067d8 <_dtoa_r+0xb18>
 8005d88:	aa14      	add	r2, sp, #80	; 0x50
 8005d8a:	a915      	add	r1, sp, #84	; 0x54
 8005d8c:	ec47 6b10 	vmov	d0, r6, r7
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 fffa 	bl	8006d8a <__d2b>
 8005d96:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005d9a:	9004      	str	r0, [sp, #16]
 8005d9c:	2d00      	cmp	r5, #0
 8005d9e:	d07c      	beq.n	8005e9a <_dtoa_r+0x1da>
 8005da0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005da4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005da8:	46b2      	mov	sl, r6
 8005daa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005dae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005db2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005db6:	2200      	movs	r2, #0
 8005db8:	4b8b      	ldr	r3, [pc, #556]	; (8005fe8 <_dtoa_r+0x328>)
 8005dba:	4650      	mov	r0, sl
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	f7fa fa6b 	bl	8000298 <__aeabi_dsub>
 8005dc2:	a381      	add	r3, pc, #516	; (adr r3, 8005fc8 <_dtoa_r+0x308>)
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f7fa fc1e 	bl	8000608 <__aeabi_dmul>
 8005dcc:	a380      	add	r3, pc, #512	; (adr r3, 8005fd0 <_dtoa_r+0x310>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fa63 	bl	800029c <__adddf3>
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	4628      	mov	r0, r5
 8005dda:	460f      	mov	r7, r1
 8005ddc:	f7fa fbaa 	bl	8000534 <__aeabi_i2d>
 8005de0:	a37d      	add	r3, pc, #500	; (adr r3, 8005fd8 <_dtoa_r+0x318>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa fc0f 	bl	8000608 <__aeabi_dmul>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4630      	mov	r0, r6
 8005df0:	4639      	mov	r1, r7
 8005df2:	f7fa fa53 	bl	800029c <__adddf3>
 8005df6:	4606      	mov	r6, r0
 8005df8:	460f      	mov	r7, r1
 8005dfa:	f7fa feb5 	bl	8000b68 <__aeabi_d2iz>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4682      	mov	sl, r0
 8005e02:	2300      	movs	r3, #0
 8005e04:	4630      	mov	r0, r6
 8005e06:	4639      	mov	r1, r7
 8005e08:	f7fa fe70 	bl	8000aec <__aeabi_dcmplt>
 8005e0c:	b148      	cbz	r0, 8005e22 <_dtoa_r+0x162>
 8005e0e:	4650      	mov	r0, sl
 8005e10:	f7fa fb90 	bl	8000534 <__aeabi_i2d>
 8005e14:	4632      	mov	r2, r6
 8005e16:	463b      	mov	r3, r7
 8005e18:	f7fa fe5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e1c:	b908      	cbnz	r0, 8005e22 <_dtoa_r+0x162>
 8005e1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e22:	f1ba 0f16 	cmp.w	sl, #22
 8005e26:	d859      	bhi.n	8005edc <_dtoa_r+0x21c>
 8005e28:	4970      	ldr	r1, [pc, #448]	; (8005fec <_dtoa_r+0x32c>)
 8005e2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e36:	f7fa fe77 	bl	8000b28 <__aeabi_dcmpgt>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d050      	beq.n	8005ee0 <_dtoa_r+0x220>
 8005e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e42:	2300      	movs	r3, #0
 8005e44:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e48:	1b5d      	subs	r5, r3, r5
 8005e4a:	f1b5 0801 	subs.w	r8, r5, #1
 8005e4e:	bf49      	itett	mi
 8005e50:	f1c5 0301 	rsbmi	r3, r5, #1
 8005e54:	2300      	movpl	r3, #0
 8005e56:	9305      	strmi	r3, [sp, #20]
 8005e58:	f04f 0800 	movmi.w	r8, #0
 8005e5c:	bf58      	it	pl
 8005e5e:	9305      	strpl	r3, [sp, #20]
 8005e60:	f1ba 0f00 	cmp.w	sl, #0
 8005e64:	db3e      	blt.n	8005ee4 <_dtoa_r+0x224>
 8005e66:	2300      	movs	r3, #0
 8005e68:	44d0      	add	r8, sl
 8005e6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005e6e:	9307      	str	r3, [sp, #28]
 8005e70:	9b06      	ldr	r3, [sp, #24]
 8005e72:	2b09      	cmp	r3, #9
 8005e74:	f200 8090 	bhi.w	8005f98 <_dtoa_r+0x2d8>
 8005e78:	2b05      	cmp	r3, #5
 8005e7a:	bfc4      	itt	gt
 8005e7c:	3b04      	subgt	r3, #4
 8005e7e:	9306      	strgt	r3, [sp, #24]
 8005e80:	9b06      	ldr	r3, [sp, #24]
 8005e82:	f1a3 0302 	sub.w	r3, r3, #2
 8005e86:	bfcc      	ite	gt
 8005e88:	2500      	movgt	r5, #0
 8005e8a:	2501      	movle	r5, #1
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	f200 808f 	bhi.w	8005fb0 <_dtoa_r+0x2f0>
 8005e92:	e8df f003 	tbb	[pc, r3]
 8005e96:	7f7d      	.short	0x7f7d
 8005e98:	7131      	.short	0x7131
 8005e9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005e9e:	441d      	add	r5, r3
 8005ea0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005ea4:	2820      	cmp	r0, #32
 8005ea6:	dd13      	ble.n	8005ed0 <_dtoa_r+0x210>
 8005ea8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005eac:	9b00      	ldr	r3, [sp, #0]
 8005eae:	fa08 f800 	lsl.w	r8, r8, r0
 8005eb2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005eb6:	fa23 f000 	lsr.w	r0, r3, r0
 8005eba:	ea48 0000 	orr.w	r0, r8, r0
 8005ebe:	f7fa fb29 	bl	8000514 <__aeabi_ui2d>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4682      	mov	sl, r0
 8005ec6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005eca:	3d01      	subs	r5, #1
 8005ecc:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ece:	e772      	b.n	8005db6 <_dtoa_r+0xf6>
 8005ed0:	9b00      	ldr	r3, [sp, #0]
 8005ed2:	f1c0 0020 	rsb	r0, r0, #32
 8005ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8005eda:	e7f0      	b.n	8005ebe <_dtoa_r+0x1fe>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e7b1      	b.n	8005e44 <_dtoa_r+0x184>
 8005ee0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ee2:	e7b0      	b.n	8005e46 <_dtoa_r+0x186>
 8005ee4:	9b05      	ldr	r3, [sp, #20]
 8005ee6:	eba3 030a 	sub.w	r3, r3, sl
 8005eea:	9305      	str	r3, [sp, #20]
 8005eec:	f1ca 0300 	rsb	r3, sl, #0
 8005ef0:	9307      	str	r3, [sp, #28]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ef6:	e7bb      	b.n	8005e70 <_dtoa_r+0x1b0>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	930a      	str	r3, [sp, #40]	; 0x28
 8005efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dd59      	ble.n	8005fb6 <_dtoa_r+0x2f6>
 8005f02:	9302      	str	r3, [sp, #8]
 8005f04:	4699      	mov	r9, r3
 8005f06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f08:	2200      	movs	r2, #0
 8005f0a:	6072      	str	r2, [r6, #4]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	f102 0014 	add.w	r0, r2, #20
 8005f12:	4298      	cmp	r0, r3
 8005f14:	6871      	ldr	r1, [r6, #4]
 8005f16:	d953      	bls.n	8005fc0 <_dtoa_r+0x300>
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f000 fcaa 	bl	8006872 <_Balloc>
 8005f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f20:	6030      	str	r0, [r6, #0]
 8005f22:	f1b9 0f0e 	cmp.w	r9, #14
 8005f26:	f8d3 b000 	ldr.w	fp, [r3]
 8005f2a:	f200 80e6 	bhi.w	80060fa <_dtoa_r+0x43a>
 8005f2e:	2d00      	cmp	r5, #0
 8005f30:	f000 80e3 	beq.w	80060fa <_dtoa_r+0x43a>
 8005f34:	ed9d 7b00 	vldr	d7, [sp]
 8005f38:	f1ba 0f00 	cmp.w	sl, #0
 8005f3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005f40:	dd74      	ble.n	800602c <_dtoa_r+0x36c>
 8005f42:	4a2a      	ldr	r2, [pc, #168]	; (8005fec <_dtoa_r+0x32c>)
 8005f44:	f00a 030f 	and.w	r3, sl, #15
 8005f48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f4c:	ed93 7b00 	vldr	d7, [r3]
 8005f50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005f54:	06f0      	lsls	r0, r6, #27
 8005f56:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005f5a:	d565      	bpl.n	8006028 <_dtoa_r+0x368>
 8005f5c:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <_dtoa_r+0x330>)
 8005f5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f66:	f7fa fc79 	bl	800085c <__aeabi_ddiv>
 8005f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8005f6e:	f006 060f 	and.w	r6, r6, #15
 8005f72:	2503      	movs	r5, #3
 8005f74:	4f1e      	ldr	r7, [pc, #120]	; (8005ff0 <_dtoa_r+0x330>)
 8005f76:	e04c      	b.n	8006012 <_dtoa_r+0x352>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f7e:	4453      	add	r3, sl
 8005f80:	f103 0901 	add.w	r9, r3, #1
 8005f84:	9302      	str	r3, [sp, #8]
 8005f86:	464b      	mov	r3, r9
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	bfb8      	it	lt
 8005f8c:	2301      	movlt	r3, #1
 8005f8e:	e7ba      	b.n	8005f06 <_dtoa_r+0x246>
 8005f90:	2300      	movs	r3, #0
 8005f92:	e7b2      	b.n	8005efa <_dtoa_r+0x23a>
 8005f94:	2300      	movs	r3, #0
 8005f96:	e7f0      	b.n	8005f7a <_dtoa_r+0x2ba>
 8005f98:	2501      	movs	r5, #1
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9306      	str	r3, [sp, #24]
 8005f9e:	950a      	str	r5, [sp, #40]	; 0x28
 8005fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa4:	9302      	str	r3, [sp, #8]
 8005fa6:	4699      	mov	r9, r3
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2312      	movs	r3, #18
 8005fac:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fae:	e7aa      	b.n	8005f06 <_dtoa_r+0x246>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fb4:	e7f4      	b.n	8005fa0 <_dtoa_r+0x2e0>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	9302      	str	r3, [sp, #8]
 8005fba:	4699      	mov	r9, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	e7f5      	b.n	8005fac <_dtoa_r+0x2ec>
 8005fc0:	3101      	adds	r1, #1
 8005fc2:	6071      	str	r1, [r6, #4]
 8005fc4:	0052      	lsls	r2, r2, #1
 8005fc6:	e7a2      	b.n	8005f0e <_dtoa_r+0x24e>
 8005fc8:	636f4361 	.word	0x636f4361
 8005fcc:	3fd287a7 	.word	0x3fd287a7
 8005fd0:	8b60c8b3 	.word	0x8b60c8b3
 8005fd4:	3fc68a28 	.word	0x3fc68a28
 8005fd8:	509f79fb 	.word	0x509f79fb
 8005fdc:	3fd34413 	.word	0x3fd34413
 8005fe0:	7ff00000 	.word	0x7ff00000
 8005fe4:	08008975 	.word	0x08008975
 8005fe8:	3ff80000 	.word	0x3ff80000
 8005fec:	080089d0 	.word	0x080089d0
 8005ff0:	080089a8 	.word	0x080089a8
 8005ff4:	080089a1 	.word	0x080089a1
 8005ff8:	07f1      	lsls	r1, r6, #31
 8005ffa:	d508      	bpl.n	800600e <_dtoa_r+0x34e>
 8005ffc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006004:	f7fa fb00 	bl	8000608 <__aeabi_dmul>
 8006008:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800600c:	3501      	adds	r5, #1
 800600e:	1076      	asrs	r6, r6, #1
 8006010:	3708      	adds	r7, #8
 8006012:	2e00      	cmp	r6, #0
 8006014:	d1f0      	bne.n	8005ff8 <_dtoa_r+0x338>
 8006016:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800601a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800601e:	f7fa fc1d 	bl	800085c <__aeabi_ddiv>
 8006022:	e9cd 0100 	strd	r0, r1, [sp]
 8006026:	e01a      	b.n	800605e <_dtoa_r+0x39e>
 8006028:	2502      	movs	r5, #2
 800602a:	e7a3      	b.n	8005f74 <_dtoa_r+0x2b4>
 800602c:	f000 80a0 	beq.w	8006170 <_dtoa_r+0x4b0>
 8006030:	f1ca 0600 	rsb	r6, sl, #0
 8006034:	4b9f      	ldr	r3, [pc, #636]	; (80062b4 <_dtoa_r+0x5f4>)
 8006036:	4fa0      	ldr	r7, [pc, #640]	; (80062b8 <_dtoa_r+0x5f8>)
 8006038:	f006 020f 	and.w	r2, r6, #15
 800603c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006048:	f7fa fade 	bl	8000608 <__aeabi_dmul>
 800604c:	e9cd 0100 	strd	r0, r1, [sp]
 8006050:	1136      	asrs	r6, r6, #4
 8006052:	2300      	movs	r3, #0
 8006054:	2502      	movs	r5, #2
 8006056:	2e00      	cmp	r6, #0
 8006058:	d17f      	bne.n	800615a <_dtoa_r+0x49a>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e1      	bne.n	8006022 <_dtoa_r+0x362>
 800605e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8087 	beq.w	8006174 <_dtoa_r+0x4b4>
 8006066:	e9dd 6700 	ldrd	r6, r7, [sp]
 800606a:	2200      	movs	r2, #0
 800606c:	4b93      	ldr	r3, [pc, #588]	; (80062bc <_dtoa_r+0x5fc>)
 800606e:	4630      	mov	r0, r6
 8006070:	4639      	mov	r1, r7
 8006072:	f7fa fd3b 	bl	8000aec <__aeabi_dcmplt>
 8006076:	2800      	cmp	r0, #0
 8006078:	d07c      	beq.n	8006174 <_dtoa_r+0x4b4>
 800607a:	f1b9 0f00 	cmp.w	r9, #0
 800607e:	d079      	beq.n	8006174 <_dtoa_r+0x4b4>
 8006080:	9b02      	ldr	r3, [sp, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	dd35      	ble.n	80060f2 <_dtoa_r+0x432>
 8006086:	f10a 33ff 	add.w	r3, sl, #4294967295
 800608a:	9308      	str	r3, [sp, #32]
 800608c:	4639      	mov	r1, r7
 800608e:	2200      	movs	r2, #0
 8006090:	4b8b      	ldr	r3, [pc, #556]	; (80062c0 <_dtoa_r+0x600>)
 8006092:	4630      	mov	r0, r6
 8006094:	f7fa fab8 	bl	8000608 <__aeabi_dmul>
 8006098:	e9cd 0100 	strd	r0, r1, [sp]
 800609c:	9f02      	ldr	r7, [sp, #8]
 800609e:	3501      	adds	r5, #1
 80060a0:	4628      	mov	r0, r5
 80060a2:	f7fa fa47 	bl	8000534 <__aeabi_i2d>
 80060a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060aa:	f7fa faad 	bl	8000608 <__aeabi_dmul>
 80060ae:	2200      	movs	r2, #0
 80060b0:	4b84      	ldr	r3, [pc, #528]	; (80062c4 <_dtoa_r+0x604>)
 80060b2:	f7fa f8f3 	bl	800029c <__adddf3>
 80060b6:	4605      	mov	r5, r0
 80060b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80060bc:	2f00      	cmp	r7, #0
 80060be:	d15d      	bne.n	800617c <_dtoa_r+0x4bc>
 80060c0:	2200      	movs	r2, #0
 80060c2:	4b81      	ldr	r3, [pc, #516]	; (80062c8 <_dtoa_r+0x608>)
 80060c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060c8:	f7fa f8e6 	bl	8000298 <__aeabi_dsub>
 80060cc:	462a      	mov	r2, r5
 80060ce:	4633      	mov	r3, r6
 80060d0:	e9cd 0100 	strd	r0, r1, [sp]
 80060d4:	f7fa fd28 	bl	8000b28 <__aeabi_dcmpgt>
 80060d8:	2800      	cmp	r0, #0
 80060da:	f040 8288 	bne.w	80065ee <_dtoa_r+0x92e>
 80060de:	462a      	mov	r2, r5
 80060e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80060e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060e8:	f7fa fd00 	bl	8000aec <__aeabi_dcmplt>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f040 827c 	bne.w	80065ea <_dtoa_r+0x92a>
 80060f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060f6:	e9cd 2300 	strd	r2, r3, [sp]
 80060fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f2c0 8150 	blt.w	80063a2 <_dtoa_r+0x6e2>
 8006102:	f1ba 0f0e 	cmp.w	sl, #14
 8006106:	f300 814c 	bgt.w	80063a2 <_dtoa_r+0x6e2>
 800610a:	4b6a      	ldr	r3, [pc, #424]	; (80062b4 <_dtoa_r+0x5f4>)
 800610c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006110:	ed93 7b00 	vldr	d7, [r3]
 8006114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006116:	2b00      	cmp	r3, #0
 8006118:	ed8d 7b02 	vstr	d7, [sp, #8]
 800611c:	f280 80d8 	bge.w	80062d0 <_dtoa_r+0x610>
 8006120:	f1b9 0f00 	cmp.w	r9, #0
 8006124:	f300 80d4 	bgt.w	80062d0 <_dtoa_r+0x610>
 8006128:	f040 825e 	bne.w	80065e8 <_dtoa_r+0x928>
 800612c:	2200      	movs	r2, #0
 800612e:	4b66      	ldr	r3, [pc, #408]	; (80062c8 <_dtoa_r+0x608>)
 8006130:	ec51 0b17 	vmov	r0, r1, d7
 8006134:	f7fa fa68 	bl	8000608 <__aeabi_dmul>
 8006138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800613c:	f7fa fcea 	bl	8000b14 <__aeabi_dcmpge>
 8006140:	464f      	mov	r7, r9
 8006142:	464e      	mov	r6, r9
 8006144:	2800      	cmp	r0, #0
 8006146:	f040 8234 	bne.w	80065b2 <_dtoa_r+0x8f2>
 800614a:	2331      	movs	r3, #49	; 0x31
 800614c:	f10b 0501 	add.w	r5, fp, #1
 8006150:	f88b 3000 	strb.w	r3, [fp]
 8006154:	f10a 0a01 	add.w	sl, sl, #1
 8006158:	e22f      	b.n	80065ba <_dtoa_r+0x8fa>
 800615a:	07f2      	lsls	r2, r6, #31
 800615c:	d505      	bpl.n	800616a <_dtoa_r+0x4aa>
 800615e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006162:	f7fa fa51 	bl	8000608 <__aeabi_dmul>
 8006166:	3501      	adds	r5, #1
 8006168:	2301      	movs	r3, #1
 800616a:	1076      	asrs	r6, r6, #1
 800616c:	3708      	adds	r7, #8
 800616e:	e772      	b.n	8006056 <_dtoa_r+0x396>
 8006170:	2502      	movs	r5, #2
 8006172:	e774      	b.n	800605e <_dtoa_r+0x39e>
 8006174:	f8cd a020 	str.w	sl, [sp, #32]
 8006178:	464f      	mov	r7, r9
 800617a:	e791      	b.n	80060a0 <_dtoa_r+0x3e0>
 800617c:	4b4d      	ldr	r3, [pc, #308]	; (80062b4 <_dtoa_r+0x5f4>)
 800617e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006182:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006188:	2b00      	cmp	r3, #0
 800618a:	d047      	beq.n	800621c <_dtoa_r+0x55c>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	2000      	movs	r0, #0
 8006192:	494e      	ldr	r1, [pc, #312]	; (80062cc <_dtoa_r+0x60c>)
 8006194:	f7fa fb62 	bl	800085c <__aeabi_ddiv>
 8006198:	462a      	mov	r2, r5
 800619a:	4633      	mov	r3, r6
 800619c:	f7fa f87c 	bl	8000298 <__aeabi_dsub>
 80061a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80061a4:	465d      	mov	r5, fp
 80061a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061aa:	f7fa fcdd 	bl	8000b68 <__aeabi_d2iz>
 80061ae:	4606      	mov	r6, r0
 80061b0:	f7fa f9c0 	bl	8000534 <__aeabi_i2d>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061bc:	f7fa f86c 	bl	8000298 <__aeabi_dsub>
 80061c0:	3630      	adds	r6, #48	; 0x30
 80061c2:	f805 6b01 	strb.w	r6, [r5], #1
 80061c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061ca:	e9cd 0100 	strd	r0, r1, [sp]
 80061ce:	f7fa fc8d 	bl	8000aec <__aeabi_dcmplt>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d163      	bne.n	800629e <_dtoa_r+0x5de>
 80061d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061da:	2000      	movs	r0, #0
 80061dc:	4937      	ldr	r1, [pc, #220]	; (80062bc <_dtoa_r+0x5fc>)
 80061de:	f7fa f85b 	bl	8000298 <__aeabi_dsub>
 80061e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061e6:	f7fa fc81 	bl	8000aec <__aeabi_dcmplt>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	f040 80b7 	bne.w	800635e <_dtoa_r+0x69e>
 80061f0:	eba5 030b 	sub.w	r3, r5, fp
 80061f4:	429f      	cmp	r7, r3
 80061f6:	f77f af7c 	ble.w	80060f2 <_dtoa_r+0x432>
 80061fa:	2200      	movs	r2, #0
 80061fc:	4b30      	ldr	r3, [pc, #192]	; (80062c0 <_dtoa_r+0x600>)
 80061fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006202:	f7fa fa01 	bl	8000608 <__aeabi_dmul>
 8006206:	2200      	movs	r2, #0
 8006208:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800620c:	4b2c      	ldr	r3, [pc, #176]	; (80062c0 <_dtoa_r+0x600>)
 800620e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006212:	f7fa f9f9 	bl	8000608 <__aeabi_dmul>
 8006216:	e9cd 0100 	strd	r0, r1, [sp]
 800621a:	e7c4      	b.n	80061a6 <_dtoa_r+0x4e6>
 800621c:	462a      	mov	r2, r5
 800621e:	4633      	mov	r3, r6
 8006220:	f7fa f9f2 	bl	8000608 <__aeabi_dmul>
 8006224:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006228:	eb0b 0507 	add.w	r5, fp, r7
 800622c:	465e      	mov	r6, fp
 800622e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006232:	f7fa fc99 	bl	8000b68 <__aeabi_d2iz>
 8006236:	4607      	mov	r7, r0
 8006238:	f7fa f97c 	bl	8000534 <__aeabi_i2d>
 800623c:	3730      	adds	r7, #48	; 0x30
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006246:	f7fa f827 	bl	8000298 <__aeabi_dsub>
 800624a:	f806 7b01 	strb.w	r7, [r6], #1
 800624e:	42ae      	cmp	r6, r5
 8006250:	e9cd 0100 	strd	r0, r1, [sp]
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	d126      	bne.n	80062a8 <_dtoa_r+0x5e8>
 800625a:	4b1c      	ldr	r3, [pc, #112]	; (80062cc <_dtoa_r+0x60c>)
 800625c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006260:	f7fa f81c 	bl	800029c <__adddf3>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800626c:	f7fa fc5c 	bl	8000b28 <__aeabi_dcmpgt>
 8006270:	2800      	cmp	r0, #0
 8006272:	d174      	bne.n	800635e <_dtoa_r+0x69e>
 8006274:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006278:	2000      	movs	r0, #0
 800627a:	4914      	ldr	r1, [pc, #80]	; (80062cc <_dtoa_r+0x60c>)
 800627c:	f7fa f80c 	bl	8000298 <__aeabi_dsub>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006288:	f7fa fc30 	bl	8000aec <__aeabi_dcmplt>
 800628c:	2800      	cmp	r0, #0
 800628e:	f43f af30 	beq.w	80060f2 <_dtoa_r+0x432>
 8006292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006296:	2b30      	cmp	r3, #48	; 0x30
 8006298:	f105 32ff 	add.w	r2, r5, #4294967295
 800629c:	d002      	beq.n	80062a4 <_dtoa_r+0x5e4>
 800629e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80062a2:	e04a      	b.n	800633a <_dtoa_r+0x67a>
 80062a4:	4615      	mov	r5, r2
 80062a6:	e7f4      	b.n	8006292 <_dtoa_r+0x5d2>
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <_dtoa_r+0x600>)
 80062aa:	f7fa f9ad 	bl	8000608 <__aeabi_dmul>
 80062ae:	e9cd 0100 	strd	r0, r1, [sp]
 80062b2:	e7bc      	b.n	800622e <_dtoa_r+0x56e>
 80062b4:	080089d0 	.word	0x080089d0
 80062b8:	080089a8 	.word	0x080089a8
 80062bc:	3ff00000 	.word	0x3ff00000
 80062c0:	40240000 	.word	0x40240000
 80062c4:	401c0000 	.word	0x401c0000
 80062c8:	40140000 	.word	0x40140000
 80062cc:	3fe00000 	.word	0x3fe00000
 80062d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80062d4:	465d      	mov	r5, fp
 80062d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062da:	4630      	mov	r0, r6
 80062dc:	4639      	mov	r1, r7
 80062de:	f7fa fabd 	bl	800085c <__aeabi_ddiv>
 80062e2:	f7fa fc41 	bl	8000b68 <__aeabi_d2iz>
 80062e6:	4680      	mov	r8, r0
 80062e8:	f7fa f924 	bl	8000534 <__aeabi_i2d>
 80062ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062f0:	f7fa f98a 	bl	8000608 <__aeabi_dmul>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4630      	mov	r0, r6
 80062fa:	4639      	mov	r1, r7
 80062fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006300:	f7f9 ffca 	bl	8000298 <__aeabi_dsub>
 8006304:	f805 6b01 	strb.w	r6, [r5], #1
 8006308:	eba5 060b 	sub.w	r6, r5, fp
 800630c:	45b1      	cmp	r9, r6
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	d139      	bne.n	8006388 <_dtoa_r+0x6c8>
 8006314:	f7f9 ffc2 	bl	800029c <__adddf3>
 8006318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800631c:	4606      	mov	r6, r0
 800631e:	460f      	mov	r7, r1
 8006320:	f7fa fc02 	bl	8000b28 <__aeabi_dcmpgt>
 8006324:	b9c8      	cbnz	r0, 800635a <_dtoa_r+0x69a>
 8006326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800632a:	4630      	mov	r0, r6
 800632c:	4639      	mov	r1, r7
 800632e:	f7fa fbd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006332:	b110      	cbz	r0, 800633a <_dtoa_r+0x67a>
 8006334:	f018 0f01 	tst.w	r8, #1
 8006338:	d10f      	bne.n	800635a <_dtoa_r+0x69a>
 800633a:	9904      	ldr	r1, [sp, #16]
 800633c:	4620      	mov	r0, r4
 800633e:	f000 facc 	bl	80068da <_Bfree>
 8006342:	2300      	movs	r3, #0
 8006344:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006346:	702b      	strb	r3, [r5, #0]
 8006348:	f10a 0301 	add.w	r3, sl, #1
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8241 	beq.w	80067d8 <_dtoa_r+0xb18>
 8006356:	601d      	str	r5, [r3, #0]
 8006358:	e23e      	b.n	80067d8 <_dtoa_r+0xb18>
 800635a:	f8cd a020 	str.w	sl, [sp, #32]
 800635e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006362:	2a39      	cmp	r2, #57	; 0x39
 8006364:	f105 33ff 	add.w	r3, r5, #4294967295
 8006368:	d108      	bne.n	800637c <_dtoa_r+0x6bc>
 800636a:	459b      	cmp	fp, r3
 800636c:	d10a      	bne.n	8006384 <_dtoa_r+0x6c4>
 800636e:	9b08      	ldr	r3, [sp, #32]
 8006370:	3301      	adds	r3, #1
 8006372:	9308      	str	r3, [sp, #32]
 8006374:	2330      	movs	r3, #48	; 0x30
 8006376:	f88b 3000 	strb.w	r3, [fp]
 800637a:	465b      	mov	r3, fp
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	3201      	adds	r2, #1
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	e78c      	b.n	800629e <_dtoa_r+0x5de>
 8006384:	461d      	mov	r5, r3
 8006386:	e7ea      	b.n	800635e <_dtoa_r+0x69e>
 8006388:	2200      	movs	r2, #0
 800638a:	4b9b      	ldr	r3, [pc, #620]	; (80065f8 <_dtoa_r+0x938>)
 800638c:	f7fa f93c 	bl	8000608 <__aeabi_dmul>
 8006390:	2200      	movs	r2, #0
 8006392:	2300      	movs	r3, #0
 8006394:	4606      	mov	r6, r0
 8006396:	460f      	mov	r7, r1
 8006398:	f7fa fb9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800639c:	2800      	cmp	r0, #0
 800639e:	d09a      	beq.n	80062d6 <_dtoa_r+0x616>
 80063a0:	e7cb      	b.n	800633a <_dtoa_r+0x67a>
 80063a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063a4:	2a00      	cmp	r2, #0
 80063a6:	f000 808b 	beq.w	80064c0 <_dtoa_r+0x800>
 80063aa:	9a06      	ldr	r2, [sp, #24]
 80063ac:	2a01      	cmp	r2, #1
 80063ae:	dc6e      	bgt.n	800648e <_dtoa_r+0x7ce>
 80063b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	d067      	beq.n	8006486 <_dtoa_r+0x7c6>
 80063b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063ba:	9f07      	ldr	r7, [sp, #28]
 80063bc:	9d05      	ldr	r5, [sp, #20]
 80063be:	9a05      	ldr	r2, [sp, #20]
 80063c0:	2101      	movs	r1, #1
 80063c2:	441a      	add	r2, r3
 80063c4:	4620      	mov	r0, r4
 80063c6:	9205      	str	r2, [sp, #20]
 80063c8:	4498      	add	r8, r3
 80063ca:	f000 fb26 	bl	8006a1a <__i2b>
 80063ce:	4606      	mov	r6, r0
 80063d0:	2d00      	cmp	r5, #0
 80063d2:	dd0c      	ble.n	80063ee <_dtoa_r+0x72e>
 80063d4:	f1b8 0f00 	cmp.w	r8, #0
 80063d8:	dd09      	ble.n	80063ee <_dtoa_r+0x72e>
 80063da:	4545      	cmp	r5, r8
 80063dc:	9a05      	ldr	r2, [sp, #20]
 80063de:	462b      	mov	r3, r5
 80063e0:	bfa8      	it	ge
 80063e2:	4643      	movge	r3, r8
 80063e4:	1ad2      	subs	r2, r2, r3
 80063e6:	9205      	str	r2, [sp, #20]
 80063e8:	1aed      	subs	r5, r5, r3
 80063ea:	eba8 0803 	sub.w	r8, r8, r3
 80063ee:	9b07      	ldr	r3, [sp, #28]
 80063f0:	b1eb      	cbz	r3, 800642e <_dtoa_r+0x76e>
 80063f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d067      	beq.n	80064c8 <_dtoa_r+0x808>
 80063f8:	b18f      	cbz	r7, 800641e <_dtoa_r+0x75e>
 80063fa:	4631      	mov	r1, r6
 80063fc:	463a      	mov	r2, r7
 80063fe:	4620      	mov	r0, r4
 8006400:	f000 fbaa 	bl	8006b58 <__pow5mult>
 8006404:	9a04      	ldr	r2, [sp, #16]
 8006406:	4601      	mov	r1, r0
 8006408:	4606      	mov	r6, r0
 800640a:	4620      	mov	r0, r4
 800640c:	f000 fb0e 	bl	8006a2c <__multiply>
 8006410:	9904      	ldr	r1, [sp, #16]
 8006412:	9008      	str	r0, [sp, #32]
 8006414:	4620      	mov	r0, r4
 8006416:	f000 fa60 	bl	80068da <_Bfree>
 800641a:	9b08      	ldr	r3, [sp, #32]
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	9b07      	ldr	r3, [sp, #28]
 8006420:	1bda      	subs	r2, r3, r7
 8006422:	d004      	beq.n	800642e <_dtoa_r+0x76e>
 8006424:	9904      	ldr	r1, [sp, #16]
 8006426:	4620      	mov	r0, r4
 8006428:	f000 fb96 	bl	8006b58 <__pow5mult>
 800642c:	9004      	str	r0, [sp, #16]
 800642e:	2101      	movs	r1, #1
 8006430:	4620      	mov	r0, r4
 8006432:	f000 faf2 	bl	8006a1a <__i2b>
 8006436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006438:	4607      	mov	r7, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 81d0 	beq.w	80067e0 <_dtoa_r+0xb20>
 8006440:	461a      	mov	r2, r3
 8006442:	4601      	mov	r1, r0
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fb87 	bl	8006b58 <__pow5mult>
 800644a:	9b06      	ldr	r3, [sp, #24]
 800644c:	2b01      	cmp	r3, #1
 800644e:	4607      	mov	r7, r0
 8006450:	dc40      	bgt.n	80064d4 <_dtoa_r+0x814>
 8006452:	9b00      	ldr	r3, [sp, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d139      	bne.n	80064cc <_dtoa_r+0x80c>
 8006458:	9b01      	ldr	r3, [sp, #4]
 800645a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800645e:	2b00      	cmp	r3, #0
 8006460:	d136      	bne.n	80064d0 <_dtoa_r+0x810>
 8006462:	9b01      	ldr	r3, [sp, #4]
 8006464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006468:	0d1b      	lsrs	r3, r3, #20
 800646a:	051b      	lsls	r3, r3, #20
 800646c:	b12b      	cbz	r3, 800647a <_dtoa_r+0x7ba>
 800646e:	9b05      	ldr	r3, [sp, #20]
 8006470:	3301      	adds	r3, #1
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	f108 0801 	add.w	r8, r8, #1
 8006478:	2301      	movs	r3, #1
 800647a:	9307      	str	r3, [sp, #28]
 800647c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800647e:	2b00      	cmp	r3, #0
 8006480:	d12a      	bne.n	80064d8 <_dtoa_r+0x818>
 8006482:	2001      	movs	r0, #1
 8006484:	e030      	b.n	80064e8 <_dtoa_r+0x828>
 8006486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006488:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800648c:	e795      	b.n	80063ba <_dtoa_r+0x6fa>
 800648e:	9b07      	ldr	r3, [sp, #28]
 8006490:	f109 37ff 	add.w	r7, r9, #4294967295
 8006494:	42bb      	cmp	r3, r7
 8006496:	bfbf      	itttt	lt
 8006498:	9b07      	ldrlt	r3, [sp, #28]
 800649a:	9707      	strlt	r7, [sp, #28]
 800649c:	1afa      	sublt	r2, r7, r3
 800649e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80064a0:	bfbb      	ittet	lt
 80064a2:	189b      	addlt	r3, r3, r2
 80064a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80064a6:	1bdf      	subge	r7, r3, r7
 80064a8:	2700      	movlt	r7, #0
 80064aa:	f1b9 0f00 	cmp.w	r9, #0
 80064ae:	bfb5      	itete	lt
 80064b0:	9b05      	ldrlt	r3, [sp, #20]
 80064b2:	9d05      	ldrge	r5, [sp, #20]
 80064b4:	eba3 0509 	sublt.w	r5, r3, r9
 80064b8:	464b      	movge	r3, r9
 80064ba:	bfb8      	it	lt
 80064bc:	2300      	movlt	r3, #0
 80064be:	e77e      	b.n	80063be <_dtoa_r+0x6fe>
 80064c0:	9f07      	ldr	r7, [sp, #28]
 80064c2:	9d05      	ldr	r5, [sp, #20]
 80064c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064c6:	e783      	b.n	80063d0 <_dtoa_r+0x710>
 80064c8:	9a07      	ldr	r2, [sp, #28]
 80064ca:	e7ab      	b.n	8006424 <_dtoa_r+0x764>
 80064cc:	2300      	movs	r3, #0
 80064ce:	e7d4      	b.n	800647a <_dtoa_r+0x7ba>
 80064d0:	9b00      	ldr	r3, [sp, #0]
 80064d2:	e7d2      	b.n	800647a <_dtoa_r+0x7ba>
 80064d4:	2300      	movs	r3, #0
 80064d6:	9307      	str	r3, [sp, #28]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80064de:	6918      	ldr	r0, [r3, #16]
 80064e0:	f000 fa4d 	bl	800697e <__hi0bits>
 80064e4:	f1c0 0020 	rsb	r0, r0, #32
 80064e8:	4440      	add	r0, r8
 80064ea:	f010 001f 	ands.w	r0, r0, #31
 80064ee:	d047      	beq.n	8006580 <_dtoa_r+0x8c0>
 80064f0:	f1c0 0320 	rsb	r3, r0, #32
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	dd3b      	ble.n	8006570 <_dtoa_r+0x8b0>
 80064f8:	9b05      	ldr	r3, [sp, #20]
 80064fa:	f1c0 001c 	rsb	r0, r0, #28
 80064fe:	4403      	add	r3, r0
 8006500:	9305      	str	r3, [sp, #20]
 8006502:	4405      	add	r5, r0
 8006504:	4480      	add	r8, r0
 8006506:	9b05      	ldr	r3, [sp, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	dd05      	ble.n	8006518 <_dtoa_r+0x858>
 800650c:	461a      	mov	r2, r3
 800650e:	9904      	ldr	r1, [sp, #16]
 8006510:	4620      	mov	r0, r4
 8006512:	f000 fb6f 	bl	8006bf4 <__lshift>
 8006516:	9004      	str	r0, [sp, #16]
 8006518:	f1b8 0f00 	cmp.w	r8, #0
 800651c:	dd05      	ble.n	800652a <_dtoa_r+0x86a>
 800651e:	4639      	mov	r1, r7
 8006520:	4642      	mov	r2, r8
 8006522:	4620      	mov	r0, r4
 8006524:	f000 fb66 	bl	8006bf4 <__lshift>
 8006528:	4607      	mov	r7, r0
 800652a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800652c:	b353      	cbz	r3, 8006584 <_dtoa_r+0x8c4>
 800652e:	4639      	mov	r1, r7
 8006530:	9804      	ldr	r0, [sp, #16]
 8006532:	f000 fbb3 	bl	8006c9c <__mcmp>
 8006536:	2800      	cmp	r0, #0
 8006538:	da24      	bge.n	8006584 <_dtoa_r+0x8c4>
 800653a:	2300      	movs	r3, #0
 800653c:	220a      	movs	r2, #10
 800653e:	9904      	ldr	r1, [sp, #16]
 8006540:	4620      	mov	r0, r4
 8006542:	f000 f9e1 	bl	8006908 <__multadd>
 8006546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006548:	9004      	str	r0, [sp, #16]
 800654a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 814d 	beq.w	80067ee <_dtoa_r+0xb2e>
 8006554:	2300      	movs	r3, #0
 8006556:	4631      	mov	r1, r6
 8006558:	220a      	movs	r2, #10
 800655a:	4620      	mov	r0, r4
 800655c:	f000 f9d4 	bl	8006908 <__multadd>
 8006560:	9b02      	ldr	r3, [sp, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	4606      	mov	r6, r0
 8006566:	dc4f      	bgt.n	8006608 <_dtoa_r+0x948>
 8006568:	9b06      	ldr	r3, [sp, #24]
 800656a:	2b02      	cmp	r3, #2
 800656c:	dd4c      	ble.n	8006608 <_dtoa_r+0x948>
 800656e:	e011      	b.n	8006594 <_dtoa_r+0x8d4>
 8006570:	d0c9      	beq.n	8006506 <_dtoa_r+0x846>
 8006572:	9a05      	ldr	r2, [sp, #20]
 8006574:	331c      	adds	r3, #28
 8006576:	441a      	add	r2, r3
 8006578:	9205      	str	r2, [sp, #20]
 800657a:	441d      	add	r5, r3
 800657c:	4498      	add	r8, r3
 800657e:	e7c2      	b.n	8006506 <_dtoa_r+0x846>
 8006580:	4603      	mov	r3, r0
 8006582:	e7f6      	b.n	8006572 <_dtoa_r+0x8b2>
 8006584:	f1b9 0f00 	cmp.w	r9, #0
 8006588:	dc38      	bgt.n	80065fc <_dtoa_r+0x93c>
 800658a:	9b06      	ldr	r3, [sp, #24]
 800658c:	2b02      	cmp	r3, #2
 800658e:	dd35      	ble.n	80065fc <_dtoa_r+0x93c>
 8006590:	f8cd 9008 	str.w	r9, [sp, #8]
 8006594:	9b02      	ldr	r3, [sp, #8]
 8006596:	b963      	cbnz	r3, 80065b2 <_dtoa_r+0x8f2>
 8006598:	4639      	mov	r1, r7
 800659a:	2205      	movs	r2, #5
 800659c:	4620      	mov	r0, r4
 800659e:	f000 f9b3 	bl	8006908 <__multadd>
 80065a2:	4601      	mov	r1, r0
 80065a4:	4607      	mov	r7, r0
 80065a6:	9804      	ldr	r0, [sp, #16]
 80065a8:	f000 fb78 	bl	8006c9c <__mcmp>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f73f adcc 	bgt.w	800614a <_dtoa_r+0x48a>
 80065b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065b4:	465d      	mov	r5, fp
 80065b6:	ea6f 0a03 	mvn.w	sl, r3
 80065ba:	f04f 0900 	mov.w	r9, #0
 80065be:	4639      	mov	r1, r7
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 f98a 	bl	80068da <_Bfree>
 80065c6:	2e00      	cmp	r6, #0
 80065c8:	f43f aeb7 	beq.w	800633a <_dtoa_r+0x67a>
 80065cc:	f1b9 0f00 	cmp.w	r9, #0
 80065d0:	d005      	beq.n	80065de <_dtoa_r+0x91e>
 80065d2:	45b1      	cmp	r9, r6
 80065d4:	d003      	beq.n	80065de <_dtoa_r+0x91e>
 80065d6:	4649      	mov	r1, r9
 80065d8:	4620      	mov	r0, r4
 80065da:	f000 f97e 	bl	80068da <_Bfree>
 80065de:	4631      	mov	r1, r6
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 f97a 	bl	80068da <_Bfree>
 80065e6:	e6a8      	b.n	800633a <_dtoa_r+0x67a>
 80065e8:	2700      	movs	r7, #0
 80065ea:	463e      	mov	r6, r7
 80065ec:	e7e1      	b.n	80065b2 <_dtoa_r+0x8f2>
 80065ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80065f2:	463e      	mov	r6, r7
 80065f4:	e5a9      	b.n	800614a <_dtoa_r+0x48a>
 80065f6:	bf00      	nop
 80065f8:	40240000 	.word	0x40240000
 80065fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80fa 	beq.w	80067fc <_dtoa_r+0xb3c>
 8006608:	2d00      	cmp	r5, #0
 800660a:	dd05      	ble.n	8006618 <_dtoa_r+0x958>
 800660c:	4631      	mov	r1, r6
 800660e:	462a      	mov	r2, r5
 8006610:	4620      	mov	r0, r4
 8006612:	f000 faef 	bl	8006bf4 <__lshift>
 8006616:	4606      	mov	r6, r0
 8006618:	9b07      	ldr	r3, [sp, #28]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d04c      	beq.n	80066b8 <_dtoa_r+0x9f8>
 800661e:	6871      	ldr	r1, [r6, #4]
 8006620:	4620      	mov	r0, r4
 8006622:	f000 f926 	bl	8006872 <_Balloc>
 8006626:	6932      	ldr	r2, [r6, #16]
 8006628:	3202      	adds	r2, #2
 800662a:	4605      	mov	r5, r0
 800662c:	0092      	lsls	r2, r2, #2
 800662e:	f106 010c 	add.w	r1, r6, #12
 8006632:	300c      	adds	r0, #12
 8006634:	f000 f912 	bl	800685c <memcpy>
 8006638:	2201      	movs	r2, #1
 800663a:	4629      	mov	r1, r5
 800663c:	4620      	mov	r0, r4
 800663e:	f000 fad9 	bl	8006bf4 <__lshift>
 8006642:	9b00      	ldr	r3, [sp, #0]
 8006644:	f8cd b014 	str.w	fp, [sp, #20]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	46b1      	mov	r9, r6
 800664e:	9307      	str	r3, [sp, #28]
 8006650:	4606      	mov	r6, r0
 8006652:	4639      	mov	r1, r7
 8006654:	9804      	ldr	r0, [sp, #16]
 8006656:	f7ff faa7 	bl	8005ba8 <quorem>
 800665a:	4649      	mov	r1, r9
 800665c:	4605      	mov	r5, r0
 800665e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006662:	9804      	ldr	r0, [sp, #16]
 8006664:	f000 fb1a 	bl	8006c9c <__mcmp>
 8006668:	4632      	mov	r2, r6
 800666a:	9000      	str	r0, [sp, #0]
 800666c:	4639      	mov	r1, r7
 800666e:	4620      	mov	r0, r4
 8006670:	f000 fb2e 	bl	8006cd0 <__mdiff>
 8006674:	68c3      	ldr	r3, [r0, #12]
 8006676:	4602      	mov	r2, r0
 8006678:	bb03      	cbnz	r3, 80066bc <_dtoa_r+0x9fc>
 800667a:	4601      	mov	r1, r0
 800667c:	9008      	str	r0, [sp, #32]
 800667e:	9804      	ldr	r0, [sp, #16]
 8006680:	f000 fb0c 	bl	8006c9c <__mcmp>
 8006684:	9a08      	ldr	r2, [sp, #32]
 8006686:	4603      	mov	r3, r0
 8006688:	4611      	mov	r1, r2
 800668a:	4620      	mov	r0, r4
 800668c:	9308      	str	r3, [sp, #32]
 800668e:	f000 f924 	bl	80068da <_Bfree>
 8006692:	9b08      	ldr	r3, [sp, #32]
 8006694:	b9a3      	cbnz	r3, 80066c0 <_dtoa_r+0xa00>
 8006696:	9a06      	ldr	r2, [sp, #24]
 8006698:	b992      	cbnz	r2, 80066c0 <_dtoa_r+0xa00>
 800669a:	9a07      	ldr	r2, [sp, #28]
 800669c:	b982      	cbnz	r2, 80066c0 <_dtoa_r+0xa00>
 800669e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066a2:	d029      	beq.n	80066f8 <_dtoa_r+0xa38>
 80066a4:	9b00      	ldr	r3, [sp, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dd01      	ble.n	80066ae <_dtoa_r+0x9ee>
 80066aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80066ae:	9b05      	ldr	r3, [sp, #20]
 80066b0:	1c5d      	adds	r5, r3, #1
 80066b2:	f883 8000 	strb.w	r8, [r3]
 80066b6:	e782      	b.n	80065be <_dtoa_r+0x8fe>
 80066b8:	4630      	mov	r0, r6
 80066ba:	e7c2      	b.n	8006642 <_dtoa_r+0x982>
 80066bc:	2301      	movs	r3, #1
 80066be:	e7e3      	b.n	8006688 <_dtoa_r+0x9c8>
 80066c0:	9a00      	ldr	r2, [sp, #0]
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	db04      	blt.n	80066d0 <_dtoa_r+0xa10>
 80066c6:	d125      	bne.n	8006714 <_dtoa_r+0xa54>
 80066c8:	9a06      	ldr	r2, [sp, #24]
 80066ca:	bb1a      	cbnz	r2, 8006714 <_dtoa_r+0xa54>
 80066cc:	9a07      	ldr	r2, [sp, #28]
 80066ce:	bb0a      	cbnz	r2, 8006714 <_dtoa_r+0xa54>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	ddec      	ble.n	80066ae <_dtoa_r+0x9ee>
 80066d4:	2201      	movs	r2, #1
 80066d6:	9904      	ldr	r1, [sp, #16]
 80066d8:	4620      	mov	r0, r4
 80066da:	f000 fa8b 	bl	8006bf4 <__lshift>
 80066de:	4639      	mov	r1, r7
 80066e0:	9004      	str	r0, [sp, #16]
 80066e2:	f000 fadb 	bl	8006c9c <__mcmp>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	dc03      	bgt.n	80066f2 <_dtoa_r+0xa32>
 80066ea:	d1e0      	bne.n	80066ae <_dtoa_r+0x9ee>
 80066ec:	f018 0f01 	tst.w	r8, #1
 80066f0:	d0dd      	beq.n	80066ae <_dtoa_r+0x9ee>
 80066f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066f6:	d1d8      	bne.n	80066aa <_dtoa_r+0x9ea>
 80066f8:	9b05      	ldr	r3, [sp, #20]
 80066fa:	9a05      	ldr	r2, [sp, #20]
 80066fc:	1c5d      	adds	r5, r3, #1
 80066fe:	2339      	movs	r3, #57	; 0x39
 8006700:	7013      	strb	r3, [r2, #0]
 8006702:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006706:	2b39      	cmp	r3, #57	; 0x39
 8006708:	f105 32ff 	add.w	r2, r5, #4294967295
 800670c:	d04f      	beq.n	80067ae <_dtoa_r+0xaee>
 800670e:	3301      	adds	r3, #1
 8006710:	7013      	strb	r3, [r2, #0]
 8006712:	e754      	b.n	80065be <_dtoa_r+0x8fe>
 8006714:	9a05      	ldr	r2, [sp, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f102 0501 	add.w	r5, r2, #1
 800671c:	dd06      	ble.n	800672c <_dtoa_r+0xa6c>
 800671e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006722:	d0e9      	beq.n	80066f8 <_dtoa_r+0xa38>
 8006724:	f108 0801 	add.w	r8, r8, #1
 8006728:	9b05      	ldr	r3, [sp, #20]
 800672a:	e7c2      	b.n	80066b2 <_dtoa_r+0x9f2>
 800672c:	9a02      	ldr	r2, [sp, #8]
 800672e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006732:	eba5 030b 	sub.w	r3, r5, fp
 8006736:	4293      	cmp	r3, r2
 8006738:	d021      	beq.n	800677e <_dtoa_r+0xabe>
 800673a:	2300      	movs	r3, #0
 800673c:	220a      	movs	r2, #10
 800673e:	9904      	ldr	r1, [sp, #16]
 8006740:	4620      	mov	r0, r4
 8006742:	f000 f8e1 	bl	8006908 <__multadd>
 8006746:	45b1      	cmp	r9, r6
 8006748:	9004      	str	r0, [sp, #16]
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	f04f 020a 	mov.w	r2, #10
 8006752:	4649      	mov	r1, r9
 8006754:	4620      	mov	r0, r4
 8006756:	d105      	bne.n	8006764 <_dtoa_r+0xaa4>
 8006758:	f000 f8d6 	bl	8006908 <__multadd>
 800675c:	4681      	mov	r9, r0
 800675e:	4606      	mov	r6, r0
 8006760:	9505      	str	r5, [sp, #20]
 8006762:	e776      	b.n	8006652 <_dtoa_r+0x992>
 8006764:	f000 f8d0 	bl	8006908 <__multadd>
 8006768:	4631      	mov	r1, r6
 800676a:	4681      	mov	r9, r0
 800676c:	2300      	movs	r3, #0
 800676e:	220a      	movs	r2, #10
 8006770:	4620      	mov	r0, r4
 8006772:	f000 f8c9 	bl	8006908 <__multadd>
 8006776:	4606      	mov	r6, r0
 8006778:	e7f2      	b.n	8006760 <_dtoa_r+0xaa0>
 800677a:	f04f 0900 	mov.w	r9, #0
 800677e:	2201      	movs	r2, #1
 8006780:	9904      	ldr	r1, [sp, #16]
 8006782:	4620      	mov	r0, r4
 8006784:	f000 fa36 	bl	8006bf4 <__lshift>
 8006788:	4639      	mov	r1, r7
 800678a:	9004      	str	r0, [sp, #16]
 800678c:	f000 fa86 	bl	8006c9c <__mcmp>
 8006790:	2800      	cmp	r0, #0
 8006792:	dcb6      	bgt.n	8006702 <_dtoa_r+0xa42>
 8006794:	d102      	bne.n	800679c <_dtoa_r+0xadc>
 8006796:	f018 0f01 	tst.w	r8, #1
 800679a:	d1b2      	bne.n	8006702 <_dtoa_r+0xa42>
 800679c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067a0:	2b30      	cmp	r3, #48	; 0x30
 80067a2:	f105 32ff 	add.w	r2, r5, #4294967295
 80067a6:	f47f af0a 	bne.w	80065be <_dtoa_r+0x8fe>
 80067aa:	4615      	mov	r5, r2
 80067ac:	e7f6      	b.n	800679c <_dtoa_r+0xadc>
 80067ae:	4593      	cmp	fp, r2
 80067b0:	d105      	bne.n	80067be <_dtoa_r+0xafe>
 80067b2:	2331      	movs	r3, #49	; 0x31
 80067b4:	f10a 0a01 	add.w	sl, sl, #1
 80067b8:	f88b 3000 	strb.w	r3, [fp]
 80067bc:	e6ff      	b.n	80065be <_dtoa_r+0x8fe>
 80067be:	4615      	mov	r5, r2
 80067c0:	e79f      	b.n	8006702 <_dtoa_r+0xa42>
 80067c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006828 <_dtoa_r+0xb68>
 80067c6:	e007      	b.n	80067d8 <_dtoa_r+0xb18>
 80067c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800682c <_dtoa_r+0xb6c>
 80067ce:	b11b      	cbz	r3, 80067d8 <_dtoa_r+0xb18>
 80067d0:	f10b 0308 	add.w	r3, fp, #8
 80067d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	4658      	mov	r0, fp
 80067da:	b017      	add	sp, #92	; 0x5c
 80067dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e0:	9b06      	ldr	r3, [sp, #24]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	f77f ae35 	ble.w	8006452 <_dtoa_r+0x792>
 80067e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ea:	9307      	str	r3, [sp, #28]
 80067ec:	e649      	b.n	8006482 <_dtoa_r+0x7c2>
 80067ee:	9b02      	ldr	r3, [sp, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dc03      	bgt.n	80067fc <_dtoa_r+0xb3c>
 80067f4:	9b06      	ldr	r3, [sp, #24]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	f73f aecc 	bgt.w	8006594 <_dtoa_r+0x8d4>
 80067fc:	465d      	mov	r5, fp
 80067fe:	4639      	mov	r1, r7
 8006800:	9804      	ldr	r0, [sp, #16]
 8006802:	f7ff f9d1 	bl	8005ba8 <quorem>
 8006806:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800680a:	f805 8b01 	strb.w	r8, [r5], #1
 800680e:	9a02      	ldr	r2, [sp, #8]
 8006810:	eba5 030b 	sub.w	r3, r5, fp
 8006814:	429a      	cmp	r2, r3
 8006816:	ddb0      	ble.n	800677a <_dtoa_r+0xaba>
 8006818:	2300      	movs	r3, #0
 800681a:	220a      	movs	r2, #10
 800681c:	9904      	ldr	r1, [sp, #16]
 800681e:	4620      	mov	r0, r4
 8006820:	f000 f872 	bl	8006908 <__multadd>
 8006824:	9004      	str	r0, [sp, #16]
 8006826:	e7ea      	b.n	80067fe <_dtoa_r+0xb3e>
 8006828:	08008974 	.word	0x08008974
 800682c:	08008998 	.word	0x08008998

08006830 <_localeconv_r>:
 8006830:	4b04      	ldr	r3, [pc, #16]	; (8006844 <_localeconv_r+0x14>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6a18      	ldr	r0, [r3, #32]
 8006836:	4b04      	ldr	r3, [pc, #16]	; (8006848 <_localeconv_r+0x18>)
 8006838:	2800      	cmp	r0, #0
 800683a:	bf08      	it	eq
 800683c:	4618      	moveq	r0, r3
 800683e:	30f0      	adds	r0, #240	; 0xf0
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	2000005c 	.word	0x2000005c
 8006848:	200000c0 	.word	0x200000c0

0800684c <malloc>:
 800684c:	4b02      	ldr	r3, [pc, #8]	; (8006858 <malloc+0xc>)
 800684e:	4601      	mov	r1, r0
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	f000 bb45 	b.w	8006ee0 <_malloc_r>
 8006856:	bf00      	nop
 8006858:	2000005c 	.word	0x2000005c

0800685c <memcpy>:
 800685c:	b510      	push	{r4, lr}
 800685e:	1e43      	subs	r3, r0, #1
 8006860:	440a      	add	r2, r1
 8006862:	4291      	cmp	r1, r2
 8006864:	d100      	bne.n	8006868 <memcpy+0xc>
 8006866:	bd10      	pop	{r4, pc}
 8006868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800686c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006870:	e7f7      	b.n	8006862 <memcpy+0x6>

08006872 <_Balloc>:
 8006872:	b570      	push	{r4, r5, r6, lr}
 8006874:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006876:	4604      	mov	r4, r0
 8006878:	460e      	mov	r6, r1
 800687a:	b93d      	cbnz	r5, 800688c <_Balloc+0x1a>
 800687c:	2010      	movs	r0, #16
 800687e:	f7ff ffe5 	bl	800684c <malloc>
 8006882:	6260      	str	r0, [r4, #36]	; 0x24
 8006884:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006888:	6005      	str	r5, [r0, #0]
 800688a:	60c5      	str	r5, [r0, #12]
 800688c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800688e:	68eb      	ldr	r3, [r5, #12]
 8006890:	b183      	cbz	r3, 80068b4 <_Balloc+0x42>
 8006892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800689a:	b9b8      	cbnz	r0, 80068cc <_Balloc+0x5a>
 800689c:	2101      	movs	r1, #1
 800689e:	fa01 f506 	lsl.w	r5, r1, r6
 80068a2:	1d6a      	adds	r2, r5, #5
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 fabe 	bl	8006e28 <_calloc_r>
 80068ac:	b160      	cbz	r0, 80068c8 <_Balloc+0x56>
 80068ae:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80068b2:	e00e      	b.n	80068d2 <_Balloc+0x60>
 80068b4:	2221      	movs	r2, #33	; 0x21
 80068b6:	2104      	movs	r1, #4
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fab5 	bl	8006e28 <_calloc_r>
 80068be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068c0:	60e8      	str	r0, [r5, #12]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e4      	bne.n	8006892 <_Balloc+0x20>
 80068c8:	2000      	movs	r0, #0
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	6802      	ldr	r2, [r0, #0]
 80068ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80068d2:	2300      	movs	r3, #0
 80068d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068d8:	e7f7      	b.n	80068ca <_Balloc+0x58>

080068da <_Bfree>:
 80068da:	b570      	push	{r4, r5, r6, lr}
 80068dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80068de:	4606      	mov	r6, r0
 80068e0:	460d      	mov	r5, r1
 80068e2:	b93c      	cbnz	r4, 80068f4 <_Bfree+0x1a>
 80068e4:	2010      	movs	r0, #16
 80068e6:	f7ff ffb1 	bl	800684c <malloc>
 80068ea:	6270      	str	r0, [r6, #36]	; 0x24
 80068ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068f0:	6004      	str	r4, [r0, #0]
 80068f2:	60c4      	str	r4, [r0, #12]
 80068f4:	b13d      	cbz	r5, 8006906 <_Bfree+0x2c>
 80068f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80068f8:	686a      	ldr	r2, [r5, #4]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006900:	6029      	str	r1, [r5, #0]
 8006902:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006906:	bd70      	pop	{r4, r5, r6, pc}

08006908 <__multadd>:
 8006908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690c:	690d      	ldr	r5, [r1, #16]
 800690e:	461f      	mov	r7, r3
 8006910:	4606      	mov	r6, r0
 8006912:	460c      	mov	r4, r1
 8006914:	f101 0c14 	add.w	ip, r1, #20
 8006918:	2300      	movs	r3, #0
 800691a:	f8dc 0000 	ldr.w	r0, [ip]
 800691e:	b281      	uxth	r1, r0
 8006920:	fb02 7101 	mla	r1, r2, r1, r7
 8006924:	0c0f      	lsrs	r7, r1, #16
 8006926:	0c00      	lsrs	r0, r0, #16
 8006928:	fb02 7000 	mla	r0, r2, r0, r7
 800692c:	b289      	uxth	r1, r1
 800692e:	3301      	adds	r3, #1
 8006930:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006934:	429d      	cmp	r5, r3
 8006936:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800693a:	f84c 1b04 	str.w	r1, [ip], #4
 800693e:	dcec      	bgt.n	800691a <__multadd+0x12>
 8006940:	b1d7      	cbz	r7, 8006978 <__multadd+0x70>
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	42ab      	cmp	r3, r5
 8006946:	dc12      	bgt.n	800696e <__multadd+0x66>
 8006948:	6861      	ldr	r1, [r4, #4]
 800694a:	4630      	mov	r0, r6
 800694c:	3101      	adds	r1, #1
 800694e:	f7ff ff90 	bl	8006872 <_Balloc>
 8006952:	6922      	ldr	r2, [r4, #16]
 8006954:	3202      	adds	r2, #2
 8006956:	f104 010c 	add.w	r1, r4, #12
 800695a:	4680      	mov	r8, r0
 800695c:	0092      	lsls	r2, r2, #2
 800695e:	300c      	adds	r0, #12
 8006960:	f7ff ff7c 	bl	800685c <memcpy>
 8006964:	4621      	mov	r1, r4
 8006966:	4630      	mov	r0, r6
 8006968:	f7ff ffb7 	bl	80068da <_Bfree>
 800696c:	4644      	mov	r4, r8
 800696e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006972:	3501      	adds	r5, #1
 8006974:	615f      	str	r7, [r3, #20]
 8006976:	6125      	str	r5, [r4, #16]
 8006978:	4620      	mov	r0, r4
 800697a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800697e <__hi0bits>:
 800697e:	0c02      	lsrs	r2, r0, #16
 8006980:	0412      	lsls	r2, r2, #16
 8006982:	4603      	mov	r3, r0
 8006984:	b9b2      	cbnz	r2, 80069b4 <__hi0bits+0x36>
 8006986:	0403      	lsls	r3, r0, #16
 8006988:	2010      	movs	r0, #16
 800698a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800698e:	bf04      	itt	eq
 8006990:	021b      	lsleq	r3, r3, #8
 8006992:	3008      	addeq	r0, #8
 8006994:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006998:	bf04      	itt	eq
 800699a:	011b      	lsleq	r3, r3, #4
 800699c:	3004      	addeq	r0, #4
 800699e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80069a2:	bf04      	itt	eq
 80069a4:	009b      	lsleq	r3, r3, #2
 80069a6:	3002      	addeq	r0, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	db06      	blt.n	80069ba <__hi0bits+0x3c>
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	d503      	bpl.n	80069b8 <__hi0bits+0x3a>
 80069b0:	3001      	adds	r0, #1
 80069b2:	4770      	bx	lr
 80069b4:	2000      	movs	r0, #0
 80069b6:	e7e8      	b.n	800698a <__hi0bits+0xc>
 80069b8:	2020      	movs	r0, #32
 80069ba:	4770      	bx	lr

080069bc <__lo0bits>:
 80069bc:	6803      	ldr	r3, [r0, #0]
 80069be:	f013 0207 	ands.w	r2, r3, #7
 80069c2:	4601      	mov	r1, r0
 80069c4:	d00b      	beq.n	80069de <__lo0bits+0x22>
 80069c6:	07da      	lsls	r2, r3, #31
 80069c8:	d423      	bmi.n	8006a12 <__lo0bits+0x56>
 80069ca:	0798      	lsls	r0, r3, #30
 80069cc:	bf49      	itett	mi
 80069ce:	085b      	lsrmi	r3, r3, #1
 80069d0:	089b      	lsrpl	r3, r3, #2
 80069d2:	2001      	movmi	r0, #1
 80069d4:	600b      	strmi	r3, [r1, #0]
 80069d6:	bf5c      	itt	pl
 80069d8:	600b      	strpl	r3, [r1, #0]
 80069da:	2002      	movpl	r0, #2
 80069dc:	4770      	bx	lr
 80069de:	b298      	uxth	r0, r3
 80069e0:	b9a8      	cbnz	r0, 8006a0e <__lo0bits+0x52>
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	2010      	movs	r0, #16
 80069e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069ea:	bf04      	itt	eq
 80069ec:	0a1b      	lsreq	r3, r3, #8
 80069ee:	3008      	addeq	r0, #8
 80069f0:	071a      	lsls	r2, r3, #28
 80069f2:	bf04      	itt	eq
 80069f4:	091b      	lsreq	r3, r3, #4
 80069f6:	3004      	addeq	r0, #4
 80069f8:	079a      	lsls	r2, r3, #30
 80069fa:	bf04      	itt	eq
 80069fc:	089b      	lsreq	r3, r3, #2
 80069fe:	3002      	addeq	r0, #2
 8006a00:	07da      	lsls	r2, r3, #31
 8006a02:	d402      	bmi.n	8006a0a <__lo0bits+0x4e>
 8006a04:	085b      	lsrs	r3, r3, #1
 8006a06:	d006      	beq.n	8006a16 <__lo0bits+0x5a>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	600b      	str	r3, [r1, #0]
 8006a0c:	4770      	bx	lr
 8006a0e:	4610      	mov	r0, r2
 8006a10:	e7e9      	b.n	80069e6 <__lo0bits+0x2a>
 8006a12:	2000      	movs	r0, #0
 8006a14:	4770      	bx	lr
 8006a16:	2020      	movs	r0, #32
 8006a18:	4770      	bx	lr

08006a1a <__i2b>:
 8006a1a:	b510      	push	{r4, lr}
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	2101      	movs	r1, #1
 8006a20:	f7ff ff27 	bl	8006872 <_Balloc>
 8006a24:	2201      	movs	r2, #1
 8006a26:	6144      	str	r4, [r0, #20]
 8006a28:	6102      	str	r2, [r0, #16]
 8006a2a:	bd10      	pop	{r4, pc}

08006a2c <__multiply>:
 8006a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	4614      	mov	r4, r2
 8006a32:	690a      	ldr	r2, [r1, #16]
 8006a34:	6923      	ldr	r3, [r4, #16]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	bfb8      	it	lt
 8006a3a:	460b      	movlt	r3, r1
 8006a3c:	4688      	mov	r8, r1
 8006a3e:	bfbc      	itt	lt
 8006a40:	46a0      	movlt	r8, r4
 8006a42:	461c      	movlt	r4, r3
 8006a44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006a4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a54:	eb07 0609 	add.w	r6, r7, r9
 8006a58:	42b3      	cmp	r3, r6
 8006a5a:	bfb8      	it	lt
 8006a5c:	3101      	addlt	r1, #1
 8006a5e:	f7ff ff08 	bl	8006872 <_Balloc>
 8006a62:	f100 0514 	add.w	r5, r0, #20
 8006a66:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006a6a:	462b      	mov	r3, r5
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4573      	cmp	r3, lr
 8006a70:	d316      	bcc.n	8006aa0 <__multiply+0x74>
 8006a72:	f104 0214 	add.w	r2, r4, #20
 8006a76:	f108 0114 	add.w	r1, r8, #20
 8006a7a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006a7e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	9b00      	ldr	r3, [sp, #0]
 8006a86:	9201      	str	r2, [sp, #4]
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d80c      	bhi.n	8006aa6 <__multiply+0x7a>
 8006a8c:	2e00      	cmp	r6, #0
 8006a8e:	dd03      	ble.n	8006a98 <__multiply+0x6c>
 8006a90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d05d      	beq.n	8006b54 <__multiply+0x128>
 8006a98:	6106      	str	r6, [r0, #16]
 8006a9a:	b003      	add	sp, #12
 8006a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa0:	f843 2b04 	str.w	r2, [r3], #4
 8006aa4:	e7e3      	b.n	8006a6e <__multiply+0x42>
 8006aa6:	f8b2 b000 	ldrh.w	fp, [r2]
 8006aaa:	f1bb 0f00 	cmp.w	fp, #0
 8006aae:	d023      	beq.n	8006af8 <__multiply+0xcc>
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	46ac      	mov	ip, r5
 8006ab4:	f04f 0800 	mov.w	r8, #0
 8006ab8:	f859 4b04 	ldr.w	r4, [r9], #4
 8006abc:	f8dc a000 	ldr.w	sl, [ip]
 8006ac0:	b2a3      	uxth	r3, r4
 8006ac2:	fa1f fa8a 	uxth.w	sl, sl
 8006ac6:	fb0b a303 	mla	r3, fp, r3, sl
 8006aca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ace:	f8dc 4000 	ldr.w	r4, [ip]
 8006ad2:	4443      	add	r3, r8
 8006ad4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ad8:	fb0b 840a 	mla	r4, fp, sl, r8
 8006adc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ae0:	46e2      	mov	sl, ip
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ae8:	454f      	cmp	r7, r9
 8006aea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006aee:	f84a 3b04 	str.w	r3, [sl], #4
 8006af2:	d82b      	bhi.n	8006b4c <__multiply+0x120>
 8006af4:	f8cc 8004 	str.w	r8, [ip, #4]
 8006af8:	9b01      	ldr	r3, [sp, #4]
 8006afa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006afe:	3204      	adds	r2, #4
 8006b00:	f1ba 0f00 	cmp.w	sl, #0
 8006b04:	d020      	beq.n	8006b48 <__multiply+0x11c>
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	4689      	mov	r9, r1
 8006b0a:	46a8      	mov	r8, r5
 8006b0c:	f04f 0b00 	mov.w	fp, #0
 8006b10:	f8b9 c000 	ldrh.w	ip, [r9]
 8006b14:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006b18:	fb0a 440c 	mla	r4, sl, ip, r4
 8006b1c:	445c      	add	r4, fp
 8006b1e:	46c4      	mov	ip, r8
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006b26:	f84c 3b04 	str.w	r3, [ip], #4
 8006b2a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b2e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006b32:	0c1b      	lsrs	r3, r3, #16
 8006b34:	fb0a b303 	mla	r3, sl, r3, fp
 8006b38:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006b3c:	454f      	cmp	r7, r9
 8006b3e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006b42:	d805      	bhi.n	8006b50 <__multiply+0x124>
 8006b44:	f8c8 3004 	str.w	r3, [r8, #4]
 8006b48:	3504      	adds	r5, #4
 8006b4a:	e79b      	b.n	8006a84 <__multiply+0x58>
 8006b4c:	46d4      	mov	ip, sl
 8006b4e:	e7b3      	b.n	8006ab8 <__multiply+0x8c>
 8006b50:	46e0      	mov	r8, ip
 8006b52:	e7dd      	b.n	8006b10 <__multiply+0xe4>
 8006b54:	3e01      	subs	r6, #1
 8006b56:	e799      	b.n	8006a8c <__multiply+0x60>

08006b58 <__pow5mult>:
 8006b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b5c:	4615      	mov	r5, r2
 8006b5e:	f012 0203 	ands.w	r2, r2, #3
 8006b62:	4606      	mov	r6, r0
 8006b64:	460f      	mov	r7, r1
 8006b66:	d007      	beq.n	8006b78 <__pow5mult+0x20>
 8006b68:	3a01      	subs	r2, #1
 8006b6a:	4c21      	ldr	r4, [pc, #132]	; (8006bf0 <__pow5mult+0x98>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b72:	f7ff fec9 	bl	8006908 <__multadd>
 8006b76:	4607      	mov	r7, r0
 8006b78:	10ad      	asrs	r5, r5, #2
 8006b7a:	d035      	beq.n	8006be8 <__pow5mult+0x90>
 8006b7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b7e:	b93c      	cbnz	r4, 8006b90 <__pow5mult+0x38>
 8006b80:	2010      	movs	r0, #16
 8006b82:	f7ff fe63 	bl	800684c <malloc>
 8006b86:	6270      	str	r0, [r6, #36]	; 0x24
 8006b88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b8c:	6004      	str	r4, [r0, #0]
 8006b8e:	60c4      	str	r4, [r0, #12]
 8006b90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b98:	b94c      	cbnz	r4, 8006bae <__pow5mult+0x56>
 8006b9a:	f240 2171 	movw	r1, #625	; 0x271
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7ff ff3b 	bl	8006a1a <__i2b>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006baa:	4604      	mov	r4, r0
 8006bac:	6003      	str	r3, [r0, #0]
 8006bae:	f04f 0800 	mov.w	r8, #0
 8006bb2:	07eb      	lsls	r3, r5, #31
 8006bb4:	d50a      	bpl.n	8006bcc <__pow5mult+0x74>
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	4622      	mov	r2, r4
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f7ff ff36 	bl	8006a2c <__multiply>
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	4681      	mov	r9, r0
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f7ff fe88 	bl	80068da <_Bfree>
 8006bca:	464f      	mov	r7, r9
 8006bcc:	106d      	asrs	r5, r5, #1
 8006bce:	d00b      	beq.n	8006be8 <__pow5mult+0x90>
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	b938      	cbnz	r0, 8006be4 <__pow5mult+0x8c>
 8006bd4:	4622      	mov	r2, r4
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f7ff ff27 	bl	8006a2c <__multiply>
 8006bde:	6020      	str	r0, [r4, #0]
 8006be0:	f8c0 8000 	str.w	r8, [r0]
 8006be4:	4604      	mov	r4, r0
 8006be6:	e7e4      	b.n	8006bb2 <__pow5mult+0x5a>
 8006be8:	4638      	mov	r0, r7
 8006bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bee:	bf00      	nop
 8006bf0:	08008a98 	.word	0x08008a98

08006bf4 <__lshift>:
 8006bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	6849      	ldr	r1, [r1, #4]
 8006c02:	eb0a 0903 	add.w	r9, sl, r3
 8006c06:	68a3      	ldr	r3, [r4, #8]
 8006c08:	4607      	mov	r7, r0
 8006c0a:	4616      	mov	r6, r2
 8006c0c:	f109 0501 	add.w	r5, r9, #1
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	db32      	blt.n	8006c7a <__lshift+0x86>
 8006c14:	4638      	mov	r0, r7
 8006c16:	f7ff fe2c 	bl	8006872 <_Balloc>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4680      	mov	r8, r0
 8006c1e:	f100 0114 	add.w	r1, r0, #20
 8006c22:	461a      	mov	r2, r3
 8006c24:	4553      	cmp	r3, sl
 8006c26:	db2b      	blt.n	8006c80 <__lshift+0x8c>
 8006c28:	6920      	ldr	r0, [r4, #16]
 8006c2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c2e:	f104 0314 	add.w	r3, r4, #20
 8006c32:	f016 021f 	ands.w	r2, r6, #31
 8006c36:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c3a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c3e:	d025      	beq.n	8006c8c <__lshift+0x98>
 8006c40:	f1c2 0e20 	rsb	lr, r2, #32
 8006c44:	2000      	movs	r0, #0
 8006c46:	681e      	ldr	r6, [r3, #0]
 8006c48:	468a      	mov	sl, r1
 8006c4a:	4096      	lsls	r6, r2
 8006c4c:	4330      	orrs	r0, r6
 8006c4e:	f84a 0b04 	str.w	r0, [sl], #4
 8006c52:	f853 0b04 	ldr.w	r0, [r3], #4
 8006c56:	459c      	cmp	ip, r3
 8006c58:	fa20 f00e 	lsr.w	r0, r0, lr
 8006c5c:	d814      	bhi.n	8006c88 <__lshift+0x94>
 8006c5e:	6048      	str	r0, [r1, #4]
 8006c60:	b108      	cbz	r0, 8006c66 <__lshift+0x72>
 8006c62:	f109 0502 	add.w	r5, r9, #2
 8006c66:	3d01      	subs	r5, #1
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f8c8 5010 	str.w	r5, [r8, #16]
 8006c6e:	4621      	mov	r1, r4
 8006c70:	f7ff fe33 	bl	80068da <_Bfree>
 8006c74:	4640      	mov	r0, r8
 8006c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7a:	3101      	adds	r1, #1
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	e7c7      	b.n	8006c10 <__lshift+0x1c>
 8006c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006c84:	3301      	adds	r3, #1
 8006c86:	e7cd      	b.n	8006c24 <__lshift+0x30>
 8006c88:	4651      	mov	r1, sl
 8006c8a:	e7dc      	b.n	8006c46 <__lshift+0x52>
 8006c8c:	3904      	subs	r1, #4
 8006c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c92:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c96:	459c      	cmp	ip, r3
 8006c98:	d8f9      	bhi.n	8006c8e <__lshift+0x9a>
 8006c9a:	e7e4      	b.n	8006c66 <__lshift+0x72>

08006c9c <__mcmp>:
 8006c9c:	6903      	ldr	r3, [r0, #16]
 8006c9e:	690a      	ldr	r2, [r1, #16]
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	b530      	push	{r4, r5, lr}
 8006ca4:	d10c      	bne.n	8006cc0 <__mcmp+0x24>
 8006ca6:	0092      	lsls	r2, r2, #2
 8006ca8:	3014      	adds	r0, #20
 8006caa:	3114      	adds	r1, #20
 8006cac:	1884      	adds	r4, r0, r2
 8006cae:	4411      	add	r1, r2
 8006cb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cb8:	4295      	cmp	r5, r2
 8006cba:	d003      	beq.n	8006cc4 <__mcmp+0x28>
 8006cbc:	d305      	bcc.n	8006cca <__mcmp+0x2e>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	bd30      	pop	{r4, r5, pc}
 8006cc4:	42a0      	cmp	r0, r4
 8006cc6:	d3f3      	bcc.n	8006cb0 <__mcmp+0x14>
 8006cc8:	e7fa      	b.n	8006cc0 <__mcmp+0x24>
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295
 8006cce:	e7f7      	b.n	8006cc0 <__mcmp+0x24>

08006cd0 <__mdiff>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	460d      	mov	r5, r1
 8006cd6:	4607      	mov	r7, r0
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4628      	mov	r0, r5
 8006cdc:	4614      	mov	r4, r2
 8006cde:	f7ff ffdd 	bl	8006c9c <__mcmp>
 8006ce2:	1e06      	subs	r6, r0, #0
 8006ce4:	d108      	bne.n	8006cf8 <__mdiff+0x28>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f7ff fdc2 	bl	8006872 <_Balloc>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf8:	bfa4      	itt	ge
 8006cfa:	4623      	movge	r3, r4
 8006cfc:	462c      	movge	r4, r5
 8006cfe:	4638      	mov	r0, r7
 8006d00:	6861      	ldr	r1, [r4, #4]
 8006d02:	bfa6      	itte	ge
 8006d04:	461d      	movge	r5, r3
 8006d06:	2600      	movge	r6, #0
 8006d08:	2601      	movlt	r6, #1
 8006d0a:	f7ff fdb2 	bl	8006872 <_Balloc>
 8006d0e:	692b      	ldr	r3, [r5, #16]
 8006d10:	60c6      	str	r6, [r0, #12]
 8006d12:	6926      	ldr	r6, [r4, #16]
 8006d14:	f105 0914 	add.w	r9, r5, #20
 8006d18:	f104 0214 	add.w	r2, r4, #20
 8006d1c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006d20:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006d24:	f100 0514 	add.w	r5, r0, #20
 8006d28:	f04f 0e00 	mov.w	lr, #0
 8006d2c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006d30:	f859 4b04 	ldr.w	r4, [r9], #4
 8006d34:	fa1e f18a 	uxtah	r1, lr, sl
 8006d38:	b2a3      	uxth	r3, r4
 8006d3a:	1ac9      	subs	r1, r1, r3
 8006d3c:	0c23      	lsrs	r3, r4, #16
 8006d3e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006d42:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006d46:	b289      	uxth	r1, r1
 8006d48:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006d4c:	45c8      	cmp	r8, r9
 8006d4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d52:	4694      	mov	ip, r2
 8006d54:	f845 3b04 	str.w	r3, [r5], #4
 8006d58:	d8e8      	bhi.n	8006d2c <__mdiff+0x5c>
 8006d5a:	45bc      	cmp	ip, r7
 8006d5c:	d304      	bcc.n	8006d68 <__mdiff+0x98>
 8006d5e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006d62:	b183      	cbz	r3, 8006d86 <__mdiff+0xb6>
 8006d64:	6106      	str	r6, [r0, #16]
 8006d66:	e7c5      	b.n	8006cf4 <__mdiff+0x24>
 8006d68:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d6c:	fa1e f381 	uxtah	r3, lr, r1
 8006d70:	141a      	asrs	r2, r3, #16
 8006d72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d7c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006d80:	f845 3b04 	str.w	r3, [r5], #4
 8006d84:	e7e9      	b.n	8006d5a <__mdiff+0x8a>
 8006d86:	3e01      	subs	r6, #1
 8006d88:	e7e9      	b.n	8006d5e <__mdiff+0x8e>

08006d8a <__d2b>:
 8006d8a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d8e:	460e      	mov	r6, r1
 8006d90:	2101      	movs	r1, #1
 8006d92:	ec59 8b10 	vmov	r8, r9, d0
 8006d96:	4615      	mov	r5, r2
 8006d98:	f7ff fd6b 	bl	8006872 <_Balloc>
 8006d9c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006da0:	4607      	mov	r7, r0
 8006da2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006da6:	bb34      	cbnz	r4, 8006df6 <__d2b+0x6c>
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	f1b8 0300 	subs.w	r3, r8, #0
 8006dae:	d027      	beq.n	8006e00 <__d2b+0x76>
 8006db0:	a802      	add	r0, sp, #8
 8006db2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006db6:	f7ff fe01 	bl	80069bc <__lo0bits>
 8006dba:	9900      	ldr	r1, [sp, #0]
 8006dbc:	b1f0      	cbz	r0, 8006dfc <__d2b+0x72>
 8006dbe:	9a01      	ldr	r2, [sp, #4]
 8006dc0:	f1c0 0320 	rsb	r3, r0, #32
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	40c2      	lsrs	r2, r0
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	9201      	str	r2, [sp, #4]
 8006dd0:	9b01      	ldr	r3, [sp, #4]
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bf14      	ite	ne
 8006dd8:	2102      	movne	r1, #2
 8006dda:	2101      	moveq	r1, #1
 8006ddc:	6139      	str	r1, [r7, #16]
 8006dde:	b1c4      	cbz	r4, 8006e12 <__d2b+0x88>
 8006de0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006de4:	4404      	add	r4, r0
 8006de6:	6034      	str	r4, [r6, #0]
 8006de8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006dec:	6028      	str	r0, [r5, #0]
 8006dee:	4638      	mov	r0, r7
 8006df0:	b003      	add	sp, #12
 8006df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dfa:	e7d5      	b.n	8006da8 <__d2b+0x1e>
 8006dfc:	6179      	str	r1, [r7, #20]
 8006dfe:	e7e7      	b.n	8006dd0 <__d2b+0x46>
 8006e00:	a801      	add	r0, sp, #4
 8006e02:	f7ff fddb 	bl	80069bc <__lo0bits>
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	6139      	str	r1, [r7, #16]
 8006e0e:	3020      	adds	r0, #32
 8006e10:	e7e5      	b.n	8006dde <__d2b+0x54>
 8006e12:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006e16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e1a:	6030      	str	r0, [r6, #0]
 8006e1c:	6918      	ldr	r0, [r3, #16]
 8006e1e:	f7ff fdae 	bl	800697e <__hi0bits>
 8006e22:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006e26:	e7e1      	b.n	8006dec <__d2b+0x62>

08006e28 <_calloc_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	fb02 f401 	mul.w	r4, r2, r1
 8006e2e:	4621      	mov	r1, r4
 8006e30:	f000 f856 	bl	8006ee0 <_malloc_r>
 8006e34:	4605      	mov	r5, r0
 8006e36:	b118      	cbz	r0, 8006e40 <_calloc_r+0x18>
 8006e38:	4622      	mov	r2, r4
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	f7fe fa30 	bl	80052a0 <memset>
 8006e40:	4628      	mov	r0, r5
 8006e42:	bd38      	pop	{r3, r4, r5, pc}

08006e44 <_free_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4605      	mov	r5, r0
 8006e48:	2900      	cmp	r1, #0
 8006e4a:	d045      	beq.n	8006ed8 <_free_r+0x94>
 8006e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e50:	1f0c      	subs	r4, r1, #4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bfb8      	it	lt
 8006e56:	18e4      	addlt	r4, r4, r3
 8006e58:	f000 fa29 	bl	80072ae <__malloc_lock>
 8006e5c:	4a1f      	ldr	r2, [pc, #124]	; (8006edc <_free_r+0x98>)
 8006e5e:	6813      	ldr	r3, [r2, #0]
 8006e60:	4610      	mov	r0, r2
 8006e62:	b933      	cbnz	r3, 8006e72 <_free_r+0x2e>
 8006e64:	6063      	str	r3, [r4, #4]
 8006e66:	6014      	str	r4, [r2, #0]
 8006e68:	4628      	mov	r0, r5
 8006e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e6e:	f000 ba1f 	b.w	80072b0 <__malloc_unlock>
 8006e72:	42a3      	cmp	r3, r4
 8006e74:	d90c      	bls.n	8006e90 <_free_r+0x4c>
 8006e76:	6821      	ldr	r1, [r4, #0]
 8006e78:	1862      	adds	r2, r4, r1
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	bf04      	itt	eq
 8006e7e:	681a      	ldreq	r2, [r3, #0]
 8006e80:	685b      	ldreq	r3, [r3, #4]
 8006e82:	6063      	str	r3, [r4, #4]
 8006e84:	bf04      	itt	eq
 8006e86:	1852      	addeq	r2, r2, r1
 8006e88:	6022      	streq	r2, [r4, #0]
 8006e8a:	6004      	str	r4, [r0, #0]
 8006e8c:	e7ec      	b.n	8006e68 <_free_r+0x24>
 8006e8e:	4613      	mov	r3, r2
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	b10a      	cbz	r2, 8006e98 <_free_r+0x54>
 8006e94:	42a2      	cmp	r2, r4
 8006e96:	d9fa      	bls.n	8006e8e <_free_r+0x4a>
 8006e98:	6819      	ldr	r1, [r3, #0]
 8006e9a:	1858      	adds	r0, r3, r1
 8006e9c:	42a0      	cmp	r0, r4
 8006e9e:	d10b      	bne.n	8006eb8 <_free_r+0x74>
 8006ea0:	6820      	ldr	r0, [r4, #0]
 8006ea2:	4401      	add	r1, r0
 8006ea4:	1858      	adds	r0, r3, r1
 8006ea6:	4282      	cmp	r2, r0
 8006ea8:	6019      	str	r1, [r3, #0]
 8006eaa:	d1dd      	bne.n	8006e68 <_free_r+0x24>
 8006eac:	6810      	ldr	r0, [r2, #0]
 8006eae:	6852      	ldr	r2, [r2, #4]
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	4401      	add	r1, r0
 8006eb4:	6019      	str	r1, [r3, #0]
 8006eb6:	e7d7      	b.n	8006e68 <_free_r+0x24>
 8006eb8:	d902      	bls.n	8006ec0 <_free_r+0x7c>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	602b      	str	r3, [r5, #0]
 8006ebe:	e7d3      	b.n	8006e68 <_free_r+0x24>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	1821      	adds	r1, r4, r0
 8006ec4:	428a      	cmp	r2, r1
 8006ec6:	bf04      	itt	eq
 8006ec8:	6811      	ldreq	r1, [r2, #0]
 8006eca:	6852      	ldreq	r2, [r2, #4]
 8006ecc:	6062      	str	r2, [r4, #4]
 8006ece:	bf04      	itt	eq
 8006ed0:	1809      	addeq	r1, r1, r0
 8006ed2:	6021      	streq	r1, [r4, #0]
 8006ed4:	605c      	str	r4, [r3, #4]
 8006ed6:	e7c7      	b.n	8006e68 <_free_r+0x24>
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	bf00      	nop
 8006edc:	20000250 	.word	0x20000250

08006ee0 <_malloc_r>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	1ccd      	adds	r5, r1, #3
 8006ee4:	f025 0503 	bic.w	r5, r5, #3
 8006ee8:	3508      	adds	r5, #8
 8006eea:	2d0c      	cmp	r5, #12
 8006eec:	bf38      	it	cc
 8006eee:	250c      	movcc	r5, #12
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	db01      	blt.n	8006efa <_malloc_r+0x1a>
 8006ef6:	42a9      	cmp	r1, r5
 8006ef8:	d903      	bls.n	8006f02 <_malloc_r+0x22>
 8006efa:	230c      	movs	r3, #12
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	2000      	movs	r0, #0
 8006f00:	bd70      	pop	{r4, r5, r6, pc}
 8006f02:	f000 f9d4 	bl	80072ae <__malloc_lock>
 8006f06:	4a21      	ldr	r2, [pc, #132]	; (8006f8c <_malloc_r+0xac>)
 8006f08:	6814      	ldr	r4, [r2, #0]
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	b991      	cbnz	r1, 8006f34 <_malloc_r+0x54>
 8006f0e:	4c20      	ldr	r4, [pc, #128]	; (8006f90 <_malloc_r+0xb0>)
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	b91b      	cbnz	r3, 8006f1c <_malloc_r+0x3c>
 8006f14:	4630      	mov	r0, r6
 8006f16:	f000 f98f 	bl	8007238 <_sbrk_r>
 8006f1a:	6020      	str	r0, [r4, #0]
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f000 f98a 	bl	8007238 <_sbrk_r>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d124      	bne.n	8006f72 <_malloc_r+0x92>
 8006f28:	230c      	movs	r3, #12
 8006f2a:	6033      	str	r3, [r6, #0]
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f000 f9bf 	bl	80072b0 <__malloc_unlock>
 8006f32:	e7e4      	b.n	8006efe <_malloc_r+0x1e>
 8006f34:	680b      	ldr	r3, [r1, #0]
 8006f36:	1b5b      	subs	r3, r3, r5
 8006f38:	d418      	bmi.n	8006f6c <_malloc_r+0x8c>
 8006f3a:	2b0b      	cmp	r3, #11
 8006f3c:	d90f      	bls.n	8006f5e <_malloc_r+0x7e>
 8006f3e:	600b      	str	r3, [r1, #0]
 8006f40:	50cd      	str	r5, [r1, r3]
 8006f42:	18cc      	adds	r4, r1, r3
 8006f44:	4630      	mov	r0, r6
 8006f46:	f000 f9b3 	bl	80072b0 <__malloc_unlock>
 8006f4a:	f104 000b 	add.w	r0, r4, #11
 8006f4e:	1d23      	adds	r3, r4, #4
 8006f50:	f020 0007 	bic.w	r0, r0, #7
 8006f54:	1ac3      	subs	r3, r0, r3
 8006f56:	d0d3      	beq.n	8006f00 <_malloc_r+0x20>
 8006f58:	425a      	negs	r2, r3
 8006f5a:	50e2      	str	r2, [r4, r3]
 8006f5c:	e7d0      	b.n	8006f00 <_malloc_r+0x20>
 8006f5e:	428c      	cmp	r4, r1
 8006f60:	684b      	ldr	r3, [r1, #4]
 8006f62:	bf16      	itet	ne
 8006f64:	6063      	strne	r3, [r4, #4]
 8006f66:	6013      	streq	r3, [r2, #0]
 8006f68:	460c      	movne	r4, r1
 8006f6a:	e7eb      	b.n	8006f44 <_malloc_r+0x64>
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	6849      	ldr	r1, [r1, #4]
 8006f70:	e7cc      	b.n	8006f0c <_malloc_r+0x2c>
 8006f72:	1cc4      	adds	r4, r0, #3
 8006f74:	f024 0403 	bic.w	r4, r4, #3
 8006f78:	42a0      	cmp	r0, r4
 8006f7a:	d005      	beq.n	8006f88 <_malloc_r+0xa8>
 8006f7c:	1a21      	subs	r1, r4, r0
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f000 f95a 	bl	8007238 <_sbrk_r>
 8006f84:	3001      	adds	r0, #1
 8006f86:	d0cf      	beq.n	8006f28 <_malloc_r+0x48>
 8006f88:	6025      	str	r5, [r4, #0]
 8006f8a:	e7db      	b.n	8006f44 <_malloc_r+0x64>
 8006f8c:	20000250 	.word	0x20000250
 8006f90:	20000254 	.word	0x20000254

08006f94 <__ssputs_r>:
 8006f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f98:	688e      	ldr	r6, [r1, #8]
 8006f9a:	429e      	cmp	r6, r3
 8006f9c:	4682      	mov	sl, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	4690      	mov	r8, r2
 8006fa2:	4699      	mov	r9, r3
 8006fa4:	d837      	bhi.n	8007016 <__ssputs_r+0x82>
 8006fa6:	898a      	ldrh	r2, [r1, #12]
 8006fa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fac:	d031      	beq.n	8007012 <__ssputs_r+0x7e>
 8006fae:	6825      	ldr	r5, [r4, #0]
 8006fb0:	6909      	ldr	r1, [r1, #16]
 8006fb2:	1a6f      	subs	r7, r5, r1
 8006fb4:	6965      	ldr	r5, [r4, #20]
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fbc:	fb95 f5f3 	sdiv	r5, r5, r3
 8006fc0:	f109 0301 	add.w	r3, r9, #1
 8006fc4:	443b      	add	r3, r7
 8006fc6:	429d      	cmp	r5, r3
 8006fc8:	bf38      	it	cc
 8006fca:	461d      	movcc	r5, r3
 8006fcc:	0553      	lsls	r3, r2, #21
 8006fce:	d530      	bpl.n	8007032 <__ssputs_r+0x9e>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	f7ff ff85 	bl	8006ee0 <_malloc_r>
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	b950      	cbnz	r0, 8006ff0 <__ssputs_r+0x5c>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	f8ca 3000 	str.w	r3, [sl]
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff0:	463a      	mov	r2, r7
 8006ff2:	6921      	ldr	r1, [r4, #16]
 8006ff4:	f7ff fc32 	bl	800685c <memcpy>
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	6126      	str	r6, [r4, #16]
 8007006:	6165      	str	r5, [r4, #20]
 8007008:	443e      	add	r6, r7
 800700a:	1bed      	subs	r5, r5, r7
 800700c:	6026      	str	r6, [r4, #0]
 800700e:	60a5      	str	r5, [r4, #8]
 8007010:	464e      	mov	r6, r9
 8007012:	454e      	cmp	r6, r9
 8007014:	d900      	bls.n	8007018 <__ssputs_r+0x84>
 8007016:	464e      	mov	r6, r9
 8007018:	4632      	mov	r2, r6
 800701a:	4641      	mov	r1, r8
 800701c:	6820      	ldr	r0, [r4, #0]
 800701e:	f000 f92d 	bl	800727c <memmove>
 8007022:	68a3      	ldr	r3, [r4, #8]
 8007024:	1b9b      	subs	r3, r3, r6
 8007026:	60a3      	str	r3, [r4, #8]
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	441e      	add	r6, r3
 800702c:	6026      	str	r6, [r4, #0]
 800702e:	2000      	movs	r0, #0
 8007030:	e7dc      	b.n	8006fec <__ssputs_r+0x58>
 8007032:	462a      	mov	r2, r5
 8007034:	f000 f93d 	bl	80072b2 <_realloc_r>
 8007038:	4606      	mov	r6, r0
 800703a:	2800      	cmp	r0, #0
 800703c:	d1e2      	bne.n	8007004 <__ssputs_r+0x70>
 800703e:	6921      	ldr	r1, [r4, #16]
 8007040:	4650      	mov	r0, sl
 8007042:	f7ff feff 	bl	8006e44 <_free_r>
 8007046:	e7c8      	b.n	8006fda <__ssputs_r+0x46>

08007048 <_svfiprintf_r>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	461d      	mov	r5, r3
 800704e:	898b      	ldrh	r3, [r1, #12]
 8007050:	061f      	lsls	r7, r3, #24
 8007052:	b09d      	sub	sp, #116	; 0x74
 8007054:	4680      	mov	r8, r0
 8007056:	460c      	mov	r4, r1
 8007058:	4616      	mov	r6, r2
 800705a:	d50f      	bpl.n	800707c <_svfiprintf_r+0x34>
 800705c:	690b      	ldr	r3, [r1, #16]
 800705e:	b96b      	cbnz	r3, 800707c <_svfiprintf_r+0x34>
 8007060:	2140      	movs	r1, #64	; 0x40
 8007062:	f7ff ff3d 	bl	8006ee0 <_malloc_r>
 8007066:	6020      	str	r0, [r4, #0]
 8007068:	6120      	str	r0, [r4, #16]
 800706a:	b928      	cbnz	r0, 8007078 <_svfiprintf_r+0x30>
 800706c:	230c      	movs	r3, #12
 800706e:	f8c8 3000 	str.w	r3, [r8]
 8007072:	f04f 30ff 	mov.w	r0, #4294967295
 8007076:	e0c8      	b.n	800720a <_svfiprintf_r+0x1c2>
 8007078:	2340      	movs	r3, #64	; 0x40
 800707a:	6163      	str	r3, [r4, #20]
 800707c:	2300      	movs	r3, #0
 800707e:	9309      	str	r3, [sp, #36]	; 0x24
 8007080:	2320      	movs	r3, #32
 8007082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007086:	2330      	movs	r3, #48	; 0x30
 8007088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800708c:	9503      	str	r5, [sp, #12]
 800708e:	f04f 0b01 	mov.w	fp, #1
 8007092:	4637      	mov	r7, r6
 8007094:	463d      	mov	r5, r7
 8007096:	f815 3b01 	ldrb.w	r3, [r5], #1
 800709a:	b10b      	cbz	r3, 80070a0 <_svfiprintf_r+0x58>
 800709c:	2b25      	cmp	r3, #37	; 0x25
 800709e:	d13e      	bne.n	800711e <_svfiprintf_r+0xd6>
 80070a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80070a4:	d00b      	beq.n	80070be <_svfiprintf_r+0x76>
 80070a6:	4653      	mov	r3, sl
 80070a8:	4632      	mov	r2, r6
 80070aa:	4621      	mov	r1, r4
 80070ac:	4640      	mov	r0, r8
 80070ae:	f7ff ff71 	bl	8006f94 <__ssputs_r>
 80070b2:	3001      	adds	r0, #1
 80070b4:	f000 80a4 	beq.w	8007200 <_svfiprintf_r+0x1b8>
 80070b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ba:	4453      	add	r3, sl
 80070bc:	9309      	str	r3, [sp, #36]	; 0x24
 80070be:	783b      	ldrb	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 809d 	beq.w	8007200 <_svfiprintf_r+0x1b8>
 80070c6:	2300      	movs	r3, #0
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295
 80070cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070d0:	9304      	str	r3, [sp, #16]
 80070d2:	9307      	str	r3, [sp, #28]
 80070d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070d8:	931a      	str	r3, [sp, #104]	; 0x68
 80070da:	462f      	mov	r7, r5
 80070dc:	2205      	movs	r2, #5
 80070de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80070e2:	4850      	ldr	r0, [pc, #320]	; (8007224 <_svfiprintf_r+0x1dc>)
 80070e4:	f7f9 f884 	bl	80001f0 <memchr>
 80070e8:	9b04      	ldr	r3, [sp, #16]
 80070ea:	b9d0      	cbnz	r0, 8007122 <_svfiprintf_r+0xda>
 80070ec:	06d9      	lsls	r1, r3, #27
 80070ee:	bf44      	itt	mi
 80070f0:	2220      	movmi	r2, #32
 80070f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070f6:	071a      	lsls	r2, r3, #28
 80070f8:	bf44      	itt	mi
 80070fa:	222b      	movmi	r2, #43	; 0x2b
 80070fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007100:	782a      	ldrb	r2, [r5, #0]
 8007102:	2a2a      	cmp	r2, #42	; 0x2a
 8007104:	d015      	beq.n	8007132 <_svfiprintf_r+0xea>
 8007106:	9a07      	ldr	r2, [sp, #28]
 8007108:	462f      	mov	r7, r5
 800710a:	2000      	movs	r0, #0
 800710c:	250a      	movs	r5, #10
 800710e:	4639      	mov	r1, r7
 8007110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007114:	3b30      	subs	r3, #48	; 0x30
 8007116:	2b09      	cmp	r3, #9
 8007118:	d94d      	bls.n	80071b6 <_svfiprintf_r+0x16e>
 800711a:	b1b8      	cbz	r0, 800714c <_svfiprintf_r+0x104>
 800711c:	e00f      	b.n	800713e <_svfiprintf_r+0xf6>
 800711e:	462f      	mov	r7, r5
 8007120:	e7b8      	b.n	8007094 <_svfiprintf_r+0x4c>
 8007122:	4a40      	ldr	r2, [pc, #256]	; (8007224 <_svfiprintf_r+0x1dc>)
 8007124:	1a80      	subs	r0, r0, r2
 8007126:	fa0b f000 	lsl.w	r0, fp, r0
 800712a:	4318      	orrs	r0, r3
 800712c:	9004      	str	r0, [sp, #16]
 800712e:	463d      	mov	r5, r7
 8007130:	e7d3      	b.n	80070da <_svfiprintf_r+0x92>
 8007132:	9a03      	ldr	r2, [sp, #12]
 8007134:	1d11      	adds	r1, r2, #4
 8007136:	6812      	ldr	r2, [r2, #0]
 8007138:	9103      	str	r1, [sp, #12]
 800713a:	2a00      	cmp	r2, #0
 800713c:	db01      	blt.n	8007142 <_svfiprintf_r+0xfa>
 800713e:	9207      	str	r2, [sp, #28]
 8007140:	e004      	b.n	800714c <_svfiprintf_r+0x104>
 8007142:	4252      	negs	r2, r2
 8007144:	f043 0302 	orr.w	r3, r3, #2
 8007148:	9207      	str	r2, [sp, #28]
 800714a:	9304      	str	r3, [sp, #16]
 800714c:	783b      	ldrb	r3, [r7, #0]
 800714e:	2b2e      	cmp	r3, #46	; 0x2e
 8007150:	d10c      	bne.n	800716c <_svfiprintf_r+0x124>
 8007152:	787b      	ldrb	r3, [r7, #1]
 8007154:	2b2a      	cmp	r3, #42	; 0x2a
 8007156:	d133      	bne.n	80071c0 <_svfiprintf_r+0x178>
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	1d1a      	adds	r2, r3, #4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	9203      	str	r2, [sp, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	bfb8      	it	lt
 8007164:	f04f 33ff 	movlt.w	r3, #4294967295
 8007168:	3702      	adds	r7, #2
 800716a:	9305      	str	r3, [sp, #20]
 800716c:	4d2e      	ldr	r5, [pc, #184]	; (8007228 <_svfiprintf_r+0x1e0>)
 800716e:	7839      	ldrb	r1, [r7, #0]
 8007170:	2203      	movs	r2, #3
 8007172:	4628      	mov	r0, r5
 8007174:	f7f9 f83c 	bl	80001f0 <memchr>
 8007178:	b138      	cbz	r0, 800718a <_svfiprintf_r+0x142>
 800717a:	2340      	movs	r3, #64	; 0x40
 800717c:	1b40      	subs	r0, r0, r5
 800717e:	fa03 f000 	lsl.w	r0, r3, r0
 8007182:	9b04      	ldr	r3, [sp, #16]
 8007184:	4303      	orrs	r3, r0
 8007186:	3701      	adds	r7, #1
 8007188:	9304      	str	r3, [sp, #16]
 800718a:	7839      	ldrb	r1, [r7, #0]
 800718c:	4827      	ldr	r0, [pc, #156]	; (800722c <_svfiprintf_r+0x1e4>)
 800718e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007192:	2206      	movs	r2, #6
 8007194:	1c7e      	adds	r6, r7, #1
 8007196:	f7f9 f82b 	bl	80001f0 <memchr>
 800719a:	2800      	cmp	r0, #0
 800719c:	d038      	beq.n	8007210 <_svfiprintf_r+0x1c8>
 800719e:	4b24      	ldr	r3, [pc, #144]	; (8007230 <_svfiprintf_r+0x1e8>)
 80071a0:	bb13      	cbnz	r3, 80071e8 <_svfiprintf_r+0x1a0>
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	3307      	adds	r3, #7
 80071a6:	f023 0307 	bic.w	r3, r3, #7
 80071aa:	3308      	adds	r3, #8
 80071ac:	9303      	str	r3, [sp, #12]
 80071ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b0:	444b      	add	r3, r9
 80071b2:	9309      	str	r3, [sp, #36]	; 0x24
 80071b4:	e76d      	b.n	8007092 <_svfiprintf_r+0x4a>
 80071b6:	fb05 3202 	mla	r2, r5, r2, r3
 80071ba:	2001      	movs	r0, #1
 80071bc:	460f      	mov	r7, r1
 80071be:	e7a6      	b.n	800710e <_svfiprintf_r+0xc6>
 80071c0:	2300      	movs	r3, #0
 80071c2:	3701      	adds	r7, #1
 80071c4:	9305      	str	r3, [sp, #20]
 80071c6:	4619      	mov	r1, r3
 80071c8:	250a      	movs	r5, #10
 80071ca:	4638      	mov	r0, r7
 80071cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d0:	3a30      	subs	r2, #48	; 0x30
 80071d2:	2a09      	cmp	r2, #9
 80071d4:	d903      	bls.n	80071de <_svfiprintf_r+0x196>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0c8      	beq.n	800716c <_svfiprintf_r+0x124>
 80071da:	9105      	str	r1, [sp, #20]
 80071dc:	e7c6      	b.n	800716c <_svfiprintf_r+0x124>
 80071de:	fb05 2101 	mla	r1, r5, r1, r2
 80071e2:	2301      	movs	r3, #1
 80071e4:	4607      	mov	r7, r0
 80071e6:	e7f0      	b.n	80071ca <_svfiprintf_r+0x182>
 80071e8:	ab03      	add	r3, sp, #12
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	4622      	mov	r2, r4
 80071ee:	4b11      	ldr	r3, [pc, #68]	; (8007234 <_svfiprintf_r+0x1ec>)
 80071f0:	a904      	add	r1, sp, #16
 80071f2:	4640      	mov	r0, r8
 80071f4:	f7fe f8f0 	bl	80053d8 <_printf_float>
 80071f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071fc:	4681      	mov	r9, r0
 80071fe:	d1d6      	bne.n	80071ae <_svfiprintf_r+0x166>
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	065b      	lsls	r3, r3, #25
 8007204:	f53f af35 	bmi.w	8007072 <_svfiprintf_r+0x2a>
 8007208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800720a:	b01d      	add	sp, #116	; 0x74
 800720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007210:	ab03      	add	r3, sp, #12
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	4622      	mov	r2, r4
 8007216:	4b07      	ldr	r3, [pc, #28]	; (8007234 <_svfiprintf_r+0x1ec>)
 8007218:	a904      	add	r1, sp, #16
 800721a:	4640      	mov	r0, r8
 800721c:	f7fe fb92 	bl	8005944 <_printf_i>
 8007220:	e7ea      	b.n	80071f8 <_svfiprintf_r+0x1b0>
 8007222:	bf00      	nop
 8007224:	08008aa4 	.word	0x08008aa4
 8007228:	08008aaa 	.word	0x08008aaa
 800722c:	08008aae 	.word	0x08008aae
 8007230:	080053d9 	.word	0x080053d9
 8007234:	08006f95 	.word	0x08006f95

08007238 <_sbrk_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4c06      	ldr	r4, [pc, #24]	; (8007254 <_sbrk_r+0x1c>)
 800723c:	2300      	movs	r3, #0
 800723e:	4605      	mov	r5, r0
 8007240:	4608      	mov	r0, r1
 8007242:	6023      	str	r3, [r4, #0]
 8007244:	f7fa fc32 	bl	8001aac <_sbrk>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_sbrk_r+0x1a>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	b103      	cbz	r3, 8007252 <_sbrk_r+0x1a>
 8007250:	602b      	str	r3, [r5, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	20000348 	.word	0x20000348

08007258 <__ascii_mbtowc>:
 8007258:	b082      	sub	sp, #8
 800725a:	b901      	cbnz	r1, 800725e <__ascii_mbtowc+0x6>
 800725c:	a901      	add	r1, sp, #4
 800725e:	b142      	cbz	r2, 8007272 <__ascii_mbtowc+0x1a>
 8007260:	b14b      	cbz	r3, 8007276 <__ascii_mbtowc+0x1e>
 8007262:	7813      	ldrb	r3, [r2, #0]
 8007264:	600b      	str	r3, [r1, #0]
 8007266:	7812      	ldrb	r2, [r2, #0]
 8007268:	1c10      	adds	r0, r2, #0
 800726a:	bf18      	it	ne
 800726c:	2001      	movne	r0, #1
 800726e:	b002      	add	sp, #8
 8007270:	4770      	bx	lr
 8007272:	4610      	mov	r0, r2
 8007274:	e7fb      	b.n	800726e <__ascii_mbtowc+0x16>
 8007276:	f06f 0001 	mvn.w	r0, #1
 800727a:	e7f8      	b.n	800726e <__ascii_mbtowc+0x16>

0800727c <memmove>:
 800727c:	4288      	cmp	r0, r1
 800727e:	b510      	push	{r4, lr}
 8007280:	eb01 0302 	add.w	r3, r1, r2
 8007284:	d807      	bhi.n	8007296 <memmove+0x1a>
 8007286:	1e42      	subs	r2, r0, #1
 8007288:	4299      	cmp	r1, r3
 800728a:	d00a      	beq.n	80072a2 <memmove+0x26>
 800728c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007290:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007294:	e7f8      	b.n	8007288 <memmove+0xc>
 8007296:	4283      	cmp	r3, r0
 8007298:	d9f5      	bls.n	8007286 <memmove+0xa>
 800729a:	1881      	adds	r1, r0, r2
 800729c:	1ad2      	subs	r2, r2, r3
 800729e:	42d3      	cmn	r3, r2
 80072a0:	d100      	bne.n	80072a4 <memmove+0x28>
 80072a2:	bd10      	pop	{r4, pc}
 80072a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80072ac:	e7f7      	b.n	800729e <memmove+0x22>

080072ae <__malloc_lock>:
 80072ae:	4770      	bx	lr

080072b0 <__malloc_unlock>:
 80072b0:	4770      	bx	lr

080072b2 <_realloc_r>:
 80072b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b4:	4607      	mov	r7, r0
 80072b6:	4614      	mov	r4, r2
 80072b8:	460e      	mov	r6, r1
 80072ba:	b921      	cbnz	r1, 80072c6 <_realloc_r+0x14>
 80072bc:	4611      	mov	r1, r2
 80072be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072c2:	f7ff be0d 	b.w	8006ee0 <_malloc_r>
 80072c6:	b922      	cbnz	r2, 80072d2 <_realloc_r+0x20>
 80072c8:	f7ff fdbc 	bl	8006e44 <_free_r>
 80072cc:	4625      	mov	r5, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d2:	f000 f821 	bl	8007318 <_malloc_usable_size_r>
 80072d6:	42a0      	cmp	r0, r4
 80072d8:	d20f      	bcs.n	80072fa <_realloc_r+0x48>
 80072da:	4621      	mov	r1, r4
 80072dc:	4638      	mov	r0, r7
 80072de:	f7ff fdff 	bl	8006ee0 <_malloc_r>
 80072e2:	4605      	mov	r5, r0
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d0f2      	beq.n	80072ce <_realloc_r+0x1c>
 80072e8:	4631      	mov	r1, r6
 80072ea:	4622      	mov	r2, r4
 80072ec:	f7ff fab6 	bl	800685c <memcpy>
 80072f0:	4631      	mov	r1, r6
 80072f2:	4638      	mov	r0, r7
 80072f4:	f7ff fda6 	bl	8006e44 <_free_r>
 80072f8:	e7e9      	b.n	80072ce <_realloc_r+0x1c>
 80072fa:	4635      	mov	r5, r6
 80072fc:	e7e7      	b.n	80072ce <_realloc_r+0x1c>

080072fe <__ascii_wctomb>:
 80072fe:	b149      	cbz	r1, 8007314 <__ascii_wctomb+0x16>
 8007300:	2aff      	cmp	r2, #255	; 0xff
 8007302:	bf85      	ittet	hi
 8007304:	238a      	movhi	r3, #138	; 0x8a
 8007306:	6003      	strhi	r3, [r0, #0]
 8007308:	700a      	strbls	r2, [r1, #0]
 800730a:	f04f 30ff 	movhi.w	r0, #4294967295
 800730e:	bf98      	it	ls
 8007310:	2001      	movls	r0, #1
 8007312:	4770      	bx	lr
 8007314:	4608      	mov	r0, r1
 8007316:	4770      	bx	lr

08007318 <_malloc_usable_size_r>:
 8007318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800731c:	1f18      	subs	r0, r3, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	bfbc      	itt	lt
 8007322:	580b      	ldrlt	r3, [r1, r0]
 8007324:	18c0      	addlt	r0, r0, r3
 8007326:	4770      	bx	lr

08007328 <_init>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	bf00      	nop
 800732c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732e:	bc08      	pop	{r3}
 8007330:	469e      	mov	lr, r3
 8007332:	4770      	bx	lr

08007334 <_fini>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	bf00      	nop
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr
