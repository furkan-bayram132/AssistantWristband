
AssistantWristband.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000269c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002854  08002854  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002854  08002854  00012854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800285c  0800285c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002860  08002860  00012860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002870  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002870  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006955  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001114  00000000  00000000  00026991  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  00027aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  00028158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014688  00000000  00000000  00028790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005b7b  00000000  00000000  0003ce18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080b68  00000000  00000000  00042993  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c34fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b10  00000000  00000000  000c3578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800281c 	.word	0x0800281c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800281c 	.word	0x0800281c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <adxl_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


HAL_StatusTypeDef adxl_write(uint8_t reg, uint8_t value) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	460a      	mov	r2, r1
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	4613      	mov	r3, r2
 80004e6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&hi2c1, MMA8452Q_ADDR, data, 2, 10);
 80004f0:	2338      	movs	r3, #56	; 0x38
 80004f2:	b299      	uxth	r1, r3
 80004f4:	f107 020c 	add.w	r2, r7, #12
 80004f8:	230a      	movs	r3, #10
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2302      	movs	r3, #2
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <adxl_write+0x38>)
 8000500:	f000 fea8 	bl	8001254 <HAL_I2C_Master_Transmit>
 8000504:	4603      	mov	r3, r0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000028 	.word	0x20000028

08000514 <adxl_read>:

HAL_StatusTypeDef adxl_read(uint8_t reg, uint8_t numberofbytes, uint8_t* data_rec) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af04      	add	r7, sp, #16
 800051a:	4603      	mov	r3, r0
 800051c:	603a      	str	r2, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	460b      	mov	r3, r1
 8000522:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Read(&hi2c1, MMA8452Q_ADDR, reg, 1, data_rec, numberofbytes, 100);
 8000524:	2338      	movs	r3, #56	; 0x38
 8000526:	b299      	uxth	r1, r3
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	b298      	uxth	r0, r3
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	b29b      	uxth	r3, r3
 8000530:	2264      	movs	r2, #100	; 0x64
 8000532:	9202      	str	r2, [sp, #8]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2301      	movs	r3, #1
 800053c:	4602      	mov	r2, r0
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <adxl_read+0x3c>)
 8000540:	f000 ff86 	bl	8001450 <HAL_I2C_Mem_Read>
 8000544:	4603      	mov	r3, r0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000028 	.word	0x20000028

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret;
	uint8_t debug = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	77fb      	strb	r3, [r7, #31]
	uint8_t debug2 = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	77bb      	strb	r3, [r7, #30]
	uint8_t debug3 = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	777b      	strb	r3, [r7, #29]
	//uint8_t buf[12] = { 0 };
	uint8_t data_rec[7] = { -1, -1, -1, -1, -1, -1, -1 };
 8000566:	4a4e      	ldr	r2, [pc, #312]	; (80006a0 <main+0x14c>)
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000570:	6018      	str	r0, [r3, #0]
 8000572:	3304      	adds	r3, #4
 8000574:	8019      	strh	r1, [r3, #0]
 8000576:	3302      	adds	r3, #2
 8000578:	0c0a      	lsrs	r2, r1, #16
 800057a:	701a      	strb	r2, [r3, #0]
	int16_t val;
	uint8_t wait;
	uint8_t v1 = -1, v2 = -1, v3 = -1;
 800057c:	23ff      	movs	r3, #255	; 0xff
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	23ff      	movs	r3, #255	; 0xff
 8000582:	71bb      	strb	r3, [r7, #6]
 8000584:	23ff      	movs	r3, #255	; 0xff
 8000586:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fa30 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f88a 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f91e 	bl	80007d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000594:	f000 f8ee 	bl	8000774 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_StatusTypeDef ret1 = adxl_write(0x2A, 0x00);
 8000598:	2100      	movs	r1, #0
 800059a:	202a      	movs	r0, #42	; 0x2a
 800059c:	f7ff ff9c 	bl	80004d8 <adxl_write>
 80005a0:	4603      	mov	r3, r0
 80005a2:	773b      	strb	r3, [r7, #28]
  if (ret1 != HAL_OK) {
 80005a4:	7f3b      	ldrb	r3, [r7, #28]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <main+0x5c>
	  debug = -1;
 80005aa:	23ff      	movs	r3, #255	; 0xff
 80005ac:	77fb      	strb	r3, [r7, #31]
 80005ae:	e001      	b.n	80005b4 <main+0x60>
  }
  else {
	  debug = 1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	77fb      	strb	r3, [r7, #31]
  }
  adxl_read(0x2A, 1, &v1);
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	461a      	mov	r2, r3
 80005b8:	2101      	movs	r1, #1
 80005ba:	202a      	movs	r0, #42	; 0x2a
 80005bc:	f7ff ffaa 	bl	8000514 <adxl_read>
  HAL_StatusTypeDef ret2 = adxl_write(0x2A, 0x01);
 80005c0:	2101      	movs	r1, #1
 80005c2:	202a      	movs	r0, #42	; 0x2a
 80005c4:	f7ff ff88 	bl	80004d8 <adxl_write>
 80005c8:	4603      	mov	r3, r0
 80005ca:	76fb      	strb	r3, [r7, #27]
  if (ret2 != HAL_OK) {
 80005cc:	7efb      	ldrb	r3, [r7, #27]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <main+0x84>
	  debug2 = -1;
 80005d2:	23ff      	movs	r3, #255	; 0xff
 80005d4:	77bb      	strb	r3, [r7, #30]
 80005d6:	e001      	b.n	80005dc <main+0x88>
  }
  else {
	  debug2 = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	77bb      	strb	r3, [r7, #30]
  }
  adxl_read(0x2A, 1, &v2);
 80005dc:	1dbb      	adds	r3, r7, #6
 80005de:	461a      	mov	r2, r3
 80005e0:	2101      	movs	r1, #1
 80005e2:	202a      	movs	r0, #42	; 0x2a
 80005e4:	f7ff ff96 	bl	8000514 <adxl_read>

  HAL_StatusTypeDef ret3 = adxl_write(0x0E, 0x00);
 80005e8:	2100      	movs	r1, #0
 80005ea:	200e      	movs	r0, #14
 80005ec:	f7ff ff74 	bl	80004d8 <adxl_write>
 80005f0:	4603      	mov	r3, r0
 80005f2:	76bb      	strb	r3, [r7, #26]
  if (ret3 != HAL_OK) {
 80005f4:	7ebb      	ldrb	r3, [r7, #26]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <main+0xac>
	  debug3 = -1;
 80005fa:	23ff      	movs	r3, #255	; 0xff
 80005fc:	777b      	strb	r3, [r7, #29]
 80005fe:	e001      	b.n	8000604 <main+0xb0>
  }
  else {
	  debug3 = 1;
 8000600:	2301      	movs	r3, #1
 8000602:	777b      	strb	r3, [r7, #29]
  }
  adxl_read(0x0E, 1, &v3);
 8000604:	1d7b      	adds	r3, r7, #5
 8000606:	461a      	mov	r2, r3
 8000608:	2101      	movs	r1, #1
 800060a:	200e      	movs	r0, #14
 800060c:	f7ff ff82 	bl	8000514 <adxl_read>

  //wait = 0;
  while (1)
  {
	HAL_StatusTypeDef ret = adxl_read(0x00, 7, data_rec);
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	461a      	mov	r2, r3
 8000616:	2107      	movs	r1, #7
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ff7b 	bl	8000514 <adxl_read>
 800061e:	4603      	mov	r3, r0
 8000620:	767b      	strb	r3, [r7, #25]
	  int16_t xAccl = ((data_rec[1] * 256) + data_rec[2]) / 16;
 8000622:	7a7b      	ldrb	r3, [r7, #9]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	7aba      	ldrb	r2, [r7, #10]
 8000628:	4413      	add	r3, r2
 800062a:	2b00      	cmp	r3, #0
 800062c:	da00      	bge.n	8000630 <main+0xdc>
 800062e:	330f      	adds	r3, #15
 8000630:	111b      	asrs	r3, r3, #4
 8000632:	82fb      	strh	r3, [r7, #22]
	  if (xAccl > 2047)
 8000634:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800063c:	db04      	blt.n	8000648 <main+0xf4>
	  {
		xAccl -= 4096;
 800063e:	8afb      	ldrh	r3, [r7, #22]
 8000640:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8000644:	b29b      	uxth	r3, r3
 8000646:	82fb      	strh	r3, [r7, #22]
	  }
	  int16_t yAccl = ((data_rec[3] * 256) + data_rec[4]) / 16;
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	021b      	lsls	r3, r3, #8
 800064c:	7b3a      	ldrb	r2, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	2b00      	cmp	r3, #0
 8000652:	da00      	bge.n	8000656 <main+0x102>
 8000654:	330f      	adds	r3, #15
 8000656:	111b      	asrs	r3, r3, #4
 8000658:	82bb      	strh	r3, [r7, #20]
	    if (yAccl > 2047)
 800065a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800065e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000662:	db04      	blt.n	800066e <main+0x11a>
	    {
	      yAccl -= 4096;
 8000664:	8abb      	ldrh	r3, [r7, #20]
 8000666:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800066a:	b29b      	uxth	r3, r3
 800066c:	82bb      	strh	r3, [r7, #20]
	    }

	    int16_t zAccl = ((data_rec[5] * 256) + data_rec[6]) / 16;
 800066e:	7b7b      	ldrb	r3, [r7, #13]
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	7bba      	ldrb	r2, [r7, #14]
 8000674:	4413      	add	r3, r2
 8000676:	2b00      	cmp	r3, #0
 8000678:	da00      	bge.n	800067c <main+0x128>
 800067a:	330f      	adds	r3, #15
 800067c:	111b      	asrs	r3, r3, #4
 800067e:	827b      	strh	r3, [r7, #18]
	    if (zAccl > 2047)
 8000680:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000688:	db04      	blt.n	8000694 <main+0x140>
	    {
	      zAccl -= 4096;
 800068a:	8a7b      	ldrh	r3, [r7, #18]
 800068c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8000690:	b29b      	uxth	r3, r3
 8000692:	827b      	strh	r3, [r7, #18]
	    }
	HAL_Delay(250);
 8000694:	20fa      	movs	r0, #250	; 0xfa
 8000696:	f000 fa1b 	bl	8000ad0 <HAL_Delay>
	wait = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	747b      	strb	r3, [r7, #17]
  {
 800069e:	e7b7      	b.n	8000610 <main+0xbc>
 80006a0:	08002834 	.word	0x08002834

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f8aa 	bl	800280c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <SystemClock_Config+0xc8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a26      	ldr	r2, [pc, #152]	; (800076c <SystemClock_Config+0xc8>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <SystemClock_Config+0xc8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <SystemClock_Config+0xcc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a20      	ldr	r2, [pc, #128]	; (8000770 <SystemClock_Config+0xcc>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <SystemClock_Config+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fbfd 	bl	8001f28 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 f874 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fe58 	bl	8002408 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800075e:	f000 f85f 	bl	8000820 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_I2C1_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000780:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_I2C1_Init+0x58>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007b2:	f000 fc17 	bl	8000fe4 <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 f830 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000028 	.word	0x20000028
 80007c8:	40005400 	.word	0x40005400
 80007cc:	000186a0 	.word	0x000186a0

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_GPIO_Init+0x4c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <MX_GPIO_Init+0x4c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_GPIO_Init+0x4c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_GPIO_Init+0x4c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <MX_GPIO_Init+0x4c>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_GPIO_Init+0x4c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a0f      	ldr	r2, [pc, #60]	; (800087c <HAL_MspInit+0x4c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a19      	ldr	r2, [pc, #100]	; (8000904 <HAL_I2C_MspInit+0x84>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d12c      	bne.n	80008fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c4:	2312      	movs	r3, #18
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d0:	2304      	movs	r3, #4
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <HAL_I2C_MspInit+0x8c>)
 80008dc:	f000 fa00 	bl	8000ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40005400 	.word	0x40005400
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f000 f894 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <SystemInit+0x28>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <SystemInit+0x28>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SystemInit+0x28>)
 8000982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000986:	609a      	str	r2, [r3, #8]
#endif
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800099c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800099e:	e003      	b.n	80009a8 <LoopCopyDataInit>

080009a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009a6:	3104      	adds	r1, #4

080009a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009b0:	d3f6      	bcc.n	80009a0 <CopyDataInit>
  ldr  r2, =_sbss
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009b4:	e002      	b.n	80009bc <LoopFillZerobss>

080009b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009b8:	f842 3b04 	str.w	r3, [r2], #4

080009bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009c0:	d3f9      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009c2:	f7ff ffd3 	bl	800096c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f001 fefd 	bl	80027c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fdc3 	bl	8000554 <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009d4:	08002864 	.word	0x08002864
  ldr  r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009dc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80009e0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80009e4:	20000080 	.word	0x20000080

080009e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <HAL_Init+0x40>)
 80009f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_Init+0x40>)
 8000a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x40>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f92f 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff ff06 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f939 	bl	8000cc6 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f90f 	bl	8000c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	2000007c 	.word	0x2000007c

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	2000007c 	.word	0x2000007c

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_Delay+0x40>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000008 	.word	0x20000008

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f7ff ff8e 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff47 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff5c 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff8e 	bl	8000bcc <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5d 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffb0 	bl	8000c34 <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	e159      	b.n	8000fb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f040 8148 	bne.w	8000faa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d00b      	beq.n	8000d3a <HAL_GPIO_Init+0x5a>
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d007      	beq.n	8000d3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2e:	2b11      	cmp	r3, #17
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d130      	bne.n	8000d9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	f003 0201 	and.w	r2, r3, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0xfc>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b12      	cmp	r3, #18
 8000dda:	d123      	bne.n	8000e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3208      	adds	r2, #8
 8000de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	220f      	movs	r2, #15
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	69b9      	ldr	r1, [r7, #24]
 8000e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0203 	and.w	r2, r3, #3
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80a2 	beq.w	8000faa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b56      	ldr	r3, [pc, #344]	; (8000fc4 <HAL_GPIO_Init+0x2e4>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a55      	ldr	r2, [pc, #340]	; (8000fc4 <HAL_GPIO_Init+0x2e4>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_GPIO_Init+0x2e4>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e82:	4a51      	ldr	r2, [pc, #324]	; (8000fc8 <HAL_GPIO_Init+0x2e8>)
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a48      	ldr	r2, [pc, #288]	; (8000fcc <HAL_GPIO_Init+0x2ec>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x202>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a47      	ldr	r2, [pc, #284]	; (8000fd0 <HAL_GPIO_Init+0x2f0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x1fe>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a46      	ldr	r2, [pc, #280]	; (8000fd4 <HAL_GPIO_Init+0x2f4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x1fa>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a45      	ldr	r2, [pc, #276]	; (8000fd8 <HAL_GPIO_Init+0x2f8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x1f6>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a44      	ldr	r2, [pc, #272]	; (8000fdc <HAL_GPIO_Init+0x2fc>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x1f2>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e008      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e004      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	f002 0203 	and.w	r2, r2, #3
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	4093      	lsls	r3, r2
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef4:	4934      	ldr	r1, [pc, #208]	; (8000fc8 <HAL_GPIO_Init+0x2e8>)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3302      	adds	r3, #2
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f26:	4a2e      	ldr	r2, [pc, #184]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f50:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7a:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	f67f aea2 	bls.w	8000cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3724      	adds	r7, #36	; 0x24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40013c00 	.word	0x40013c00

08000fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e11f      	b.n	8001236 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fc38 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2224      	movs	r2, #36	; 0x24
 8001014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001048:	f001 fba8 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 800104c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4a7b      	ldr	r2, [pc, #492]	; (8001240 <HAL_I2C_Init+0x25c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d807      	bhi.n	8001068 <HAL_I2C_Init+0x84>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a7a      	ldr	r2, [pc, #488]	; (8001244 <HAL_I2C_Init+0x260>)
 800105c:	4293      	cmp	r3, r2
 800105e:	bf94      	ite	ls
 8001060:	2301      	movls	r3, #1
 8001062:	2300      	movhi	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	e006      	b.n	8001076 <HAL_I2C_Init+0x92>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4a77      	ldr	r2, [pc, #476]	; (8001248 <HAL_I2C_Init+0x264>)
 800106c:	4293      	cmp	r3, r2
 800106e:	bf94      	ite	ls
 8001070:	2301      	movls	r3, #1
 8001072:	2300      	movhi	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0db      	b.n	8001236 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4a72      	ldr	r2, [pc, #456]	; (800124c <HAL_I2C_Init+0x268>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9b      	lsrs	r3, r3, #18
 8001088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	430a      	orrs	r2, r1
 800109c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4a64      	ldr	r2, [pc, #400]	; (8001240 <HAL_I2C_Init+0x25c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d802      	bhi.n	80010b8 <HAL_I2C_Init+0xd4>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	e009      	b.n	80010cc <HAL_I2C_Init+0xe8>
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010be:	fb02 f303 	mul.w	r3, r2, r3
 80010c2:	4a63      	ldr	r2, [pc, #396]	; (8001250 <HAL_I2C_Init+0x26c>)
 80010c4:	fba2 2303 	umull	r2, r3, r2, r3
 80010c8:	099b      	lsrs	r3, r3, #6
 80010ca:	3301      	adds	r3, #1
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4956      	ldr	r1, [pc, #344]	; (8001240 <HAL_I2C_Init+0x25c>)
 80010e8:	428b      	cmp	r3, r1
 80010ea:	d80d      	bhi.n	8001108 <HAL_I2C_Init+0x124>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	1e59      	subs	r1, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80010fa:	3301      	adds	r3, #1
 80010fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	bf38      	it	cc
 8001104:	2304      	movcc	r3, #4
 8001106:	e04f      	b.n	80011a8 <HAL_I2C_Init+0x1c4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d111      	bne.n	8001134 <HAL_I2C_Init+0x150>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	1e58      	subs	r0, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	440b      	add	r3, r1
 800111e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001122:	3301      	adds	r3, #1
 8001124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001128:	2b00      	cmp	r3, #0
 800112a:	bf0c      	ite	eq
 800112c:	2301      	moveq	r3, #1
 800112e:	2300      	movne	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	e012      	b.n	800115a <HAL_I2C_Init+0x176>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	1e58      	subs	r0, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	0099      	lsls	r1, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	fbb0 f3f3 	udiv	r3, r0, r3
 800114a:	3301      	adds	r3, #1
 800114c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Init+0x17e>
 800115e:	2301      	movs	r3, #1
 8001160:	e022      	b.n	80011a8 <HAL_I2C_Init+0x1c4>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10e      	bne.n	8001188 <HAL_I2C_Init+0x1a4>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1e58      	subs	r0, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6859      	ldr	r1, [r3, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	440b      	add	r3, r1
 8001178:	fbb0 f3f3 	udiv	r3, r0, r3
 800117c:	3301      	adds	r3, #1
 800117e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001186:	e00f      	b.n	80011a8 <HAL_I2C_Init+0x1c4>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1e58      	subs	r0, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	0099      	lsls	r1, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	fbb0 f3f3 	udiv	r3, r0, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	6809      	ldr	r1, [r1, #0]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6911      	ldr	r1, [r2, #16]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68d2      	ldr	r2, [r2, #12]
 80011e2:	4311      	orrs	r1, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2220      	movs	r2, #32
 8001222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	000186a0 	.word	0x000186a0
 8001244:	001e847f 	.word	0x001e847f
 8001248:	003d08ff 	.word	0x003d08ff
 800124c:	431bde83 	.word	0x431bde83
 8001250:	10624dd3 	.word	0x10624dd3

08001254 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af02      	add	r7, sp, #8
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	461a      	mov	r2, r3
 8001260:	460b      	mov	r3, r1
 8001262:	817b      	strh	r3, [r7, #10]
 8001264:	4613      	mov	r3, r2
 8001266:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff fc26 	bl	8000ab8 <HAL_GetTick>
 800126c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b20      	cmp	r3, #32
 8001278:	f040 80e0 	bne.w	800143c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2319      	movs	r3, #25
 8001282:	2201      	movs	r2, #1
 8001284:	4970      	ldr	r1, [pc, #448]	; (8001448 <HAL_I2C_Master_Transmit+0x1f4>)
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 fc70 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001292:	2302      	movs	r3, #2
 8001294:	e0d3      	b.n	800143e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_I2C_Master_Transmit+0x50>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e0cc      	b.n	800143e <HAL_I2C_Master_Transmit+0x1ea>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d007      	beq.n	80012ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2221      	movs	r2, #33	; 0x21
 80012de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2210      	movs	r2, #16
 80012e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	893a      	ldrh	r2, [r7, #8]
 80012fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001300:	b29a      	uxth	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_I2C_Master_Transmit+0x1f8>)
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800130c:	8979      	ldrh	r1, [r7, #10]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	6a3a      	ldr	r2, [r7, #32]
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 fac2 	bl	800189c <I2C_MasterRequestWrite>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e08d      	b.n	800143e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001338:	e066      	b.n	8001408 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	6a39      	ldr	r1, [r7, #32]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 fcea 	bl	8001d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00d      	beq.n	8001366 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	2b04      	cmp	r3, #4
 8001350:	d107      	bne.n	8001362 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001360:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e06b      	b.n	800143e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001380:	b29b      	uxth	r3, r3
 8001382:	3b01      	subs	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138e:	3b01      	subs	r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d11b      	bne.n	80013dc <HAL_I2C_Master_Transmit+0x188>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d017      	beq.n	80013dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	6a39      	ldr	r1, [r7, #32]
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 fcda 	bl	8001d9a <I2C_WaitOnBTFFlagUntilTimeout>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d107      	bne.n	8001404 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001402:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e01a      	b.n	800143e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140c:	2b00      	cmp	r3, #0
 800140e:	d194      	bne.n	800133a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800141e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2220      	movs	r2, #32
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	e000      	b.n	800143e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800143c:	2302      	movs	r3, #2
  }
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	00100002 	.word	0x00100002
 800144c:	ffff0000 	.word	0xffff0000

08001450 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	4608      	mov	r0, r1
 800145a:	4611      	mov	r1, r2
 800145c:	461a      	mov	r2, r3
 800145e:	4603      	mov	r3, r0
 8001460:	817b      	strh	r3, [r7, #10]
 8001462:	460b      	mov	r3, r1
 8001464:	813b      	strh	r3, [r7, #8]
 8001466:	4613      	mov	r3, r2
 8001468:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800146a:	f7ff fb25 	bl	8000ab8 <HAL_GetTick>
 800146e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b20      	cmp	r3, #32
 800147a:	f040 8208 	bne.w	800188e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2319      	movs	r3, #25
 8001484:	2201      	movs	r2, #1
 8001486:	497b      	ldr	r1, [pc, #492]	; (8001674 <HAL_I2C_Mem_Read+0x224>)
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 fb6f 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001494:	2302      	movs	r3, #2
 8001496:	e1fb      	b.n	8001890 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_I2C_Mem_Read+0x56>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e1f4      	b.n	8001890 <HAL_I2C_Mem_Read+0x440>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d007      	beq.n	80014cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2222      	movs	r2, #34	; 0x22
 80014e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2240      	movs	r2, #64	; 0x40
 80014e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80014fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <HAL_I2C_Mem_Read+0x228>)
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800150e:	88f8      	ldrh	r0, [r7, #6]
 8001510:	893a      	ldrh	r2, [r7, #8]
 8001512:	8979      	ldrh	r1, [r7, #10]
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	4603      	mov	r3, r0
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fa3e 	bl	80019a0 <I2C_RequestMemoryRead>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e1b0      	b.n	8001890 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001532:	2b00      	cmp	r3, #0
 8001534:	d113      	bne.n	800155e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	623b      	str	r3, [r7, #32]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e184      	b.n	8001868 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001562:	2b01      	cmp	r3, #1
 8001564:	d11b      	bne.n	800159e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e164      	b.n	8001868 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d11b      	bne.n	80015de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	e144      	b.n	8001868 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80015f4:	e138      	b.n	8001868 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	f200 80f1 	bhi.w	80017e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001604:	2b01      	cmp	r3, #1
 8001606:	d123      	bne.n	8001650 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 fc05 	bl	8001e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e139      	b.n	8001890 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29b      	uxth	r3, r3
 8001646:	3b01      	subs	r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800164e:	e10b      	b.n	8001868 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001654:	2b02      	cmp	r3, #2
 8001656:	d14e      	bne.n	80016f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165e:	2200      	movs	r2, #0
 8001660:	4906      	ldr	r1, [pc, #24]	; (800167c <HAL_I2C_Mem_Read+0x22c>)
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 fa82 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e10e      	b.n	8001890 <HAL_I2C_Mem_Read+0x440>
 8001672:	bf00      	nop
 8001674:	00100002 	.word	0x00100002
 8001678:	ffff0000 	.word	0xffff0000
 800167c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691a      	ldr	r2, [r3, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016de:	3b01      	subs	r3, #1
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016f4:	e0b8      	b.n	8001868 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016fc:	2200      	movs	r2, #0
 80016fe:	4966      	ldr	r1, [pc, #408]	; (8001898 <HAL_I2C_Mem_Read+0x448>)
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 fa33 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0bf      	b.n	8001890 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800171e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001758:	2200      	movs	r2, #0
 800175a:	494f      	ldr	r1, [pc, #316]	; (8001898 <HAL_I2C_Mem_Read+0x448>)
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 fa05 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e091      	b.n	8001890 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001798:	3b01      	subs	r3, #1
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017e0:	e042      	b.n	8001868 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 fb18 	bl	8001e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e04c      	b.n	8001890 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b04      	cmp	r3, #4
 8001834:	d118      	bne.n	8001868 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001852:	3b01      	subs	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186c:	2b00      	cmp	r3, #0
 800186e:	f47f aec2 	bne.w	80015f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2220      	movs	r2, #32
 8001876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800188e:	2302      	movs	r3, #2
  }
}
 8001890:	4618      	mov	r0, r3
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	00010004 	.word	0x00010004

0800189c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	460b      	mov	r3, r1
 80018aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d006      	beq.n	80018c6 <I2C_MasterRequestWrite+0x2a>
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d003      	beq.n	80018c6 <I2C_MasterRequestWrite+0x2a>
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018c4:	d108      	bne.n	80018d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e00b      	b.n	80018f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	2b12      	cmp	r3, #18
 80018de:	d107      	bne.n	80018f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f935 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00c      	beq.n	8001922 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e035      	b.n	800198e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800192a:	d108      	bne.n	800193e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800192c:	897b      	ldrh	r3, [r7, #10]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	e01b      	b.n	8001976 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	11db      	asrs	r3, r3, #7
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f003 0306 	and.w	r3, r3, #6
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f063 030f 	orn	r3, r3, #15
 800194e:	b2da      	uxtb	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	490f      	ldr	r1, [pc, #60]	; (8001998 <I2C_MasterRequestWrite+0xfc>)
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f95c 	bl	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e010      	b.n	800198e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800196c:	897b      	ldrh	r3, [r7, #10]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <I2C_MasterRequestWrite+0x100>)
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f94c 	bl	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	00010008 	.word	0x00010008
 800199c:	00010002 	.word	0x00010002

080019a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	4608      	mov	r0, r1
 80019aa:	4611      	mov	r1, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	4603      	mov	r3, r0
 80019b0:	817b      	strh	r3, [r7, #10]
 80019b2:	460b      	mov	r3, r1
 80019b4:	813b      	strh	r3, [r7, #8]
 80019b6:	4613      	mov	r3, r2
 80019b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f8c0 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00c      	beq.n	8001a0c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0a9      	b.n	8001b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a0c:	897b      	ldrh	r3, [r7, #10]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	6a3a      	ldr	r2, [r7, #32]
 8001a20:	4951      	ldr	r1, [pc, #324]	; (8001b68 <I2C_RequestMemoryRead+0x1c8>)
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f8f9 	bl	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e096      	b.n	8001b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4a:	6a39      	ldr	r1, [r7, #32]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f963 	bl	8001d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d107      	bne.n	8001a70 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e075      	b.n	8001b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a7a:	893b      	ldrh	r3, [r7, #8]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	611a      	str	r2, [r3, #16]
 8001a84:	e021      	b.n	8001aca <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a86:	893b      	ldrh	r3, [r7, #8]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a96:	6a39      	ldr	r1, [r7, #32]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f93d 	bl	8001d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00d      	beq.n	8001ac0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d107      	bne.n	8001abc <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e04f      	b.n	8001b60 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ac0:	893b      	ldrh	r3, [r7, #8]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001acc:	6a39      	ldr	r1, [r7, #32]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f922 	bl	8001d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00d      	beq.n	8001af6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d107      	bne.n	8001af2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e034      	b.n	8001b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f82a 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00c      	beq.n	8001b38 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e013      	b.n	8001b60 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b38:	897b      	ldrh	r3, [r7, #10]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	6a3a      	ldr	r2, [r7, #32]
 8001b4c:	4906      	ldr	r1, [pc, #24]	; (8001b68 <I2C_RequestMemoryRead+0x1c8>)
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f863 	bl	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	00010002 	.word	0x00010002

08001b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7c:	e025      	b.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d021      	beq.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b86:	f7fe ff97 	bl	8000ab8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d302      	bcc.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d116      	bne.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e023      	b.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d10d      	bne.n	8001bf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4013      	ands	r3, r2
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	e00c      	b.n	8001c0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d0b6      	beq.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c28:	e051      	b.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c38:	d123      	bne.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0204 	orr.w	r2, r3, #4
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e046      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d021      	beq.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8a:	f7fe ff15 	bl	8000ab8 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d302      	bcc.n	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d116      	bne.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f043 0220 	orr.w	r2, r3, #32
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e020      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10c      	bne.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	e00b      	b.n	8001d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d18d      	bne.n	8001c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d24:	e02d      	b.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f8ce 	bl	8001ec8 <I2C_IsAcknowledgeFailed>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e02d      	b.n	8001d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d021      	beq.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7fe febb 	bl	8000ab8 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d116      	bne.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f043 0220 	orr.w	r2, r3, #32
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e007      	b.n	8001d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b80      	cmp	r3, #128	; 0x80
 8001d8e:	d1ca      	bne.n	8001d26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001da6:	e02d      	b.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f88d 	bl	8001ec8 <I2C_IsAcknowledgeFailed>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e02d      	b.n	8001e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbe:	d021      	beq.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc0:	f7fe fe7a 	bl	8000ab8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d302      	bcc.n	8001dd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e007      	b.n	8001e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d1ca      	bne.n	8001da8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e28:	e042      	b.n	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b10      	cmp	r3, #16
 8001e36:	d119      	bne.n	8001e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0210 	mvn.w	r2, #16
 8001e40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e029      	b.n	8001ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6c:	f7fe fe24 	bl	8000ab8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d302      	bcc.n	8001e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d116      	bne.n	8001eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f043 0220 	orr.w	r2, r3, #32
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e007      	b.n	8001ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eba:	2b40      	cmp	r3, #64	; 0x40
 8001ebc:	d1b5      	bne.n	8001e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d11b      	bne.n	8001f18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ee8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0204 	orr.w	r2, r3, #4
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e25b      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d075      	beq.n	8002032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f46:	4ba3      	ldr	r3, [pc, #652]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d00c      	beq.n	8001f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f52:	4ba0      	ldr	r3, [pc, #640]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d112      	bne.n	8001f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5e:	4b9d      	ldr	r3, [pc, #628]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	4b99      	ldr	r3, [pc, #612]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d05b      	beq.n	8002030 <HAL_RCC_OscConfig+0x108>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d157      	bne.n	8002030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e236      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_OscConfig+0x74>
 8001f8e:	4b91      	ldr	r3, [pc, #580]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a90      	ldr	r2, [pc, #576]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e01d      	b.n	8001fd8 <HAL_RCC_OscConfig+0xb0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x98>
 8001fa6:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a8a      	ldr	r2, [pc, #552]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a87      	ldr	r2, [pc, #540]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xb0>
 8001fc0:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a83      	ldr	r2, [pc, #524]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a80      	ldr	r2, [pc, #512]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fd6a 	bl	8000ab8 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7fe fd66 	bl	8000ab8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1fb      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xc0>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7fe fd56 	bl	8000ab8 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7fe fd52 	bl	8000ab8 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1e7      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0xe8>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d063      	beq.n	8002106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800203e:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002052:	2b08      	cmp	r3, #8
 8002054:	d11c      	bne.n	8002090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002056:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d116      	bne.n	8002090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_RCC_OscConfig+0x152>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e1bb      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4952      	ldr	r1, [pc, #328]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	e03a      	b.n	8002106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002098:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_RCC_OscConfig+0x2b0>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7fe fd0b 	bl	8000ab8 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a6:	f7fe fd07 	bl	8000ab8 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e19c      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4940      	ldr	r1, [pc, #256]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
 80020d8:	e015      	b.n	8002106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020da:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <HAL_RCC_OscConfig+0x2b0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7fe fcea 	bl	8000ab8 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e8:	f7fe fce6 	bl	8000ab8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e17b      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d030      	beq.n	8002174 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d016      	beq.n	8002148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211a:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_RCC_OscConfig+0x2b4>)
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7fe fcca 	bl	8000ab8 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002128:	f7fe fcc6 	bl	8000ab8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e15b      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x200>
 8002146:	e015      	b.n	8002174 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x2b4>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214e:	f7fe fcb3 	bl	8000ab8 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002156:	f7fe fcaf 	bl	8000ab8 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e144      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002168:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 800216a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80a0 	beq.w	80022c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_OscConfig+0x2b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d121      	bne.n	8002202 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_RCC_OscConfig+0x2b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_RCC_OscConfig+0x2b8>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7fe fc75 	bl	8000ab8 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	e011      	b.n	80021f6 <HAL_RCC_OscConfig+0x2ce>
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	42470000 	.word	0x42470000
 80021dc:	42470e80 	.word	0x42470e80
 80021e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e4:	f7fe fc68 	bl	8000ab8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0fd      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	4b81      	ldr	r3, [pc, #516]	; (80023fc <HAL_RCC_OscConfig+0x4d4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d106      	bne.n	8002218 <HAL_RCC_OscConfig+0x2f0>
 800220a:	4b7d      	ldr	r3, [pc, #500]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a7c      	ldr	r2, [pc, #496]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6713      	str	r3, [r2, #112]	; 0x70
 8002216:	e01c      	b.n	8002252 <HAL_RCC_OscConfig+0x32a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b05      	cmp	r3, #5
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x312>
 8002220:	4b77      	ldr	r3, [pc, #476]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	4a76      	ldr	r2, [pc, #472]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6713      	str	r3, [r2, #112]	; 0x70
 800222c:	4b74      	ldr	r3, [pc, #464]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	4a73      	ldr	r2, [pc, #460]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6713      	str	r3, [r2, #112]	; 0x70
 8002238:	e00b      	b.n	8002252 <HAL_RCC_OscConfig+0x32a>
 800223a:	4b71      	ldr	r3, [pc, #452]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	4a70      	ldr	r2, [pc, #448]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6713      	str	r3, [r2, #112]	; 0x70
 8002246:	4b6e      	ldr	r3, [pc, #440]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a6d      	ldr	r2, [pc, #436]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d015      	beq.n	8002286 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225a:	f7fe fc2d 	bl	8000ab8 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fc29 	bl	8000ab8 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0bc      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	4b61      	ldr	r3, [pc, #388]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ee      	beq.n	8002262 <HAL_RCC_OscConfig+0x33a>
 8002284:	e014      	b.n	80022b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7fe fc17 	bl	8000ab8 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7fe fc13 	bl	8000ab8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e0a6      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	4b56      	ldr	r3, [pc, #344]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ee      	bne.n	800228e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4b52      	ldr	r3, [pc, #328]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a51      	ldr	r2, [pc, #324]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 80022bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8092 	beq.w	80023f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022cc:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d05c      	beq.n	8002392 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d141      	bne.n	8002364 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e0:	4b48      	ldr	r3, [pc, #288]	; (8002404 <HAL_RCC_OscConfig+0x4dc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe fbe7 	bl	8000ab8 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe fbe3 	bl	8000ab8 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e078      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	019b      	lsls	r3, r3, #6
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	3b01      	subs	r3, #1
 8002326:	041b      	lsls	r3, r3, #16
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	061b      	lsls	r3, r3, #24
 8002330:	4933      	ldr	r1, [pc, #204]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <HAL_RCC_OscConfig+0x4dc>)
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe fbbc 	bl	8000ab8 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe fbb8 	bl	8000ab8 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e04d      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x41c>
 8002362:	e045      	b.n	80023f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_RCC_OscConfig+0x4dc>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7fe fba5 	bl	8000ab8 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002372:	f7fe fba1 	bl	8000ab8 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e036      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002384:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x44a>
 8002390:	e02e      	b.n	80023f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e029      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800239e:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_RCC_OscConfig+0x4d8>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d11c      	bne.n	80023ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d115      	bne.n	80023ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023c6:	4013      	ands	r3, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10d      	bne.n	80023ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40007000 	.word	0x40007000
 8002400:	40023800 	.word	0x40023800
 8002404:	42470060 	.word	0x42470060

08002408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0cc      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b68      	ldr	r3, [pc, #416]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d90c      	bls.n	8002444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b65      	ldr	r3, [pc, #404]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0b8      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800245c:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a58      	ldr	r2, [pc, #352]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800247e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	494d      	ldr	r1, [pc, #308]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d044      	beq.n	8002528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d119      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e067      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 0203 	bic.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4934      	ldr	r1, [pc, #208]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f8:	f7fe fade 	bl	8000ab8 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7fe fada 	bl	8000ab8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e04f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 020c 	and.w	r2, r3, #12
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1eb      	bne.n	8002500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d20c      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e032      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4916      	ldr	r1, [pc, #88]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	490e      	ldr	r1, [pc, #56]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258e:	f000 f821 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8002592:	4601      	mov	r1, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	fa21 f303 	lsr.w	r3, r1, r3
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fa3e 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023c00 	.word	0x40023c00
 80025c4:	40023800 	.word	0x40023800
 80025c8:	0800283c 	.word	0x0800283c
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ea:	4b63      	ldr	r3, [pc, #396]	; (8002778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d007      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0x32>
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d008      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x38>
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 80b4 	bne.w	8002768 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002600:	4b5e      	ldr	r3, [pc, #376]	; (800277c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002602:	60bb      	str	r3, [r7, #8]
       break;
 8002604:	e0b3      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002606:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002608:	60bb      	str	r3, [r7, #8]
      break;
 800260a:	e0b0      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800260c:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002614:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002616:	4b58      	ldr	r3, [pc, #352]	; (8002778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d04a      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b55      	ldr	r3, [pc, #340]	; (8002778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	f04f 0400 	mov.w	r4, #0
 800262c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	ea03 0501 	and.w	r5, r3, r1
 8002638:	ea04 0602 	and.w	r6, r4, r2
 800263c:	4629      	mov	r1, r5
 800263e:	4632      	mov	r2, r6
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	f04f 0400 	mov.w	r4, #0
 8002648:	0154      	lsls	r4, r2, #5
 800264a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800264e:	014b      	lsls	r3, r1, #5
 8002650:	4619      	mov	r1, r3
 8002652:	4622      	mov	r2, r4
 8002654:	1b49      	subs	r1, r1, r5
 8002656:	eb62 0206 	sbc.w	r2, r2, r6
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	f04f 0400 	mov.w	r4, #0
 8002662:	0194      	lsls	r4, r2, #6
 8002664:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002668:	018b      	lsls	r3, r1, #6
 800266a:	1a5b      	subs	r3, r3, r1
 800266c:	eb64 0402 	sbc.w	r4, r4, r2
 8002670:	f04f 0100 	mov.w	r1, #0
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	00e2      	lsls	r2, r4, #3
 800267a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800267e:	00d9      	lsls	r1, r3, #3
 8002680:	460b      	mov	r3, r1
 8002682:	4614      	mov	r4, r2
 8002684:	195b      	adds	r3, r3, r5
 8002686:	eb44 0406 	adc.w	r4, r4, r6
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	0262      	lsls	r2, r4, #9
 8002694:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002698:	0259      	lsls	r1, r3, #9
 800269a:	460b      	mov	r3, r1
 800269c:	4614      	mov	r4, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	4621      	mov	r1, r4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f04f 0400 	mov.w	r4, #0
 80026a8:	461a      	mov	r2, r3
 80026aa:	4623      	mov	r3, r4
 80026ac:	f7fd fd94 	bl	80001d8 <__aeabi_uldivmod>
 80026b0:	4603      	mov	r3, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e049      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b8:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	f04f 0400 	mov.w	r4, #0
 80026c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	ea03 0501 	and.w	r5, r3, r1
 80026ce:	ea04 0602 	and.w	r6, r4, r2
 80026d2:	4629      	mov	r1, r5
 80026d4:	4632      	mov	r2, r6
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	f04f 0400 	mov.w	r4, #0
 80026de:	0154      	lsls	r4, r2, #5
 80026e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026e4:	014b      	lsls	r3, r1, #5
 80026e6:	4619      	mov	r1, r3
 80026e8:	4622      	mov	r2, r4
 80026ea:	1b49      	subs	r1, r1, r5
 80026ec:	eb62 0206 	sbc.w	r2, r2, r6
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	f04f 0400 	mov.w	r4, #0
 80026f8:	0194      	lsls	r4, r2, #6
 80026fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026fe:	018b      	lsls	r3, r1, #6
 8002700:	1a5b      	subs	r3, r3, r1
 8002702:	eb64 0402 	sbc.w	r4, r4, r2
 8002706:	f04f 0100 	mov.w	r1, #0
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	00e2      	lsls	r2, r4, #3
 8002710:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002714:	00d9      	lsls	r1, r3, #3
 8002716:	460b      	mov	r3, r1
 8002718:	4614      	mov	r4, r2
 800271a:	195b      	adds	r3, r3, r5
 800271c:	eb44 0406 	adc.w	r4, r4, r6
 8002720:	f04f 0100 	mov.w	r1, #0
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	02a2      	lsls	r2, r4, #10
 800272a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800272e:	0299      	lsls	r1, r3, #10
 8002730:	460b      	mov	r3, r1
 8002732:	4614      	mov	r4, r2
 8002734:	4618      	mov	r0, r3
 8002736:	4621      	mov	r1, r4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f04f 0400 	mov.w	r4, #0
 800273e:	461a      	mov	r2, r3
 8002740:	4623      	mov	r3, r4
 8002742:	f7fd fd49 	bl	80001d8 <__aeabi_uldivmod>
 8002746:	4603      	mov	r3, r0
 8002748:	460c      	mov	r4, r1
 800274a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	60bb      	str	r3, [r7, #8]
      break;
 8002766:	e002      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800276a:	60bb      	str	r3, [r7, #8]
      break;
 800276c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276e:	68bb      	ldr	r3, [r7, #8]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	00f42400 	.word	0x00f42400
 8002780:	007a1200 	.word	0x007a1200

08002784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_RCC_GetHCLKFreq+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a0:	f7ff fff0 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a4:	4601      	mov	r1, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0a9b      	lsrs	r3, r3, #10
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4a03      	ldr	r2, [pc, #12]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	0800284c 	.word	0x0800284c

080027c4 <__libc_init_array>:
 80027c4:	b570      	push	{r4, r5, r6, lr}
 80027c6:	4e0d      	ldr	r6, [pc, #52]	; (80027fc <__libc_init_array+0x38>)
 80027c8:	4c0d      	ldr	r4, [pc, #52]	; (8002800 <__libc_init_array+0x3c>)
 80027ca:	1ba4      	subs	r4, r4, r6
 80027cc:	10a4      	asrs	r4, r4, #2
 80027ce:	2500      	movs	r5, #0
 80027d0:	42a5      	cmp	r5, r4
 80027d2:	d109      	bne.n	80027e8 <__libc_init_array+0x24>
 80027d4:	4e0b      	ldr	r6, [pc, #44]	; (8002804 <__libc_init_array+0x40>)
 80027d6:	4c0c      	ldr	r4, [pc, #48]	; (8002808 <__libc_init_array+0x44>)
 80027d8:	f000 f820 	bl	800281c <_init>
 80027dc:	1ba4      	subs	r4, r4, r6
 80027de:	10a4      	asrs	r4, r4, #2
 80027e0:	2500      	movs	r5, #0
 80027e2:	42a5      	cmp	r5, r4
 80027e4:	d105      	bne.n	80027f2 <__libc_init_array+0x2e>
 80027e6:	bd70      	pop	{r4, r5, r6, pc}
 80027e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027ec:	4798      	blx	r3
 80027ee:	3501      	adds	r5, #1
 80027f0:	e7ee      	b.n	80027d0 <__libc_init_array+0xc>
 80027f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027f6:	4798      	blx	r3
 80027f8:	3501      	adds	r5, #1
 80027fa:	e7f2      	b.n	80027e2 <__libc_init_array+0x1e>
 80027fc:	0800285c 	.word	0x0800285c
 8002800:	0800285c 	.word	0x0800285c
 8002804:	0800285c 	.word	0x0800285c
 8002808:	08002860 	.word	0x08002860

0800280c <memset>:
 800280c:	4402      	add	r2, r0
 800280e:	4603      	mov	r3, r0
 8002810:	4293      	cmp	r3, r2
 8002812:	d100      	bne.n	8002816 <memset+0xa>
 8002814:	4770      	bx	lr
 8002816:	f803 1b01 	strb.w	r1, [r3], #1
 800281a:	e7f9      	b.n	8002810 <memset+0x4>

0800281c <_init>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr

08002828 <_fini>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	bf00      	nop
 800282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282e:	bc08      	pop	{r3}
 8002830:	469e      	mov	lr, r3
 8002832:	4770      	bx	lr
