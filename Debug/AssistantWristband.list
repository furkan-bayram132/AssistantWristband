
AssistantWristband.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001930  08008d18  08008d18  00018d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a648  0800a648  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a648  0800a648  0001a648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a650  0800a650  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a650  0800a650  0001a650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a654  0800a654  0001a654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800a658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000023c  0800a894  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800a894  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019950  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003108  00000000  00000000  00039bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001210  00000000  00000000  0003ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00019b0a  00000000  00000000  0003ded8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00010d90  00000000  00000000  000579e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00092892  00000000  00000000  00068772  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000fb004  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000010a0  00000000  00000000  000fb080  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00005508  00000000  00000000  000fc120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000023c 	.word	0x2000023c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008cfc 	.word	0x08008cfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000240 	.word	0x20000240
 80001dc:	08008cfc 	.word	0x08008cfc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <mma8452qWrite>:
 * This function writes value to address reg using the assigned peripheral address
 * hi2c : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * reg : address of register whose value is set inside the censor
 * value : reg's new content
 * */
HAL_StatusTypeDef mma8452qWrite(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t value) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2];
	data[0] = reg;
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000ecc:	78bb      	ldrb	r3, [r7, #2]
 8000ece:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(hi2c, MMA8452Q_DEVICE_ADDR, data, 2, 10);
 8000ed0:	f107 020c 	add.w	r2, r7, #12
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2302      	movs	r3, #2
 8000eda:	2138      	movs	r1, #56	; 0x38
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f002 fe1d 	bl	8003b1c <HAL_I2C_Master_Transmit>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <mma8452qRead>:
 * hi2c  : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * reg   : address of register where to start reading data from
 * numberofbytes : amount of data to be read from the registers of the censor
 * data_rec : address of buffer where the data from the censor will be stored into
 * */
HAL_StatusTypeDef mma8452qRead(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t numberofbytes, uint8_t* data_rec) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	72fb      	strb	r3, [r7, #11]
 8000efa:	4613      	mov	r3, r2
 8000efc:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, MMA8452Q_DEVICE_ADDR, reg, 1, data_rec, numberofbytes, 100);
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	b299      	uxth	r1, r3
 8000f02:	7abb      	ldrb	r3, [r7, #10]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2264      	movs	r2, #100	; 0x64
 8000f08:	9202      	str	r2, [sp, #8]
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	460a      	mov	r2, r1
 8000f14:	2138      	movs	r1, #56	; 0x38
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f002 fefe 	bl	8003d18 <HAL_I2C_Mem_Read>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <mma8452qInit>:

/*
 * This function initializes all the necessary censor registers in order to read data from it
 * hi2c  : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * */
HAL_StatusTypeDef mma8452qInit(I2C_HandleTypeDef* hi2c) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	  HAL_StatusTypeDef ret1 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_1, 0x00); // 2g selected after 0x00 sent
 8000f2e:	2200      	movs	r2, #0
 8000f30:	212a      	movs	r1, #42	; 0x2a
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffc0 	bl	8000eb8 <mma8452qWrite>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
	  HAL_StatusTypeDef ret2 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_1, 0x01);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	212a      	movs	r1, #42	; 0x2a
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ffb9 	bl	8000eb8 <mma8452qWrite>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73bb      	strb	r3, [r7, #14]
	  HAL_StatusTypeDef ret3 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_2, 0x00);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb2 	bl	8000eb8 <mma8452qWrite>
 8000f54:	4603      	mov	r3, r0
 8000f56:	737b      	strb	r3, [r7, #13]
	  if (ret1 == HAL_OK && ret2 == HAL_OK && ret3 == HAL_OK)
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d107      	bne.n	8000f6e <mma8452qInit+0x48>
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d104      	bne.n	8000f6e <mma8452qInit+0x48>
 8000f64:	7b7b      	ldrb	r3, [r7, #13]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <mma8452qInit+0x48>
		  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <mma8452qInit+0x4a>
	  else
		  return HAL_BUSY;
 8000f6e:	2302      	movs	r3, #2
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <getAccXYZ>:

/*
 * This function takes 7 bytes coming from censor and converts them into meaningful acceloremeter values
 * acc_3d : struct instance that contains raw data coming from censor and variables to be set for meaningful x,y,z acceloremeter data
 * */
void getAccXYZ(AccData* acc_3d) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	int16_t xAccl = (((int16_t)(acc_3d->acc_info[1] << 8)) | acc_3d->acc_info[2]) >> 4;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	789b      	ldrb	r3, [r3, #2]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	111b      	asrs	r3, r3, #4
 8000f92:	81fb      	strh	r3, [r7, #14]
	int16_t yAccl = (((int16_t)(acc_3d->acc_info[3] << 8)) | acc_3d->acc_info[4]) >> 4;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	111b      	asrs	r3, r3, #4
 8000fa6:	81bb      	strh	r3, [r7, #12]
	int16_t zAccl = (((int16_t)(acc_3d->acc_info[5] << 8)) | acc_3d->acc_info[6]) >> 4;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	799b      	ldrb	r3, [r3, #6]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	111b      	asrs	r3, r3, #4
 8000fba:	817b      	strh	r3, [r7, #10]
	acc_3d->x_acc = xAccl;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	89fa      	ldrh	r2, [r7, #14]
 8000fc0:	811a      	strh	r2, [r3, #8]
	acc_3d->y_acc = yAccl;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	89ba      	ldrh	r2, [r7, #12]
 8000fc6:	815a      	strh	r2, [r3, #10]
	acc_3d->z_acc = zAccl;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	897a      	ldrh	r2, [r7, #10]
 8000fcc:	819a      	strh	r2, [r3, #12]
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <ST7735_Select+0x14>)
 8000fe6:	f002 fc47 	bl	8003878 <HAL_GPIO_WritePin>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <ST7735_Unselect+0x14>)
 8000ffe:	f002 fc3b 	bl	8003878 <HAL_GPIO_WritePin>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020c00 	.word	0x40020c00

0800100c <ST7735_Reset>:

static void ST7735_Reset() {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <ST7735_Reset+0x28>)
 8001018:	f002 fc2e 	bl	8003878 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800101c:	2005      	movs	r0, #5
 800101e:	f002 f95d 	bl	80032dc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <ST7735_Reset+0x28>)
 800102a:	f002 fc25 	bl	8003878 <HAL_GPIO_WritePin>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020000 	.word	0x40020000

08001038 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <ST7735_WriteCommand+0x2c>)
 800104a:	f002 fc15 	bl	8003878 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800104e:	1df9      	adds	r1, r7, #7
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2201      	movs	r2, #1
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <ST7735_WriteCommand+0x30>)
 8001058:	f004 f890 	bl	800517c <HAL_SPI_Transmit>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40020800 	.word	0x40020800
 8001068:	2000030c 	.word	0x2000030c

0800106c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <ST7735_WriteData+0x30>)
 800107e:	f002 fbfb 	bl	8003878 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b29a      	uxth	r2, r3
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <ST7735_WriteData+0x34>)
 800108e:	f004 f875 	bl	800517c <HAL_SPI_Transmit>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020800 	.word	0x40020800
 80010a0:	2000030c 	.word	0x2000030c

080010a4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80010b6:	e034      	b.n	8001122 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffb7 	bl	8001038 <ST7735_WriteCommand>

        numArgs = *addr++;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80010d4:	7abb      	ldrb	r3, [r7, #10]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010dc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010e4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80010ec:	7abb      	ldrb	r3, [r7, #10]
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ffbb 	bl	800106c <ST7735_WriteData>
            addr += numArgs;
 80010f6:	7abb      	ldrb	r3, [r7, #10]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80010fe:	89bb      	ldrh	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00e      	beq.n	8001122 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800110e:	89bb      	ldrh	r3, [r7, #12]
 8001110:	2bff      	cmp	r3, #255	; 0xff
 8001112:	d102      	bne.n	800111a <ST7735_ExecuteCommandList+0x76>
 8001114:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001118:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	f002 f8dd 	bl	80032dc <HAL_Delay>
    while(numCommands--) {
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	73fa      	strb	r2, [r7, #15]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1c5      	bne.n	80010b8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4623      	mov	r3, r4
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	4603      	mov	r3, r0
 8001148:	71bb      	strb	r3, [r7, #6]
 800114a:	460b      	mov	r3, r1
 800114c:	717b      	strb	r3, [r7, #5]
 800114e:	4613      	mov	r3, r2
 8001150:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001152:	202a      	movs	r0, #42	; 0x2a
 8001154:	f7ff ff70 	bl	8001038 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001158:	2300      	movs	r3, #0
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3302      	adds	r3, #2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]
 8001164:	2300      	movs	r3, #0
 8001166:	73bb      	strb	r3, [r7, #14]
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	3302      	adds	r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2104      	movs	r1, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff78 	bl	800106c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800117c:	202b      	movs	r0, #43	; 0x2b
 800117e:	f7ff ff5b 	bl	8001038 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	3301      	adds	r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800118a:	793b      	ldrb	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2104      	movs	r1, #4
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff67 	bl	800106c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800119e:	202c      	movs	r0, #44	; 0x2c
 80011a0:	f7ff ff4a 	bl	8001038 <ST7735_WriteCommand>
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}

080011ac <ST7735_Init>:

void ST7735_Init() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    ST7735_Select();
 80011b0:	f7ff ff14 	bl	8000fdc <ST7735_Select>
    ST7735_Reset();
 80011b4:	f7ff ff2a 	bl	800100c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <ST7735_Init+0x28>)
 80011ba:	f7ff ff73 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <ST7735_Init+0x2c>)
 80011c0:	f7ff ff70 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <ST7735_Init+0x30>)
 80011c6:	f7ff ff6d 	bl	80010a4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80011ca:	f7ff ff13 	bl	8000ff4 <ST7735_Unselect>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800a358 	.word	0x0800a358
 80011d8:	0800a394 	.word	0x0800a394
 80011dc:	0800a3a4 	.word	0x0800a3a4

080011e0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011e0:	b082      	sub	sp, #8
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b089      	sub	sp, #36	; 0x24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	460b      	mov	r3, r1
 80011f0:	80bb      	strh	r3, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	b2d9      	uxtb	r1, r3
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001206:	4413      	add	r3, r2
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3b01      	subs	r3, #1
 800120c:	b2dc      	uxtb	r4, r3
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001216:	4413      	add	r3, r2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3b01      	subs	r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4622      	mov	r2, r4
 8001220:	f7ff ff88 	bl	8001134 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	e043      	b.n	80012b2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800122a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	3b20      	subs	r3, #32
 8001230:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	4619      	mov	r1, r3
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	440b      	add	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	e029      	b.n	80012a0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00e      	beq.n	800127a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800125c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	743b      	strb	r3, [r7, #16]
 8001266:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001268:	b2db      	uxtb	r3, r3
 800126a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2102      	movs	r1, #2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fefa 	bl	800106c <ST7735_WriteData>
 8001278:	e00f      	b.n	800129a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800127a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	b29b      	uxth	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	733b      	strb	r3, [r7, #12]
 8001286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800128a:	b2db      	uxtb	r3, r3
 800128c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2102      	movs	r1, #2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fee9 	bl	800106c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	3301      	adds	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012a4:	461a      	mov	r2, r3
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d3cf      	bcc.n	800124c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	3301      	adds	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012b6:	461a      	mov	r2, r3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d3b5      	bcc.n	800122a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012c8:	b002      	add	sp, #8
 80012ca:	4770      	bx	lr

080012cc <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012cc:	b082      	sub	sp, #8
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af04      	add	r7, sp, #16
 80012d4:	603a      	str	r2, [r7, #0]
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	4603      	mov	r3, r0
 80012da:	80fb      	strh	r3, [r7, #6]
 80012dc:	460b      	mov	r3, r1
 80012de:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80012e0:	f7ff fe7c 	bl	8000fdc <ST7735_Select>

    while(*str) {
 80012e4:	e02d      	b.n	8001342 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	7d3a      	ldrb	r2, [r7, #20]
 80012ea:	4413      	add	r3, r2
 80012ec:	2b7f      	cmp	r3, #127	; 0x7f
 80012ee:	dd13      	ble.n	8001318 <ST7735_WriteString+0x4c>
            x = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80012f4:	7d7b      	ldrb	r3, [r7, #21]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	7d7a      	ldrb	r2, [r7, #21]
 8001302:	4413      	add	r3, r2
 8001304:	2b9f      	cmp	r3, #159	; 0x9f
 8001306:	dc21      	bgt.n	800134c <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b20      	cmp	r3, #32
 800130e:	d103      	bne.n	8001318 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	603b      	str	r3, [r7, #0]
                continue;
 8001316:	e014      	b.n	8001342 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	88b9      	ldrh	r1, [r7, #4]
 800131e:	88f8      	ldrh	r0, [r7, #6]
 8001320:	8c3b      	ldrh	r3, [r7, #32]
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	8bbb      	ldrh	r3, [r7, #28]
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f7ff ff57 	bl	80011e0 <ST7735_WriteChar>
        x += font.width;
 8001332:	7d3b      	ldrb	r3, [r7, #20]
 8001334:	b29a      	uxth	r2, r3
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4413      	add	r3, r2
 800133a:	80fb      	strh	r3, [r7, #6]
        str++;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1cd      	bne.n	80012e6 <ST7735_WriteString+0x1a>
 800134a:	e000      	b.n	800134e <ST7735_WriteString+0x82>
                break;
 800134c:	bf00      	nop
    }

    ST7735_Unselect();
 800134e:	f7ff fe51 	bl	8000ff4 <ST7735_Unselect>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800135c:	b002      	add	sp, #8
 800135e:	4770      	bx	lr

08001360 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4623      	mov	r3, r4
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	4603      	mov	r3, r0
 8001374:	80bb      	strh	r3, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]
 800137a:	4613      	mov	r3, r2
 800137c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2b7f      	cmp	r3, #127	; 0x7f
 8001382:	d85a      	bhi.n	800143a <ST7735_FillRectangle+0xda>
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	2b9f      	cmp	r3, #159	; 0x9f
 8001388:	d857      	bhi.n	800143a <ST7735_FillRectangle+0xda>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800138a:	88fa      	ldrh	r2, [r7, #6]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4413      	add	r3, r2
 8001390:	3b01      	subs	r3, #1
 8001392:	2b7f      	cmp	r3, #127	; 0x7f
 8001394:	dd03      	ble.n	800139e <ST7735_FillRectangle+0x3e>
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800139c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800139e:	88ba      	ldrh	r2, [r7, #4]
 80013a0:	883b      	ldrh	r3, [r7, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	3b01      	subs	r3, #1
 80013a6:	2b9f      	cmp	r3, #159	; 0x9f
 80013a8:	dd03      	ble.n	80013b2 <ST7735_FillRectangle+0x52>
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80013b0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80013b2:	f7ff fe13 	bl	8000fdc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	b2d8      	uxtb	r0, r3
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	b2d9      	uxtb	r1, r3
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	3b01      	subs	r3, #1
 80013cc:	b2dc      	uxtb	r4, r3
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	883b      	ldrh	r3, [r7, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3b01      	subs	r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4622      	mov	r2, r4
 80013e0:	f7ff fea8 	bl	8001134 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80013e4:	8c3b      	ldrh	r3, [r7, #32]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	733b      	strb	r3, [r7, #12]
 80013ee:	8c3b      	ldrh	r3, [r7, #32]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <ST7735_FillRectangle+0xe4>)
 80013fc:	f002 fa3c 	bl	8003878 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001400:	883b      	ldrh	r3, [r7, #0]
 8001402:	80bb      	strh	r3, [r7, #4]
 8001404:	e013      	b.n	800142e <ST7735_FillRectangle+0xce>
        for(x = w; x > 0; x--) {
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	80fb      	strh	r3, [r7, #6]
 800140a:	e00a      	b.n	8001422 <ST7735_FillRectangle+0xc2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800140c:	f107 010c 	add.w	r1, r7, #12
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	2202      	movs	r2, #2
 8001416:	480c      	ldr	r0, [pc, #48]	; (8001448 <ST7735_FillRectangle+0xe8>)
 8001418:	f003 feb0 	bl	800517c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	3b01      	subs	r3, #1
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f1      	bne.n	800140c <ST7735_FillRectangle+0xac>
    for(y = h; y > 0; y--) {
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e8      	bne.n	8001406 <ST7735_FillRectangle+0xa6>
        }
    }

    ST7735_Unselect();
 8001434:	f7ff fdde 	bl	8000ff4 <ST7735_Unselect>
 8001438:	e000      	b.n	800143c <ST7735_FillRectangle+0xdc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800143a:	bf00      	nop
}
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	40020800 	.word	0x40020800
 8001448:	2000030c 	.word	0x2000030c

0800144c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af02      	add	r7, sp, #8
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	2100      	movs	r1, #0
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff ff7d 	bl	8001360 <ST7735_FillRectangle>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b090      	sub	sp, #64	; 0x40
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	CalorieInfo person_cal_info;
	calorie_state = calorie_height_mode;
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <main+0x118>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f001 febc 	bl	80031f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f896 	bl	80015b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f000 fa50 	bl	8001928 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001488:	f000 f8fa 	bl	8001680 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800148c:	f000 fa22 	bl	80018d4 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001490:	f000 f924 	bl	80016dc <MX_SPI3_Init>
  MX_TIM2_Init();
 8001494:	f000 f95a 	bl	800174c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001498:	f000 f9ce 	bl	8001838 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim3);
 800149c:	483b      	ldr	r0, [pc, #236]	; (800158c <main+0x11c>)
 800149e:	f004 f878 	bl	8005592 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014a2:	2100      	movs	r1, #0
 80014a4:	483a      	ldr	r0, [pc, #232]	; (8001590 <main+0x120>)
 80014a6:	f004 f8cd 	bl	8005644 <HAL_TIM_PWM_Start>
  	htim2.Instance->CCR1 = 0;
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <main+0x120>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
	// put all custom initialization functions here no matter which states they belong to
	ST7735_Init();
 80014b2:	f7ff fe7b 	bl	80011ac <ST7735_Init>
	mma8452qInit(&hi2c1);
 80014b6:	4837      	ldr	r0, [pc, #220]	; (8001594 <main+0x124>)
 80014b8:	f7ff fd35 	bl	8000f26 <mma8452qInit>
	initCalorieMode(&person_cal_info);
 80014bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fdd9 	bl	8002078 <initCalorieMode>
	uint8_t send_weight_height_key = 0; // when equals 1, provides sending weight and height infos through bluetooth just once.
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	sample_result = createQueue(4);
 80014cc:	2004      	movs	r0, #4
 80014ce:	f000 fad8 	bl	8001a82 <createQueue>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <main+0x128>)
 80014d6:	601a      	str	r2, [r3, #0]
	dynamic_threshold_array = createQueue(50);
 80014d8:	2032      	movs	r0, #50	; 0x32
 80014da:	f000 fad2 	bl	8001a82 <createQueue>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b2e      	ldr	r3, [pc, #184]	; (800159c <main+0x12c>)
 80014e2:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		switch (current_state) {
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <main+0x130>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d8fb      	bhi.n	80014e4 <main+0x74>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <main+0x84>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	0800150d 	.word	0x0800150d
 80014f8:	08001513 	.word	0x08001513
 80014fc:	08001519 	.word	0x08001519
 8001500:	08001525 	.word	0x08001525
 8001504:	08001533 	.word	0x08001533
 8001508:	0800157b 	.word	0x0800157b
			case welcome_mode:
				welcomeScreen();
 800150c:	f001 fd56 	bl	8002fbc <welcomeScreen>
				break;
 8001510:	e039      	b.n	8001586 <main+0x116>
			case choose_mode:
				chooseModeScreen();
 8001512:	f001 f97f 	bl	8002814 <chooseModeScreen>
				break;
 8001516:	e036      	b.n	8001586 <main+0x116>
			case step_mode:
				stepScreen(step_num);
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <main+0x134>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fcbb 	bl	8002e98 <stepScreen>
				break;
 8001522:	e030      	b.n	8001586 <main+0x116>
			case calorie_mode:
				calorieScreen(&calorie_state, &person_cal_info);
 8001524:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001528:	4619      	mov	r1, r3
 800152a:	4817      	ldr	r0, [pc, #92]	; (8001588 <main+0x118>)
 800152c:	f000 fd78 	bl	8002020 <calorieScreen>
				break;
 8001530:	e029      	b.n	8001586 <main+0x116>
			case main_mode:
				if (!send_weight_height_key) {
 8001532:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001536:	2b00      	cmp	r3, #0
 8001538:	d119      	bne.n	800156e <main+0xfe>
					char weight_height_info[50] = { 0 };
 800153a:	463b      	mov	r3, r7
 800153c:	2232      	movs	r2, #50	; 0x32
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f005 fb9d 	bl	8006c80 <memset>
					sprintf(weight_height_info, " %d %d \r\n", person_cal_info.weight, person_cal_info.height);
 8001546:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800154a:	461a      	mov	r2, r3
 800154c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001550:	4638      	mov	r0, r7
 8001552:	4915      	ldr	r1, [pc, #84]	; (80015a8 <main+0x138>)
 8001554:	f006 f8be 	bl	80076d4 <siprintf>
					HAL_UART_Transmit(&huart6, (uint8_t *)weight_height_info, sizeof(weight_height_info), 100);
 8001558:	4639      	mov	r1, r7
 800155a:	2364      	movs	r3, #100	; 0x64
 800155c:	2232      	movs	r2, #50	; 0x32
 800155e:	4813      	ldr	r0, [pc, #76]	; (80015ac <main+0x13c>)
 8001560:	f004 fef5 	bl	800634e <HAL_UART_Transmit>
					++send_weight_height_key;
 8001564:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001568:	3301      	adds	r3, #1
 800156a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
				mainScreen(&person_cal_info);
 800156e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001572:	4618      	mov	r0, r3
 8001574:	f001 fa9e 	bl	8002ab4 <mainScreen>
				break;
 8001578:	e005      	b.n	8001586 <main+0x116>
			case final_mode:
				finalModeScreen(&person_cal_info);
 800157a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800157e:	4618      	mov	r0, r3
 8001580:	f001 f9aa 	bl	80028d8 <finalModeScreen>
				break;
 8001584:	bf00      	nop
		switch (current_state) {
 8001586:	e7ad      	b.n	80014e4 <main+0x74>
 8001588:	20000270 	.word	0x20000270
 800158c:	200002c8 	.word	0x200002c8
 8001590:	200003ac 	.word	0x200003ac
 8001594:	20000274 	.word	0x20000274
 8001598:	20000368 	.word	0x20000368
 800159c:	20000364 	.word	0x20000364
 80015a0:	20000258 	.word	0x20000258
 80015a4:	20000014 	.word	0x20000014
 80015a8:	08008d18 	.word	0x08008d18
 80015ac:	2000036c 	.word	0x2000036c

080015b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b094      	sub	sp, #80	; 0x50
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2230      	movs	r2, #48	; 0x30
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f005 fb5e 	bl	8006c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <SystemClock_Config+0xc8>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a26      	ldr	r2, [pc, #152]	; (8001678 <SystemClock_Config+0xc8>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <SystemClock_Config+0xc8>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <SystemClock_Config+0xcc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a20      	ldr	r2, [pc, #128]	; (800167c <SystemClock_Config+0xcc>)
 80015fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <SystemClock_Config+0xcc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800160c:	2301      	movs	r3, #1
 800160e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001616:	2302      	movs	r3, #2
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001620:	2308      	movs	r3, #8
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001624:	2364      	movs	r3, #100	; 0x64
 8001626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001628:	2302      	movs	r3, #2
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800162c:	2304      	movs	r3, #4
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	4618      	mov	r0, r3
 8001636:	f003 f8db 	bl	80047f0 <HAL_RCC_OscConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001640:	f000 fa18 	bl	8001a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001644:	230f      	movs	r3, #15
 8001646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001648:	2302      	movs	r3, #2
 800164a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fb36 	bl	8004cd0 <HAL_RCC_ClockConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800166a:	f000 fa03 	bl	8001a74 <Error_Handler>
  }
}
 800166e:	bf00      	nop
 8001670:	3750      	adds	r7, #80	; 0x50
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000

08001680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_I2C1_Init+0x50>)
 8001686:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <MX_I2C1_Init+0x54>)
 8001688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_I2C1_Init+0x50>)
 800168c:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <MX_I2C1_Init+0x58>)
 800168e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_I2C1_Init+0x50>)
 800169e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <MX_I2C1_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_I2C1_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <MX_I2C1_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_I2C1_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_I2C1_Init+0x50>)
 80016be:	f002 f8f5 	bl	80038ac <HAL_I2C_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016c8:	f000 f9d4 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000274 	.word	0x20000274
 80016d4:	40005400 	.word	0x40005400
 80016d8:	000186a0 	.word	0x000186a0

080016dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_SPI3_Init+0x68>)
 80016e2:	4a19      	ldr	r2, [pc, #100]	; (8001748 <MX_SPI3_Init+0x6c>)
 80016e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_SPI3_Init+0x68>)
 80016e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_SPI3_Init+0x68>)
 80016f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016f4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <MX_SPI3_Init+0x68>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_SPI3_Init+0x68>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_SPI3_Init+0x68>)
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_SPI3_Init+0x68>)
 800170a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_SPI3_Init+0x68>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_SPI3_Init+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_SPI3_Init+0x68>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_SPI3_Init+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_SPI3_Init+0x68>)
 800172a:	220a      	movs	r2, #10
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_SPI3_Init+0x68>)
 8001730:	f003 fcc0 	bl	80050b4 <HAL_SPI_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800173a:	f000 f99b 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000030c 	.word	0x2000030c
 8001748:	40003c00 	.word	0x40003c00

0800174c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	; 0x38
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <MX_TIM2_Init+0xe8>)
 800177e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 385-1;
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <MX_TIM2_Init+0xe8>)
 8001786:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800178a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <MX_TIM2_Init+0xe8>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <MX_TIM2_Init+0xe8>)
 8001794:	22fe      	movs	r2, #254	; 0xfe
 8001796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <MX_TIM2_Init+0xe8>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <MX_TIM2_Init+0xe8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a4:	4823      	ldr	r0, [pc, #140]	; (8001834 <MX_TIM2_Init+0xe8>)
 80017a6:	f003 fec9 	bl	800553c <HAL_TIM_Base_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017b0:	f000 f960 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017be:	4619      	mov	r1, r3
 80017c0:	481c      	ldr	r0, [pc, #112]	; (8001834 <MX_TIM2_Init+0xe8>)
 80017c2:	f004 f93f 	bl	8005a44 <HAL_TIM_ConfigClockSource>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017cc:	f000 f952 	bl	8001a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017d0:	4818      	ldr	r0, [pc, #96]	; (8001834 <MX_TIM2_Init+0xe8>)
 80017d2:	f003 ff02 	bl	80055da <HAL_TIM_PWM_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017dc:	f000 f94a 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	4619      	mov	r1, r3
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <MX_TIM2_Init+0xe8>)
 80017f0:	f004 fcde 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017fa:	f000 f93b 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fe:	2360      	movs	r3, #96	; 0x60
 8001800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	4619      	mov	r1, r3
 8001814:	4807      	ldr	r0, [pc, #28]	; (8001834 <MX_TIM2_Init+0xe8>)
 8001816:	f004 f84f 	bl	80058b8 <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001820:	f000 f928 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <MX_TIM2_Init+0xe8>)
 8001826:	f000 faed 	bl	8001e04 <HAL_TIM_MspPostInit>

}
 800182a:	bf00      	nop
 800182c:	3738      	adds	r7, #56	; 0x38
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200003ac 	.word	0x200003ac

08001838 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_TIM3_Init+0x94>)
 8001856:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <MX_TIM3_Init+0x98>)
 8001858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25000;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_TIM3_Init+0x94>)
 800185c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001860:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_TIM3_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_TIM3_Init+0x94>)
 800186a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800186e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_TIM3_Init+0x94>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_TIM3_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800187c:	4813      	ldr	r0, [pc, #76]	; (80018cc <MX_TIM3_Init+0x94>)
 800187e:	f003 fe5d 	bl	800553c <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001888:	f000 f8f4 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4619      	mov	r1, r3
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_TIM3_Init+0x94>)
 800189a:	f004 f8d3 	bl	8005a44 <HAL_TIM_ConfigClockSource>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80018a4:	f000 f8e6 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_TIM3_Init+0x94>)
 80018b6:	f004 fc7b 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018c0:	f000 f8d8 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200002c8 	.word	0x200002c8
 80018d0:	40000400 	.word	0x40000400

080018d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_USART6_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018fa:	2208      	movs	r2, #8
 80018fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 800190c:	f004 fcd2 	bl	80062b4 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001916:	f000 f8ad 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000036c 	.word	0x2000036c
 8001924:	40011400 	.word	0x40011400

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <MX_GPIO_Init+0x13c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a47      	ldr	r2, [pc, #284]	; (8001a64 <MX_GPIO_Init+0x13c>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <MX_GPIO_Init+0x13c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <MX_GPIO_Init+0x13c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <MX_GPIO_Init+0x13c>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <MX_GPIO_Init+0x13c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <MX_GPIO_Init+0x13c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a39      	ldr	r2, [pc, #228]	; (8001a64 <MX_GPIO_Init+0x13c>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <MX_GPIO_Init+0x13c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <MX_GPIO_Init+0x13c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a32      	ldr	r2, [pc, #200]	; (8001a64 <MX_GPIO_Init+0x13c>)
 800199c:	f043 0308 	orr.w	r3, r3, #8
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <MX_GPIO_Init+0x13c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <MX_GPIO_Init+0x13c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <MX_GPIO_Init+0x13c>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <MX_GPIO_Init+0x13c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_RST_GPIO_Port, DISP_RST_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d0:	4825      	ldr	r0, [pc, #148]	; (8001a68 <MX_GPIO_Init+0x140>)
 80019d2:	f001 ff51 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_A0_DC_GPIO_Port, DISP_A0_DC_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019dc:	4823      	ldr	r0, [pc, #140]	; (8001a6c <MX_GPIO_Init+0x144>)
 80019de:	f001 ff4b 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2104      	movs	r1, #4
 80019e6:	4822      	ldr	r0, [pc, #136]	; (8001a70 <MX_GPIO_Init+0x148>)
 80019e8:	f001 ff46 	bl	8003878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019ec:	2307      	movs	r3, #7
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	481b      	ldr	r0, [pc, #108]	; (8001a6c <MX_GPIO_Init+0x144>)
 8001a00:	f001 fda0 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_RST_Pin */
  GPIO_InitStruct.Pin = DISP_RST_Pin;
 8001a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_RST_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4812      	ldr	r0, [pc, #72]	; (8001a68 <MX_GPIO_Init+0x140>)
 8001a1e:	f001 fd91 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_A0_DC_Pin */
  GPIO_InitStruct.Pin = DISP_A0_DC_Pin;
 8001a22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_A0_DC_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_GPIO_Init+0x144>)
 8001a3c:	f001 fd82 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8001a40:	2304      	movs	r3, #4
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <MX_GPIO_Init+0x148>)
 8001a58:	f001 fd74 	bl	8003544 <HAL_GPIO_Init>

}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	; 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <createQueue>:
#include "queue.h"

// function to create a queue
// of given capacity.
// It initializes size of queue as 0
Queue* createQueue(unsigned capacity) {
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
    struct Queue* queue = (struct Queue*)malloc(
 8001a8a:	2014      	movs	r0, #20
 8001a8c:	f005 f8f0 	bl	8006c70 <malloc>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
        sizeof(struct Queue));
    queue->capacity = capacity;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	60da      	str	r2, [r3, #12]
    queue->front = queue->size = 0;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	601a      	str	r2, [r3, #0]

    // This is important, see the enqueue
    queue->rear = capacity - 1;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	461a      	mov	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	605a      	str	r2, [r3, #4]
    queue->array = (int*)calloc(
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f005 f8a7 	bl	8006c0c <calloc>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
        queue->capacity, sizeof(int));
    return queue;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <isFull>:


// Queue is full when size becomes
// equal to the capacity
int isFull(Queue* queue) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	return (queue->size == queue->capacity);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	461a      	mov	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <isEmpty>:


// Queue is empty when size is 0
int isEmpty(Queue* queue) {
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	return (queue->size == 0);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <dequeue>:


// Function to remove an item from queue.
// It changes front and size
int dequeue(struct Queue* queue) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffe8 	bl	8001af8 <isEmpty>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <dequeue+0x1a>
        return INT_MIN;
 8001b2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b32:	e01b      	b.n	8001b6c <dequeue+0x52>
    int item = queue->array[queue->front];
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	461a      	mov	r2, r3
                   % queue->capacity;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b54:	fb03 f301 	mul.w	r3, r3, r1
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	461a      	mov	r2, r3
    queue->front = (queue->front + 1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	601a      	str	r2, [r3, #0]
    queue->size = queue->size - 1;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	609a      	str	r2, [r3, #8]
    return item;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <enqueue>:


// Function to add an item to the queue.
// It changes rear and size
void enqueue(Queue* queue, int item) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    if (isFull(queue))
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffa6 	bl	8001ad0 <isFull>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d11b      	bne.n	8001bc2 <enqueue+0x4e>
        return;
    queue->rear = (queue->rear + 1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	461a      	mov	r2, r3
                  % queue->capacity;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b9a:	fb03 f301 	mul.w	r3, r3, r1
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	461a      	mov	r2, r3
    queue->rear = (queue->rear + 1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	605a      	str	r2, [r3, #4]
    queue->array[queue->rear] = item;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
    queue->size = queue->size + 1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	e000      	b.n	8001bc4 <enqueue+0x50>
        return;
 8001bc2:	bf00      	nop
    //printf("%d enqueued to queue\n", item);
}
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_MspInit+0x4c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <HAL_MspInit+0x4c>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_MspInit+0x4c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_MspInit+0x4c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_MspInit+0x4c>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_MspInit+0x4c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_I2C_MspInit+0x84>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d12c      	bne.n	8001c98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c60:	2312      	movs	r3, #18
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <HAL_I2C_MspInit+0x8c>)
 8001c78:	f001 fc64 	bl	8003544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_I2C_MspInit+0x88>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020400 	.word	0x40020400

08001cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_SPI_MspInit+0x84>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12c      	bne.n	8001d28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_SPI_MspInit+0x88>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_SPI_MspInit+0x8c>)
 8001d24:	f001 fc0e 	bl	8003544 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40003c00 	.word	0x40003c00
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020800 	.word	0x40020800

08001d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5c:	d10e      	bne.n	8001d7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d7a:	e038      	b.n	8001dee <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <HAL_TIM_Base_MspInit+0xc0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d133      	bne.n	8001dee <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4809      	ldr	r0, [pc, #36]	; (8001e00 <HAL_TIM_Base_MspInit+0xc4>)
 8001dda:	f001 fbb3 	bl	8003544 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	201d      	movs	r0, #29
 8001de4:	f001 fb77 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001de8:	201d      	movs	r0, #29
 8001dea:	f001 fb90 	bl	800350e <HAL_NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	40020000 	.word	0x40020000

08001e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e24:	d11d      	bne.n	8001e62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_TIM_MspPostInit+0x68>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a0f      	ldr	r2, [pc, #60]	; (8001e6c <HAL_TIM_MspPostInit+0x68>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_TIM_MspPostInit+0x68>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e42:	2301      	movs	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <HAL_TIM_MspPostInit+0x6c>)
 8001e5e:	f001 fb71 	bl	8003544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000

08001e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_UART_MspInit+0x84>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12c      	bne.n	8001ef0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_UART_MspInit+0x88>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <HAL_UART_MspInit+0x88>)
 8001ea0:	f043 0320 	orr.w	r3, r3, #32
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_UART_MspInit+0x88>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_UART_MspInit+0x88>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <HAL_UART_MspInit+0x88>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_UART_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ece:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <HAL_UART_MspInit+0x8c>)
 8001eec:	f001 fb2a 	bl	8003544 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	; 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40011400 	.word	0x40011400
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <HardFault_Handler+0x4>

08001f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <MemManage_Handler+0x4>

08001f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <BusFault_Handler+0x4>

08001f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <UsageFault_Handler+0x4>

08001f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f58:	f001 f9a0 	bl	800329c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  if (current_state == main_mode) {
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <TIM3_IRQHandler+0x2c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d109      	bne.n	8001f80 <TIM3_IRQHandler+0x20>
	  current_step += 50;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <TIM3_IRQHandler+0x30>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	3332      	adds	r3, #50	; 0x32
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <TIM3_IRQHandler+0x30>)
 8001f74:	6013      	str	r3, [r2, #0]
	  elapsed_time += 1;
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <TIM3_IRQHandler+0x34>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <TIM3_IRQHandler+0x34>)
 8001f7e:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <TIM3_IRQHandler+0x38>)
 8001f82:	f003 fb91 	bl	80056a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000258 	.word	0x20000258
 8001f90:	20000010 	.word	0x20000010
 8001f94:	20000018 	.word	0x20000018
 8001f98:	200002c8 	.word	0x200002c8

08001f9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <_sbrk+0x50>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <_sbrk+0x16>
		heap_end = &end;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <_sbrk+0x50>)
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <_sbrk+0x54>)
 8001fb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <_sbrk+0x50>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <_sbrk+0x50>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	466a      	mov	r2, sp
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d907      	bls.n	8001fd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fc6:	f004 fe29 	bl	8006c1c <__errno>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	230c      	movs	r3, #12
 8001fce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd4:	e006      	b.n	8001fe4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <_sbrk+0x50>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a03      	ldr	r2, [pc, #12]	; (8001fec <_sbrk+0x50>)
 8001fe0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000264 	.word	0x20000264
 8001ff0:	200003f8 	.word	0x200003f8

08001ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <SystemInit+0x28>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffe:	4a07      	ldr	r2, [pc, #28]	; (800201c <SystemInit+0x28>)
 8002000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <SystemInit+0x28>)
 800200a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800200e:	609a      	str	r2, [r3, #8]
#endif
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <calorieScreen>:
uint8_t limit_vals_6[10][2] = {{45,28}, {55,33}, {64,38}, {73,44}, {82,49},
							 {91,55}, {100,60}, {114,69}, {125,75}, {136,82}};



void calorieScreen(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
	switch (*calorie_mode) {
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d81d      	bhi.n	800206e <calorieScreen+0x4e>
 8002032:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <calorieScreen+0x18>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	08002049 	.word	0x08002049
 800203c:	08002053 	.word	0x08002053
 8002040:	0800205d 	.word	0x0800205d
 8002044:	08002067 	.word	0x08002067
		case calorie_height_mode:
			calorieHeightMode(calorie_mode, person_cal_info);
 8002048:	6839      	ldr	r1, [r7, #0]
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f828 	bl	80020a0 <calorieHeightMode>
			break;
 8002050:	e00d      	b.n	800206e <calorieScreen+0x4e>
		case calorie_weight_mode:
			calorieWeightMode(calorie_mode, person_cal_info);
 8002052:	6839      	ldr	r1, [r7, #0]
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f8fd 	bl	8002254 <calorieWeightMode>
			break;
 800205a:	e008      	b.n	800206e <calorieScreen+0x4e>
		case calorie_amount_mode:
			calorieAmountMode(calorie_mode, person_cal_info);
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f9d2 	bl	8002408 <calorieAmountMode>
			break;
 8002064:	e003      	b.n	800206e <calorieScreen+0x4e>
		case calorie_step_mode:
			calorieStepMode(person_cal_info);
 8002066:	6838      	ldr	r0, [r7, #0]
 8002068:	f000 faa4 	bl	80025b4 <calorieStepMode>
			break;
 800206c:	bf00      	nop
	}
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop

08002078 <initCalorieMode>:


void initCalorieMode(CalorieInfo* person_cal_info) {
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	person_cal_info->height = 160;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	22a0      	movs	r2, #160	; 0xa0
 8002084:	701a      	strb	r2, [r3, #0]
	person_cal_info->weight = 60;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	223c      	movs	r2, #60	; 0x3c
 800208a:	705a      	strb	r2, [r3, #1]
	person_cal_info->calorie_amount = 1000;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002092:	805a      	strh	r2, [r3, #2]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <calorieHeightMode>:


void calorieHeightMode(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b09c      	sub	sp, #112	; 0x70
 80020a4:	af04      	add	r7, sp, #16
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) && (person_cal_info->height < 250)) {
 80020aa:	2101      	movs	r1, #1
 80020ac:	4863      	ldr	r0, [pc, #396]	; (800223c <calorieHeightMode+0x19c>)
 80020ae:	f001 fbcb 	bl	8003848 <HAL_GPIO_ReadPin>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d016      	beq.n	80020e6 <calorieHeightMode+0x46>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2bf9      	cmp	r3, #249	; 0xf9
 80020be:	d812      	bhi.n	80020e6 <calorieHeightMode+0x46>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 80020c0:	bf00      	nop
 80020c2:	2101      	movs	r1, #1
 80020c4:	485d      	ldr	r0, [pc, #372]	; (800223c <calorieHeightMode+0x19c>)
 80020c6:	f001 fbbf 	bl	8003848 <HAL_GPIO_ReadPin>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f8      	bne.n	80020c2 <calorieHeightMode+0x22>
			;
		HAL_Delay(300);
 80020d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020d4:	f001 f902 	bl	80032dc <HAL_Delay>
		person_cal_info->height += 1;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	e033      	b.n	800214e <calorieHeightMode+0xae>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 80020e6:	2102      	movs	r1, #2
 80020e8:	4854      	ldr	r0, [pc, #336]	; (800223c <calorieHeightMode+0x19c>)
 80020ea:	f001 fbad 	bl	8003848 <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00f      	beq.n	8002114 <calorieHeightMode+0x74>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 80020f4:	bf00      	nop
 80020f6:	2104      	movs	r1, #4
 80020f8:	4850      	ldr	r0, [pc, #320]	; (800223c <calorieHeightMode+0x19c>)
 80020fa:	f001 fba5 	bl	8003848 <HAL_GPIO_ReadPin>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f8      	bne.n	80020f6 <calorieHeightMode+0x56>
				;
			HAL_Delay(300);
 8002104:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002108:	f001 f8e8 	bl	80032dc <HAL_Delay>
			*calorie_mode = calorie_weight_mode;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e090      	b.n	8002236 <calorieHeightMode+0x196>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && (person_cal_info->height > 100)) {
 8002114:	2104      	movs	r1, #4
 8002116:	4849      	ldr	r0, [pc, #292]	; (800223c <calorieHeightMode+0x19c>)
 8002118:	f001 fb96 	bl	8003848 <HAL_GPIO_ReadPin>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d015      	beq.n	800214e <calorieHeightMode+0xae>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d911      	bls.n	800214e <calorieHeightMode+0xae>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 800212a:	bf00      	nop
 800212c:	2104      	movs	r1, #4
 800212e:	4843      	ldr	r0, [pc, #268]	; (800223c <calorieHeightMode+0x19c>)
 8002130:	f001 fb8a 	bl	8003848 <HAL_GPIO_ReadPin>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f8      	bne.n	800212c <calorieHeightMode+0x8c>
			;
		HAL_Delay(300);
 800213a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800213e:	f001 f8cd 	bl	80032dc <HAL_Delay>
		person_cal_info->height -= 1;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	3b01      	subs	r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	701a      	strb	r2, [r3, #0]
	}

	ST7735_WriteString(0, 20, "(L) : - \\/ + : (R)", TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 800214e:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <calorieHeightMode+0x1a0>)
 8002150:	2200      	movs	r2, #0
 8002152:	9202      	str	r2, [sp, #8]
 8002154:	221f      	movs	r2, #31
 8002156:	9201      	str	r2, [sp, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	9200      	str	r2, [sp, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a39      	ldr	r2, [pc, #228]	; (8002244 <calorieHeightMode+0x1a4>)
 8002160:	2114      	movs	r1, #20
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff f8b2 	bl	80012cc <ST7735_WriteString>

	char calorie_text1[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002168:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
 8002178:	615a      	str	r2, [r3, #20]
 800217a:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text1, "   Height: %d   ", person_cal_info->height);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002186:	4930      	ldr	r1, [pc, #192]	; (8002248 <calorieHeightMode+0x1a8>)
 8002188:	4618      	mov	r0, r3
 800218a:	f005 faa3 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 50, calorie_text1, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, TEXT_BACKGROUND_COLOR_CLR_MODE);
 800218e:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <calorieHeightMode+0x1a0>)
 8002190:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002198:	9202      	str	r2, [sp, #8]
 800219a:	221f      	movs	r2, #31
 800219c:	9201      	str	r2, [sp, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	9200      	str	r2, [sp, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	460a      	mov	r2, r1
 80021a6:	2132      	movs	r1, #50	; 0x32
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7ff f88f 	bl	80012cc <ST7735_WriteString>

	char calorie_text2[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 80021ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	615a      	str	r2, [r3, #20]
 80021c0:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text2, "    Weight: %d     ", person_cal_info->weight);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021cc:	491f      	ldr	r1, [pc, #124]	; (800224c <calorieHeightMode+0x1ac>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f005 fa80 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 80, calorie_text2, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <calorieHeightMode+0x1a0>)
 80021d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021da:	2200      	movs	r2, #0
 80021dc:	9202      	str	r2, [sp, #8]
 80021de:	221f      	movs	r2, #31
 80021e0:	9201      	str	r2, [sp, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	9200      	str	r2, [sp, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	460a      	mov	r2, r1
 80021ea:	2150      	movs	r1, #80	; 0x50
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff f86d 	bl	80012cc <ST7735_WriteString>

	char calorie_text3[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
 8002202:	615a      	str	r2, [r3, #20]
 8002204:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text3, "  Calorie: %d   ", person_cal_info->calorie_amount);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	885b      	ldrh	r3, [r3, #2]
 800220a:	461a      	mov	r2, r3
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	490f      	ldr	r1, [pc, #60]	; (8002250 <calorieHeightMode+0x1b0>)
 8002212:	4618      	mov	r0, r3
 8002214:	f005 fa5e 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 110, calorie_text3, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <calorieHeightMode+0x1a0>)
 800221a:	f107 010c 	add.w	r1, r7, #12
 800221e:	2200      	movs	r2, #0
 8002220:	9202      	str	r2, [sp, #8]
 8002222:	221f      	movs	r2, #31
 8002224:	9201      	str	r2, [sp, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	9200      	str	r2, [sp, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	460a      	mov	r2, r1
 800222e:	216e      	movs	r1, #110	; 0x6e
 8002230:	2000      	movs	r0, #0
 8002232:	f7ff f84b 	bl	80012cc <ST7735_WriteString>

}
 8002236:	3760      	adds	r7, #96	; 0x60
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40020800 	.word	0x40020800
 8002240:	20000000 	.word	0x20000000
 8002244:	08008d24 	.word	0x08008d24
 8002248:	08008d38 	.word	0x08008d38
 800224c:	08008d4c 	.word	0x08008d4c
 8002250:	08008d60 	.word	0x08008d60

08002254 <calorieWeightMode>:


void calorieWeightMode(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b09c      	sub	sp, #112	; 0x70
 8002258:	af04      	add	r7, sp, #16
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) && (person_cal_info->weight < 200)) {
 800225e:	2101      	movs	r1, #1
 8002260:	4863      	ldr	r0, [pc, #396]	; (80023f0 <calorieWeightMode+0x19c>)
 8002262:	f001 faf1 	bl	8003848 <HAL_GPIO_ReadPin>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d016      	beq.n	800229a <calorieWeightMode+0x46>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	785b      	ldrb	r3, [r3, #1]
 8002270:	2bc7      	cmp	r3, #199	; 0xc7
 8002272:	d812      	bhi.n	800229a <calorieWeightMode+0x46>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8002274:	bf00      	nop
 8002276:	2101      	movs	r1, #1
 8002278:	485d      	ldr	r0, [pc, #372]	; (80023f0 <calorieWeightMode+0x19c>)
 800227a:	f001 fae5 	bl	8003848 <HAL_GPIO_ReadPin>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f8      	bne.n	8002276 <calorieWeightMode+0x22>
			;
		HAL_Delay(300);
 8002284:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002288:	f001 f828 	bl	80032dc <HAL_Delay>
		person_cal_info->weight += 1;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	785b      	ldrb	r3, [r3, #1]
 8002290:	3301      	adds	r3, #1
 8002292:	b2da      	uxtb	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	705a      	strb	r2, [r3, #1]
 8002298:	e033      	b.n	8002302 <calorieWeightMode+0xae>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 800229a:	2102      	movs	r1, #2
 800229c:	4854      	ldr	r0, [pc, #336]	; (80023f0 <calorieWeightMode+0x19c>)
 800229e:	f001 fad3 	bl	8003848 <HAL_GPIO_ReadPin>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00f      	beq.n	80022c8 <calorieWeightMode+0x74>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 80022a8:	bf00      	nop
 80022aa:	2104      	movs	r1, #4
 80022ac:	4850      	ldr	r0, [pc, #320]	; (80023f0 <calorieWeightMode+0x19c>)
 80022ae:	f001 facb 	bl	8003848 <HAL_GPIO_ReadPin>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f8      	bne.n	80022aa <calorieWeightMode+0x56>
				;
			HAL_Delay(300);
 80022b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022bc:	f001 f80e 	bl	80032dc <HAL_Delay>
			*calorie_mode = calorie_amount_mode;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e090      	b.n	80023ea <calorieWeightMode+0x196>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && (person_cal_info->weight > 30)) {
 80022c8:	2104      	movs	r1, #4
 80022ca:	4849      	ldr	r0, [pc, #292]	; (80023f0 <calorieWeightMode+0x19c>)
 80022cc:	f001 fabc 	bl	8003848 <HAL_GPIO_ReadPin>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d015      	beq.n	8002302 <calorieWeightMode+0xae>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	785b      	ldrb	r3, [r3, #1]
 80022da:	2b1e      	cmp	r3, #30
 80022dc:	d911      	bls.n	8002302 <calorieWeightMode+0xae>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 80022de:	bf00      	nop
 80022e0:	2104      	movs	r1, #4
 80022e2:	4843      	ldr	r0, [pc, #268]	; (80023f0 <calorieWeightMode+0x19c>)
 80022e4:	f001 fab0 	bl	8003848 <HAL_GPIO_ReadPin>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f8      	bne.n	80022e0 <calorieWeightMode+0x8c>
			;
		HAL_Delay(300);
 80022ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022f2:	f000 fff3 	bl	80032dc <HAL_Delay>
		person_cal_info->weight -= 1;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	785b      	ldrb	r3, [r3, #1]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	705a      	strb	r2, [r3, #1]
	}

	ST7735_WriteString(0, 20, "(L) : - \\/ + : (R)", TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8002302:	4b3c      	ldr	r3, [pc, #240]	; (80023f4 <calorieWeightMode+0x1a0>)
 8002304:	2200      	movs	r2, #0
 8002306:	9202      	str	r2, [sp, #8]
 8002308:	221f      	movs	r2, #31
 800230a:	9201      	str	r2, [sp, #4]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	9200      	str	r2, [sp, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a39      	ldr	r2, [pc, #228]	; (80023f8 <calorieWeightMode+0x1a4>)
 8002314:	2114      	movs	r1, #20
 8002316:	2000      	movs	r0, #0
 8002318:	f7fe ffd8 	bl	80012cc <ST7735_WriteString>

	char calorie_text1[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 800231c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
 800232c:	615a      	str	r2, [r3, #20]
 800232e:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text1, "   Height: %d   ", person_cal_info->height);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800233a:	4930      	ldr	r1, [pc, #192]	; (80023fc <calorieWeightMode+0x1a8>)
 800233c:	4618      	mov	r0, r3
 800233e:	f005 f9c9 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 50, calorie_text1, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <calorieWeightMode+0x1a0>)
 8002344:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002348:	2200      	movs	r2, #0
 800234a:	9202      	str	r2, [sp, #8]
 800234c:	221f      	movs	r2, #31
 800234e:	9201      	str	r2, [sp, #4]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	9200      	str	r2, [sp, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	460a      	mov	r2, r1
 8002358:	2132      	movs	r1, #50	; 0x32
 800235a:	2000      	movs	r0, #0
 800235c:	f7fe ffb6 	bl	80012cc <ST7735_WriteString>

	char calorie_text2[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	615a      	str	r2, [r3, #20]
 8002372:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text2, "    Weight: %d     ", person_cal_info->weight);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	785b      	ldrb	r3, [r3, #1]
 8002378:	461a      	mov	r2, r3
 800237a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237e:	4920      	ldr	r1, [pc, #128]	; (8002400 <calorieWeightMode+0x1ac>)
 8002380:	4618      	mov	r0, r3
 8002382:	f005 f9a7 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 80, calorie_text2, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, TEXT_BACKGROUND_COLOR_CLR_MODE);
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <calorieWeightMode+0x1a0>)
 8002388:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800238c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002390:	9202      	str	r2, [sp, #8]
 8002392:	221f      	movs	r2, #31
 8002394:	9201      	str	r2, [sp, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	9200      	str	r2, [sp, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	460a      	mov	r2, r1
 800239e:	2150      	movs	r1, #80	; 0x50
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7fe ff93 	bl	80012cc <ST7735_WriteString>

	char calorie_text3[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text3, "  Calorie: %d   ", person_cal_info->calorie_amount);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	885b      	ldrh	r3, [r3, #2]
 80023be:	461a      	mov	r2, r3
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	490f      	ldr	r1, [pc, #60]	; (8002404 <calorieWeightMode+0x1b0>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	f005 f984 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 110, calorie_text3, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <calorieWeightMode+0x1a0>)
 80023ce:	f107 010c 	add.w	r1, r7, #12
 80023d2:	2200      	movs	r2, #0
 80023d4:	9202      	str	r2, [sp, #8]
 80023d6:	221f      	movs	r2, #31
 80023d8:	9201      	str	r2, [sp, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	9200      	str	r2, [sp, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	460a      	mov	r2, r1
 80023e2:	216e      	movs	r1, #110	; 0x6e
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe ff71 	bl	80012cc <ST7735_WriteString>

}
 80023ea:	3760      	adds	r7, #96	; 0x60
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40020800 	.word	0x40020800
 80023f4:	20000000 	.word	0x20000000
 80023f8:	08008d24 	.word	0x08008d24
 80023fc:	08008d38 	.word	0x08008d38
 8002400:	08008d4c 	.word	0x08008d4c
 8002404:	08008d60 	.word	0x08008d60

08002408 <calorieAmountMode>:


void calorieAmountMode(CalorieState* calorie_mode, CalorieInfo* person_cal_info) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b09c      	sub	sp, #112	; 0x70
 800240c:	af04      	add	r7, sp, #16
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8002412:	2101      	movs	r1, #1
 8002414:	4861      	ldr	r0, [pc, #388]	; (800259c <calorieAmountMode+0x194>)
 8002416:	f001 fa17 	bl	8003848 <HAL_GPIO_ReadPin>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d012      	beq.n	8002446 <calorieAmountMode+0x3e>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8002420:	bf00      	nop
 8002422:	2101      	movs	r1, #1
 8002424:	485d      	ldr	r0, [pc, #372]	; (800259c <calorieAmountMode+0x194>)
 8002426:	f001 fa0f 	bl	8003848 <HAL_GPIO_ReadPin>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f8      	bne.n	8002422 <calorieAmountMode+0x1a>
			;
		HAL_Delay(300);
 8002430:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002434:	f000 ff52 	bl	80032dc <HAL_Delay>
		person_cal_info->calorie_amount += 100;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	885b      	ldrh	r3, [r3, #2]
 800243c:	3364      	adds	r3, #100	; 0x64
 800243e:	b29a      	uxth	r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	805a      	strh	r2, [r3, #2]
 8002444:	e033      	b.n	80024ae <calorieAmountMode+0xa6>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8002446:	2102      	movs	r1, #2
 8002448:	4854      	ldr	r0, [pc, #336]	; (800259c <calorieAmountMode+0x194>)
 800244a:	f001 f9fd 	bl	8003848 <HAL_GPIO_ReadPin>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00f      	beq.n	8002474 <calorieAmountMode+0x6c>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8002454:	bf00      	nop
 8002456:	2104      	movs	r1, #4
 8002458:	4850      	ldr	r0, [pc, #320]	; (800259c <calorieAmountMode+0x194>)
 800245a:	f001 f9f5 	bl	8003848 <HAL_GPIO_ReadPin>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f8      	bne.n	8002456 <calorieAmountMode+0x4e>
				;
			HAL_Delay(300);
 8002464:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002468:	f000 ff38 	bl	80032dc <HAL_Delay>
			*calorie_mode = calorie_step_mode;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2203      	movs	r2, #3
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	e090      	b.n	8002596 <calorieAmountMode+0x18e>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && (person_cal_info->calorie_amount > 100)) {
 8002474:	2104      	movs	r1, #4
 8002476:	4849      	ldr	r0, [pc, #292]	; (800259c <calorieAmountMode+0x194>)
 8002478:	f001 f9e6 	bl	8003848 <HAL_GPIO_ReadPin>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d015      	beq.n	80024ae <calorieAmountMode+0xa6>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	885b      	ldrh	r3, [r3, #2]
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d911      	bls.n	80024ae <calorieAmountMode+0xa6>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 800248a:	bf00      	nop
 800248c:	2104      	movs	r1, #4
 800248e:	4843      	ldr	r0, [pc, #268]	; (800259c <calorieAmountMode+0x194>)
 8002490:	f001 f9da 	bl	8003848 <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f8      	bne.n	800248c <calorieAmountMode+0x84>
			;
		HAL_Delay(300);
 800249a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800249e:	f000 ff1d 	bl	80032dc <HAL_Delay>
		person_cal_info->calorie_amount -= 100;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	885b      	ldrh	r3, [r3, #2]
 80024a6:	3b64      	subs	r3, #100	; 0x64
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	805a      	strh	r2, [r3, #2]
	}

	ST7735_WriteString(0, 20, "(L) : - \\/ + : (R)", TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 80024ae:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <calorieAmountMode+0x198>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	9202      	str	r2, [sp, #8]
 80024b4:	221f      	movs	r2, #31
 80024b6:	9201      	str	r2, [sp, #4]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	9200      	str	r2, [sp, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a39      	ldr	r2, [pc, #228]	; (80025a4 <calorieAmountMode+0x19c>)
 80024c0:	2114      	movs	r1, #20
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe ff02 	bl	80012cc <ST7735_WriteString>

	char calorie_text1[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 80024c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	615a      	str	r2, [r3, #20]
 80024da:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text1, "   Height: %d   ", person_cal_info->height);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024e6:	4930      	ldr	r1, [pc, #192]	; (80025a8 <calorieAmountMode+0x1a0>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f005 f8f3 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 50, calorie_text1, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 80024ee:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <calorieAmountMode+0x198>)
 80024f0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80024f4:	2200      	movs	r2, #0
 80024f6:	9202      	str	r2, [sp, #8]
 80024f8:	221f      	movs	r2, #31
 80024fa:	9201      	str	r2, [sp, #4]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	9200      	str	r2, [sp, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	460a      	mov	r2, r1
 8002504:	2132      	movs	r1, #50	; 0x32
 8002506:	2000      	movs	r0, #0
 8002508:	f7fe fee0 	bl	80012cc <ST7735_WriteString>

	char calorie_text2[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 800250c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
 800251c:	615a      	str	r2, [r3, #20]
 800251e:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text2, "    Weight: %d     ", person_cal_info->weight);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	461a      	mov	r2, r3
 8002526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800252a:	4920      	ldr	r1, [pc, #128]	; (80025ac <calorieAmountMode+0x1a4>)
 800252c:	4618      	mov	r0, r3
 800252e:	f005 f8d1 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 80, calorie_text2, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, BACKGROUND_COLOR_CLR_MODE);
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <calorieAmountMode+0x198>)
 8002534:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002538:	2200      	movs	r2, #0
 800253a:	9202      	str	r2, [sp, #8]
 800253c:	221f      	movs	r2, #31
 800253e:	9201      	str	r2, [sp, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	9200      	str	r2, [sp, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	460a      	mov	r2, r1
 8002548:	2150      	movs	r1, #80	; 0x50
 800254a:	2000      	movs	r0, #0
 800254c:	f7fe febe 	bl	80012cc <ST7735_WriteString>

	char calorie_text3[25] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
 8002560:	615a      	str	r2, [r3, #20]
 8002562:	761a      	strb	r2, [r3, #24]
	sprintf(calorie_text3, "  Calorie: %d   ", person_cal_info->calorie_amount);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	885b      	ldrh	r3, [r3, #2]
 8002568:	461a      	mov	r2, r3
 800256a:	f107 030c 	add.w	r3, r7, #12
 800256e:	4910      	ldr	r1, [pc, #64]	; (80025b0 <calorieAmountMode+0x1a8>)
 8002570:	4618      	mov	r0, r3
 8002572:	f005 f8af 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 110, calorie_text3, TEXT_FONT_CLR_MODE, TEXT_COLOR_CLR_MODE, TEXT_BACKGROUND_COLOR_CLR_MODE);
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <calorieAmountMode+0x198>)
 8002578:	f107 010c 	add.w	r1, r7, #12
 800257c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002580:	9202      	str	r2, [sp, #8]
 8002582:	221f      	movs	r2, #31
 8002584:	9201      	str	r2, [sp, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	9200      	str	r2, [sp, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	460a      	mov	r2, r1
 800258e:	216e      	movs	r1, #110	; 0x6e
 8002590:	2000      	movs	r0, #0
 8002592:	f7fe fe9b 	bl	80012cc <ST7735_WriteString>

}
 8002596:	3760      	adds	r7, #96	; 0x60
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40020800 	.word	0x40020800
 80025a0:	20000000 	.word	0x20000000
 80025a4:	08008d24 	.word	0x08008d24
 80025a8:	08008d38 	.word	0x08008d38
 80025ac:	08008d4c 	.word	0x08008d4c
 80025b0:	08008d60 	.word	0x08008d60

080025b4 <calorieStepMode>:


void calorieStepMode(CalorieInfo* person_cal_info) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	if (person_cal_info->height <= 165) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2ba5      	cmp	r3, #165	; 0xa5
 80025c2:	d804      	bhi.n	80025ce <calorieStepMode+0x1a>
		//a second update of codes and MET values. Med Sci Sports Exerc.
		//2011;43(8):1575-81. doi:10.1249/mss.0b013e31821ece12
		// simplified version of the article above(for three different height ranges, the amount of
		// calorie burned calculated only based on 1000 steps).
		//limit_vals[x][0] : weight, limit_vals[x][1] : amount of calories / 1000 steps
		calculateStepNum(person_cal_info, limit_vals_5_5);
 80025c4:	490f      	ldr	r1, [pc, #60]	; (8002604 <calorieStepMode+0x50>)
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f824 	bl	8002614 <calculateStepNum>
 80025cc:	e010      	b.n	80025f0 <calorieStepMode+0x3c>
	}
	else if ((person_cal_info->height > 165) && (person_cal_info->height < 180)) {
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2ba5      	cmp	r3, #165	; 0xa5
 80025d4:	d908      	bls.n	80025e8 <calorieStepMode+0x34>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2bb3      	cmp	r3, #179	; 0xb3
 80025dc:	d804      	bhi.n	80025e8 <calorieStepMode+0x34>
		calculateStepNum(person_cal_info, limit_vals_5_6_5_11);
 80025de:	490a      	ldr	r1, [pc, #40]	; (8002608 <calorieStepMode+0x54>)
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f817 	bl	8002614 <calculateStepNum>
 80025e6:	e003      	b.n	80025f0 <calorieStepMode+0x3c>
	}
	else { // person_cal_info->height >= 180
		calculateStepNum(person_cal_info, limit_vals_6);
 80025e8:	4908      	ldr	r1, [pc, #32]	; (800260c <calorieStepMode+0x58>)
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f812 	bl	8002614 <calculateStepNum>
	}
	current_state = main_mode;
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <calorieStepMode+0x5c>)
 80025f2:	2204      	movs	r2, #4
 80025f4:	701a      	strb	r2, [r3, #0]
	ST7735_FillScreen(BACKGROUND_COLOR_STP_MODE);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fe ff28 	bl	800144c <ST7735_FillScreen>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000028 	.word	0x20000028
 8002608:	2000003c 	.word	0x2000003c
 800260c:	20000050 	.word	0x20000050
 8002610:	20000258 	.word	0x20000258

08002614 <calculateStepNum>:


void calculateStepNum(CalorieInfo* person_cal_info, uint8_t limit_vals[10][2]) {
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
	if (person_cal_info->weight <= 45) {
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	2b2d      	cmp	r3, #45	; 0x2d
 8002624:	d80e      	bhi.n	8002644 <calculateStepNum+0x30>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[0][1];
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	885b      	ldrh	r3, [r3, #2]
 800262a:	461a      	mov	r2, r3
 800262c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002630:	fb03 f302 	mul.w	r3, r3, r2
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	7852      	ldrb	r2, [r2, #1]
 8002638:	fb93 f3f2 	sdiv	r3, r3, r2
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	e0db      	b.n	80027fc <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[0][0]) {
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	785a      	ldrb	r2, [r3, #1]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d80e      	bhi.n	800266e <calculateStepNum+0x5a>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[0][1];
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	885b      	ldrh	r3, [r3, #2]
 8002654:	461a      	mov	r2, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fb03 f302 	mul.w	r3, r3, r2
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	7852      	ldrb	r2, [r2, #1]
 8002662:	fb93 f3f2 	sdiv	r3, r3, r2
 8002666:	461a      	mov	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	e0c6      	b.n	80027fc <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[1][0]) {
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	785a      	ldrb	r2, [r3, #1]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	3302      	adds	r3, #2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d80f      	bhi.n	800269c <calculateStepNum+0x88>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[1][1];
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	885b      	ldrh	r3, [r3, #2]
 8002680:	461a      	mov	r2, r3
 8002682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002686:	fb03 f302 	mul.w	r3, r3, r2
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	3202      	adds	r2, #2
 800268e:	7852      	ldrb	r2, [r2, #1]
 8002690:	fb93 f3f2 	sdiv	r3, r3, r2
 8002694:	461a      	mov	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	e0af      	b.n	80027fc <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[2][0]) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	785a      	ldrb	r2, [r3, #1]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	3304      	adds	r3, #4
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d80f      	bhi.n	80026ca <calculateStepNum+0xb6>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[2][1];
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	885b      	ldrh	r3, [r3, #2]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b4:	fb03 f302 	mul.w	r3, r3, r2
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	3204      	adds	r2, #4
 80026bc:	7852      	ldrb	r2, [r2, #1]
 80026be:	fb93 f3f2 	sdiv	r3, r3, r2
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	e098      	b.n	80027fc <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[3][0]) {
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	785a      	ldrb	r2, [r3, #1]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	3306      	adds	r3, #6
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d80f      	bhi.n	80026f8 <calculateStepNum+0xe4>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[3][1];
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	885b      	ldrh	r3, [r3, #2]
 80026dc:	461a      	mov	r2, r3
 80026de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e2:	fb03 f302 	mul.w	r3, r3, r2
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	3206      	adds	r2, #6
 80026ea:	7852      	ldrb	r2, [r2, #1]
 80026ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	e081      	b.n	80027fc <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[4][0]) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	785a      	ldrb	r2, [r3, #1]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	3308      	adds	r3, #8
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d80f      	bhi.n	8002726 <calculateStepNum+0x112>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[4][1];
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	885b      	ldrh	r3, [r3, #2]
 800270a:	461a      	mov	r2, r3
 800270c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002710:	fb03 f302 	mul.w	r3, r3, r2
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	3208      	adds	r2, #8
 8002718:	7852      	ldrb	r2, [r2, #1]
 800271a:	fb93 f3f2 	sdiv	r3, r3, r2
 800271e:	461a      	mov	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	e06a      	b.n	80027fc <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[5][0]) {
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	785a      	ldrb	r2, [r3, #1]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	330a      	adds	r3, #10
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d80f      	bhi.n	8002754 <calculateStepNum+0x140>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[5][1];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	885b      	ldrh	r3, [r3, #2]
 8002738:	461a      	mov	r2, r3
 800273a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273e:	fb03 f302 	mul.w	r3, r3, r2
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	320a      	adds	r2, #10
 8002746:	7852      	ldrb	r2, [r2, #1]
 8002748:	fb93 f3f2 	sdiv	r3, r3, r2
 800274c:	461a      	mov	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	e053      	b.n	80027fc <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[6][0]) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	785a      	ldrb	r2, [r3, #1]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d80f      	bhi.n	8002782 <calculateStepNum+0x16e>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[6][1];
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	885b      	ldrh	r3, [r3, #2]
 8002766:	461a      	mov	r2, r3
 8002768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800276c:	fb03 f302 	mul.w	r3, r3, r2
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	320c      	adds	r2, #12
 8002774:	7852      	ldrb	r2, [r2, #1]
 8002776:	fb93 f3f2 	sdiv	r3, r3, r2
 800277a:	461a      	mov	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	e03c      	b.n	80027fc <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[7][0]) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	785a      	ldrb	r2, [r3, #1]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	330e      	adds	r3, #14
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d80f      	bhi.n	80027b0 <calculateStepNum+0x19c>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[7][1];
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	885b      	ldrh	r3, [r3, #2]
 8002794:	461a      	mov	r2, r3
 8002796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279a:	fb03 f302 	mul.w	r3, r3, r2
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	320e      	adds	r2, #14
 80027a2:	7852      	ldrb	r2, [r2, #1]
 80027a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	e025      	b.n	80027fc <calculateStepNum+0x1e8>
	}
	else if (person_cal_info->weight <= limit_vals[8][0]) {
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	785a      	ldrb	r2, [r3, #1]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	3310      	adds	r3, #16
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d80f      	bhi.n	80027de <calculateStepNum+0x1ca>
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[8][1];
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	885b      	ldrh	r3, [r3, #2]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c8:	fb03 f302 	mul.w	r3, r3, r2
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	3210      	adds	r2, #16
 80027d0:	7852      	ldrb	r2, [r2, #1]
 80027d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80027d6:	461a      	mov	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	e00e      	b.n	80027fc <calculateStepNum+0x1e8>
	}
	else {
		person_cal_info->step_num = (1000 * person_cal_info->calorie_amount) / limit_vals[9][1];
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	885b      	ldrh	r3, [r3, #2]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e8:	fb03 f302 	mul.w	r3, r3, r2
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	3212      	adds	r2, #18
 80027f0:	7852      	ldrb	r2, [r2, #1]
 80027f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80027f6:	461a      	mov	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	605a      	str	r2, [r3, #4]
	}
	step_num = person_cal_info->step_num;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a03      	ldr	r2, [pc, #12]	; (8002810 <calculateStepNum+0x1fc>)
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	20000014 	.word	0x20000014

08002814 <chooseModeScreen>:
#include "states/choose_mode.h"

extern state current_state;
extern state mode_state;

void chooseModeScreen() {
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af04      	add	r7, sp, #16
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 800281a:	2101      	movs	r1, #1
 800281c:	4828      	ldr	r0, [pc, #160]	; (80028c0 <chooseModeScreen+0xac>)
 800281e:	f001 f813 	bl	8003848 <HAL_GPIO_ReadPin>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <chooseModeScreen+0x40>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8002828:	bf00      	nop
 800282a:	2101      	movs	r1, #1
 800282c:	4824      	ldr	r0, [pc, #144]	; (80028c0 <chooseModeScreen+0xac>)
 800282e:	f001 f80b 	bl	8003848 <HAL_GPIO_ReadPin>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f8      	bne.n	800282a <chooseModeScreen+0x16>
			;
		HAL_Delay(300);
 8002838:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800283c:	f000 fd4e 	bl	80032dc <HAL_Delay>
		current_state = calorie_mode;
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <chooseModeScreen+0xb0>)
 8002842:	2203      	movs	r2, #3
 8002844:	701a      	strb	r2, [r3, #0]
		mode_state = calorie_mode;
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <chooseModeScreen+0xb4>)
 8002848:	2203      	movs	r2, #3
 800284a:	701a      	strb	r2, [r3, #0]
		ST7735_FillScreen(BACKGROUND_COLOR_CHS_MODE);
 800284c:	2000      	movs	r0, #0
 800284e:	f7fe fdfd 	bl	800144c <ST7735_FillScreen>
		return;
 8002852:	e032      	b.n	80028ba <chooseModeScreen+0xa6>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 8002854:	2104      	movs	r1, #4
 8002856:	481a      	ldr	r0, [pc, #104]	; (80028c0 <chooseModeScreen+0xac>)
 8002858:	f000 fff6 	bl	8003848 <HAL_GPIO_ReadPin>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d011      	beq.n	8002886 <chooseModeScreen+0x72>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8002862:	bf00      	nop
 8002864:	2104      	movs	r1, #4
 8002866:	4816      	ldr	r0, [pc, #88]	; (80028c0 <chooseModeScreen+0xac>)
 8002868:	f000 ffee 	bl	8003848 <HAL_GPIO_ReadPin>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f8      	bne.n	8002864 <chooseModeScreen+0x50>
			;
		current_state = step_mode;
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <chooseModeScreen+0xb0>)
 8002874:	2202      	movs	r2, #2
 8002876:	701a      	strb	r2, [r3, #0]
		mode_state = step_mode;
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <chooseModeScreen+0xb4>)
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
		ST7735_FillScreen(BACKGROUND_COLOR_CHS_MODE);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe fde4 	bl	800144c <ST7735_FillScreen>
		return;
 8002884:	e019      	b.n	80028ba <chooseModeScreen+0xa6>
	}
	ST7735_WriteString(0, 50, "  Step Mode (L) ", TEXT_FONT_CHS_MODE, TEXT_COLOR_CHS_MODE, TEXT_BACKGROUND_COLOR_CHS_MODE);
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <chooseModeScreen+0xb8>)
 8002888:	2200      	movs	r2, #0
 800288a:	9202      	str	r2, [sp, #8]
 800288c:	221f      	movs	r2, #31
 800288e:	9201      	str	r2, [sp, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	9200      	str	r2, [sp, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <chooseModeScreen+0xbc>)
 8002898:	2132      	movs	r1, #50	; 0x32
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe fd16 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 100, " Calorie Mode (R)", TEXT_FONT_CHS_MODE, TEXT_COLOR_CHS_MODE, TEXT_BACKGROUND_COLOR_CHS_MODE);
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <chooseModeScreen+0xb8>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	9202      	str	r2, [sp, #8]
 80028a6:	221f      	movs	r2, #31
 80028a8:	9201      	str	r2, [sp, #4]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	9200      	str	r2, [sp, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <chooseModeScreen+0xc0>)
 80028b2:	2164      	movs	r1, #100	; 0x64
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7fe fd09 	bl	80012cc <ST7735_WriteString>
}
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40020800 	.word	0x40020800
 80028c4:	20000258 	.word	0x20000258
 80028c8:	20000308 	.word	0x20000308
 80028cc:	20000000 	.word	0x20000000
 80028d0:	08008d74 	.word	0x08008d74
 80028d4:	08008d88 	.word	0x08008d88

080028d8 <finalModeScreen>:
extern state current_state;
extern state mode_state;
extern TIM_HandleTypeDef htim2;
extern CalorieState calorie_state;

void finalModeScreen(CalorieInfo *person_cal_info) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0a0      	sub	sp, #128	; 0x80
 80028dc:	af04      	add	r7, sp, #16
 80028de:	6078      	str	r0, [r7, #4]
	while (1) {
		char t1[50] = { 0 };
 80028e0:	f107 0308 	add.w	r3, r7, #8
 80028e4:	2232      	movs	r2, #50	; 0x32
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 f9c9 	bl	8006c80 <memset>
		ST7735_WriteString(0, 10, "==================", TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <finalModeScreen+0x1a4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	9202      	str	r2, [sp, #8]
 80028f4:	221f      	movs	r2, #31
 80028f6:	9201      	str	r2, [sp, #4]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	9200      	str	r2, [sp, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a60      	ldr	r2, [pc, #384]	; (8002a80 <finalModeScreen+0x1a8>)
 8002900:	210a      	movs	r1, #10
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe fce2 	bl	80012cc <ST7735_WriteString>
		ST7735_WriteString(0, 40, "     CONGRATS", TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 8002908:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <finalModeScreen+0x1a4>)
 800290a:	2200      	movs	r2, #0
 800290c:	9202      	str	r2, [sp, #8]
 800290e:	221f      	movs	r2, #31
 8002910:	9201      	str	r2, [sp, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	9200      	str	r2, [sp, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a5a      	ldr	r2, [pc, #360]	; (8002a84 <finalModeScreen+0x1ac>)
 800291a:	2128      	movs	r1, #40	; 0x28
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe fcd5 	bl	80012cc <ST7735_WriteString>
		if (mode_state == step_mode) { // step mode
 8002922:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <finalModeScreen+0x1b0>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d117      	bne.n	800295a <finalModeScreen+0x82>
			sprintf(t1, " %ld step taken", step_num);
 800292a:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <finalModeScreen+0x1b4>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f107 0308 	add.w	r3, r7, #8
 8002932:	4957      	ldr	r1, [pc, #348]	; (8002a90 <finalModeScreen+0x1b8>)
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fecd 	bl	80076d4 <siprintf>
			ST7735_WriteString(0, 70, t1, TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 800293a:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <finalModeScreen+0x1a4>)
 800293c:	f107 0108 	add.w	r1, r7, #8
 8002940:	2200      	movs	r2, #0
 8002942:	9202      	str	r2, [sp, #8]
 8002944:	221f      	movs	r2, #31
 8002946:	9201      	str	r2, [sp, #4]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	9200      	str	r2, [sp, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	460a      	mov	r2, r1
 8002950:	2146      	movs	r1, #70	; 0x46
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe fcba 	bl	80012cc <ST7735_WriteString>
 8002958:	e01f      	b.n	800299a <finalModeScreen+0xc2>
		}
		else { // calorie mode
			char t3[20] = { 0 };
 800295a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	611a      	str	r2, [r3, #16]
			sprintf(t3, "%d calorie burned", person_cal_info->calorie_amount);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	885b      	ldrh	r3, [r3, #2]
 800296e:	461a      	mov	r2, r3
 8002970:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002974:	4947      	ldr	r1, [pc, #284]	; (8002a94 <finalModeScreen+0x1bc>)
 8002976:	4618      	mov	r0, r3
 8002978:	f004 feac 	bl	80076d4 <siprintf>
			ST7735_WriteString(0, 70, t3, TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 800297c:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <finalModeScreen+0x1a4>)
 800297e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002982:	2200      	movs	r2, #0
 8002984:	9202      	str	r2, [sp, #8]
 8002986:	221f      	movs	r2, #31
 8002988:	9201      	str	r2, [sp, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	9200      	str	r2, [sp, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	460a      	mov	r2, r1
 8002992:	2146      	movs	r1, #70	; 0x46
 8002994:	2000      	movs	r0, #0
 8002996:	f7fe fc99 	bl	80012cc <ST7735_WriteString>
		}
		char t4[20] = { 0 };
 800299a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]
		uint32_t hour = 0, min = 0, sec = elapsed_time;
 80029aa:	2300      	movs	r3, #0
 80029ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80029ae:	2300      	movs	r3, #0
 80029b0:	657b      	str	r3, [r7, #84]	; 0x54
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <finalModeScreen+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	653b      	str	r3, [r7, #80]	; 0x50
		convertSecToTimeStamp(elapsed_time, &hour, &min, &sec);
 80029b8:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <finalModeScreen+0x1c0>)
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029c0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80029c4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80029c8:	f000 f900 	bl	8002bcc <convertSecToTimeStamp>
		sprintf(t4, " Elapsed : %ld:%ld:%ld", hour, min, sec);
 80029cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d2:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	460b      	mov	r3, r1
 80029da:	4930      	ldr	r1, [pc, #192]	; (8002a9c <finalModeScreen+0x1c4>)
 80029dc:	f004 fe7a 	bl	80076d4 <siprintf>
		ST7735_WriteString(0, 100, t4, TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 80029e0:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <finalModeScreen+0x1a4>)
 80029e2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80029e6:	2200      	movs	r2, #0
 80029e8:	9202      	str	r2, [sp, #8]
 80029ea:	221f      	movs	r2, #31
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	9200      	str	r2, [sp, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	460a      	mov	r2, r1
 80029f6:	2164      	movs	r1, #100	; 0x64
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe fc67 	bl	80012cc <ST7735_WriteString>
		ST7735_WriteString(0, 130, "==================", TEXT_FONT_FNL_MODE, TEXT_COLOR_FNL_MODE, BACKGROUND_COLOR_FNL_MODE);
 80029fe:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <finalModeScreen+0x1a4>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	9202      	str	r2, [sp, #8]
 8002a04:	221f      	movs	r2, #31
 8002a06:	9201      	str	r2, [sp, #4]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	9200      	str	r2, [sp, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <finalModeScreen+0x1a8>)
 8002a10:	2182      	movs	r1, #130	; 0x82
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7fe fc5a 	bl	80012cc <ST7735_WriteString>
		htim2.Instance->CCR1 = 125;
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <finalModeScreen+0x1c8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	227d      	movs	r2, #125	; 0x7d
 8002a1e:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8002a20:	2102      	movs	r1, #2
 8002a22:	4820      	ldr	r0, [pc, #128]	; (8002aa4 <finalModeScreen+0x1cc>)
 8002a24:	f000 ff10 	bl	8003848 <HAL_GPIO_ReadPin>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f43f af58 	beq.w	80028e0 <finalModeScreen+0x8>
			current_state = choose_mode;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <finalModeScreen+0x1d0>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
			current_step = 1;
 8002a36:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <finalModeScreen+0x1d4>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
			step_num = 1000;
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <finalModeScreen+0x1b4>)
 8002a3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a42:	601a      	str	r2, [r3, #0]
			elapsed_time = 1;
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <finalModeScreen+0x1c0>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
			htim2.Instance->CCR1 = 0;
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <finalModeScreen+0x1c8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
			calorie_state = calorie_height_mode;
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <finalModeScreen+0x1d8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
			person_cal_info->calorie_amount = 1000;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a5e:	805a      	strh	r2, [r3, #2]
			person_cal_info->height = 160;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	22a0      	movs	r2, #160	; 0xa0
 8002a64:	701a      	strb	r2, [r3, #0]
			person_cal_info->weight = 60;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	223c      	movs	r2, #60	; 0x3c
 8002a6a:	705a      	strb	r2, [r3, #1]
			ST7735_FillScreen(BACKGROUND_COLOR_FNL_MODE);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fe fced 	bl	800144c <ST7735_FillScreen>
			break;
		}
	}
}
 8002a72:	bf00      	nop
 8002a74:	3770      	adds	r7, #112	; 0x70
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	08008d9c 	.word	0x08008d9c
 8002a84:	08008db0 	.word	0x08008db0
 8002a88:	20000308 	.word	0x20000308
 8002a8c:	20000014 	.word	0x20000014
 8002a90:	08008dc0 	.word	0x08008dc0
 8002a94:	08008dd0 	.word	0x08008dd0
 8002a98:	20000018 	.word	0x20000018
 8002a9c:	08008de4 	.word	0x08008de4
 8002aa0:	200003ac 	.word	0x200003ac
 8002aa4:	40020800 	.word	0x40020800
 8002aa8:	20000258 	.word	0x20000258
 8002aac:	20000010 	.word	0x20000010
 8002ab0:	20000270 	.word	0x20000270

08002ab4 <mainScreen>:
extern int dynamic_threshold_max;

extern int sample_new;
extern int sample_old;

void mainScreen(const CalorieInfo *person_cal_info) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b098      	sub	sp, #96	; 0x60
 8002ab8:	af04      	add	r7, sp, #16
 8002aba:	6078      	str	r0, [r7, #4]
	char text1[25] = { 0 };
 8002abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
 8002acc:	615a      	str	r2, [r3, #20]
 8002ace:	761a      	strb	r2, [r3, #24]
	sprintf(text1, "  %ld / %ld step", current_step, step_num);
 8002ad0:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <mainScreen+0xfc>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <mainScreen+0x100>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002adc:	4936      	ldr	r1, [pc, #216]	; (8002bb8 <mainScreen+0x104>)
 8002ade:	f004 fdf9 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 50, text1, TEXT_FONT_MAIN_MODE, TEXT_COLOR_MAIN_MODE, TEXT_BACKGROUND_COLOR_MAIN_MODE);
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <mainScreen+0x108>)
 8002ae4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002ae8:	2200      	movs	r2, #0
 8002aea:	9202      	str	r2, [sp, #8]
 8002aec:	221f      	movs	r2, #31
 8002aee:	9201      	str	r2, [sp, #4]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	9200      	str	r2, [sp, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	460a      	mov	r2, r1
 8002af8:	2132      	movs	r1, #50	; 0x32
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe fbe6 	bl	80012cc <ST7735_WriteString>
	uint32_t eta_time = ((step_num - current_step) * elapsed_time) / current_step;
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <mainScreen+0x100>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <mainScreen+0xfc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	4a2d      	ldr	r2, [pc, #180]	; (8002bc0 <mainScreen+0x10c>)
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	fb02 f203 	mul.w	r2, r2, r3
 8002b12:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <mainScreen+0xfc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (current_step >= step_num) {
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <mainScreen+0xfc>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <mainScreen+0x100>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d306      	bcc.n	8002b36 <mainScreen+0x82>
		ST7735_FillScreen(BACKGROUND_COLOR_MAIN_MODE);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fe fc8f 	bl	800144c <ST7735_FillScreen>
		current_state = final_mode;
 8002b2e:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <mainScreen+0x110>)
 8002b30:	2205      	movs	r2, #5
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e039      	b.n	8002baa <mainScreen+0xf6>
		return;
	}
	uint32_t hour = 0, min = 0, sec = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
	convertSecToTimeStamp(eta_time, &hour, &min, &sec);
 8002b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b4a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002b4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002b50:	f000 f83c 	bl	8002bcc <convertSecToTimeStamp>
	char text2[25] = { 0 };
 8002b54:	f107 0308 	add.w	r3, r7, #8
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
 8002b64:	615a      	str	r2, [r3, #20]
 8002b66:	761a      	strb	r2, [r3, #24]
	sprintf(text2, "   ETA:  %ld:%ld:%ld ", hour, min, sec); // black character at the end of the string here
 8002b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	f107 0008 	add.w	r0, r7, #8
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	460b      	mov	r3, r1
 8002b76:	4914      	ldr	r1, [pc, #80]	; (8002bc8 <mainScreen+0x114>)
 8002b78:	f004 fdac 	bl	80076d4 <siprintf>
	// is important. for example 59 sec is displayed as 0:0:59 at the format above. as the seconds decrease,
	// assume it will be 49, 39, .... even going further, it will be 9 seconds. in this situation
	// what we expect would be 0:0:9. however, since before 9 seconds, there was 19 seconds, the lsb digit
	// of 19, which is 9, stays on the screen. thus we see 0:0:99 instead of 0:0:9. to avoid that we use
	// extra black so that it covers the extra digit coming from early calculations.
	ST7735_WriteString(0, 100, text2, TEXT_FONT_MAIN_MODE, TEXT_COLOR_MAIN_MODE, TEXT_BACKGROUND_COLOR_MAIN_MODE);
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <mainScreen+0x108>)
 8002b7e:	f107 0108 	add.w	r1, r7, #8
 8002b82:	2200      	movs	r2, #0
 8002b84:	9202      	str	r2, [sp, #8]
 8002b86:	221f      	movs	r2, #31
 8002b88:	9201      	str	r2, [sp, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	9200      	str	r2, [sp, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	460a      	mov	r2, r1
 8002b92:	2164      	movs	r1, #100	; 0x64
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe fb99 	bl	80012cc <ST7735_WriteString>
	getAccData(eta_time, current_step, step_num);
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <mainScreen+0xfc>)
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <mainScreen+0x100>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ba6:	f000 f849 	bl	8002c3c <getAccData>
}
 8002baa:	3750      	adds	r7, #80	; 0x50
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000010 	.word	0x20000010
 8002bb4:	20000014 	.word	0x20000014
 8002bb8:	08008dfc 	.word	0x08008dfc
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000018 	.word	0x20000018
 8002bc4:	20000258 	.word	0x20000258
 8002bc8:	08008e10 	.word	0x08008e10

08002bcc <convertSecToTimeStamp>:


void convertSecToTimeStamp(uint32_t elapsed_time, uint32_t* hour_ptr, uint32_t* min_ptr, uint32_t* sec_ptr) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
	*hour_ptr = elapsed_time / 3600;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <convertSecToTimeStamp+0x68>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	0ada      	lsrs	r2, r3, #11
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	601a      	str	r2, [r3, #0]
	*min_ptr = (elapsed_time - (3600 * *hour_ptr)) / 60;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	4a0f      	ldr	r2, [pc, #60]	; (8002c38 <convertSecToTimeStamp+0x6c>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	095a      	lsrs	r2, r3, #5
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	601a      	str	r2, [r3, #0]
	*sec_ptr = elapsed_time - (3600 * *hour_ptr) - (*min_ptr * 60);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	1ad1      	subs	r1, r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	1aca      	subs	r2, r1, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	601a      	str	r2, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	91a2b3c5 	.word	0x91a2b3c5
 8002c38:	88888889 	.word	0x88888889

08002c3c <getAccData>:


void getAccData(uint32_t elapsed_time, uint32_t current_step, uint32_t step_num) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b0b4      	sub	sp, #208	; 0xd0
 8002c40:	af08      	add	r7, sp, #32
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
	AccData acc_3d;
	//while (1)
	//{
		HAL_StatusTypeDef is_mma8452q_read_ok = mma8452qRead(&hi2c1, 0x00, 7, acc_3d.acc_info);
 8002c48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4887      	ldr	r0, [pc, #540]	; (8002e70 <getAccData+0x234>)
 8002c52:	f7fe f94b 	bl	8000eec <mma8452qRead>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if (is_mma8452q_read_ok == HAL_OK) {
 8002c5c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 8101 	bne.w	8002e68 <getAccData+0x22c>
			getAccXYZ(&acc_3d);
 8002c66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe f984 	bl	8000f78 <getAccXYZ>
			char acc_message[100] = { 0 };
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	2264      	movs	r2, #100	; 0x64
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 f801 	bl	8006c80 <memset>
			//sprintf(message, "acc_x: %d, acc_y: %d, acc_z: %d\r\n", acc_3d.x_acc, acc_3d.y_acc, acc_3d.z_acc);
			int x_acc = acc_3d.x_acc ;
 8002c7e:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8002c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			int y_acc = acc_3d.y_acc ;
 8002c86:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8002c8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			int z_acc = acc_3d.z_acc ;
 8002c8e:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8002c92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			//int magnitude = sqrt((x_acc * x_acc) + (y_acc * y_acc) + (z_acc * z_acc));

			if (isFull(sample_result)) {
 8002c96:	4b77      	ldr	r3, [pc, #476]	; (8002e74 <getAccData+0x238>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe ff18 	bl	8001ad0 <isFull>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <getAccData+0x84>
				dequeue(sample_result);
 8002ca6:	4b73      	ldr	r3, [pc, #460]	; (8002e74 <getAccData+0x238>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe ff35 	bl	8001b1a <dequeue>
				enqueue(sample_result, y_acc);
 8002cb0:	4b70      	ldr	r3, [pc, #448]	; (8002e74 <getAccData+0x238>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe ff5b 	bl	8001b74 <enqueue>
 8002cbe:	e006      	b.n	8002cce <getAccData+0x92>
			}
			else {
				enqueue(sample_result, y_acc);
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <getAccData+0x238>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe ff53 	bl	8001b74 <enqueue>
			}
			int y_avr = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			for (int i = 0; i < sample_result->size; ++i) {
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cda:	e011      	b.n	8002d00 <getAccData+0xc4>
				y_avr += sample_result->array[i];
 8002cdc:	4b65      	ldr	r3, [pc, #404]	; (8002e74 <getAccData+0x238>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			for (int i = 0; i < sample_result->size; ++i) {
 8002cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d00:	4b5c      	ldr	r3, [pc, #368]	; (8002e74 <getAccData+0x238>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	dbe6      	blt.n	8002cdc <getAccData+0xa0>
			}
			y_avr = y_avr / sample_result->size;
 8002d0e:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <getAccData+0x238>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			if (isFull(dynamic_threshold_array)) {
 8002d20:	4b55      	ldr	r3, [pc, #340]	; (8002e78 <getAccData+0x23c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fed3 	bl	8001ad0 <isFull>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d04d      	beq.n	8002dcc <getAccData+0x190>
				dequeue(dynamic_threshold_array);
 8002d30:	4b51      	ldr	r3, [pc, #324]	; (8002e78 <getAccData+0x23c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fef0 	bl	8001b1a <dequeue>
				enqueue(dynamic_threshold_array, y_acc);
 8002d3a:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <getAccData+0x23c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe ff16 	bl	8001b74 <enqueue>
				for (int i = 0; i < dynamic_threshold_array->size; ++i) {
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002d4e:	e031      	b.n	8002db4 <getAccData+0x178>
					if (dynamic_threshold_array->array[i] > dynamic_threshold_max) {
 8002d50:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <getAccData+0x23c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <getAccData+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	dd0a      	ble.n	8002d7e <getAccData+0x142>
						dynamic_threshold_max = dynamic_threshold_array->array[i];
 8002d68:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <getAccData+0x23c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a40      	ldr	r2, [pc, #256]	; (8002e7c <getAccData+0x240>)
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e015      	b.n	8002daa <getAccData+0x16e>
					}
					else if (dynamic_threshold_array->array[i] < dynamic_threshold_min) {
 8002d7e:	4b3e      	ldr	r3, [pc, #248]	; (8002e78 <getAccData+0x23c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <getAccData+0x244>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	da09      	bge.n	8002daa <getAccData+0x16e>
						dynamic_threshold_min = dynamic_threshold_array->array[i];
 8002d96:	4b38      	ldr	r3, [pc, #224]	; (8002e78 <getAccData+0x23c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a36      	ldr	r2, [pc, #216]	; (8002e80 <getAccData+0x244>)
 8002da8:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < dynamic_threshold_array->size; ++i) {
 8002daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dae:	3301      	adds	r3, #1
 8002db0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002db4:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <getAccData+0x23c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	dbc6      	blt.n	8002d50 <getAccData+0x114>
					}
				}
				dynamic_threshold_array->size = 0;
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <getAccData+0x23c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	e006      	b.n	8002dda <getAccData+0x19e>

			}
			else {
				enqueue(dynamic_threshold_array, y_acc);
 8002dcc:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <getAccData+0x23c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fecd 	bl	8001b74 <enqueue>
			}

			sample_old = sample_new;
 8002dda:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <getAccData+0x248>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2a      	ldr	r2, [pc, #168]	; (8002e88 <getAccData+0x24c>)
 8002de0:	6013      	str	r3, [r2, #0]
			int acc_changes = y_avr - sample_new;
 8002de2:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <getAccData+0x248>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			if (acc_changes < -650) {
 8002df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002df4:	4a25      	ldr	r2, [pc, #148]	; (8002e8c <getAccData+0x250>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	da03      	bge.n	8002e02 <getAccData+0x1c6>
				sample_new = y_avr;
 8002dfa:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <getAccData+0x248>)
 8002dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e00:	6013      	str	r3, [r2, #0]
			}

			int slope = sample_new - sample_old;
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <getAccData+0x248>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <getAccData+0x24c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			int dynamic_threshold = (dynamic_threshold_max + dynamic_threshold_min) / 2;
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <getAccData+0x240>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <getAccData+0x244>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4413      	add	r3, r2
 8002e1a:	0fda      	lsrs	r2, r3, #31
 8002e1c:	4413      	add	r3, r2
 8002e1e:	105b      	asrs	r3, r3, #1
 8002e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			sprintf(acc_message, " %d %d %d %ld %ld %ld %d %d %d\r\n", x_acc, y_avr, z_acc, elapsed_time, current_step, step_num, dynamic_threshold, acc_changes, slope);
 8002e24:	f107 0014 	add.w	r0, r7, #20
 8002e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e2c:	9306      	str	r3, [sp, #24]
 8002e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e32:	9305      	str	r3, [sp, #20]
 8002e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e38:	9304      	str	r3, [sp, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	9303      	str	r3, [sp, #12]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	9302      	str	r3, [sp, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e50:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002e54:	490e      	ldr	r1, [pc, #56]	; (8002e90 <getAccData+0x254>)
 8002e56:	f004 fc3d 	bl	80076d4 <siprintf>
			/*HAL_StatusTypeDef blue_ok = */HAL_UART_Transmit(&huart6, (uint8_t *)acc_message, sizeof(acc_message), 100);
 8002e5a:	f107 0114 	add.w	r1, r7, #20
 8002e5e:	2364      	movs	r3, #100	; 0x64
 8002e60:	2264      	movs	r2, #100	; 0x64
 8002e62:	480c      	ldr	r0, [pc, #48]	; (8002e94 <getAccData+0x258>)
 8002e64:	f003 fa73 	bl	800634e <HAL_UART_Transmit>
		}
		else {
			// uart ile buraya mesaj bas
		}
	//}
}
 8002e68:	bf00      	nop
 8002e6a:	37b0      	adds	r7, #176	; 0xb0
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000274 	.word	0x20000274
 8002e74:	20000368 	.word	0x20000368
 8002e78:	20000364 	.word	0x20000364
 8002e7c:	20000020 	.word	0x20000020
 8002e80:	2000001c 	.word	0x2000001c
 8002e84:	2000025c 	.word	0x2000025c
 8002e88:	20000260 	.word	0x20000260
 8002e8c:	fffffd76 	.word	0xfffffd76
 8002e90:	08008e28 	.word	0x08008e28
 8002e94:	2000036c 	.word	0x2000036c

08002e98 <stepScreen>:
#include "states/step_mode.h"
extern state current_state;
extern uint32_t step_num;


void stepScreen(uint32_t step_no) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	af04      	add	r7, sp, #16
 8002e9e:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) {
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	4840      	ldr	r0, [pc, #256]	; (8002fa4 <stepScreen+0x10c>)
 8002ea4:	f000 fcd0 	bl	8003848 <HAL_GPIO_ReadPin>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <stepScreen+0x3c>
		// C0 connected to the right button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8002eae:	bf00      	nop
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	483c      	ldr	r0, [pc, #240]	; (8002fa4 <stepScreen+0x10c>)
 8002eb4:	f000 fcc8 	bl	8003848 <HAL_GPIO_ReadPin>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f8      	bne.n	8002eb0 <stepScreen+0x18>
			;
		HAL_Delay(300);
 8002ebe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ec2:	f000 fa0b 	bl	80032dc <HAL_Delay>
		step_num += 1000;
 8002ec6:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <stepScreen+0x110>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002ece:	4a36      	ldr	r2, [pc, #216]	; (8002fa8 <stepScreen+0x110>)
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e037      	b.n	8002f44 <stepScreen+0xac>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4833      	ldr	r0, [pc, #204]	; (8002fa4 <stepScreen+0x10c>)
 8002ed8:	f000 fcb6 	bl	8003848 <HAL_GPIO_ReadPin>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d012      	beq.n	8002f08 <stepScreen+0x70>
		// C1 connected to the middle button
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8002ee2:	bf00      	nop
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	482f      	ldr	r0, [pc, #188]	; (8002fa4 <stepScreen+0x10c>)
 8002ee8:	f000 fcae 	bl	8003848 <HAL_GPIO_ReadPin>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f8      	bne.n	8002ee4 <stepScreen+0x4c>
				;
			HAL_Delay(300);
 8002ef2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ef6:	f000 f9f1 	bl	80032dc <HAL_Delay>
			current_state = main_mode;
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <stepScreen+0x114>)
 8002efc:	2204      	movs	r2, #4
 8002efe:	701a      	strb	r2, [r3, #0]
			ST7735_FillScreen(BACKGROUND_COLOR_STP_MODE);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fe faa3 	bl	800144c <ST7735_FillScreen>
 8002f06:	e049      	b.n	8002f9c <stepScreen+0x104>
			return; // so that the WriteString functions below are not both, executed and displayed on the screen.
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) && step_num > 1000) {
 8002f08:	2104      	movs	r1, #4
 8002f0a:	4826      	ldr	r0, [pc, #152]	; (8002fa4 <stepScreen+0x10c>)
 8002f0c:	f000 fc9c 	bl	8003848 <HAL_GPIO_ReadPin>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <stepScreen+0xac>
 8002f16:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <stepScreen+0x110>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f1e:	d911      	bls.n	8002f44 <stepScreen+0xac>
		// C2 connected to the left button
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))
 8002f20:	bf00      	nop
 8002f22:	2104      	movs	r1, #4
 8002f24:	481f      	ldr	r0, [pc, #124]	; (8002fa4 <stepScreen+0x10c>)
 8002f26:	f000 fc8f 	bl	8003848 <HAL_GPIO_ReadPin>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f8      	bne.n	8002f22 <stepScreen+0x8a>
			;
		HAL_Delay(300);
 8002f30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f34:	f000 f9d2 	bl	80032dc <HAL_Delay>
		step_num -= 1000;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <stepScreen+0x110>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <stepScreen+0x110>)
 8002f42:	6013      	str	r3, [r2, #0]
	}

	char step_text[22] = { 0 }; // "Step Number:" : 12 byte, 32bit number : 10 byte = 22 byte
 8002f44:	f107 0308 	add.w	r3, r7, #8
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
 8002f54:	829a      	strh	r2, [r3, #20]
	sprintf(step_text, "Step Number: %ld", step_no);
 8002f56:	f107 0308 	add.w	r3, r7, #8
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4914      	ldr	r1, [pc, #80]	; (8002fb0 <stepScreen+0x118>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f004 fbb8 	bl	80076d4 <siprintf>
	ST7735_WriteString(0, 40, step_text, TEXT_FONT_STP_MODE, TEXT_COLOR_STP_MODE, TEXT_BACKGROUND_COLOR_STP_MODE);
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <stepScreen+0x11c>)
 8002f66:	f107 0108 	add.w	r1, r7, #8
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	9202      	str	r2, [sp, #8]
 8002f6e:	221f      	movs	r2, #31
 8002f70:	9201      	str	r2, [sp, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	9200      	str	r2, [sp, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	460a      	mov	r2, r1
 8002f7a:	2128      	movs	r1, #40	; 0x28
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fe f9a5 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 100, "(L) : - \\/ + : (R)", TEXT_FONT_STP_MODE, TEXT_COLOR_STP_MODE, TEXT_BACKGROUND_COLOR_STP_MODE);
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <stepScreen+0x11c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	9202      	str	r2, [sp, #8]
 8002f88:	221f      	movs	r2, #31
 8002f8a:	9201      	str	r2, [sp, #4]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	9200      	str	r2, [sp, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a09      	ldr	r2, [pc, #36]	; (8002fb8 <stepScreen+0x120>)
 8002f94:	2164      	movs	r1, #100	; 0x64
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe f998 	bl	80012cc <ST7735_WriteString>

}
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	20000014 	.word	0x20000014
 8002fac:	20000258 	.word	0x20000258
 8002fb0:	08008e4c 	.word	0x08008e4c
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	08008e60 	.word	0x08008e60

08002fbc <welcomeScreen>:
extern state current_state;
/*
 * Fills opening screen in a fancy way:)
 * current_state : its value is changed here so that the next state can be executed.
 * */
void welcomeScreen() {
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b08f      	sub	sp, #60	; 0x3c
 8002fc0:	af04      	add	r7, sp, #16
	char text1[] = " Wrist Band ";
 8002fc2:	4b74      	ldr	r3, [pc, #464]	; (8003194 <welcomeScreen+0x1d8>)
 8002fc4:	f107 0410 	add.w	r4, r7, #16
 8002fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fca:	c407      	stmia	r4!, {r0, r1, r2}
 8002fcc:	7023      	strb	r3, [r4, #0]
	char text2[] = "  Welcome ";
 8002fce:	4a72      	ldr	r2, [pc, #456]	; (8003198 <welcomeScreen+0x1dc>)
 8002fd0:	1d3b      	adds	r3, r7, #4
 8002fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fd4:	c303      	stmia	r3!, {r0, r1}
 8002fd6:	801a      	strh	r2, [r3, #0]
 8002fd8:	3302      	adds	r3, #2
 8002fda:	0c12      	lsrs	r2, r2, #16
 8002fdc:	701a      	strb	r2, [r3, #0]
	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7fe fa34 	bl	800144c <ST7735_FillScreen>

	for (int i = 0; i < strlen(text1); ++i) {
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	e020      	b.n	800302c <welcomeScreen+0x70>
		text1[i] = '\0';
 8002fea:	f107 0210 	add.w	r2, r7, #16
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	4413      	add	r3, r2
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
		ST7735_WriteString(0, 50, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8002ff6:	4b69      	ldr	r3, [pc, #420]	; (800319c <welcomeScreen+0x1e0>)
 8002ff8:	f107 0110 	add.w	r1, r7, #16
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	9202      	str	r2, [sp, #8]
 8003000:	221f      	movs	r2, #31
 8003002:	9201      	str	r2, [sp, #4]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	9200      	str	r2, [sp, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	460a      	mov	r2, r1
 800300c:	2132      	movs	r1, #50	; 0x32
 800300e:	2000      	movs	r0, #0
 8003010:	f7fe f95c 	bl	80012cc <ST7735_WriteString>
		HAL_Delay(15);
 8003014:	200f      	movs	r0, #15
 8003016:	f000 f961 	bl	80032dc <HAL_Delay>
		strcpy(text1, " Wrist Band ");
 800301a:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <welcomeScreen+0x1d8>)
 800301c:	f107 0410 	add.w	r4, r7, #16
 8003020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003022:	c407      	stmia	r4!, {r0, r1, r2}
 8003024:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < strlen(text1); ++i) {
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	3301      	adds	r3, #1
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	f107 0310 	add.w	r3, r7, #16
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd f8d5 	bl	80001e0 <strlen>
 8003036:	4602      	mov	r2, r0
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	429a      	cmp	r2, r3
 800303c:	d8d5      	bhi.n	8002fea <welcomeScreen+0x2e>
	}

	HAL_Delay(100);
 800303e:	2064      	movs	r0, #100	; 0x64
 8003040:	f000 f94c 	bl	80032dc <HAL_Delay>

	for (int i = 0; i < strlen(text2); ++i) {
 8003044:	2300      	movs	r3, #0
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	e020      	b.n	800308c <welcomeScreen+0xd0>
		text2[i] = '\0';
 800304a:	1d3a      	adds	r2, r7, #4
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	4413      	add	r3, r2
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
		ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8003054:	4b51      	ldr	r3, [pc, #324]	; (800319c <welcomeScreen+0x1e0>)
 8003056:	1d39      	adds	r1, r7, #4
 8003058:	2200      	movs	r2, #0
 800305a:	9202      	str	r2, [sp, #8]
 800305c:	221f      	movs	r2, #31
 800305e:	9201      	str	r2, [sp, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	9200      	str	r2, [sp, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	460a      	mov	r2, r1
 8003068:	2150      	movs	r1, #80	; 0x50
 800306a:	2000      	movs	r0, #0
 800306c:	f7fe f92e 	bl	80012cc <ST7735_WriteString>
		HAL_Delay(15);
 8003070:	200f      	movs	r0, #15
 8003072:	f000 f933 	bl	80032dc <HAL_Delay>
		strcpy(text2, "  Welcome ");
 8003076:	4a48      	ldr	r2, [pc, #288]	; (8003198 <welcomeScreen+0x1dc>)
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	ca07      	ldmia	r2, {r0, r1, r2}
 800307c:	c303      	stmia	r3!, {r0, r1}
 800307e:	801a      	strh	r2, [r3, #0]
 8003080:	3302      	adds	r3, #2
 8003082:	0c12      	lsrs	r2, r2, #16
 8003084:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < strlen(text2); ++i) {
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	3301      	adds	r3, #1
 800308a:	623b      	str	r3, [r7, #32]
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd f8a6 	bl	80001e0 <strlen>
 8003094:	4602      	mov	r2, r0
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	429a      	cmp	r2, r3
 800309a:	d8d6      	bhi.n	800304a <welcomeScreen+0x8e>
	}

	HAL_Delay(1000);
 800309c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030a0:	f000 f91c 	bl	80032dc <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7fe f9d1 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 80030aa:	4b3c      	ldr	r3, [pc, #240]	; (800319c <welcomeScreen+0x1e0>)
 80030ac:	f107 0110 	add.w	r1, r7, #16
 80030b0:	2200      	movs	r2, #0
 80030b2:	9202      	str	r2, [sp, #8]
 80030b4:	221f      	movs	r2, #31
 80030b6:	9201      	str	r2, [sp, #4]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	9200      	str	r2, [sp, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	460a      	mov	r2, r1
 80030c0:	213c      	movs	r1, #60	; 0x3c
 80030c2:	2000      	movs	r0, #0
 80030c4:	f7fe f902 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 80030c8:	4b34      	ldr	r3, [pc, #208]	; (800319c <welcomeScreen+0x1e0>)
 80030ca:	1d39      	adds	r1, r7, #4
 80030cc:	2200      	movs	r2, #0
 80030ce:	9202      	str	r2, [sp, #8]
 80030d0:	221f      	movs	r2, #31
 80030d2:	9201      	str	r2, [sp, #4]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	9200      	str	r2, [sp, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	460a      	mov	r2, r1
 80030dc:	2150      	movs	r1, #80	; 0x50
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fe f8f4 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(100);
 80030e4:	2064      	movs	r0, #100	; 0x64
 80030e6:	f000 f8f9 	bl	80032dc <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fe f9ae 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 80030f0:	4b2a      	ldr	r3, [pc, #168]	; (800319c <welcomeScreen+0x1e0>)
 80030f2:	f107 0110 	add.w	r1, r7, #16
 80030f6:	2200      	movs	r2, #0
 80030f8:	9202      	str	r2, [sp, #8]
 80030fa:	221f      	movs	r2, #31
 80030fc:	9201      	str	r2, [sp, #4]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	9200      	str	r2, [sp, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	460a      	mov	r2, r1
 8003106:	213c      	movs	r1, #60	; 0x3c
 8003108:	2000      	movs	r0, #0
 800310a:	f7fe f8df 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <welcomeScreen+0x1e0>)
 8003110:	1d39      	adds	r1, r7, #4
 8003112:	2200      	movs	r2, #0
 8003114:	9202      	str	r2, [sp, #8]
 8003116:	221f      	movs	r2, #31
 8003118:	9201      	str	r2, [sp, #4]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	9200      	str	r2, [sp, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	460a      	mov	r2, r1
 8003122:	2150      	movs	r1, #80	; 0x50
 8003124:	2000      	movs	r0, #0
 8003126:	f7fe f8d1 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(100);
 800312a:	2064      	movs	r0, #100	; 0x64
 800312c:	f000 f8d6 	bl	80032dc <HAL_Delay>

	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8003130:	2000      	movs	r0, #0
 8003132:	f7fe f98b 	bl	800144c <ST7735_FillScreen>
	ST7735_WriteString(0, 60, text1, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8003136:	4b19      	ldr	r3, [pc, #100]	; (800319c <welcomeScreen+0x1e0>)
 8003138:	f107 0110 	add.w	r1, r7, #16
 800313c:	2200      	movs	r2, #0
 800313e:	9202      	str	r2, [sp, #8]
 8003140:	221f      	movs	r2, #31
 8003142:	9201      	str	r2, [sp, #4]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	9200      	str	r2, [sp, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	460a      	mov	r2, r1
 800314c:	213c      	movs	r1, #60	; 0x3c
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe f8bc 	bl	80012cc <ST7735_WriteString>
	ST7735_WriteString(0, 80, text2, TEXT_FONT_WLC_MODE, TEXT_COLOR_WLC_MODE, TEXT_BACKGROUND_COLOR_WLC_MODE);
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <welcomeScreen+0x1e0>)
 8003156:	1d39      	adds	r1, r7, #4
 8003158:	2200      	movs	r2, #0
 800315a:	9202      	str	r2, [sp, #8]
 800315c:	221f      	movs	r2, #31
 800315e:	9201      	str	r2, [sp, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	9200      	str	r2, [sp, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	460a      	mov	r2, r1
 8003168:	2150      	movs	r1, #80	; 0x50
 800316a:	2000      	movs	r0, #0
 800316c:	f7fe f8ae 	bl	80012cc <ST7735_WriteString>
	HAL_Delay(100);
 8003170:	2064      	movs	r0, #100	; 0x64
 8003172:	f000 f8b3 	bl	80032dc <HAL_Delay>

	current_state = choose_mode;
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <welcomeScreen+0x1e4>)
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 800317c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003180:	f000 f8ac 	bl	80032dc <HAL_Delay>
	ST7735_FillScreen(BACKGROUND_COLOR_WLC_MODE);
 8003184:	2000      	movs	r0, #0
 8003186:	f7fe f961 	bl	800144c <ST7735_FillScreen>

}
 800318a:	bf00      	nop
 800318c:	372c      	adds	r7, #44	; 0x2c
 800318e:	46bd      	mov	sp, r7
 8003190:	bd90      	pop	{r4, r7, pc}
 8003192:	bf00      	nop
 8003194:	08008e74 	.word	0x08008e74
 8003198:	08008e84 	.word	0x08008e84
 800319c:	20000008 	.word	0x20000008
 80031a0:	20000258 	.word	0x20000258

080031a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031aa:	e003      	b.n	80031b4 <LoopCopyDataInit>

080031ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031b2:	3104      	adds	r1, #4

080031b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031b4:	480b      	ldr	r0, [pc, #44]	; (80031e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031bc:	d3f6      	bcc.n	80031ac <CopyDataInit>
  ldr  r2, =_sbss
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80031c0:	e002      	b.n	80031c8 <LoopFillZerobss>

080031c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031c4:	f842 3b04 	str.w	r3, [r2], #4

080031c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80031ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031cc:	d3f9      	bcc.n	80031c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031ce:	f7fe ff11 	bl	8001ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d2:	f003 fd29 	bl	8006c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d6:	f7fe f94b 	bl	8001470 <main>
  bx  lr    
 80031da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80031e0:	0800a658 	.word	0x0800a658
  ldr  r0, =_sdata
 80031e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031e8:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 80031ec:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 80031f0:	200003f4 	.word	0x200003f4

080031f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <ADC_IRQHandler>
	...

080031f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_Init+0x40>)
 8003202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_Init+0x40>)
 800320e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_Init+0x40>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_Init+0x40>)
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003220:	2003      	movs	r0, #3
 8003222:	f000 f94d 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003226:	2000      	movs	r0, #0
 8003228:	f000 f808 	bl	800323c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800322c:	f7fe fcce 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023c00 	.word	0x40023c00

0800323c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_InitTick+0x54>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_InitTick+0x58>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003252:	fbb3 f3f1 	udiv	r3, r3, r1
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f965 	bl	800352a <HAL_SYSTICK_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00e      	b.n	8003288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d80a      	bhi.n	8003286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003270:	2200      	movs	r2, #0
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f000 f92d 	bl	80034d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800327c:	4a06      	ldr	r2, [pc, #24]	; (8003298 <HAL_InitTick+0x5c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000024 	.word	0x20000024
 8003294:	20000068 	.word	0x20000068
 8003298:	20000064 	.word	0x20000064

0800329c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_IncTick+0x20>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_IncTick+0x24>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_IncTick+0x24>)
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000068 	.word	0x20000068
 80032c0:	200003ec 	.word	0x200003ec

080032c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return uwTick;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_GetTick+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	200003ec 	.word	0x200003ec

080032dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e4:	f7ff ffee 	bl	80032c4 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d005      	beq.n	8003302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_Delay+0x40>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003302:	bf00      	nop
 8003304:	f7ff ffde 	bl	80032c4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	429a      	cmp	r2, r3
 8003312:	d8f7      	bhi.n	8003304 <HAL_Delay+0x28>
  {
  }
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000068 	.word	0x20000068

08003320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800333c:	4013      	ands	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	60d3      	str	r3, [r2, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <__NVIC_GetPriorityGrouping+0x18>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	f003 0307 	and.w	r3, r3, #7
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db0b      	blt.n	80033ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4907      	ldr	r1, [pc, #28]	; (80033bc <__NVIC_EnableIRQ+0x38>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2001      	movs	r0, #1
 80033a6:	fa00 f202 	lsl.w	r2, r0, r2
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d301      	bcc.n	8003492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348e:	2301      	movs	r3, #1
 8003490:	e00f      	b.n	80034b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <SysTick_Config+0x40>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349a:	210f      	movs	r1, #15
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f7ff ff8e 	bl	80033c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <SysTick_Config+0x40>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <SysTick_Config+0x40>)
 80034ac:	2207      	movs	r2, #7
 80034ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff29 	bl	8003320 <__NVIC_SetPriorityGrouping>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e8:	f7ff ff3e 	bl	8003368 <__NVIC_GetPriorityGrouping>
 80034ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff ff8e 	bl	8003414 <NVIC_EncodePriority>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff5d 	bl	80033c0 <__NVIC_SetPriority>
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff31 	bl	8003384 <__NVIC_EnableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffa2 	bl	800347c <SysTick_Config>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e159      	b.n	8003814 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003560:	2201      	movs	r2, #1
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	429a      	cmp	r2, r3
 800357a:	f040 8148 	bne.w	800380e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d00b      	beq.n	800359e <HAL_GPIO_Init+0x5a>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003592:	2b11      	cmp	r3, #17
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b12      	cmp	r3, #18
 800359c:	d130      	bne.n	8003600 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2203      	movs	r2, #3
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d4:	2201      	movs	r2, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 0201 	and.w	r2, r3, #1
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	2203      	movs	r2, #3
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0xfc>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b12      	cmp	r3, #18
 800363e:	d123      	bne.n	8003688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	08da      	lsrs	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3208      	adds	r2, #8
 8003648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	220f      	movs	r2, #15
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	08da      	lsrs	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3208      	adds	r2, #8
 8003682:	69b9      	ldr	r1, [r7, #24]
 8003684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	2203      	movs	r2, #3
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0203 	and.w	r2, r3, #3
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a2 	beq.w	800380e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	4b56      	ldr	r3, [pc, #344]	; (8003828 <HAL_GPIO_Init+0x2e4>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	4a55      	ldr	r2, [pc, #340]	; (8003828 <HAL_GPIO_Init+0x2e4>)
 80036d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036d8:	6453      	str	r3, [r2, #68]	; 0x44
 80036da:	4b53      	ldr	r3, [pc, #332]	; (8003828 <HAL_GPIO_Init+0x2e4>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036e6:	4a51      	ldr	r2, [pc, #324]	; (800382c <HAL_GPIO_Init+0x2e8>)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	3302      	adds	r3, #2
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a48      	ldr	r2, [pc, #288]	; (8003830 <HAL_GPIO_Init+0x2ec>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d019      	beq.n	8003746 <HAL_GPIO_Init+0x202>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a47      	ldr	r2, [pc, #284]	; (8003834 <HAL_GPIO_Init+0x2f0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0x1fe>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a46      	ldr	r2, [pc, #280]	; (8003838 <HAL_GPIO_Init+0x2f4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_Init+0x1fa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a45      	ldr	r2, [pc, #276]	; (800383c <HAL_GPIO_Init+0x2f8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x1f6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a44      	ldr	r2, [pc, #272]	; (8003840 <HAL_GPIO_Init+0x2fc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_Init+0x1f2>
 8003732:	2304      	movs	r3, #4
 8003734:	e008      	b.n	8003748 <HAL_GPIO_Init+0x204>
 8003736:	2307      	movs	r3, #7
 8003738:	e006      	b.n	8003748 <HAL_GPIO_Init+0x204>
 800373a:	2303      	movs	r3, #3
 800373c:	e004      	b.n	8003748 <HAL_GPIO_Init+0x204>
 800373e:	2302      	movs	r3, #2
 8003740:	e002      	b.n	8003748 <HAL_GPIO_Init+0x204>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_GPIO_Init+0x204>
 8003746:	2300      	movs	r3, #0
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	f002 0203 	and.w	r2, r2, #3
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	4093      	lsls	r3, r2
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003758:	4934      	ldr	r1, [pc, #208]	; (800382c <HAL_GPIO_Init+0x2e8>)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	089b      	lsrs	r3, r3, #2
 800375e:	3302      	adds	r3, #2
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003766:	4b37      	ldr	r3, [pc, #220]	; (8003844 <HAL_GPIO_Init+0x300>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800378a:	4a2e      	ldr	r2, [pc, #184]	; (8003844 <HAL_GPIO_Init+0x300>)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_GPIO_Init+0x300>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <HAL_GPIO_Init+0x300>)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ba:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_GPIO_Init+0x300>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037de:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_GPIO_Init+0x300>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <HAL_GPIO_Init+0x300>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003808:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <HAL_GPIO_Init+0x300>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3301      	adds	r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b0f      	cmp	r3, #15
 8003818:	f67f aea2 	bls.w	8003560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800381c:	bf00      	nop
 800381e:	3724      	adds	r7, #36	; 0x24
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40023800 	.word	0x40023800
 800382c:	40013800 	.word	0x40013800
 8003830:	40020000 	.word	0x40020000
 8003834:	40020400 	.word	0x40020400
 8003838:	40020800 	.word	0x40020800
 800383c:	40020c00 	.word	0x40020c00
 8003840:	40021000 	.word	0x40021000
 8003844:	40013c00 	.word	0x40013c00

08003848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	887b      	ldrh	r3, [r7, #2]
 800385a:	4013      	ands	r3, r2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	e001      	b.n	800386a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	807b      	strh	r3, [r7, #2]
 8003884:	4613      	mov	r3, r2
 8003886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003888:	787b      	ldrb	r3, [r7, #1]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800388e:	887a      	ldrh	r2, [r7, #2]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003894:	e003      	b.n	800389e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	041a      	lsls	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	619a      	str	r2, [r3, #24]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e11f      	b.n	8003afe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fe f9a2 	bl	8001c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2224      	movs	r2, #36	; 0x24
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800390e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003910:	f001 fba8 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 8003914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a7b      	ldr	r2, [pc, #492]	; (8003b08 <HAL_I2C_Init+0x25c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d807      	bhi.n	8003930 <HAL_I2C_Init+0x84>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a7a      	ldr	r2, [pc, #488]	; (8003b0c <HAL_I2C_Init+0x260>)
 8003924:	4293      	cmp	r3, r2
 8003926:	bf94      	ite	ls
 8003928:	2301      	movls	r3, #1
 800392a:	2300      	movhi	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e006      	b.n	800393e <HAL_I2C_Init+0x92>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a77      	ldr	r2, [pc, #476]	; (8003b10 <HAL_I2C_Init+0x264>)
 8003934:	4293      	cmp	r3, r2
 8003936:	bf94      	ite	ls
 8003938:	2301      	movls	r3, #1
 800393a:	2300      	movhi	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0db      	b.n	8003afe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a72      	ldr	r2, [pc, #456]	; (8003b14 <HAL_I2C_Init+0x268>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	0c9b      	lsrs	r3, r3, #18
 8003950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a64      	ldr	r2, [pc, #400]	; (8003b08 <HAL_I2C_Init+0x25c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d802      	bhi.n	8003980 <HAL_I2C_Init+0xd4>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3301      	adds	r3, #1
 800397e:	e009      	b.n	8003994 <HAL_I2C_Init+0xe8>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	4a63      	ldr	r2, [pc, #396]	; (8003b18 <HAL_I2C_Init+0x26c>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	3301      	adds	r3, #1
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	430b      	orrs	r3, r1
 800399a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4956      	ldr	r1, [pc, #344]	; (8003b08 <HAL_I2C_Init+0x25c>)
 80039b0:	428b      	cmp	r3, r1
 80039b2:	d80d      	bhi.n	80039d0 <HAL_I2C_Init+0x124>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e59      	subs	r1, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	bf38      	it	cc
 80039cc:	2304      	movcc	r3, #4
 80039ce:	e04f      	b.n	8003a70 <HAL_I2C_Init+0x1c4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d111      	bne.n	80039fc <HAL_I2C_Init+0x150>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1e58      	subs	r0, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6859      	ldr	r1, [r3, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	440b      	add	r3, r1
 80039e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	e012      	b.n	8003a22 <HAL_I2C_Init+0x176>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1e58      	subs	r0, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	0099      	lsls	r1, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Init+0x17e>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e022      	b.n	8003a70 <HAL_I2C_Init+0x1c4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10e      	bne.n	8003a50 <HAL_I2C_Init+0x1a4>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1e58      	subs	r0, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	440b      	add	r3, r1
 8003a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a44:	3301      	adds	r3, #1
 8003a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4e:	e00f      	b.n	8003a70 <HAL_I2C_Init+0x1c4>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	0099      	lsls	r1, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	6809      	ldr	r1, [r1, #0]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6911      	ldr	r1, [r2, #16]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68d2      	ldr	r2, [r2, #12]
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	000186a0 	.word	0x000186a0
 8003b0c:	001e847f 	.word	0x001e847f
 8003b10:	003d08ff 	.word	0x003d08ff
 8003b14:	431bde83 	.word	0x431bde83
 8003b18:	10624dd3 	.word	0x10624dd3

08003b1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	461a      	mov	r2, r3
 8003b28:	460b      	mov	r3, r1
 8003b2a:	817b      	strh	r3, [r7, #10]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7ff fbc8 	bl	80032c4 <HAL_GetTick>
 8003b34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	f040 80e0 	bne.w	8003d04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2319      	movs	r3, #25
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4970      	ldr	r1, [pc, #448]	; (8003d10 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fc70 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e0d3      	b.n	8003d06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_I2C_Master_Transmit+0x50>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e0cc      	b.n	8003d06 <HAL_I2C_Master_Transmit+0x1ea>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d007      	beq.n	8003b92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2221      	movs	r2, #33	; 0x21
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2210      	movs	r2, #16
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	893a      	ldrh	r2, [r7, #8]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a50      	ldr	r2, [pc, #320]	; (8003d14 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bd4:	8979      	ldrh	r1, [r7, #10]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fac2 	bl	8004164 <I2C_MasterRequestWrite>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e08d      	b.n	8003d06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c00:	e066      	b.n	8003cd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	6a39      	ldr	r1, [r7, #32]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fcea 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00d      	beq.n	8003c2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d107      	bne.n	8003c2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06b      	b.n	8003d06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	781a      	ldrb	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_I2C_Master_Transmit+0x188>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d017      	beq.n	8003ca4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	781a      	ldrb	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	6a39      	ldr	r1, [r7, #32]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fcda 	bl	8004662 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00d      	beq.n	8003cd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d107      	bne.n	8003ccc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e01a      	b.n	8003d06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d194      	bne.n	8003c02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	00100002 	.word	0x00100002
 8003d14:	ffff0000 	.word	0xffff0000

08003d18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	; 0x30
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	817b      	strh	r3, [r7, #10]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	813b      	strh	r3, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d32:	f7ff fac7 	bl	80032c4 <HAL_GetTick>
 8003d36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	f040 8208 	bne.w	8004156 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2319      	movs	r3, #25
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	497b      	ldr	r1, [pc, #492]	; (8003f3c <HAL_I2C_Mem_Read+0x224>)
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fb6f 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e1fb      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Mem_Read+0x56>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e1f4      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d007      	beq.n	8003d94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2222      	movs	r2, #34	; 0x22
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2240      	movs	r2, #64	; 0x40
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a5b      	ldr	r2, [pc, #364]	; (8003f40 <HAL_I2C_Mem_Read+0x228>)
 8003dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dd6:	88f8      	ldrh	r0, [r7, #6]
 8003dd8:	893a      	ldrh	r2, [r7, #8]
 8003dda:	8979      	ldrh	r1, [r7, #10]
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4603      	mov	r3, r0
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fa3e 	bl	8004268 <I2C_RequestMemoryRead>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1b0      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d113      	bne.n	8003e26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	623b      	str	r3, [r7, #32]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e184      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d11b      	bne.n	8003e66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e164      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d11b      	bne.n	8003ea6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	e144      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ebc:	e138      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	f200 80f1 	bhi.w	80040aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d123      	bne.n	8003f18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fc05 	bl	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e139      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f16:	e10b      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d14e      	bne.n	8003fbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	2200      	movs	r2, #0
 8003f28:	4906      	ldr	r1, [pc, #24]	; (8003f44 <HAL_I2C_Mem_Read+0x22c>)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fa82 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e10e      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
 8003f3a:	bf00      	nop
 8003f3c:	00100002 	.word	0x00100002
 8003f40:	ffff0000 	.word	0xffff0000
 8003f44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fbc:	e0b8      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4966      	ldr	r1, [pc, #408]	; (8004160 <HAL_I2C_Mem_Read+0x448>)
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fa33 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0bf      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	2200      	movs	r2, #0
 8004022:	494f      	ldr	r1, [pc, #316]	; (8004160 <HAL_I2C_Mem_Read+0x448>)
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fa05 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e091      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a8:	e042      	b.n	8004130 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fb18 	bl	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e04c      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d118      	bne.n	8004130 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	f47f aec2 	bne.w	8003ebe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	00010004 	.word	0x00010004

08004164 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	460b      	mov	r3, r1
 8004172:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b08      	cmp	r3, #8
 800417e:	d006      	beq.n	800418e <I2C_MasterRequestWrite+0x2a>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d003      	beq.n	800418e <I2C_MasterRequestWrite+0x2a>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800418c:	d108      	bne.n	80041a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e00b      	b.n	80041b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	2b12      	cmp	r3, #18
 80041a6:	d107      	bne.n	80041b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f935 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00c      	beq.n	80041ea <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e035      	b.n	8004256 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f2:	d108      	bne.n	8004206 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041f4:	897b      	ldrh	r3, [r7, #10]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004202:	611a      	str	r2, [r3, #16]
 8004204:	e01b      	b.n	800423e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	11db      	asrs	r3, r3, #7
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 0306 	and.w	r3, r3, #6
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f063 030f 	orn	r3, r3, #15
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	490f      	ldr	r1, [pc, #60]	; (8004260 <I2C_MasterRequestWrite+0xfc>)
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f95c 	bl	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e010      	b.n	8004256 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004234:	897b      	ldrh	r3, [r7, #10]
 8004236:	b2da      	uxtb	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4908      	ldr	r1, [pc, #32]	; (8004264 <I2C_MasterRequestWrite+0x100>)
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f94c 	bl	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	00010008 	.word	0x00010008
 8004264:	00010002 	.word	0x00010002

08004268 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	4608      	mov	r0, r1
 8004272:	4611      	mov	r1, r2
 8004274:	461a      	mov	r2, r3
 8004276:	4603      	mov	r3, r0
 8004278:	817b      	strh	r3, [r7, #10]
 800427a:	460b      	mov	r3, r1
 800427c:	813b      	strh	r3, [r7, #8]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004290:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f8c0 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00c      	beq.n	80042d4 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0a9      	b.n	8004428 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042d4:	897b      	ldrh	r3, [r7, #10]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	6a3a      	ldr	r2, [r7, #32]
 80042e8:	4951      	ldr	r1, [pc, #324]	; (8004430 <I2C_RequestMemoryRead+0x1c8>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f8f9 	bl	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e096      	b.n	8004428 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004312:	6a39      	ldr	r1, [r7, #32]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f963 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	2b04      	cmp	r3, #4
 8004326:	d107      	bne.n	8004338 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004336:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e075      	b.n	8004428 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d105      	bne.n	800434e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004342:	893b      	ldrh	r3, [r7, #8]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]
 800434c:	e021      	b.n	8004392 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800434e:	893b      	ldrh	r3, [r7, #8]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	b29b      	uxth	r3, r3
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800435c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435e:	6a39      	ldr	r1, [r7, #32]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f93d 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00d      	beq.n	8004388 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	2b04      	cmp	r3, #4
 8004372:	d107      	bne.n	8004384 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004382:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e04f      	b.n	8004428 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004388:	893b      	ldrh	r3, [r7, #8]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004394:	6a39      	ldr	r1, [r7, #32]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f922 	bl	80045e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d107      	bne.n	80043ba <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e034      	b.n	8004428 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f82a 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00c      	beq.n	8004400 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e013      	b.n	8004428 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004400:	897b      	ldrh	r3, [r7, #10]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	6a3a      	ldr	r2, [r7, #32]
 8004414:	4906      	ldr	r1, [pc, #24]	; (8004430 <I2C_RequestMemoryRead+0x1c8>)
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f863 	bl	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	00010002 	.word	0x00010002

08004434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004444:	e025      	b.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d021      	beq.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444e:	f7fe ff39 	bl	80032c4 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d302      	bcc.n	8004464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d116      	bne.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e023      	b.n	80044da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d10d      	bne.n	80044b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	43da      	mvns	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4013      	ands	r3, r2
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bf0c      	ite	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	2300      	movne	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	e00c      	b.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	43da      	mvns	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4013      	ands	r3, r2
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf0c      	ite	eq
 80044ca:	2301      	moveq	r3, #1
 80044cc:	2300      	movne	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d0b6      	beq.n	8004446 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044f0:	e051      	b.n	8004596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d123      	bne.n	800454a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004510:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800451a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f043 0204 	orr.w	r2, r3, #4
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e046      	b.n	80045d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d021      	beq.n	8004596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fe feb7 	bl	80032c4 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d116      	bne.n	8004596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e020      	b.n	80045d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d10c      	bne.n	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	43da      	mvns	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf14      	ite	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	2300      	moveq	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	e00b      	b.n	80045d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	43da      	mvns	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4013      	ands	r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d18d      	bne.n	80044f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ec:	e02d      	b.n	800464a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f8ce 	bl	8004790 <I2C_IsAcknowledgeFailed>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e02d      	b.n	800465a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d021      	beq.n	800464a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fe fe5d 	bl	80032c4 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d116      	bne.n	800464a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e007      	b.n	800465a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004654:	2b80      	cmp	r3, #128	; 0x80
 8004656:	d1ca      	bne.n	80045ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800466e:	e02d      	b.n	80046cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f88d 	bl	8004790 <I2C_IsAcknowledgeFailed>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e02d      	b.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d021      	beq.n	80046cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004688:	f7fe fe1c 	bl	80032c4 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	429a      	cmp	r2, r3
 8004696:	d302      	bcc.n	800469e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d116      	bne.n	80046cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f043 0220 	orr.w	r2, r3, #32
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e007      	b.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d1ca      	bne.n	8004670 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f0:	e042      	b.n	8004778 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d119      	bne.n	8004734 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0210 	mvn.w	r2, #16
 8004708:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e029      	b.n	8004788 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004734:	f7fe fdc6 	bl	80032c4 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	d302      	bcc.n	800474a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d116      	bne.n	8004778 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e007      	b.n	8004788 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d1b5      	bne.n	80046f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a6:	d11b      	bne.n	80047e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	f043 0204 	orr.w	r2, r3, #4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e25b      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d075      	beq.n	80048fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800480e:	4ba3      	ldr	r3, [pc, #652]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b04      	cmp	r3, #4
 8004818:	d00c      	beq.n	8004834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481a:	4ba0      	ldr	r3, [pc, #640]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004822:	2b08      	cmp	r3, #8
 8004824:	d112      	bne.n	800484c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004826:	4b9d      	ldr	r3, [pc, #628]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004832:	d10b      	bne.n	800484c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004834:	4b99      	ldr	r3, [pc, #612]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d05b      	beq.n	80048f8 <HAL_RCC_OscConfig+0x108>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d157      	bne.n	80048f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e236      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004854:	d106      	bne.n	8004864 <HAL_RCC_OscConfig+0x74>
 8004856:	4b91      	ldr	r3, [pc, #580]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a90      	ldr	r2, [pc, #576]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800485c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e01d      	b.n	80048a0 <HAL_RCC_OscConfig+0xb0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x98>
 800486e:	4b8b      	ldr	r3, [pc, #556]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a8a      	ldr	r2, [pc, #552]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	4b88      	ldr	r3, [pc, #544]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a87      	ldr	r2, [pc, #540]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e00b      	b.n	80048a0 <HAL_RCC_OscConfig+0xb0>
 8004888:	4b84      	ldr	r3, [pc, #528]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a83      	ldr	r2, [pc, #524]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800488e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4b81      	ldr	r3, [pc, #516]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a80      	ldr	r2, [pc, #512]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800489a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800489e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d013      	beq.n	80048d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fe fd0c 	bl	80032c4 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fe fd08 	bl	80032c4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1fb      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b76      	ldr	r3, [pc, #472]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0xc0>
 80048ce:	e014      	b.n	80048fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fe fcf8 	bl	80032c4 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048d8:	f7fe fcf4 	bl	80032c4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	; 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e1e7      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	4b6c      	ldr	r3, [pc, #432]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0xe8>
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d063      	beq.n	80049ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004906:	4b65      	ldr	r3, [pc, #404]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004912:	4b62      	ldr	r3, [pc, #392]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491a:	2b08      	cmp	r3, #8
 800491c:	d11c      	bne.n	8004958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800491e:	4b5f      	ldr	r3, [pc, #380]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d116      	bne.n	8004958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492a:	4b5c      	ldr	r3, [pc, #368]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_RCC_OscConfig+0x152>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e1bb      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004942:	4b56      	ldr	r3, [pc, #344]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4952      	ldr	r1, [pc, #328]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	e03a      	b.n	80049ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d020      	beq.n	80049a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004960:	4b4f      	ldr	r3, [pc, #316]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fe fcad 	bl	80032c4 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800496e:	f7fe fca9 	bl	80032c4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e19c      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004980:	4b46      	ldr	r3, [pc, #280]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498c:	4b43      	ldr	r3, [pc, #268]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4940      	ldr	r1, [pc, #256]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]
 80049a0:	e015      	b.n	80049ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a2:	4b3f      	ldr	r3, [pc, #252]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fe fc8c 	bl	80032c4 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b0:	f7fe fc88 	bl	80032c4 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e17b      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c2:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d030      	beq.n	8004a3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e2:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_RCC_OscConfig+0x2b4>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7fe fc6c 	bl	80032c4 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f0:	f7fe fc68 	bl	80032c4 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e15b      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x200>
 8004a0e:	e015      	b.n	8004a3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a10:	4b24      	ldr	r3, [pc, #144]	; (8004aa4 <HAL_RCC_OscConfig+0x2b4>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a16:	f7fe fc55 	bl	80032c4 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fe fc51 	bl	80032c4 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e144      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a30:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80a0 	beq.w	8004b8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a0e      	ldr	r2, [pc, #56]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	60bb      	str	r3, [r7, #8]
 8004a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a76:	2301      	movs	r3, #1
 8004a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_OscConfig+0x2b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d121      	bne.n	8004aca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <HAL_RCC_OscConfig+0x2b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <HAL_RCC_OscConfig+0x2b8>)
 8004a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a92:	f7fe fc17 	bl	80032c4 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a98:	e011      	b.n	8004abe <HAL_RCC_OscConfig+0x2ce>
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	42470000 	.word	0x42470000
 8004aa4:	42470e80 	.word	0x42470e80
 8004aa8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aac:	f7fe fc0a 	bl	80032c4 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e0fd      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abe:	4b81      	ldr	r3, [pc, #516]	; (8004cc4 <HAL_RCC_OscConfig+0x4d4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d106      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x2f0>
 8004ad2:	4b7d      	ldr	r3, [pc, #500]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	4a7c      	ldr	r2, [pc, #496]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ade:	e01c      	b.n	8004b1a <HAL_RCC_OscConfig+0x32a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	d10c      	bne.n	8004b02 <HAL_RCC_OscConfig+0x312>
 8004ae8:	4b77      	ldr	r3, [pc, #476]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	4a76      	ldr	r2, [pc, #472]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004aee:	f043 0304 	orr.w	r3, r3, #4
 8004af2:	6713      	str	r3, [r2, #112]	; 0x70
 8004af4:	4b74      	ldr	r3, [pc, #464]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	4a73      	ldr	r2, [pc, #460]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	6713      	str	r3, [r2, #112]	; 0x70
 8004b00:	e00b      	b.n	8004b1a <HAL_RCC_OscConfig+0x32a>
 8004b02:	4b71      	ldr	r3, [pc, #452]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a70      	ldr	r2, [pc, #448]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0e:	4b6e      	ldr	r3, [pc, #440]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	4a6d      	ldr	r2, [pc, #436]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d015      	beq.n	8004b4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b22:	f7fe fbcf 	bl	80032c4 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fe fbcb 	bl	80032c4 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e0bc      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b40:	4b61      	ldr	r3, [pc, #388]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ee      	beq.n	8004b2a <HAL_RCC_OscConfig+0x33a>
 8004b4c:	e014      	b.n	8004b78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4e:	f7fe fbb9 	bl	80032c4 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b56:	f7fe fbb5 	bl	80032c4 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e0a6      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6c:	4b56      	ldr	r3, [pc, #344]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ee      	bne.n	8004b56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d105      	bne.n	8004b8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7e:	4b52      	ldr	r3, [pc, #328]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4a51      	ldr	r2, [pc, #324]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8092 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b94:	4b4c      	ldr	r3, [pc, #304]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d05c      	beq.n	8004c5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d141      	bne.n	8004c2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba8:	4b48      	ldr	r3, [pc, #288]	; (8004ccc <HAL_RCC_OscConfig+0x4dc>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bae:	f7fe fb89 	bl	80032c4 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fe fb85 	bl	80032c4 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e078      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	019b      	lsls	r3, r3, #6
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	3b01      	subs	r3, #1
 8004bee:	041b      	lsls	r3, r3, #16
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	4933      	ldr	r1, [pc, #204]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bfe:	4b33      	ldr	r3, [pc, #204]	; (8004ccc <HAL_RCC_OscConfig+0x4dc>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fe fb5e 	bl	80032c4 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fe fb5a 	bl	80032c4 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e04d      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1e:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x41c>
 8004c2a:	e045      	b.n	8004cb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2c:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <HAL_RCC_OscConfig+0x4dc>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fe fb47 	bl	80032c4 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fe fb43 	bl	80032c4 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e036      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f0      	bne.n	8004c3a <HAL_RCC_OscConfig+0x44a>
 8004c58:	e02e      	b.n	8004cb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e029      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c66:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_RCC_OscConfig+0x4d8>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d11c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d115      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c8e:	4013      	ands	r3, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10d      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40007000 	.word	0x40007000
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	42470060 	.word	0x42470060

08004cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0cc      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b68      	ldr	r3, [pc, #416]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d90c      	bls.n	8004d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b65      	ldr	r3, [pc, #404]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b63      	ldr	r3, [pc, #396]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0b8      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d020      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d24:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a58      	ldr	r2, [pc, #352]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d3c:	4b53      	ldr	r3, [pc, #332]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4a52      	ldr	r2, [pc, #328]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d48:	4b50      	ldr	r3, [pc, #320]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	494d      	ldr	r1, [pc, #308]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d044      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6e:	4b47      	ldr	r3, [pc, #284]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d119      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e07f      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d003      	beq.n	8004d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e06f      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9e:	4b3b      	ldr	r3, [pc, #236]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e067      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dae:	4b37      	ldr	r3, [pc, #220]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f023 0203 	bic.w	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4934      	ldr	r1, [pc, #208]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc0:	f7fe fa80 	bl	80032c4 <HAL_GetTick>
 8004dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc8:	f7fe fa7c 	bl	80032c4 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e04f      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dde:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 020c 	and.w	r2, r3, #12
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d1eb      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df0:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d20c      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e032      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4916      	ldr	r1, [pc, #88]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	490e      	ldr	r1, [pc, #56]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e56:	f000 f821 	bl	8004e9c <HAL_RCC_GetSysClockFreq>
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004e68:	5cd3      	ldrb	r3, [r2, r3]
 8004e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe f9e0 	bl	800323c <HAL_InitTick>

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40023c00 	.word	0x40023c00
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	0800a3d0 	.word	0x0800a3d0
 8004e94:	20000024 	.word	0x20000024
 8004e98:	20000064 	.word	0x20000064

08004e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb2:	4b63      	ldr	r3, [pc, #396]	; (8005040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d007      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0x32>
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d008      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x38>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 80b4 	bne.w	8005030 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ec8:	4b5e      	ldr	r3, [pc, #376]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004eca:	60bb      	str	r3, [r7, #8]
       break;
 8004ecc:	e0b3      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ece:	4b5e      	ldr	r3, [pc, #376]	; (8005048 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ed0:	60bb      	str	r3, [r7, #8]
      break;
 8004ed2:	e0b0      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ed4:	4b5a      	ldr	r3, [pc, #360]	; (8005040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004edc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ede:	4b58      	ldr	r3, [pc, #352]	; (8005040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d04a      	beq.n	8004f80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eea:	4b55      	ldr	r3, [pc, #340]	; (8005040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	f04f 0400 	mov.w	r4, #0
 8004ef4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	ea03 0501 	and.w	r5, r3, r1
 8004f00:	ea04 0602 	and.w	r6, r4, r2
 8004f04:	4629      	mov	r1, r5
 8004f06:	4632      	mov	r2, r6
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	f04f 0400 	mov.w	r4, #0
 8004f10:	0154      	lsls	r4, r2, #5
 8004f12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f16:	014b      	lsls	r3, r1, #5
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4622      	mov	r2, r4
 8004f1c:	1b49      	subs	r1, r1, r5
 8004f1e:	eb62 0206 	sbc.w	r2, r2, r6
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	f04f 0400 	mov.w	r4, #0
 8004f2a:	0194      	lsls	r4, r2, #6
 8004f2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f30:	018b      	lsls	r3, r1, #6
 8004f32:	1a5b      	subs	r3, r3, r1
 8004f34:	eb64 0402 	sbc.w	r4, r4, r2
 8004f38:	f04f 0100 	mov.w	r1, #0
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	00e2      	lsls	r2, r4, #3
 8004f42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f46:	00d9      	lsls	r1, r3, #3
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4614      	mov	r4, r2
 8004f4c:	195b      	adds	r3, r3, r5
 8004f4e:	eb44 0406 	adc.w	r4, r4, r6
 8004f52:	f04f 0100 	mov.w	r1, #0
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	0262      	lsls	r2, r4, #9
 8004f5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004f60:	0259      	lsls	r1, r3, #9
 8004f62:	460b      	mov	r3, r1
 8004f64:	4614      	mov	r4, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	4621      	mov	r1, r4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f04f 0400 	mov.w	r4, #0
 8004f70:	461a      	mov	r2, r3
 8004f72:	4623      	mov	r3, r4
 8004f74:	f7fb fe20 	bl	8000bb8 <__aeabi_uldivmod>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	e049      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f80:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	099b      	lsrs	r3, r3, #6
 8004f86:	f04f 0400 	mov.w	r4, #0
 8004f8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	ea03 0501 	and.w	r5, r3, r1
 8004f96:	ea04 0602 	and.w	r6, r4, r2
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	f04f 0400 	mov.w	r4, #0
 8004fa6:	0154      	lsls	r4, r2, #5
 8004fa8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fac:	014b      	lsls	r3, r1, #5
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4622      	mov	r2, r4
 8004fb2:	1b49      	subs	r1, r1, r5
 8004fb4:	eb62 0206 	sbc.w	r2, r2, r6
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	f04f 0400 	mov.w	r4, #0
 8004fc0:	0194      	lsls	r4, r2, #6
 8004fc2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fc6:	018b      	lsls	r3, r1, #6
 8004fc8:	1a5b      	subs	r3, r3, r1
 8004fca:	eb64 0402 	sbc.w	r4, r4, r2
 8004fce:	f04f 0100 	mov.w	r1, #0
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	00e2      	lsls	r2, r4, #3
 8004fd8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fdc:	00d9      	lsls	r1, r3, #3
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	195b      	adds	r3, r3, r5
 8004fe4:	eb44 0406 	adc.w	r4, r4, r6
 8004fe8:	f04f 0100 	mov.w	r1, #0
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	02a2      	lsls	r2, r4, #10
 8004ff2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ff6:	0299      	lsls	r1, r3, #10
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4614      	mov	r4, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	4621      	mov	r1, r4
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f04f 0400 	mov.w	r4, #0
 8005006:	461a      	mov	r2, r3
 8005008:	4623      	mov	r3, r4
 800500a:	f7fb fdd5 	bl	8000bb8 <__aeabi_uldivmod>
 800500e:	4603      	mov	r3, r0
 8005010:	460c      	mov	r4, r1
 8005012:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005014:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	3301      	adds	r3, #1
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	60bb      	str	r3, [r7, #8]
      break;
 800502e:	e002      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005032:	60bb      	str	r3, [r7, #8]
      break;
 8005034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005036:	68bb      	ldr	r3, [r7, #8]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	00f42400 	.word	0x00f42400
 8005048:	007a1200 	.word	0x007a1200

0800504c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005050:	4b03      	ldr	r3, [pc, #12]	; (8005060 <HAL_RCC_GetHCLKFreq+0x14>)
 8005052:	681b      	ldr	r3, [r3, #0]
}
 8005054:	4618      	mov	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000024 	.word	0x20000024

08005064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005068:	f7ff fff0 	bl	800504c <HAL_RCC_GetHCLKFreq>
 800506c:	4601      	mov	r1, r0
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	0a9b      	lsrs	r3, r3, #10
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	4a03      	ldr	r2, [pc, #12]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40023800 	.word	0x40023800
 8005088:	0800a3e0 	.word	0x0800a3e0

0800508c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005090:	f7ff ffdc 	bl	800504c <HAL_RCC_GetHCLKFreq>
 8005094:	4601      	mov	r1, r0
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0b5b      	lsrs	r3, r3, #13
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4a03      	ldr	r2, [pc, #12]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a2:	5cd3      	ldrb	r3, [r2, r3]
 80050a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40023800 	.word	0x40023800
 80050b0:	0800a3e0 	.word	0x0800a3e0

080050b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e056      	b.n	8005174 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fc fde3 	bl	8001cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	ea42 0103 	orr.w	r1, r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	0c1b      	lsrs	r3, r3, #16
 8005144:	f003 0104 	and.w	r1, r3, #4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69da      	ldr	r2, [r3, #28]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005162:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_SPI_Transmit+0x22>
 800519a:	2302      	movs	r3, #2
 800519c:	e11e      	b.n	80053dc <HAL_SPI_Transmit+0x260>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051a6:	f7fe f88d 	bl	80032c4 <HAL_GetTick>
 80051aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051bc:	2302      	movs	r3, #2
 80051be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051c0:	e103      	b.n	80053ca <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_Transmit+0x52>
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d102      	bne.n	80051d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051d2:	e0fa      	b.n	80053ca <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2203      	movs	r2, #3
 80051d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	88fa      	ldrh	r2, [r7, #6]
 80051ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	88fa      	ldrh	r2, [r7, #6]
 80051f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521a:	d107      	bne.n	800522c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800522a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	d007      	beq.n	800524a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005248:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005252:	d14b      	bne.n	80052ec <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_SPI_Transmit+0xe6>
 800525c:	8afb      	ldrh	r3, [r7, #22]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d13e      	bne.n	80052e0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	881a      	ldrh	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	1c9a      	adds	r2, r3, #2
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005286:	e02b      	b.n	80052e0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b02      	cmp	r3, #2
 8005294:	d112      	bne.n	80052bc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	881a      	ldrh	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	1c9a      	adds	r2, r3, #2
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80052ba:	e011      	b.n	80052e0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052bc:	f7fe f802 	bl	80032c4 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d803      	bhi.n	80052d4 <HAL_SPI_Transmit+0x158>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	d102      	bne.n	80052da <HAL_SPI_Transmit+0x15e>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052de:	e074      	b.n	80053ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1ce      	bne.n	8005288 <HAL_SPI_Transmit+0x10c>
 80052ea:	e04c      	b.n	8005386 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_SPI_Transmit+0x17e>
 80052f4:	8afb      	ldrh	r3, [r7, #22]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d140      	bne.n	800537c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	7812      	ldrb	r2, [r2, #0]
 8005306:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005320:	e02c      	b.n	800537c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b02      	cmp	r3, #2
 800532e:	d113      	bne.n	8005358 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	7812      	ldrb	r2, [r2, #0]
 800533c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	86da      	strh	r2, [r3, #54]	; 0x36
 8005356:	e011      	b.n	800537c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005358:	f7fd ffb4 	bl	80032c4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d803      	bhi.n	8005370 <HAL_SPI_Transmit+0x1f4>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d102      	bne.n	8005376 <HAL_SPI_Transmit+0x1fa>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	77fb      	strb	r3, [r7, #31]
          goto error;
 800537a:	e026      	b.n	80053ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1cd      	bne.n	8005322 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	6839      	ldr	r1, [r7, #0]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f894 	bl	80054b8 <SPI_EndRxTxTransaction>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	77fb      	strb	r3, [r7, #31]
 80053c6:	e000      	b.n	80053ca <HAL_SPI_Transmit+0x24e>
  }

error:
 80053c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053da:	7ffb      	ldrb	r3, [r7, #31]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053f4:	e04c      	b.n	8005490 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d048      	beq.n	8005490 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80053fe:	f7fd ff61 	bl	80032c4 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d902      	bls.n	8005414 <SPI_WaitFlagStateUntilTimeout+0x30>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d13d      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005422:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542c:	d111      	bne.n	8005452 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005436:	d004      	beq.n	8005442 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005440:	d107      	bne.n	8005452 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005450:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545a:	d10f      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800547a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e00f      	b.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4013      	ands	r3, r2
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	429a      	cmp	r2, r3
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d1a3      	bne.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054c4:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <SPI_EndRxTxTransaction+0x7c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1b      	ldr	r2, [pc, #108]	; (8005538 <SPI_EndRxTxTransaction+0x80>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	0d5b      	lsrs	r3, r3, #21
 80054d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
 80054d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e2:	d112      	bne.n	800550a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	2180      	movs	r1, #128	; 0x80
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7ff ff78 	bl	80053e4 <SPI_WaitFlagStateUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d016      	beq.n	8005528 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e00f      	b.n	800552a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	3b01      	subs	r3, #1
 8005514:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005520:	2b80      	cmp	r3, #128	; 0x80
 8005522:	d0f2      	beq.n	800550a <SPI_EndRxTxTransaction+0x52>
 8005524:	e000      	b.n	8005528 <SPI_EndRxTxTransaction+0x70>
        break;
 8005526:	bf00      	nop
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000024 	.word	0x20000024
 8005538:	165e9f81 	.word	0x165e9f81

0800553c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e01d      	b.n	800558a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fc fbea 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f000 fb4c 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0201 	orr.w	r2, r2, #1
 80055a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b06      	cmp	r3, #6
 80055ba:	d007      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e01d      	b.n	8005628 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f815 	bl	8005630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3304      	adds	r3, #4
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f000 fafd 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2201      	movs	r2, #1
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fd84 	bl	8006164 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a10      	ldr	r2, [pc, #64]	; (80056a4 <HAL_TIM_PWM_Start+0x60>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d107      	bne.n	8005676 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b06      	cmp	r3, #6
 8005686:	d007      	beq.n	8005698 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000

080056a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0202 	mvn.w	r2, #2
 80056d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa75 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa67 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa78 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b04      	cmp	r3, #4
 8005710:	d122      	bne.n	8005758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b04      	cmp	r3, #4
 800571e:	d11b      	bne.n	8005758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0204 	mvn.w	r2, #4
 8005728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa4b 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa3d 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fa4e 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b08      	cmp	r3, #8
 8005764:	d122      	bne.n	80057ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d11b      	bne.n	80057ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0208 	mvn.w	r2, #8
 800577c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2204      	movs	r2, #4
 8005782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa21 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 8005798:	e005      	b.n	80057a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fa13 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fa24 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b10      	cmp	r3, #16
 80057b8:	d122      	bne.n	8005800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d11b      	bne.n	8005800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0210 	mvn.w	r2, #16
 80057d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2208      	movs	r2, #8
 80057d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9f7 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9e9 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f9fa 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b01      	cmp	r3, #1
 800580c:	d10e      	bne.n	800582c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	d107      	bne.n	800582c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0201 	mvn.w	r2, #1
 8005824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9c3 	bl	8005bb2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b80      	cmp	r3, #128	; 0x80
 8005838:	d10e      	bne.n	8005858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005844:	2b80      	cmp	r3, #128	; 0x80
 8005846:	d107      	bne.n	8005858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fd24 	bl	80062a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b40      	cmp	r3, #64	; 0x40
 8005864:	d10e      	bne.n	8005884 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d107      	bne.n	8005884 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800587c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9bf 	bl	8005c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b20      	cmp	r3, #32
 8005890:	d10e      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b20      	cmp	r3, #32
 800589e:	d107      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0220 	mvn.w	r2, #32
 80058a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fcee 	bl	800628c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e0b4      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x184>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	f200 809f 	bhi.w	8005a28 <HAL_TIM_PWM_ConfigChannel+0x170>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005925 	.word	0x08005925
 80058f4:	08005a29 	.word	0x08005a29
 80058f8:	08005a29 	.word	0x08005a29
 80058fc:	08005a29 	.word	0x08005a29
 8005900:	08005965 	.word	0x08005965
 8005904:	08005a29 	.word	0x08005a29
 8005908:	08005a29 	.word	0x08005a29
 800590c:	08005a29 	.word	0x08005a29
 8005910:	080059a7 	.word	0x080059a7
 8005914:	08005a29 	.word	0x08005a29
 8005918:	08005a29 	.word	0x08005a29
 800591c:	08005a29 	.word	0x08005a29
 8005920:	080059e7 	.word	0x080059e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f9f4 	bl	8005d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0208 	orr.w	r2, r2, #8
 800593e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0204 	bic.w	r2, r2, #4
 800594e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6999      	ldr	r1, [r3, #24]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	619a      	str	r2, [r3, #24]
      break;
 8005962:	e062      	b.n	8005a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fa3a 	bl	8005de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6999      	ldr	r1, [r3, #24]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	619a      	str	r2, [r3, #24]
      break;
 80059a4:	e041      	b.n	8005a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fa85 	bl	8005ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0208 	orr.w	r2, r2, #8
 80059c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0204 	bic.w	r2, r2, #4
 80059d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69d9      	ldr	r1, [r3, #28]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	61da      	str	r2, [r3, #28]
      break;
 80059e4:	e021      	b.n	8005a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 facf 	bl	8005f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69d9      	ldr	r1, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	021a      	lsls	r2, r3, #8
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	61da      	str	r2, [r3, #28]
      break;
 8005a26:	e000      	b.n	8005a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005a28:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_TIM_ConfigClockSource+0x18>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e0a6      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x166>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d067      	beq.n	8005b64 <HAL_TIM_ConfigClockSource+0x120>
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	d80b      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x6c>
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d073      	beq.n	8005b84 <HAL_TIM_ConfigClockSource+0x140>
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d802      	bhi.n	8005aa6 <HAL_TIM_ConfigClockSource+0x62>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d06f      	beq.n	8005b84 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005aa4:	e078      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d06c      	beq.n	8005b84 <HAL_TIM_ConfigClockSource+0x140>
 8005aaa:	2b30      	cmp	r3, #48	; 0x30
 8005aac:	d06a      	beq.n	8005b84 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005aae:	e073      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ab0:	2b70      	cmp	r3, #112	; 0x70
 8005ab2:	d00d      	beq.n	8005ad0 <HAL_TIM_ConfigClockSource+0x8c>
 8005ab4:	2b70      	cmp	r3, #112	; 0x70
 8005ab6:	d804      	bhi.n	8005ac2 <HAL_TIM_ConfigClockSource+0x7e>
 8005ab8:	2b50      	cmp	r3, #80	; 0x50
 8005aba:	d033      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0xe0>
 8005abc:	2b60      	cmp	r3, #96	; 0x60
 8005abe:	d041      	beq.n	8005b44 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005ac0:	e06a      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac6:	d066      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x152>
 8005ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005acc:	d017      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005ace:	e063      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6899      	ldr	r1, [r3, #8]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f000 fb20 	bl	8006124 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005af2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	609a      	str	r2, [r3, #8]
      break;
 8005afc:	e04c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6899      	ldr	r1, [r3, #8]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f000 fb09 	bl	8006124 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b20:	609a      	str	r2, [r3, #8]
      break;
 8005b22:	e039      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	461a      	mov	r2, r3
 8005b32:	f000 fa7d 	bl	8006030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2150      	movs	r1, #80	; 0x50
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fad6 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005b42:	e029      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	6859      	ldr	r1, [r3, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	461a      	mov	r2, r3
 8005b52:	f000 fa9c 	bl	800608e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2160      	movs	r1, #96	; 0x60
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fac6 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005b62:	e019      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	6859      	ldr	r1, [r3, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	461a      	mov	r2, r3
 8005b72:	f000 fa5d 	bl	8006030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2140      	movs	r1, #64	; 0x40
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fab6 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005b82:	e009      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f000 faad 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005b94:	e000      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a34      	ldr	r2, [pc, #208]	; (8005cfc <TIM_Base_SetConfig+0xe4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00f      	beq.n	8005c50 <TIM_Base_SetConfig+0x38>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c36:	d00b      	beq.n	8005c50 <TIM_Base_SetConfig+0x38>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a31      	ldr	r2, [pc, #196]	; (8005d00 <TIM_Base_SetConfig+0xe8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d007      	beq.n	8005c50 <TIM_Base_SetConfig+0x38>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a30      	ldr	r2, [pc, #192]	; (8005d04 <TIM_Base_SetConfig+0xec>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_Base_SetConfig+0x38>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a2f      	ldr	r2, [pc, #188]	; (8005d08 <TIM_Base_SetConfig+0xf0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d108      	bne.n	8005c62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a25      	ldr	r2, [pc, #148]	; (8005cfc <TIM_Base_SetConfig+0xe4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01b      	beq.n	8005ca2 <TIM_Base_SetConfig+0x8a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c70:	d017      	beq.n	8005ca2 <TIM_Base_SetConfig+0x8a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <TIM_Base_SetConfig+0xe8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <TIM_Base_SetConfig+0x8a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a21      	ldr	r2, [pc, #132]	; (8005d04 <TIM_Base_SetConfig+0xec>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00f      	beq.n	8005ca2 <TIM_Base_SetConfig+0x8a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a20      	ldr	r2, [pc, #128]	; (8005d08 <TIM_Base_SetConfig+0xf0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00b      	beq.n	8005ca2 <TIM_Base_SetConfig+0x8a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1f      	ldr	r2, [pc, #124]	; (8005d0c <TIM_Base_SetConfig+0xf4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d007      	beq.n	8005ca2 <TIM_Base_SetConfig+0x8a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <TIM_Base_SetConfig+0xf8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d003      	beq.n	8005ca2 <TIM_Base_SetConfig+0x8a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <TIM_Base_SetConfig+0xfc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d108      	bne.n	8005cb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <TIM_Base_SetConfig+0xe4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d103      	bne.n	8005ce8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	615a      	str	r2, [r3, #20]
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	40014000 	.word	0x40014000
 8005d10:	40014400 	.word	0x40014400
 8005d14:	40014800 	.word	0x40014800

08005d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0201 	bic.w	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 0302 	bic.w	r3, r3, #2
 8005d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <TIM_OC1_SetConfig+0xc8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10c      	bne.n	8005d8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 0308 	bic.w	r3, r3, #8
 8005d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f023 0304 	bic.w	r3, r3, #4
 8005d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <TIM_OC1_SetConfig+0xc8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d111      	bne.n	8005dba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40010000 	.word	0x40010000

08005de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f023 0210 	bic.w	r2, r3, #16
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 0320 	bic.w	r3, r3, #32
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a1e      	ldr	r2, [pc, #120]	; (8005eb8 <TIM_OC2_SetConfig+0xd4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d10d      	bne.n	8005e60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <TIM_OC2_SetConfig+0xd4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d113      	bne.n	8005e90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40010000 	.word	0x40010000

08005ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <TIM_OC3_SetConfig+0xd0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d10d      	bne.n	8005f36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <TIM_OC3_SetConfig+0xd0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d113      	bne.n	8005f66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	621a      	str	r2, [r3, #32]
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40010000 	.word	0x40010000

08005f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	021b      	lsls	r3, r3, #8
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	031b      	lsls	r3, r3, #12
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a10      	ldr	r2, [pc, #64]	; (800602c <TIM_OC4_SetConfig+0x9c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d109      	bne.n	8006004 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	019b      	lsls	r3, r3, #6
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40010000 	.word	0x40010000

08006030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f023 0201 	bic.w	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 030a 	bic.w	r3, r3, #10
 800606c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608e:	b480      	push	{r7}
 8006090:	b087      	sub	sp, #28
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0210 	bic.w	r2, r3, #16
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	031b      	lsls	r3, r3, #12
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	f043 0307 	orr.w	r3, r3, #7
 8006110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	609a      	str	r2, [r3, #8]
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800613e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	021a      	lsls	r2, r3, #8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	431a      	orrs	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4313      	orrs	r3, r2
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	609a      	str	r2, [r3, #8]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2201      	movs	r2, #1
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1a      	ldr	r2, [r3, #32]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	43db      	mvns	r3, r3
 8006186:	401a      	ands	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	431a      	orrs	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e050      	b.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d018      	beq.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006214:	d013      	beq.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a18      	ldr	r2, [pc, #96]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00e      	beq.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a16      	ldr	r2, [pc, #88]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d009      	beq.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a15      	ldr	r2, [pc, #84]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d004      	beq.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a13      	ldr	r2, [pc, #76]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d10c      	bne.n	8006258 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4313      	orrs	r3, r2
 800624e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40010000 	.word	0x40010000
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40000c00 	.word	0x40000c00
 8006288:	40014000 	.word	0x40014000

0800628c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e03f      	b.n	8006346 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fb fdca 	bl	8001e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2224      	movs	r2, #36	; 0x24
 80062e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f90b 	bl	8006514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800630c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695a      	ldr	r2, [r3, #20]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800631c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800632c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b088      	sub	sp, #32
 8006352:	af02      	add	r7, sp, #8
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b20      	cmp	r3, #32
 800636c:	f040 8083 	bne.w	8006476 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_UART_Transmit+0x2e>
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e07b      	b.n	8006478 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_UART_Transmit+0x40>
 800638a:	2302      	movs	r3, #2
 800638c:	e074      	b.n	8006478 <HAL_UART_Transmit+0x12a>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2221      	movs	r2, #33	; 0x21
 80063a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80063a4:	f7fc ff8e 	bl	80032c4 <HAL_GetTick>
 80063a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	88fa      	ldrh	r2, [r7, #6]
 80063ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80063be:	e042      	b.n	8006446 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d6:	d122      	bne.n	800641e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2200      	movs	r2, #0
 80063e0:	2180      	movs	r1, #128	; 0x80
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f84c 	bl	8006480 <UART_WaitOnFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e042      	b.n	8006478 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006404:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d103      	bne.n	8006416 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	3302      	adds	r3, #2
 8006412:	60bb      	str	r3, [r7, #8]
 8006414:	e017      	b.n	8006446 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	3301      	adds	r3, #1
 800641a:	60bb      	str	r3, [r7, #8]
 800641c:	e013      	b.n	8006446 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2200      	movs	r2, #0
 8006426:	2180      	movs	r1, #128	; 0x80
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f829 	bl	8006480 <UART_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e01f      	b.n	8006478 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	60ba      	str	r2, [r7, #8]
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1b7      	bne.n	80063c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2200      	movs	r2, #0
 8006458:	2140      	movs	r1, #64	; 0x40
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f810 	bl	8006480 <UART_WaitOnFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e006      	b.n	8006478 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	e000      	b.n	8006478 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006476:	2302      	movs	r3, #2
  }
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	4613      	mov	r3, r2
 800648e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006490:	e02c      	b.n	80064ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006498:	d028      	beq.n	80064ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80064a0:	f7fc ff10 	bl	80032c4 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d21d      	bcs.n	80064ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695a      	ldr	r2, [r3, #20]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0201 	bic.w	r2, r2, #1
 80064ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e00f      	b.n	800650c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	4013      	ands	r3, r2
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	bf0c      	ite	eq
 80064fc:	2301      	moveq	r3, #1
 80064fe:	2300      	movne	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	429a      	cmp	r2, r3
 8006508:	d0c3      	beq.n	8006492 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006556:	f023 030c 	bic.w	r3, r3, #12
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	68f9      	ldr	r1, [r7, #12]
 8006560:	430b      	orrs	r3, r1
 8006562:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006582:	f040 818b 	bne.w	800689c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4ac1      	ldr	r2, [pc, #772]	; (8006890 <UART_SetConfig+0x37c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d005      	beq.n	800659c <UART_SetConfig+0x88>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4abf      	ldr	r2, [pc, #764]	; (8006894 <UART_SetConfig+0x380>)
 8006596:	4293      	cmp	r3, r2
 8006598:	f040 80bd 	bne.w	8006716 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800659c:	f7fe fd76 	bl	800508c <HAL_RCC_GetPCLK2Freq>
 80065a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	461d      	mov	r5, r3
 80065a6:	f04f 0600 	mov.w	r6, #0
 80065aa:	46a8      	mov	r8, r5
 80065ac:	46b1      	mov	r9, r6
 80065ae:	eb18 0308 	adds.w	r3, r8, r8
 80065b2:	eb49 0409 	adc.w	r4, r9, r9
 80065b6:	4698      	mov	r8, r3
 80065b8:	46a1      	mov	r9, r4
 80065ba:	eb18 0805 	adds.w	r8, r8, r5
 80065be:	eb49 0906 	adc.w	r9, r9, r6
 80065c2:	f04f 0100 	mov.w	r1, #0
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065d6:	4688      	mov	r8, r1
 80065d8:	4691      	mov	r9, r2
 80065da:	eb18 0005 	adds.w	r0, r8, r5
 80065de:	eb49 0106 	adc.w	r1, r9, r6
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	461d      	mov	r5, r3
 80065e8:	f04f 0600 	mov.w	r6, #0
 80065ec:	196b      	adds	r3, r5, r5
 80065ee:	eb46 0406 	adc.w	r4, r6, r6
 80065f2:	461a      	mov	r2, r3
 80065f4:	4623      	mov	r3, r4
 80065f6:	f7fa fadf 	bl	8000bb8 <__aeabi_uldivmod>
 80065fa:	4603      	mov	r3, r0
 80065fc:	460c      	mov	r4, r1
 80065fe:	461a      	mov	r2, r3
 8006600:	4ba5      	ldr	r3, [pc, #660]	; (8006898 <UART_SetConfig+0x384>)
 8006602:	fba3 2302 	umull	r2, r3, r3, r2
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	461d      	mov	r5, r3
 8006610:	f04f 0600 	mov.w	r6, #0
 8006614:	46a9      	mov	r9, r5
 8006616:	46b2      	mov	sl, r6
 8006618:	eb19 0309 	adds.w	r3, r9, r9
 800661c:	eb4a 040a 	adc.w	r4, sl, sl
 8006620:	4699      	mov	r9, r3
 8006622:	46a2      	mov	sl, r4
 8006624:	eb19 0905 	adds.w	r9, r9, r5
 8006628:	eb4a 0a06 	adc.w	sl, sl, r6
 800662c:	f04f 0100 	mov.w	r1, #0
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006638:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800663c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006640:	4689      	mov	r9, r1
 8006642:	4692      	mov	sl, r2
 8006644:	eb19 0005 	adds.w	r0, r9, r5
 8006648:	eb4a 0106 	adc.w	r1, sl, r6
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	461d      	mov	r5, r3
 8006652:	f04f 0600 	mov.w	r6, #0
 8006656:	196b      	adds	r3, r5, r5
 8006658:	eb46 0406 	adc.w	r4, r6, r6
 800665c:	461a      	mov	r2, r3
 800665e:	4623      	mov	r3, r4
 8006660:	f7fa faaa 	bl	8000bb8 <__aeabi_uldivmod>
 8006664:	4603      	mov	r3, r0
 8006666:	460c      	mov	r4, r1
 8006668:	461a      	mov	r2, r3
 800666a:	4b8b      	ldr	r3, [pc, #556]	; (8006898 <UART_SetConfig+0x384>)
 800666c:	fba3 1302 	umull	r1, r3, r3, r2
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	2164      	movs	r1, #100	; 0x64
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	3332      	adds	r3, #50	; 0x32
 800667e:	4a86      	ldr	r2, [pc, #536]	; (8006898 <UART_SetConfig+0x384>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800668c:	4498      	add	r8, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	461d      	mov	r5, r3
 8006692:	f04f 0600 	mov.w	r6, #0
 8006696:	46a9      	mov	r9, r5
 8006698:	46b2      	mov	sl, r6
 800669a:	eb19 0309 	adds.w	r3, r9, r9
 800669e:	eb4a 040a 	adc.w	r4, sl, sl
 80066a2:	4699      	mov	r9, r3
 80066a4:	46a2      	mov	sl, r4
 80066a6:	eb19 0905 	adds.w	r9, r9, r5
 80066aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80066ae:	f04f 0100 	mov.w	r1, #0
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066c2:	4689      	mov	r9, r1
 80066c4:	4692      	mov	sl, r2
 80066c6:	eb19 0005 	adds.w	r0, r9, r5
 80066ca:	eb4a 0106 	adc.w	r1, sl, r6
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	461d      	mov	r5, r3
 80066d4:	f04f 0600 	mov.w	r6, #0
 80066d8:	196b      	adds	r3, r5, r5
 80066da:	eb46 0406 	adc.w	r4, r6, r6
 80066de:	461a      	mov	r2, r3
 80066e0:	4623      	mov	r3, r4
 80066e2:	f7fa fa69 	bl	8000bb8 <__aeabi_uldivmod>
 80066e6:	4603      	mov	r3, r0
 80066e8:	460c      	mov	r4, r1
 80066ea:	461a      	mov	r2, r3
 80066ec:	4b6a      	ldr	r3, [pc, #424]	; (8006898 <UART_SetConfig+0x384>)
 80066ee:	fba3 1302 	umull	r1, r3, r3, r2
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	2164      	movs	r1, #100	; 0x64
 80066f6:	fb01 f303 	mul.w	r3, r1, r3
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	3332      	adds	r3, #50	; 0x32
 8006700:	4a65      	ldr	r2, [pc, #404]	; (8006898 <UART_SetConfig+0x384>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	f003 0207 	and.w	r2, r3, #7
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4442      	add	r2, r8
 8006712:	609a      	str	r2, [r3, #8]
 8006714:	e26f      	b.n	8006bf6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006716:	f7fe fca5 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 800671a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	461d      	mov	r5, r3
 8006720:	f04f 0600 	mov.w	r6, #0
 8006724:	46a8      	mov	r8, r5
 8006726:	46b1      	mov	r9, r6
 8006728:	eb18 0308 	adds.w	r3, r8, r8
 800672c:	eb49 0409 	adc.w	r4, r9, r9
 8006730:	4698      	mov	r8, r3
 8006732:	46a1      	mov	r9, r4
 8006734:	eb18 0805 	adds.w	r8, r8, r5
 8006738:	eb49 0906 	adc.w	r9, r9, r6
 800673c:	f04f 0100 	mov.w	r1, #0
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006748:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800674c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006750:	4688      	mov	r8, r1
 8006752:	4691      	mov	r9, r2
 8006754:	eb18 0005 	adds.w	r0, r8, r5
 8006758:	eb49 0106 	adc.w	r1, r9, r6
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	461d      	mov	r5, r3
 8006762:	f04f 0600 	mov.w	r6, #0
 8006766:	196b      	adds	r3, r5, r5
 8006768:	eb46 0406 	adc.w	r4, r6, r6
 800676c:	461a      	mov	r2, r3
 800676e:	4623      	mov	r3, r4
 8006770:	f7fa fa22 	bl	8000bb8 <__aeabi_uldivmod>
 8006774:	4603      	mov	r3, r0
 8006776:	460c      	mov	r4, r1
 8006778:	461a      	mov	r2, r3
 800677a:	4b47      	ldr	r3, [pc, #284]	; (8006898 <UART_SetConfig+0x384>)
 800677c:	fba3 2302 	umull	r2, r3, r3, r2
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	461d      	mov	r5, r3
 800678a:	f04f 0600 	mov.w	r6, #0
 800678e:	46a9      	mov	r9, r5
 8006790:	46b2      	mov	sl, r6
 8006792:	eb19 0309 	adds.w	r3, r9, r9
 8006796:	eb4a 040a 	adc.w	r4, sl, sl
 800679a:	4699      	mov	r9, r3
 800679c:	46a2      	mov	sl, r4
 800679e:	eb19 0905 	adds.w	r9, r9, r5
 80067a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80067a6:	f04f 0100 	mov.w	r1, #0
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067ba:	4689      	mov	r9, r1
 80067bc:	4692      	mov	sl, r2
 80067be:	eb19 0005 	adds.w	r0, r9, r5
 80067c2:	eb4a 0106 	adc.w	r1, sl, r6
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	461d      	mov	r5, r3
 80067cc:	f04f 0600 	mov.w	r6, #0
 80067d0:	196b      	adds	r3, r5, r5
 80067d2:	eb46 0406 	adc.w	r4, r6, r6
 80067d6:	461a      	mov	r2, r3
 80067d8:	4623      	mov	r3, r4
 80067da:	f7fa f9ed 	bl	8000bb8 <__aeabi_uldivmod>
 80067de:	4603      	mov	r3, r0
 80067e0:	460c      	mov	r4, r1
 80067e2:	461a      	mov	r2, r3
 80067e4:	4b2c      	ldr	r3, [pc, #176]	; (8006898 <UART_SetConfig+0x384>)
 80067e6:	fba3 1302 	umull	r1, r3, r3, r2
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	2164      	movs	r1, #100	; 0x64
 80067ee:	fb01 f303 	mul.w	r3, r1, r3
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	3332      	adds	r3, #50	; 0x32
 80067f8:	4a27      	ldr	r2, [pc, #156]	; (8006898 <UART_SetConfig+0x384>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006806:	4498      	add	r8, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	461d      	mov	r5, r3
 800680c:	f04f 0600 	mov.w	r6, #0
 8006810:	46a9      	mov	r9, r5
 8006812:	46b2      	mov	sl, r6
 8006814:	eb19 0309 	adds.w	r3, r9, r9
 8006818:	eb4a 040a 	adc.w	r4, sl, sl
 800681c:	4699      	mov	r9, r3
 800681e:	46a2      	mov	sl, r4
 8006820:	eb19 0905 	adds.w	r9, r9, r5
 8006824:	eb4a 0a06 	adc.w	sl, sl, r6
 8006828:	f04f 0100 	mov.w	r1, #0
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006834:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006838:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800683c:	4689      	mov	r9, r1
 800683e:	4692      	mov	sl, r2
 8006840:	eb19 0005 	adds.w	r0, r9, r5
 8006844:	eb4a 0106 	adc.w	r1, sl, r6
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	461d      	mov	r5, r3
 800684e:	f04f 0600 	mov.w	r6, #0
 8006852:	196b      	adds	r3, r5, r5
 8006854:	eb46 0406 	adc.w	r4, r6, r6
 8006858:	461a      	mov	r2, r3
 800685a:	4623      	mov	r3, r4
 800685c:	f7fa f9ac 	bl	8000bb8 <__aeabi_uldivmod>
 8006860:	4603      	mov	r3, r0
 8006862:	460c      	mov	r4, r1
 8006864:	461a      	mov	r2, r3
 8006866:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <UART_SetConfig+0x384>)
 8006868:	fba3 1302 	umull	r1, r3, r3, r2
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	2164      	movs	r1, #100	; 0x64
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	3332      	adds	r3, #50	; 0x32
 800687a:	4a07      	ldr	r2, [pc, #28]	; (8006898 <UART_SetConfig+0x384>)
 800687c:	fba2 2303 	umull	r2, r3, r2, r3
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	f003 0207 	and.w	r2, r3, #7
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4442      	add	r2, r8
 800688c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800688e:	e1b2      	b.n	8006bf6 <UART_SetConfig+0x6e2>
 8006890:	40011000 	.word	0x40011000
 8006894:	40011400 	.word	0x40011400
 8006898:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4ad7      	ldr	r2, [pc, #860]	; (8006c00 <UART_SetConfig+0x6ec>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d005      	beq.n	80068b2 <UART_SetConfig+0x39e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4ad6      	ldr	r2, [pc, #856]	; (8006c04 <UART_SetConfig+0x6f0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	f040 80d1 	bne.w	8006a54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80068b2:	f7fe fbeb 	bl	800508c <HAL_RCC_GetPCLK2Freq>
 80068b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	469a      	mov	sl, r3
 80068bc:	f04f 0b00 	mov.w	fp, #0
 80068c0:	46d0      	mov	r8, sl
 80068c2:	46d9      	mov	r9, fp
 80068c4:	eb18 0308 	adds.w	r3, r8, r8
 80068c8:	eb49 0409 	adc.w	r4, r9, r9
 80068cc:	4698      	mov	r8, r3
 80068ce:	46a1      	mov	r9, r4
 80068d0:	eb18 080a 	adds.w	r8, r8, sl
 80068d4:	eb49 090b 	adc.w	r9, r9, fp
 80068d8:	f04f 0100 	mov.w	r1, #0
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068ec:	4688      	mov	r8, r1
 80068ee:	4691      	mov	r9, r2
 80068f0:	eb1a 0508 	adds.w	r5, sl, r8
 80068f4:	eb4b 0609 	adc.w	r6, fp, r9
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4619      	mov	r1, r3
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	f04f 0400 	mov.w	r4, #0
 800690a:	0094      	lsls	r4, r2, #2
 800690c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006910:	008b      	lsls	r3, r1, #2
 8006912:	461a      	mov	r2, r3
 8006914:	4623      	mov	r3, r4
 8006916:	4628      	mov	r0, r5
 8006918:	4631      	mov	r1, r6
 800691a:	f7fa f94d 	bl	8000bb8 <__aeabi_uldivmod>
 800691e:	4603      	mov	r3, r0
 8006920:	460c      	mov	r4, r1
 8006922:	461a      	mov	r2, r3
 8006924:	4bb8      	ldr	r3, [pc, #736]	; (8006c08 <UART_SetConfig+0x6f4>)
 8006926:	fba3 2302 	umull	r2, r3, r3, r2
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	469b      	mov	fp, r3
 8006934:	f04f 0c00 	mov.w	ip, #0
 8006938:	46d9      	mov	r9, fp
 800693a:	46e2      	mov	sl, ip
 800693c:	eb19 0309 	adds.w	r3, r9, r9
 8006940:	eb4a 040a 	adc.w	r4, sl, sl
 8006944:	4699      	mov	r9, r3
 8006946:	46a2      	mov	sl, r4
 8006948:	eb19 090b 	adds.w	r9, r9, fp
 800694c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006950:	f04f 0100 	mov.w	r1, #0
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800695c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006964:	4689      	mov	r9, r1
 8006966:	4692      	mov	sl, r2
 8006968:	eb1b 0509 	adds.w	r5, fp, r9
 800696c:	eb4c 060a 	adc.w	r6, ip, sl
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	4619      	mov	r1, r3
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	f04f 0400 	mov.w	r4, #0
 8006982:	0094      	lsls	r4, r2, #2
 8006984:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006988:	008b      	lsls	r3, r1, #2
 800698a:	461a      	mov	r2, r3
 800698c:	4623      	mov	r3, r4
 800698e:	4628      	mov	r0, r5
 8006990:	4631      	mov	r1, r6
 8006992:	f7fa f911 	bl	8000bb8 <__aeabi_uldivmod>
 8006996:	4603      	mov	r3, r0
 8006998:	460c      	mov	r4, r1
 800699a:	461a      	mov	r2, r3
 800699c:	4b9a      	ldr	r3, [pc, #616]	; (8006c08 <UART_SetConfig+0x6f4>)
 800699e:	fba3 1302 	umull	r1, r3, r3, r2
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	2164      	movs	r1, #100	; 0x64
 80069a6:	fb01 f303 	mul.w	r3, r1, r3
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	3332      	adds	r3, #50	; 0x32
 80069b0:	4a95      	ldr	r2, [pc, #596]	; (8006c08 <UART_SetConfig+0x6f4>)
 80069b2:	fba2 2303 	umull	r2, r3, r2, r3
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069bc:	4498      	add	r8, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	469b      	mov	fp, r3
 80069c2:	f04f 0c00 	mov.w	ip, #0
 80069c6:	46d9      	mov	r9, fp
 80069c8:	46e2      	mov	sl, ip
 80069ca:	eb19 0309 	adds.w	r3, r9, r9
 80069ce:	eb4a 040a 	adc.w	r4, sl, sl
 80069d2:	4699      	mov	r9, r3
 80069d4:	46a2      	mov	sl, r4
 80069d6:	eb19 090b 	adds.w	r9, r9, fp
 80069da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069de:	f04f 0100 	mov.w	r1, #0
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069f2:	4689      	mov	r9, r1
 80069f4:	4692      	mov	sl, r2
 80069f6:	eb1b 0509 	adds.w	r5, fp, r9
 80069fa:	eb4c 060a 	adc.w	r6, ip, sl
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4619      	mov	r1, r3
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	f04f 0400 	mov.w	r4, #0
 8006a10:	0094      	lsls	r4, r2, #2
 8006a12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a16:	008b      	lsls	r3, r1, #2
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4623      	mov	r3, r4
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	4631      	mov	r1, r6
 8006a20:	f7fa f8ca 	bl	8000bb8 <__aeabi_uldivmod>
 8006a24:	4603      	mov	r3, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4b77      	ldr	r3, [pc, #476]	; (8006c08 <UART_SetConfig+0x6f4>)
 8006a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a30:	095b      	lsrs	r3, r3, #5
 8006a32:	2164      	movs	r1, #100	; 0x64
 8006a34:	fb01 f303 	mul.w	r3, r1, r3
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	3332      	adds	r3, #50	; 0x32
 8006a3e:	4a72      	ldr	r2, [pc, #456]	; (8006c08 <UART_SetConfig+0x6f4>)
 8006a40:	fba2 2303 	umull	r2, r3, r2, r3
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	f003 020f 	and.w	r2, r3, #15
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4442      	add	r2, r8
 8006a50:	609a      	str	r2, [r3, #8]
 8006a52:	e0d0      	b.n	8006bf6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a54:	f7fe fb06 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 8006a58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	469a      	mov	sl, r3
 8006a5e:	f04f 0b00 	mov.w	fp, #0
 8006a62:	46d0      	mov	r8, sl
 8006a64:	46d9      	mov	r9, fp
 8006a66:	eb18 0308 	adds.w	r3, r8, r8
 8006a6a:	eb49 0409 	adc.w	r4, r9, r9
 8006a6e:	4698      	mov	r8, r3
 8006a70:	46a1      	mov	r9, r4
 8006a72:	eb18 080a 	adds.w	r8, r8, sl
 8006a76:	eb49 090b 	adc.w	r9, r9, fp
 8006a7a:	f04f 0100 	mov.w	r1, #0
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a8e:	4688      	mov	r8, r1
 8006a90:	4691      	mov	r9, r2
 8006a92:	eb1a 0508 	adds.w	r5, sl, r8
 8006a96:	eb4b 0609 	adc.w	r6, fp, r9
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	f04f 0400 	mov.w	r4, #0
 8006aac:	0094      	lsls	r4, r2, #2
 8006aae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ab2:	008b      	lsls	r3, r1, #2
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4623      	mov	r3, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	4631      	mov	r1, r6
 8006abc:	f7fa f87c 	bl	8000bb8 <__aeabi_uldivmod>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4b50      	ldr	r3, [pc, #320]	; (8006c08 <UART_SetConfig+0x6f4>)
 8006ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	469b      	mov	fp, r3
 8006ad6:	f04f 0c00 	mov.w	ip, #0
 8006ada:	46d9      	mov	r9, fp
 8006adc:	46e2      	mov	sl, ip
 8006ade:	eb19 0309 	adds.w	r3, r9, r9
 8006ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8006ae6:	4699      	mov	r9, r3
 8006ae8:	46a2      	mov	sl, r4
 8006aea:	eb19 090b 	adds.w	r9, r9, fp
 8006aee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006af2:	f04f 0100 	mov.w	r1, #0
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b06:	4689      	mov	r9, r1
 8006b08:	4692      	mov	sl, r2
 8006b0a:	eb1b 0509 	adds.w	r5, fp, r9
 8006b0e:	eb4c 060a 	adc.w	r6, ip, sl
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	4619      	mov	r1, r3
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	f04f 0400 	mov.w	r4, #0
 8006b24:	0094      	lsls	r4, r2, #2
 8006b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b2a:	008b      	lsls	r3, r1, #2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4623      	mov	r3, r4
 8006b30:	4628      	mov	r0, r5
 8006b32:	4631      	mov	r1, r6
 8006b34:	f7fa f840 	bl	8000bb8 <__aeabi_uldivmod>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4b32      	ldr	r3, [pc, #200]	; (8006c08 <UART_SetConfig+0x6f4>)
 8006b40:	fba3 1302 	umull	r1, r3, r3, r2
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	2164      	movs	r1, #100	; 0x64
 8006b48:	fb01 f303 	mul.w	r3, r1, r3
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	3332      	adds	r3, #50	; 0x32
 8006b52:	4a2d      	ldr	r2, [pc, #180]	; (8006c08 <UART_SetConfig+0x6f4>)
 8006b54:	fba2 2303 	umull	r2, r3, r2, r3
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b5e:	4498      	add	r8, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	469b      	mov	fp, r3
 8006b64:	f04f 0c00 	mov.w	ip, #0
 8006b68:	46d9      	mov	r9, fp
 8006b6a:	46e2      	mov	sl, ip
 8006b6c:	eb19 0309 	adds.w	r3, r9, r9
 8006b70:	eb4a 040a 	adc.w	r4, sl, sl
 8006b74:	4699      	mov	r9, r3
 8006b76:	46a2      	mov	sl, r4
 8006b78:	eb19 090b 	adds.w	r9, r9, fp
 8006b7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b80:	f04f 0100 	mov.w	r1, #0
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b94:	4689      	mov	r9, r1
 8006b96:	4692      	mov	sl, r2
 8006b98:	eb1b 0509 	adds.w	r5, fp, r9
 8006b9c:	eb4c 060a 	adc.w	r6, ip, sl
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	f04f 0400 	mov.w	r4, #0
 8006bb2:	0094      	lsls	r4, r2, #2
 8006bb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bb8:	008b      	lsls	r3, r1, #2
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4623      	mov	r3, r4
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	f7f9 fff9 	bl	8000bb8 <__aeabi_uldivmod>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	460c      	mov	r4, r1
 8006bca:	461a      	mov	r2, r3
 8006bcc:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <UART_SetConfig+0x6f4>)
 8006bce:	fba3 1302 	umull	r1, r3, r3, r2
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	2164      	movs	r1, #100	; 0x64
 8006bd6:	fb01 f303 	mul.w	r3, r1, r3
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	3332      	adds	r3, #50	; 0x32
 8006be0:	4a09      	ldr	r2, [pc, #36]	; (8006c08 <UART_SetConfig+0x6f4>)
 8006be2:	fba2 2303 	umull	r2, r3, r2, r3
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	f003 020f 	and.w	r2, r3, #15
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4442      	add	r2, r8
 8006bf2:	609a      	str	r2, [r3, #8]
}
 8006bf4:	e7ff      	b.n	8006bf6 <UART_SetConfig+0x6e2>
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c00:	40011000 	.word	0x40011000
 8006c04:	40011400 	.word	0x40011400
 8006c08:	51eb851f 	.word	0x51eb851f

08006c0c <calloc>:
 8006c0c:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <calloc+0xc>)
 8006c0e:	460a      	mov	r2, r1
 8006c10:	4601      	mov	r1, r0
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	f000 b83c 	b.w	8006c90 <_calloc_r>
 8006c18:	2000006c 	.word	0x2000006c

08006c1c <__errno>:
 8006c1c:	4b01      	ldr	r3, [pc, #4]	; (8006c24 <__errno+0x8>)
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	2000006c 	.word	0x2000006c

08006c28 <__libc_init_array>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	4e0d      	ldr	r6, [pc, #52]	; (8006c60 <__libc_init_array+0x38>)
 8006c2c:	4c0d      	ldr	r4, [pc, #52]	; (8006c64 <__libc_init_array+0x3c>)
 8006c2e:	1ba4      	subs	r4, r4, r6
 8006c30:	10a4      	asrs	r4, r4, #2
 8006c32:	2500      	movs	r5, #0
 8006c34:	42a5      	cmp	r5, r4
 8006c36:	d109      	bne.n	8006c4c <__libc_init_array+0x24>
 8006c38:	4e0b      	ldr	r6, [pc, #44]	; (8006c68 <__libc_init_array+0x40>)
 8006c3a:	4c0c      	ldr	r4, [pc, #48]	; (8006c6c <__libc_init_array+0x44>)
 8006c3c:	f002 f85e 	bl	8008cfc <_init>
 8006c40:	1ba4      	subs	r4, r4, r6
 8006c42:	10a4      	asrs	r4, r4, #2
 8006c44:	2500      	movs	r5, #0
 8006c46:	42a5      	cmp	r5, r4
 8006c48:	d105      	bne.n	8006c56 <__libc_init_array+0x2e>
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c50:	4798      	blx	r3
 8006c52:	3501      	adds	r5, #1
 8006c54:	e7ee      	b.n	8006c34 <__libc_init_array+0xc>
 8006c56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c5a:	4798      	blx	r3
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	e7f2      	b.n	8006c46 <__libc_init_array+0x1e>
 8006c60:	0800a650 	.word	0x0800a650
 8006c64:	0800a650 	.word	0x0800a650
 8006c68:	0800a650 	.word	0x0800a650
 8006c6c:	0800a654 	.word	0x0800a654

08006c70 <malloc>:
 8006c70:	4b02      	ldr	r3, [pc, #8]	; (8006c7c <malloc+0xc>)
 8006c72:	4601      	mov	r1, r0
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f000 b867 	b.w	8006d48 <_malloc_r>
 8006c7a:	bf00      	nop
 8006c7c:	2000006c 	.word	0x2000006c

08006c80 <memset>:
 8006c80:	4402      	add	r2, r0
 8006c82:	4603      	mov	r3, r0
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d100      	bne.n	8006c8a <memset+0xa>
 8006c88:	4770      	bx	lr
 8006c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c8e:	e7f9      	b.n	8006c84 <memset+0x4>

08006c90 <_calloc_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	fb02 f401 	mul.w	r4, r2, r1
 8006c96:	4621      	mov	r1, r4
 8006c98:	f000 f856 	bl	8006d48 <_malloc_r>
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	b118      	cbz	r0, 8006ca8 <_calloc_r+0x18>
 8006ca0:	4622      	mov	r2, r4
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	f7ff ffec 	bl	8006c80 <memset>
 8006ca8:	4628      	mov	r0, r5
 8006caa:	bd38      	pop	{r3, r4, r5, pc}

08006cac <_free_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4605      	mov	r5, r0
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	d045      	beq.n	8006d40 <_free_r+0x94>
 8006cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cb8:	1f0c      	subs	r4, r1, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	bfb8      	it	lt
 8006cbe:	18e4      	addlt	r4, r4, r3
 8006cc0:	f001 fb87 	bl	80083d2 <__malloc_lock>
 8006cc4:	4a1f      	ldr	r2, [pc, #124]	; (8006d44 <_free_r+0x98>)
 8006cc6:	6813      	ldr	r3, [r2, #0]
 8006cc8:	4610      	mov	r0, r2
 8006cca:	b933      	cbnz	r3, 8006cda <_free_r+0x2e>
 8006ccc:	6063      	str	r3, [r4, #4]
 8006cce:	6014      	str	r4, [r2, #0]
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cd6:	f001 bb7d 	b.w	80083d4 <__malloc_unlock>
 8006cda:	42a3      	cmp	r3, r4
 8006cdc:	d90c      	bls.n	8006cf8 <_free_r+0x4c>
 8006cde:	6821      	ldr	r1, [r4, #0]
 8006ce0:	1862      	adds	r2, r4, r1
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	bf04      	itt	eq
 8006ce6:	681a      	ldreq	r2, [r3, #0]
 8006ce8:	685b      	ldreq	r3, [r3, #4]
 8006cea:	6063      	str	r3, [r4, #4]
 8006cec:	bf04      	itt	eq
 8006cee:	1852      	addeq	r2, r2, r1
 8006cf0:	6022      	streq	r2, [r4, #0]
 8006cf2:	6004      	str	r4, [r0, #0]
 8006cf4:	e7ec      	b.n	8006cd0 <_free_r+0x24>
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	b10a      	cbz	r2, 8006d00 <_free_r+0x54>
 8006cfc:	42a2      	cmp	r2, r4
 8006cfe:	d9fa      	bls.n	8006cf6 <_free_r+0x4a>
 8006d00:	6819      	ldr	r1, [r3, #0]
 8006d02:	1858      	adds	r0, r3, r1
 8006d04:	42a0      	cmp	r0, r4
 8006d06:	d10b      	bne.n	8006d20 <_free_r+0x74>
 8006d08:	6820      	ldr	r0, [r4, #0]
 8006d0a:	4401      	add	r1, r0
 8006d0c:	1858      	adds	r0, r3, r1
 8006d0e:	4282      	cmp	r2, r0
 8006d10:	6019      	str	r1, [r3, #0]
 8006d12:	d1dd      	bne.n	8006cd0 <_free_r+0x24>
 8006d14:	6810      	ldr	r0, [r2, #0]
 8006d16:	6852      	ldr	r2, [r2, #4]
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	4401      	add	r1, r0
 8006d1c:	6019      	str	r1, [r3, #0]
 8006d1e:	e7d7      	b.n	8006cd0 <_free_r+0x24>
 8006d20:	d902      	bls.n	8006d28 <_free_r+0x7c>
 8006d22:	230c      	movs	r3, #12
 8006d24:	602b      	str	r3, [r5, #0]
 8006d26:	e7d3      	b.n	8006cd0 <_free_r+0x24>
 8006d28:	6820      	ldr	r0, [r4, #0]
 8006d2a:	1821      	adds	r1, r4, r0
 8006d2c:	428a      	cmp	r2, r1
 8006d2e:	bf04      	itt	eq
 8006d30:	6811      	ldreq	r1, [r2, #0]
 8006d32:	6852      	ldreq	r2, [r2, #4]
 8006d34:	6062      	str	r2, [r4, #4]
 8006d36:	bf04      	itt	eq
 8006d38:	1809      	addeq	r1, r1, r0
 8006d3a:	6021      	streq	r1, [r4, #0]
 8006d3c:	605c      	str	r4, [r3, #4]
 8006d3e:	e7c7      	b.n	8006cd0 <_free_r+0x24>
 8006d40:	bd38      	pop	{r3, r4, r5, pc}
 8006d42:	bf00      	nop
 8006d44:	20000268 	.word	0x20000268

08006d48 <_malloc_r>:
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	1ccd      	adds	r5, r1, #3
 8006d4c:	f025 0503 	bic.w	r5, r5, #3
 8006d50:	3508      	adds	r5, #8
 8006d52:	2d0c      	cmp	r5, #12
 8006d54:	bf38      	it	cc
 8006d56:	250c      	movcc	r5, #12
 8006d58:	2d00      	cmp	r5, #0
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	db01      	blt.n	8006d62 <_malloc_r+0x1a>
 8006d5e:	42a9      	cmp	r1, r5
 8006d60:	d903      	bls.n	8006d6a <_malloc_r+0x22>
 8006d62:	230c      	movs	r3, #12
 8006d64:	6033      	str	r3, [r6, #0]
 8006d66:	2000      	movs	r0, #0
 8006d68:	bd70      	pop	{r4, r5, r6, pc}
 8006d6a:	f001 fb32 	bl	80083d2 <__malloc_lock>
 8006d6e:	4a21      	ldr	r2, [pc, #132]	; (8006df4 <_malloc_r+0xac>)
 8006d70:	6814      	ldr	r4, [r2, #0]
 8006d72:	4621      	mov	r1, r4
 8006d74:	b991      	cbnz	r1, 8006d9c <_malloc_r+0x54>
 8006d76:	4c20      	ldr	r4, [pc, #128]	; (8006df8 <_malloc_r+0xb0>)
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	b91b      	cbnz	r3, 8006d84 <_malloc_r+0x3c>
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f000 fc99 	bl	80076b4 <_sbrk_r>
 8006d82:	6020      	str	r0, [r4, #0]
 8006d84:	4629      	mov	r1, r5
 8006d86:	4630      	mov	r0, r6
 8006d88:	f000 fc94 	bl	80076b4 <_sbrk_r>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d124      	bne.n	8006dda <_malloc_r+0x92>
 8006d90:	230c      	movs	r3, #12
 8006d92:	6033      	str	r3, [r6, #0]
 8006d94:	4630      	mov	r0, r6
 8006d96:	f001 fb1d 	bl	80083d4 <__malloc_unlock>
 8006d9a:	e7e4      	b.n	8006d66 <_malloc_r+0x1e>
 8006d9c:	680b      	ldr	r3, [r1, #0]
 8006d9e:	1b5b      	subs	r3, r3, r5
 8006da0:	d418      	bmi.n	8006dd4 <_malloc_r+0x8c>
 8006da2:	2b0b      	cmp	r3, #11
 8006da4:	d90f      	bls.n	8006dc6 <_malloc_r+0x7e>
 8006da6:	600b      	str	r3, [r1, #0]
 8006da8:	50cd      	str	r5, [r1, r3]
 8006daa:	18cc      	adds	r4, r1, r3
 8006dac:	4630      	mov	r0, r6
 8006dae:	f001 fb11 	bl	80083d4 <__malloc_unlock>
 8006db2:	f104 000b 	add.w	r0, r4, #11
 8006db6:	1d23      	adds	r3, r4, #4
 8006db8:	f020 0007 	bic.w	r0, r0, #7
 8006dbc:	1ac3      	subs	r3, r0, r3
 8006dbe:	d0d3      	beq.n	8006d68 <_malloc_r+0x20>
 8006dc0:	425a      	negs	r2, r3
 8006dc2:	50e2      	str	r2, [r4, r3]
 8006dc4:	e7d0      	b.n	8006d68 <_malloc_r+0x20>
 8006dc6:	428c      	cmp	r4, r1
 8006dc8:	684b      	ldr	r3, [r1, #4]
 8006dca:	bf16      	itet	ne
 8006dcc:	6063      	strne	r3, [r4, #4]
 8006dce:	6013      	streq	r3, [r2, #0]
 8006dd0:	460c      	movne	r4, r1
 8006dd2:	e7eb      	b.n	8006dac <_malloc_r+0x64>
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	6849      	ldr	r1, [r1, #4]
 8006dd8:	e7cc      	b.n	8006d74 <_malloc_r+0x2c>
 8006dda:	1cc4      	adds	r4, r0, #3
 8006ddc:	f024 0403 	bic.w	r4, r4, #3
 8006de0:	42a0      	cmp	r0, r4
 8006de2:	d005      	beq.n	8006df0 <_malloc_r+0xa8>
 8006de4:	1a21      	subs	r1, r4, r0
 8006de6:	4630      	mov	r0, r6
 8006de8:	f000 fc64 	bl	80076b4 <_sbrk_r>
 8006dec:	3001      	adds	r0, #1
 8006dee:	d0cf      	beq.n	8006d90 <_malloc_r+0x48>
 8006df0:	6025      	str	r5, [r4, #0]
 8006df2:	e7db      	b.n	8006dac <_malloc_r+0x64>
 8006df4:	20000268 	.word	0x20000268
 8006df8:	2000026c 	.word	0x2000026c

08006dfc <__cvt>:
 8006dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e00:	ec55 4b10 	vmov	r4, r5, d0
 8006e04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006e06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e0a:	2d00      	cmp	r5, #0
 8006e0c:	460e      	mov	r6, r1
 8006e0e:	4691      	mov	r9, r2
 8006e10:	4619      	mov	r1, r3
 8006e12:	bfb8      	it	lt
 8006e14:	4622      	movlt	r2, r4
 8006e16:	462b      	mov	r3, r5
 8006e18:	f027 0720 	bic.w	r7, r7, #32
 8006e1c:	bfbb      	ittet	lt
 8006e1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e22:	461d      	movlt	r5, r3
 8006e24:	2300      	movge	r3, #0
 8006e26:	232d      	movlt	r3, #45	; 0x2d
 8006e28:	bfb8      	it	lt
 8006e2a:	4614      	movlt	r4, r2
 8006e2c:	2f46      	cmp	r7, #70	; 0x46
 8006e2e:	700b      	strb	r3, [r1, #0]
 8006e30:	d004      	beq.n	8006e3c <__cvt+0x40>
 8006e32:	2f45      	cmp	r7, #69	; 0x45
 8006e34:	d100      	bne.n	8006e38 <__cvt+0x3c>
 8006e36:	3601      	adds	r6, #1
 8006e38:	2102      	movs	r1, #2
 8006e3a:	e000      	b.n	8006e3e <__cvt+0x42>
 8006e3c:	2103      	movs	r1, #3
 8006e3e:	ab03      	add	r3, sp, #12
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	ab02      	add	r3, sp, #8
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	4632      	mov	r2, r6
 8006e48:	4653      	mov	r3, sl
 8006e4a:	ec45 4b10 	vmov	d0, r4, r5
 8006e4e:	f000 fcef 	bl	8007830 <_dtoa_r>
 8006e52:	2f47      	cmp	r7, #71	; 0x47
 8006e54:	4680      	mov	r8, r0
 8006e56:	d102      	bne.n	8006e5e <__cvt+0x62>
 8006e58:	f019 0f01 	tst.w	r9, #1
 8006e5c:	d026      	beq.n	8006eac <__cvt+0xb0>
 8006e5e:	2f46      	cmp	r7, #70	; 0x46
 8006e60:	eb08 0906 	add.w	r9, r8, r6
 8006e64:	d111      	bne.n	8006e8a <__cvt+0x8e>
 8006e66:	f898 3000 	ldrb.w	r3, [r8]
 8006e6a:	2b30      	cmp	r3, #48	; 0x30
 8006e6c:	d10a      	bne.n	8006e84 <__cvt+0x88>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2300      	movs	r3, #0
 8006e72:	4620      	mov	r0, r4
 8006e74:	4629      	mov	r1, r5
 8006e76:	f7f9 fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e7a:	b918      	cbnz	r0, 8006e84 <__cvt+0x88>
 8006e7c:	f1c6 0601 	rsb	r6, r6, #1
 8006e80:	f8ca 6000 	str.w	r6, [sl]
 8006e84:	f8da 3000 	ldr.w	r3, [sl]
 8006e88:	4499      	add	r9, r3
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4620      	mov	r0, r4
 8006e90:	4629      	mov	r1, r5
 8006e92:	f7f9 fe21 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e96:	b938      	cbnz	r0, 8006ea8 <__cvt+0xac>
 8006e98:	2230      	movs	r2, #48	; 0x30
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	454b      	cmp	r3, r9
 8006e9e:	d205      	bcs.n	8006eac <__cvt+0xb0>
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	9103      	str	r1, [sp, #12]
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e7f8      	b.n	8006e9a <__cvt+0x9e>
 8006ea8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eb0:	eba3 0308 	sub.w	r3, r3, r8
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	b004      	add	sp, #16
 8006eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006ebe <__exponent>:
 8006ebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	bfba      	itte	lt
 8006ec6:	4249      	neglt	r1, r1
 8006ec8:	232d      	movlt	r3, #45	; 0x2d
 8006eca:	232b      	movge	r3, #43	; 0x2b
 8006ecc:	2909      	cmp	r1, #9
 8006ece:	f804 2b02 	strb.w	r2, [r4], #2
 8006ed2:	7043      	strb	r3, [r0, #1]
 8006ed4:	dd20      	ble.n	8006f18 <__exponent+0x5a>
 8006ed6:	f10d 0307 	add.w	r3, sp, #7
 8006eda:	461f      	mov	r7, r3
 8006edc:	260a      	movs	r6, #10
 8006ede:	fb91 f5f6 	sdiv	r5, r1, r6
 8006ee2:	fb06 1115 	mls	r1, r6, r5, r1
 8006ee6:	3130      	adds	r1, #48	; 0x30
 8006ee8:	2d09      	cmp	r5, #9
 8006eea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006eee:	f103 32ff 	add.w	r2, r3, #4294967295
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	dc09      	bgt.n	8006f0a <__exponent+0x4c>
 8006ef6:	3130      	adds	r1, #48	; 0x30
 8006ef8:	3b02      	subs	r3, #2
 8006efa:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006efe:	42bb      	cmp	r3, r7
 8006f00:	4622      	mov	r2, r4
 8006f02:	d304      	bcc.n	8006f0e <__exponent+0x50>
 8006f04:	1a10      	subs	r0, r2, r0
 8006f06:	b003      	add	sp, #12
 8006f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	e7e7      	b.n	8006ede <__exponent+0x20>
 8006f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f12:	f804 2b01 	strb.w	r2, [r4], #1
 8006f16:	e7f2      	b.n	8006efe <__exponent+0x40>
 8006f18:	2330      	movs	r3, #48	; 0x30
 8006f1a:	4419      	add	r1, r3
 8006f1c:	7083      	strb	r3, [r0, #2]
 8006f1e:	1d02      	adds	r2, r0, #4
 8006f20:	70c1      	strb	r1, [r0, #3]
 8006f22:	e7ef      	b.n	8006f04 <__exponent+0x46>

08006f24 <_printf_float>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	b08d      	sub	sp, #52	; 0x34
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006f30:	4616      	mov	r6, r2
 8006f32:	461f      	mov	r7, r3
 8006f34:	4605      	mov	r5, r0
 8006f36:	f001 fa33 	bl	80083a0 <_localeconv_r>
 8006f3a:	6803      	ldr	r3, [r0, #0]
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7f9 f94e 	bl	80001e0 <strlen>
 8006f44:	2300      	movs	r3, #0
 8006f46:	930a      	str	r3, [sp, #40]	; 0x28
 8006f48:	f8d8 3000 	ldr.w	r3, [r8]
 8006f4c:	9005      	str	r0, [sp, #20]
 8006f4e:	3307      	adds	r3, #7
 8006f50:	f023 0307 	bic.w	r3, r3, #7
 8006f54:	f103 0208 	add.w	r2, r3, #8
 8006f58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f5c:	f8d4 b000 	ldr.w	fp, [r4]
 8006f60:	f8c8 2000 	str.w	r2, [r8]
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f6c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f74:	9307      	str	r3, [sp, #28]
 8006f76:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7e:	4ba7      	ldr	r3, [pc, #668]	; (800721c <_printf_float+0x2f8>)
 8006f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f84:	f7f9 fdda 	bl	8000b3c <__aeabi_dcmpun>
 8006f88:	bb70      	cbnz	r0, 8006fe8 <_printf_float+0xc4>
 8006f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8e:	4ba3      	ldr	r3, [pc, #652]	; (800721c <_printf_float+0x2f8>)
 8006f90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f94:	f7f9 fdb4 	bl	8000b00 <__aeabi_dcmple>
 8006f98:	bb30      	cbnz	r0, 8006fe8 <_printf_float+0xc4>
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	f7f9 fda3 	bl	8000aec <__aeabi_dcmplt>
 8006fa6:	b110      	cbz	r0, 8006fae <_printf_float+0x8a>
 8006fa8:	232d      	movs	r3, #45	; 0x2d
 8006faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fae:	4a9c      	ldr	r2, [pc, #624]	; (8007220 <_printf_float+0x2fc>)
 8006fb0:	4b9c      	ldr	r3, [pc, #624]	; (8007224 <_printf_float+0x300>)
 8006fb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006fb6:	bf8c      	ite	hi
 8006fb8:	4690      	movhi	r8, r2
 8006fba:	4698      	movls	r8, r3
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	f02b 0204 	bic.w	r2, fp, #4
 8006fc2:	6123      	str	r3, [r4, #16]
 8006fc4:	6022      	str	r2, [r4, #0]
 8006fc6:	f04f 0900 	mov.w	r9, #0
 8006fca:	9700      	str	r7, [sp, #0]
 8006fcc:	4633      	mov	r3, r6
 8006fce:	aa0b      	add	r2, sp, #44	; 0x2c
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 f9e6 	bl	80073a4 <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f040 808d 	bne.w	80070f8 <_printf_float+0x1d4>
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	b00d      	add	sp, #52	; 0x34
 8006fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe8:	4642      	mov	r2, r8
 8006fea:	464b      	mov	r3, r9
 8006fec:	4640      	mov	r0, r8
 8006fee:	4649      	mov	r1, r9
 8006ff0:	f7f9 fda4 	bl	8000b3c <__aeabi_dcmpun>
 8006ff4:	b110      	cbz	r0, 8006ffc <_printf_float+0xd8>
 8006ff6:	4a8c      	ldr	r2, [pc, #560]	; (8007228 <_printf_float+0x304>)
 8006ff8:	4b8c      	ldr	r3, [pc, #560]	; (800722c <_printf_float+0x308>)
 8006ffa:	e7da      	b.n	8006fb2 <_printf_float+0x8e>
 8006ffc:	6861      	ldr	r1, [r4, #4]
 8006ffe:	1c4b      	adds	r3, r1, #1
 8007000:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007004:	a80a      	add	r0, sp, #40	; 0x28
 8007006:	d13e      	bne.n	8007086 <_printf_float+0x162>
 8007008:	2306      	movs	r3, #6
 800700a:	6063      	str	r3, [r4, #4]
 800700c:	2300      	movs	r3, #0
 800700e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007012:	ab09      	add	r3, sp, #36	; 0x24
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	ec49 8b10 	vmov	d0, r8, r9
 800701a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800701e:	6022      	str	r2, [r4, #0]
 8007020:	f8cd a004 	str.w	sl, [sp, #4]
 8007024:	6861      	ldr	r1, [r4, #4]
 8007026:	4628      	mov	r0, r5
 8007028:	f7ff fee8 	bl	8006dfc <__cvt>
 800702c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007030:	2b47      	cmp	r3, #71	; 0x47
 8007032:	4680      	mov	r8, r0
 8007034:	d109      	bne.n	800704a <_printf_float+0x126>
 8007036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007038:	1cd8      	adds	r0, r3, #3
 800703a:	db02      	blt.n	8007042 <_printf_float+0x11e>
 800703c:	6862      	ldr	r2, [r4, #4]
 800703e:	4293      	cmp	r3, r2
 8007040:	dd47      	ble.n	80070d2 <_printf_float+0x1ae>
 8007042:	f1aa 0a02 	sub.w	sl, sl, #2
 8007046:	fa5f fa8a 	uxtb.w	sl, sl
 800704a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800704e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007050:	d824      	bhi.n	800709c <_printf_float+0x178>
 8007052:	3901      	subs	r1, #1
 8007054:	4652      	mov	r2, sl
 8007056:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800705a:	9109      	str	r1, [sp, #36]	; 0x24
 800705c:	f7ff ff2f 	bl	8006ebe <__exponent>
 8007060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007062:	1813      	adds	r3, r2, r0
 8007064:	2a01      	cmp	r2, #1
 8007066:	4681      	mov	r9, r0
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	dc02      	bgt.n	8007072 <_printf_float+0x14e>
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	07d1      	lsls	r1, r2, #31
 8007070:	d501      	bpl.n	8007076 <_printf_float+0x152>
 8007072:	3301      	adds	r3, #1
 8007074:	6123      	str	r3, [r4, #16]
 8007076:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0a5      	beq.n	8006fca <_printf_float+0xa6>
 800707e:	232d      	movs	r3, #45	; 0x2d
 8007080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007084:	e7a1      	b.n	8006fca <_printf_float+0xa6>
 8007086:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800708a:	f000 8177 	beq.w	800737c <_printf_float+0x458>
 800708e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007092:	d1bb      	bne.n	800700c <_printf_float+0xe8>
 8007094:	2900      	cmp	r1, #0
 8007096:	d1b9      	bne.n	800700c <_printf_float+0xe8>
 8007098:	2301      	movs	r3, #1
 800709a:	e7b6      	b.n	800700a <_printf_float+0xe6>
 800709c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80070a0:	d119      	bne.n	80070d6 <_printf_float+0x1b2>
 80070a2:	2900      	cmp	r1, #0
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	dd0c      	ble.n	80070c2 <_printf_float+0x19e>
 80070a8:	6121      	str	r1, [r4, #16]
 80070aa:	b913      	cbnz	r3, 80070b2 <_printf_float+0x18e>
 80070ac:	6822      	ldr	r2, [r4, #0]
 80070ae:	07d2      	lsls	r2, r2, #31
 80070b0:	d502      	bpl.n	80070b8 <_printf_float+0x194>
 80070b2:	3301      	adds	r3, #1
 80070b4:	440b      	add	r3, r1
 80070b6:	6123      	str	r3, [r4, #16]
 80070b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80070bc:	f04f 0900 	mov.w	r9, #0
 80070c0:	e7d9      	b.n	8007076 <_printf_float+0x152>
 80070c2:	b913      	cbnz	r3, 80070ca <_printf_float+0x1a6>
 80070c4:	6822      	ldr	r2, [r4, #0]
 80070c6:	07d0      	lsls	r0, r2, #31
 80070c8:	d501      	bpl.n	80070ce <_printf_float+0x1aa>
 80070ca:	3302      	adds	r3, #2
 80070cc:	e7f3      	b.n	80070b6 <_printf_float+0x192>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e7f1      	b.n	80070b6 <_printf_float+0x192>
 80070d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80070d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80070da:	4293      	cmp	r3, r2
 80070dc:	db05      	blt.n	80070ea <_printf_float+0x1c6>
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	6123      	str	r3, [r4, #16]
 80070e2:	07d1      	lsls	r1, r2, #31
 80070e4:	d5e8      	bpl.n	80070b8 <_printf_float+0x194>
 80070e6:	3301      	adds	r3, #1
 80070e8:	e7e5      	b.n	80070b6 <_printf_float+0x192>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bfd4      	ite	le
 80070ee:	f1c3 0302 	rsble	r3, r3, #2
 80070f2:	2301      	movgt	r3, #1
 80070f4:	4413      	add	r3, r2
 80070f6:	e7de      	b.n	80070b6 <_printf_float+0x192>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	055a      	lsls	r2, r3, #21
 80070fc:	d407      	bmi.n	800710e <_printf_float+0x1ea>
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	4642      	mov	r2, r8
 8007102:	4631      	mov	r1, r6
 8007104:	4628      	mov	r0, r5
 8007106:	47b8      	blx	r7
 8007108:	3001      	adds	r0, #1
 800710a:	d12b      	bne.n	8007164 <_printf_float+0x240>
 800710c:	e767      	b.n	8006fde <_printf_float+0xba>
 800710e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007112:	f240 80dc 	bls.w	80072ce <_printf_float+0x3aa>
 8007116:	2200      	movs	r2, #0
 8007118:	2300      	movs	r3, #0
 800711a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800711e:	f7f9 fcdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007122:	2800      	cmp	r0, #0
 8007124:	d033      	beq.n	800718e <_printf_float+0x26a>
 8007126:	2301      	movs	r3, #1
 8007128:	4a41      	ldr	r2, [pc, #260]	; (8007230 <_printf_float+0x30c>)
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	f43f af54 	beq.w	8006fde <_printf_float+0xba>
 8007136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800713a:	429a      	cmp	r2, r3
 800713c:	db02      	blt.n	8007144 <_printf_float+0x220>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	07d8      	lsls	r0, r3, #31
 8007142:	d50f      	bpl.n	8007164 <_printf_float+0x240>
 8007144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007148:	4631      	mov	r1, r6
 800714a:	4628      	mov	r0, r5
 800714c:	47b8      	blx	r7
 800714e:	3001      	adds	r0, #1
 8007150:	f43f af45 	beq.w	8006fde <_printf_float+0xba>
 8007154:	f04f 0800 	mov.w	r8, #0
 8007158:	f104 091a 	add.w	r9, r4, #26
 800715c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800715e:	3b01      	subs	r3, #1
 8007160:	4543      	cmp	r3, r8
 8007162:	dc09      	bgt.n	8007178 <_printf_float+0x254>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	079b      	lsls	r3, r3, #30
 8007168:	f100 8103 	bmi.w	8007372 <_printf_float+0x44e>
 800716c:	68e0      	ldr	r0, [r4, #12]
 800716e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007170:	4298      	cmp	r0, r3
 8007172:	bfb8      	it	lt
 8007174:	4618      	movlt	r0, r3
 8007176:	e734      	b.n	8006fe2 <_printf_float+0xbe>
 8007178:	2301      	movs	r3, #1
 800717a:	464a      	mov	r2, r9
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f af2b 	beq.w	8006fde <_printf_float+0xba>
 8007188:	f108 0801 	add.w	r8, r8, #1
 800718c:	e7e6      	b.n	800715c <_printf_float+0x238>
 800718e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	dc2b      	bgt.n	80071ec <_printf_float+0x2c8>
 8007194:	2301      	movs	r3, #1
 8007196:	4a26      	ldr	r2, [pc, #152]	; (8007230 <_printf_float+0x30c>)
 8007198:	4631      	mov	r1, r6
 800719a:	4628      	mov	r0, r5
 800719c:	47b8      	blx	r7
 800719e:	3001      	adds	r0, #1
 80071a0:	f43f af1d 	beq.w	8006fde <_printf_float+0xba>
 80071a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a6:	b923      	cbnz	r3, 80071b2 <_printf_float+0x28e>
 80071a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071aa:	b913      	cbnz	r3, 80071b2 <_printf_float+0x28e>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	07d9      	lsls	r1, r3, #31
 80071b0:	d5d8      	bpl.n	8007164 <_printf_float+0x240>
 80071b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b6:	4631      	mov	r1, r6
 80071b8:	4628      	mov	r0, r5
 80071ba:	47b8      	blx	r7
 80071bc:	3001      	adds	r0, #1
 80071be:	f43f af0e 	beq.w	8006fde <_printf_float+0xba>
 80071c2:	f04f 0900 	mov.w	r9, #0
 80071c6:	f104 0a1a 	add.w	sl, r4, #26
 80071ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071cc:	425b      	negs	r3, r3
 80071ce:	454b      	cmp	r3, r9
 80071d0:	dc01      	bgt.n	80071d6 <_printf_float+0x2b2>
 80071d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d4:	e794      	b.n	8007100 <_printf_float+0x1dc>
 80071d6:	2301      	movs	r3, #1
 80071d8:	4652      	mov	r2, sl
 80071da:	4631      	mov	r1, r6
 80071dc:	4628      	mov	r0, r5
 80071de:	47b8      	blx	r7
 80071e0:	3001      	adds	r0, #1
 80071e2:	f43f aefc 	beq.w	8006fde <_printf_float+0xba>
 80071e6:	f109 0901 	add.w	r9, r9, #1
 80071ea:	e7ee      	b.n	80071ca <_printf_float+0x2a6>
 80071ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071f0:	429a      	cmp	r2, r3
 80071f2:	bfa8      	it	ge
 80071f4:	461a      	movge	r2, r3
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	4691      	mov	r9, r2
 80071fa:	dd07      	ble.n	800720c <_printf_float+0x2e8>
 80071fc:	4613      	mov	r3, r2
 80071fe:	4631      	mov	r1, r6
 8007200:	4642      	mov	r2, r8
 8007202:	4628      	mov	r0, r5
 8007204:	47b8      	blx	r7
 8007206:	3001      	adds	r0, #1
 8007208:	f43f aee9 	beq.w	8006fde <_printf_float+0xba>
 800720c:	f104 031a 	add.w	r3, r4, #26
 8007210:	f04f 0b00 	mov.w	fp, #0
 8007214:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007218:	9306      	str	r3, [sp, #24]
 800721a:	e015      	b.n	8007248 <_printf_float+0x324>
 800721c:	7fefffff 	.word	0x7fefffff
 8007220:	0800a3ec 	.word	0x0800a3ec
 8007224:	0800a3e8 	.word	0x0800a3e8
 8007228:	0800a3f4 	.word	0x0800a3f4
 800722c:	0800a3f0 	.word	0x0800a3f0
 8007230:	0800a3f8 	.word	0x0800a3f8
 8007234:	2301      	movs	r3, #1
 8007236:	9a06      	ldr	r2, [sp, #24]
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f aecd 	beq.w	8006fde <_printf_float+0xba>
 8007244:	f10b 0b01 	add.w	fp, fp, #1
 8007248:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800724c:	ebaa 0309 	sub.w	r3, sl, r9
 8007250:	455b      	cmp	r3, fp
 8007252:	dcef      	bgt.n	8007234 <_printf_float+0x310>
 8007254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007258:	429a      	cmp	r2, r3
 800725a:	44d0      	add	r8, sl
 800725c:	db15      	blt.n	800728a <_printf_float+0x366>
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	07da      	lsls	r2, r3, #31
 8007262:	d412      	bmi.n	800728a <_printf_float+0x366>
 8007264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007268:	eba3 020a 	sub.w	r2, r3, sl
 800726c:	eba3 0a01 	sub.w	sl, r3, r1
 8007270:	4592      	cmp	sl, r2
 8007272:	bfa8      	it	ge
 8007274:	4692      	movge	sl, r2
 8007276:	f1ba 0f00 	cmp.w	sl, #0
 800727a:	dc0e      	bgt.n	800729a <_printf_float+0x376>
 800727c:	f04f 0800 	mov.w	r8, #0
 8007280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007284:	f104 091a 	add.w	r9, r4, #26
 8007288:	e019      	b.n	80072be <_printf_float+0x39a>
 800728a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800728e:	4631      	mov	r1, r6
 8007290:	4628      	mov	r0, r5
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	d1e5      	bne.n	8007264 <_printf_float+0x340>
 8007298:	e6a1      	b.n	8006fde <_printf_float+0xba>
 800729a:	4653      	mov	r3, sl
 800729c:	4642      	mov	r2, r8
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	d1e9      	bne.n	800727c <_printf_float+0x358>
 80072a8:	e699      	b.n	8006fde <_printf_float+0xba>
 80072aa:	2301      	movs	r3, #1
 80072ac:	464a      	mov	r2, r9
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	f43f ae92 	beq.w	8006fde <_printf_float+0xba>
 80072ba:	f108 0801 	add.w	r8, r8, #1
 80072be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072c2:	1a9b      	subs	r3, r3, r2
 80072c4:	eba3 030a 	sub.w	r3, r3, sl
 80072c8:	4543      	cmp	r3, r8
 80072ca:	dcee      	bgt.n	80072aa <_printf_float+0x386>
 80072cc:	e74a      	b.n	8007164 <_printf_float+0x240>
 80072ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072d0:	2a01      	cmp	r2, #1
 80072d2:	dc01      	bgt.n	80072d8 <_printf_float+0x3b4>
 80072d4:	07db      	lsls	r3, r3, #31
 80072d6:	d53a      	bpl.n	800734e <_printf_float+0x42a>
 80072d8:	2301      	movs	r3, #1
 80072da:	4642      	mov	r2, r8
 80072dc:	4631      	mov	r1, r6
 80072de:	4628      	mov	r0, r5
 80072e0:	47b8      	blx	r7
 80072e2:	3001      	adds	r0, #1
 80072e4:	f43f ae7b 	beq.w	8006fde <_printf_float+0xba>
 80072e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ec:	4631      	mov	r1, r6
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b8      	blx	r7
 80072f2:	3001      	adds	r0, #1
 80072f4:	f108 0801 	add.w	r8, r8, #1
 80072f8:	f43f ae71 	beq.w	8006fde <_printf_float+0xba>
 80072fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fe:	2200      	movs	r2, #0
 8007300:	f103 3aff 	add.w	sl, r3, #4294967295
 8007304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007308:	2300      	movs	r3, #0
 800730a:	f7f9 fbe5 	bl	8000ad8 <__aeabi_dcmpeq>
 800730e:	b9c8      	cbnz	r0, 8007344 <_printf_float+0x420>
 8007310:	4653      	mov	r3, sl
 8007312:	4642      	mov	r2, r8
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	d10e      	bne.n	800733c <_printf_float+0x418>
 800731e:	e65e      	b.n	8006fde <_printf_float+0xba>
 8007320:	2301      	movs	r3, #1
 8007322:	4652      	mov	r2, sl
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	47b8      	blx	r7
 800732a:	3001      	adds	r0, #1
 800732c:	f43f ae57 	beq.w	8006fde <_printf_float+0xba>
 8007330:	f108 0801 	add.w	r8, r8, #1
 8007334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007336:	3b01      	subs	r3, #1
 8007338:	4543      	cmp	r3, r8
 800733a:	dcf1      	bgt.n	8007320 <_printf_float+0x3fc>
 800733c:	464b      	mov	r3, r9
 800733e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007342:	e6de      	b.n	8007102 <_printf_float+0x1de>
 8007344:	f04f 0800 	mov.w	r8, #0
 8007348:	f104 0a1a 	add.w	sl, r4, #26
 800734c:	e7f2      	b.n	8007334 <_printf_float+0x410>
 800734e:	2301      	movs	r3, #1
 8007350:	e7df      	b.n	8007312 <_printf_float+0x3ee>
 8007352:	2301      	movs	r3, #1
 8007354:	464a      	mov	r2, r9
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	47b8      	blx	r7
 800735c:	3001      	adds	r0, #1
 800735e:	f43f ae3e 	beq.w	8006fde <_printf_float+0xba>
 8007362:	f108 0801 	add.w	r8, r8, #1
 8007366:	68e3      	ldr	r3, [r4, #12]
 8007368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	4543      	cmp	r3, r8
 800736e:	dcf0      	bgt.n	8007352 <_printf_float+0x42e>
 8007370:	e6fc      	b.n	800716c <_printf_float+0x248>
 8007372:	f04f 0800 	mov.w	r8, #0
 8007376:	f104 0919 	add.w	r9, r4, #25
 800737a:	e7f4      	b.n	8007366 <_printf_float+0x442>
 800737c:	2900      	cmp	r1, #0
 800737e:	f43f ae8b 	beq.w	8007098 <_printf_float+0x174>
 8007382:	2300      	movs	r3, #0
 8007384:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007388:	ab09      	add	r3, sp, #36	; 0x24
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	ec49 8b10 	vmov	d0, r8, r9
 8007390:	6022      	str	r2, [r4, #0]
 8007392:	f8cd a004 	str.w	sl, [sp, #4]
 8007396:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800739a:	4628      	mov	r0, r5
 800739c:	f7ff fd2e 	bl	8006dfc <__cvt>
 80073a0:	4680      	mov	r8, r0
 80073a2:	e648      	b.n	8007036 <_printf_float+0x112>

080073a4 <_printf_common>:
 80073a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a8:	4691      	mov	r9, r2
 80073aa:	461f      	mov	r7, r3
 80073ac:	688a      	ldr	r2, [r1, #8]
 80073ae:	690b      	ldr	r3, [r1, #16]
 80073b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073b4:	4293      	cmp	r3, r2
 80073b6:	bfb8      	it	lt
 80073b8:	4613      	movlt	r3, r2
 80073ba:	f8c9 3000 	str.w	r3, [r9]
 80073be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073c2:	4606      	mov	r6, r0
 80073c4:	460c      	mov	r4, r1
 80073c6:	b112      	cbz	r2, 80073ce <_printf_common+0x2a>
 80073c8:	3301      	adds	r3, #1
 80073ca:	f8c9 3000 	str.w	r3, [r9]
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	0699      	lsls	r1, r3, #26
 80073d2:	bf42      	ittt	mi
 80073d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80073d8:	3302      	addmi	r3, #2
 80073da:	f8c9 3000 	strmi.w	r3, [r9]
 80073de:	6825      	ldr	r5, [r4, #0]
 80073e0:	f015 0506 	ands.w	r5, r5, #6
 80073e4:	d107      	bne.n	80073f6 <_printf_common+0x52>
 80073e6:	f104 0a19 	add.w	sl, r4, #25
 80073ea:	68e3      	ldr	r3, [r4, #12]
 80073ec:	f8d9 2000 	ldr.w	r2, [r9]
 80073f0:	1a9b      	subs	r3, r3, r2
 80073f2:	42ab      	cmp	r3, r5
 80073f4:	dc28      	bgt.n	8007448 <_printf_common+0xa4>
 80073f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80073fa:	6822      	ldr	r2, [r4, #0]
 80073fc:	3300      	adds	r3, #0
 80073fe:	bf18      	it	ne
 8007400:	2301      	movne	r3, #1
 8007402:	0692      	lsls	r2, r2, #26
 8007404:	d42d      	bmi.n	8007462 <_printf_common+0xbe>
 8007406:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800740a:	4639      	mov	r1, r7
 800740c:	4630      	mov	r0, r6
 800740e:	47c0      	blx	r8
 8007410:	3001      	adds	r0, #1
 8007412:	d020      	beq.n	8007456 <_printf_common+0xb2>
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	68e5      	ldr	r5, [r4, #12]
 8007418:	f8d9 2000 	ldr.w	r2, [r9]
 800741c:	f003 0306 	and.w	r3, r3, #6
 8007420:	2b04      	cmp	r3, #4
 8007422:	bf08      	it	eq
 8007424:	1aad      	subeq	r5, r5, r2
 8007426:	68a3      	ldr	r3, [r4, #8]
 8007428:	6922      	ldr	r2, [r4, #16]
 800742a:	bf0c      	ite	eq
 800742c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007430:	2500      	movne	r5, #0
 8007432:	4293      	cmp	r3, r2
 8007434:	bfc4      	itt	gt
 8007436:	1a9b      	subgt	r3, r3, r2
 8007438:	18ed      	addgt	r5, r5, r3
 800743a:	f04f 0900 	mov.w	r9, #0
 800743e:	341a      	adds	r4, #26
 8007440:	454d      	cmp	r5, r9
 8007442:	d11a      	bne.n	800747a <_printf_common+0xd6>
 8007444:	2000      	movs	r0, #0
 8007446:	e008      	b.n	800745a <_printf_common+0xb6>
 8007448:	2301      	movs	r3, #1
 800744a:	4652      	mov	r2, sl
 800744c:	4639      	mov	r1, r7
 800744e:	4630      	mov	r0, r6
 8007450:	47c0      	blx	r8
 8007452:	3001      	adds	r0, #1
 8007454:	d103      	bne.n	800745e <_printf_common+0xba>
 8007456:	f04f 30ff 	mov.w	r0, #4294967295
 800745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745e:	3501      	adds	r5, #1
 8007460:	e7c3      	b.n	80073ea <_printf_common+0x46>
 8007462:	18e1      	adds	r1, r4, r3
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	2030      	movs	r0, #48	; 0x30
 8007468:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800746c:	4422      	add	r2, r4
 800746e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007472:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007476:	3302      	adds	r3, #2
 8007478:	e7c5      	b.n	8007406 <_printf_common+0x62>
 800747a:	2301      	movs	r3, #1
 800747c:	4622      	mov	r2, r4
 800747e:	4639      	mov	r1, r7
 8007480:	4630      	mov	r0, r6
 8007482:	47c0      	blx	r8
 8007484:	3001      	adds	r0, #1
 8007486:	d0e6      	beq.n	8007456 <_printf_common+0xb2>
 8007488:	f109 0901 	add.w	r9, r9, #1
 800748c:	e7d8      	b.n	8007440 <_printf_common+0x9c>
	...

08007490 <_printf_i>:
 8007490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007494:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007498:	460c      	mov	r4, r1
 800749a:	7e09      	ldrb	r1, [r1, #24]
 800749c:	b085      	sub	sp, #20
 800749e:	296e      	cmp	r1, #110	; 0x6e
 80074a0:	4617      	mov	r7, r2
 80074a2:	4606      	mov	r6, r0
 80074a4:	4698      	mov	r8, r3
 80074a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074a8:	f000 80b3 	beq.w	8007612 <_printf_i+0x182>
 80074ac:	d822      	bhi.n	80074f4 <_printf_i+0x64>
 80074ae:	2963      	cmp	r1, #99	; 0x63
 80074b0:	d036      	beq.n	8007520 <_printf_i+0x90>
 80074b2:	d80a      	bhi.n	80074ca <_printf_i+0x3a>
 80074b4:	2900      	cmp	r1, #0
 80074b6:	f000 80b9 	beq.w	800762c <_printf_i+0x19c>
 80074ba:	2958      	cmp	r1, #88	; 0x58
 80074bc:	f000 8083 	beq.w	80075c6 <_printf_i+0x136>
 80074c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80074c8:	e032      	b.n	8007530 <_printf_i+0xa0>
 80074ca:	2964      	cmp	r1, #100	; 0x64
 80074cc:	d001      	beq.n	80074d2 <_printf_i+0x42>
 80074ce:	2969      	cmp	r1, #105	; 0x69
 80074d0:	d1f6      	bne.n	80074c0 <_printf_i+0x30>
 80074d2:	6820      	ldr	r0, [r4, #0]
 80074d4:	6813      	ldr	r3, [r2, #0]
 80074d6:	0605      	lsls	r5, r0, #24
 80074d8:	f103 0104 	add.w	r1, r3, #4
 80074dc:	d52a      	bpl.n	8007534 <_printf_i+0xa4>
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6011      	str	r1, [r2, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	da03      	bge.n	80074ee <_printf_i+0x5e>
 80074e6:	222d      	movs	r2, #45	; 0x2d
 80074e8:	425b      	negs	r3, r3
 80074ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80074ee:	486f      	ldr	r0, [pc, #444]	; (80076ac <_printf_i+0x21c>)
 80074f0:	220a      	movs	r2, #10
 80074f2:	e039      	b.n	8007568 <_printf_i+0xd8>
 80074f4:	2973      	cmp	r1, #115	; 0x73
 80074f6:	f000 809d 	beq.w	8007634 <_printf_i+0x1a4>
 80074fa:	d808      	bhi.n	800750e <_printf_i+0x7e>
 80074fc:	296f      	cmp	r1, #111	; 0x6f
 80074fe:	d020      	beq.n	8007542 <_printf_i+0xb2>
 8007500:	2970      	cmp	r1, #112	; 0x70
 8007502:	d1dd      	bne.n	80074c0 <_printf_i+0x30>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	f043 0320 	orr.w	r3, r3, #32
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	e003      	b.n	8007516 <_printf_i+0x86>
 800750e:	2975      	cmp	r1, #117	; 0x75
 8007510:	d017      	beq.n	8007542 <_printf_i+0xb2>
 8007512:	2978      	cmp	r1, #120	; 0x78
 8007514:	d1d4      	bne.n	80074c0 <_printf_i+0x30>
 8007516:	2378      	movs	r3, #120	; 0x78
 8007518:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800751c:	4864      	ldr	r0, [pc, #400]	; (80076b0 <_printf_i+0x220>)
 800751e:	e055      	b.n	80075cc <_printf_i+0x13c>
 8007520:	6813      	ldr	r3, [r2, #0]
 8007522:	1d19      	adds	r1, r3, #4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6011      	str	r1, [r2, #0]
 8007528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800752c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007530:	2301      	movs	r3, #1
 8007532:	e08c      	b.n	800764e <_printf_i+0x1be>
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6011      	str	r1, [r2, #0]
 8007538:	f010 0f40 	tst.w	r0, #64	; 0x40
 800753c:	bf18      	it	ne
 800753e:	b21b      	sxthne	r3, r3
 8007540:	e7cf      	b.n	80074e2 <_printf_i+0x52>
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	6825      	ldr	r5, [r4, #0]
 8007546:	1d18      	adds	r0, r3, #4
 8007548:	6010      	str	r0, [r2, #0]
 800754a:	0628      	lsls	r0, r5, #24
 800754c:	d501      	bpl.n	8007552 <_printf_i+0xc2>
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	e002      	b.n	8007558 <_printf_i+0xc8>
 8007552:	0668      	lsls	r0, r5, #25
 8007554:	d5fb      	bpl.n	800754e <_printf_i+0xbe>
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	4854      	ldr	r0, [pc, #336]	; (80076ac <_printf_i+0x21c>)
 800755a:	296f      	cmp	r1, #111	; 0x6f
 800755c:	bf14      	ite	ne
 800755e:	220a      	movne	r2, #10
 8007560:	2208      	moveq	r2, #8
 8007562:	2100      	movs	r1, #0
 8007564:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007568:	6865      	ldr	r5, [r4, #4]
 800756a:	60a5      	str	r5, [r4, #8]
 800756c:	2d00      	cmp	r5, #0
 800756e:	f2c0 8095 	blt.w	800769c <_printf_i+0x20c>
 8007572:	6821      	ldr	r1, [r4, #0]
 8007574:	f021 0104 	bic.w	r1, r1, #4
 8007578:	6021      	str	r1, [r4, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d13d      	bne.n	80075fa <_printf_i+0x16a>
 800757e:	2d00      	cmp	r5, #0
 8007580:	f040 808e 	bne.w	80076a0 <_printf_i+0x210>
 8007584:	4665      	mov	r5, ip
 8007586:	2a08      	cmp	r2, #8
 8007588:	d10b      	bne.n	80075a2 <_printf_i+0x112>
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	07db      	lsls	r3, r3, #31
 800758e:	d508      	bpl.n	80075a2 <_printf_i+0x112>
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	6862      	ldr	r2, [r4, #4]
 8007594:	429a      	cmp	r2, r3
 8007596:	bfde      	ittt	le
 8007598:	2330      	movle	r3, #48	; 0x30
 800759a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800759e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075a2:	ebac 0305 	sub.w	r3, ip, r5
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	f8cd 8000 	str.w	r8, [sp]
 80075ac:	463b      	mov	r3, r7
 80075ae:	aa03      	add	r2, sp, #12
 80075b0:	4621      	mov	r1, r4
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7ff fef6 	bl	80073a4 <_printf_common>
 80075b8:	3001      	adds	r0, #1
 80075ba:	d14d      	bne.n	8007658 <_printf_i+0x1c8>
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
 80075c0:	b005      	add	sp, #20
 80075c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075c6:	4839      	ldr	r0, [pc, #228]	; (80076ac <_printf_i+0x21c>)
 80075c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80075cc:	6813      	ldr	r3, [r2, #0]
 80075ce:	6821      	ldr	r1, [r4, #0]
 80075d0:	1d1d      	adds	r5, r3, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6015      	str	r5, [r2, #0]
 80075d6:	060a      	lsls	r2, r1, #24
 80075d8:	d50b      	bpl.n	80075f2 <_printf_i+0x162>
 80075da:	07ca      	lsls	r2, r1, #31
 80075dc:	bf44      	itt	mi
 80075de:	f041 0120 	orrmi.w	r1, r1, #32
 80075e2:	6021      	strmi	r1, [r4, #0]
 80075e4:	b91b      	cbnz	r3, 80075ee <_printf_i+0x15e>
 80075e6:	6822      	ldr	r2, [r4, #0]
 80075e8:	f022 0220 	bic.w	r2, r2, #32
 80075ec:	6022      	str	r2, [r4, #0]
 80075ee:	2210      	movs	r2, #16
 80075f0:	e7b7      	b.n	8007562 <_printf_i+0xd2>
 80075f2:	064d      	lsls	r5, r1, #25
 80075f4:	bf48      	it	mi
 80075f6:	b29b      	uxthmi	r3, r3
 80075f8:	e7ef      	b.n	80075da <_printf_i+0x14a>
 80075fa:	4665      	mov	r5, ip
 80075fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007600:	fb02 3311 	mls	r3, r2, r1, r3
 8007604:	5cc3      	ldrb	r3, [r0, r3]
 8007606:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800760a:	460b      	mov	r3, r1
 800760c:	2900      	cmp	r1, #0
 800760e:	d1f5      	bne.n	80075fc <_printf_i+0x16c>
 8007610:	e7b9      	b.n	8007586 <_printf_i+0xf6>
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	6825      	ldr	r5, [r4, #0]
 8007616:	6961      	ldr	r1, [r4, #20]
 8007618:	1d18      	adds	r0, r3, #4
 800761a:	6010      	str	r0, [r2, #0]
 800761c:	0628      	lsls	r0, r5, #24
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	d501      	bpl.n	8007626 <_printf_i+0x196>
 8007622:	6019      	str	r1, [r3, #0]
 8007624:	e002      	b.n	800762c <_printf_i+0x19c>
 8007626:	066a      	lsls	r2, r5, #25
 8007628:	d5fb      	bpl.n	8007622 <_printf_i+0x192>
 800762a:	8019      	strh	r1, [r3, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	4665      	mov	r5, ip
 8007632:	e7b9      	b.n	80075a8 <_printf_i+0x118>
 8007634:	6813      	ldr	r3, [r2, #0]
 8007636:	1d19      	adds	r1, r3, #4
 8007638:	6011      	str	r1, [r2, #0]
 800763a:	681d      	ldr	r5, [r3, #0]
 800763c:	6862      	ldr	r2, [r4, #4]
 800763e:	2100      	movs	r1, #0
 8007640:	4628      	mov	r0, r5
 8007642:	f7f8 fdd5 	bl	80001f0 <memchr>
 8007646:	b108      	cbz	r0, 800764c <_printf_i+0x1bc>
 8007648:	1b40      	subs	r0, r0, r5
 800764a:	6060      	str	r0, [r4, #4]
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	2300      	movs	r3, #0
 8007652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007656:	e7a7      	b.n	80075a8 <_printf_i+0x118>
 8007658:	6923      	ldr	r3, [r4, #16]
 800765a:	462a      	mov	r2, r5
 800765c:	4639      	mov	r1, r7
 800765e:	4630      	mov	r0, r6
 8007660:	47c0      	blx	r8
 8007662:	3001      	adds	r0, #1
 8007664:	d0aa      	beq.n	80075bc <_printf_i+0x12c>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	079b      	lsls	r3, r3, #30
 800766a:	d413      	bmi.n	8007694 <_printf_i+0x204>
 800766c:	68e0      	ldr	r0, [r4, #12]
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	4298      	cmp	r0, r3
 8007672:	bfb8      	it	lt
 8007674:	4618      	movlt	r0, r3
 8007676:	e7a3      	b.n	80075c0 <_printf_i+0x130>
 8007678:	2301      	movs	r3, #1
 800767a:	464a      	mov	r2, r9
 800767c:	4639      	mov	r1, r7
 800767e:	4630      	mov	r0, r6
 8007680:	47c0      	blx	r8
 8007682:	3001      	adds	r0, #1
 8007684:	d09a      	beq.n	80075bc <_printf_i+0x12c>
 8007686:	3501      	adds	r5, #1
 8007688:	68e3      	ldr	r3, [r4, #12]
 800768a:	9a03      	ldr	r2, [sp, #12]
 800768c:	1a9b      	subs	r3, r3, r2
 800768e:	42ab      	cmp	r3, r5
 8007690:	dcf2      	bgt.n	8007678 <_printf_i+0x1e8>
 8007692:	e7eb      	b.n	800766c <_printf_i+0x1dc>
 8007694:	2500      	movs	r5, #0
 8007696:	f104 0919 	add.w	r9, r4, #25
 800769a:	e7f5      	b.n	8007688 <_printf_i+0x1f8>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1ac      	bne.n	80075fa <_printf_i+0x16a>
 80076a0:	7803      	ldrb	r3, [r0, #0]
 80076a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076aa:	e76c      	b.n	8007586 <_printf_i+0xf6>
 80076ac:	0800a3fa 	.word	0x0800a3fa
 80076b0:	0800a40b 	.word	0x0800a40b

080076b4 <_sbrk_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4c06      	ldr	r4, [pc, #24]	; (80076d0 <_sbrk_r+0x1c>)
 80076b8:	2300      	movs	r3, #0
 80076ba:	4605      	mov	r5, r0
 80076bc:	4608      	mov	r0, r1
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	f7fa fc6c 	bl	8001f9c <_sbrk>
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	d102      	bne.n	80076ce <_sbrk_r+0x1a>
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	b103      	cbz	r3, 80076ce <_sbrk_r+0x1a>
 80076cc:	602b      	str	r3, [r5, #0]
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	200003f0 	.word	0x200003f0

080076d4 <siprintf>:
 80076d4:	b40e      	push	{r1, r2, r3}
 80076d6:	b500      	push	{lr}
 80076d8:	b09c      	sub	sp, #112	; 0x70
 80076da:	ab1d      	add	r3, sp, #116	; 0x74
 80076dc:	9002      	str	r0, [sp, #8]
 80076de:	9006      	str	r0, [sp, #24]
 80076e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076e4:	4809      	ldr	r0, [pc, #36]	; (800770c <siprintf+0x38>)
 80076e6:	9107      	str	r1, [sp, #28]
 80076e8:	9104      	str	r1, [sp, #16]
 80076ea:	4909      	ldr	r1, [pc, #36]	; (8007710 <siprintf+0x3c>)
 80076ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f0:	9105      	str	r1, [sp, #20]
 80076f2:	6800      	ldr	r0, [r0, #0]
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	a902      	add	r1, sp, #8
 80076f8:	f001 f9a2 	bl	8008a40 <_svfiprintf_r>
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	b01c      	add	sp, #112	; 0x70
 8007704:	f85d eb04 	ldr.w	lr, [sp], #4
 8007708:	b003      	add	sp, #12
 800770a:	4770      	bx	lr
 800770c:	2000006c 	.word	0x2000006c
 8007710:	ffff0208 	.word	0xffff0208

08007714 <quorem>:
 8007714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	6903      	ldr	r3, [r0, #16]
 800771a:	690c      	ldr	r4, [r1, #16]
 800771c:	42a3      	cmp	r3, r4
 800771e:	4680      	mov	r8, r0
 8007720:	f2c0 8082 	blt.w	8007828 <quorem+0x114>
 8007724:	3c01      	subs	r4, #1
 8007726:	f101 0714 	add.w	r7, r1, #20
 800772a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800772e:	f100 0614 	add.w	r6, r0, #20
 8007732:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007736:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800773a:	eb06 030c 	add.w	r3, r6, ip
 800773e:	3501      	adds	r5, #1
 8007740:	eb07 090c 	add.w	r9, r7, ip
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	fbb0 f5f5 	udiv	r5, r0, r5
 800774a:	b395      	cbz	r5, 80077b2 <quorem+0x9e>
 800774c:	f04f 0a00 	mov.w	sl, #0
 8007750:	4638      	mov	r0, r7
 8007752:	46b6      	mov	lr, r6
 8007754:	46d3      	mov	fp, sl
 8007756:	f850 2b04 	ldr.w	r2, [r0], #4
 800775a:	b293      	uxth	r3, r2
 800775c:	fb05 a303 	mla	r3, r5, r3, sl
 8007760:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007764:	b29b      	uxth	r3, r3
 8007766:	ebab 0303 	sub.w	r3, fp, r3
 800776a:	0c12      	lsrs	r2, r2, #16
 800776c:	f8de b000 	ldr.w	fp, [lr]
 8007770:	fb05 a202 	mla	r2, r5, r2, sl
 8007774:	fa13 f38b 	uxtah	r3, r3, fp
 8007778:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800777c:	fa1f fb82 	uxth.w	fp, r2
 8007780:	f8de 2000 	ldr.w	r2, [lr]
 8007784:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007788:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800778c:	b29b      	uxth	r3, r3
 800778e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007792:	4581      	cmp	r9, r0
 8007794:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007798:	f84e 3b04 	str.w	r3, [lr], #4
 800779c:	d2db      	bcs.n	8007756 <quorem+0x42>
 800779e:	f856 300c 	ldr.w	r3, [r6, ip]
 80077a2:	b933      	cbnz	r3, 80077b2 <quorem+0x9e>
 80077a4:	9b01      	ldr	r3, [sp, #4]
 80077a6:	3b04      	subs	r3, #4
 80077a8:	429e      	cmp	r6, r3
 80077aa:	461a      	mov	r2, r3
 80077ac:	d330      	bcc.n	8007810 <quorem+0xfc>
 80077ae:	f8c8 4010 	str.w	r4, [r8, #16]
 80077b2:	4640      	mov	r0, r8
 80077b4:	f001 f824 	bl	8008800 <__mcmp>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	db25      	blt.n	8007808 <quorem+0xf4>
 80077bc:	3501      	adds	r5, #1
 80077be:	4630      	mov	r0, r6
 80077c0:	f04f 0c00 	mov.w	ip, #0
 80077c4:	f857 2b04 	ldr.w	r2, [r7], #4
 80077c8:	f8d0 e000 	ldr.w	lr, [r0]
 80077cc:	b293      	uxth	r3, r2
 80077ce:	ebac 0303 	sub.w	r3, ip, r3
 80077d2:	0c12      	lsrs	r2, r2, #16
 80077d4:	fa13 f38e 	uxtah	r3, r3, lr
 80077d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077e6:	45b9      	cmp	r9, r7
 80077e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077ec:	f840 3b04 	str.w	r3, [r0], #4
 80077f0:	d2e8      	bcs.n	80077c4 <quorem+0xb0>
 80077f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80077f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80077fa:	b92a      	cbnz	r2, 8007808 <quorem+0xf4>
 80077fc:	3b04      	subs	r3, #4
 80077fe:	429e      	cmp	r6, r3
 8007800:	461a      	mov	r2, r3
 8007802:	d30b      	bcc.n	800781c <quorem+0x108>
 8007804:	f8c8 4010 	str.w	r4, [r8, #16]
 8007808:	4628      	mov	r0, r5
 800780a:	b003      	add	sp, #12
 800780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007810:	6812      	ldr	r2, [r2, #0]
 8007812:	3b04      	subs	r3, #4
 8007814:	2a00      	cmp	r2, #0
 8007816:	d1ca      	bne.n	80077ae <quorem+0x9a>
 8007818:	3c01      	subs	r4, #1
 800781a:	e7c5      	b.n	80077a8 <quorem+0x94>
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	3b04      	subs	r3, #4
 8007820:	2a00      	cmp	r2, #0
 8007822:	d1ef      	bne.n	8007804 <quorem+0xf0>
 8007824:	3c01      	subs	r4, #1
 8007826:	e7ea      	b.n	80077fe <quorem+0xea>
 8007828:	2000      	movs	r0, #0
 800782a:	e7ee      	b.n	800780a <quorem+0xf6>
 800782c:	0000      	movs	r0, r0
	...

08007830 <_dtoa_r>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	ec57 6b10 	vmov	r6, r7, d0
 8007838:	b097      	sub	sp, #92	; 0x5c
 800783a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800783c:	9106      	str	r1, [sp, #24]
 800783e:	4604      	mov	r4, r0
 8007840:	920b      	str	r2, [sp, #44]	; 0x2c
 8007842:	9312      	str	r3, [sp, #72]	; 0x48
 8007844:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007848:	e9cd 6700 	strd	r6, r7, [sp]
 800784c:	b93d      	cbnz	r5, 800785e <_dtoa_r+0x2e>
 800784e:	2010      	movs	r0, #16
 8007850:	f7ff fa0e 	bl	8006c70 <malloc>
 8007854:	6260      	str	r0, [r4, #36]	; 0x24
 8007856:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800785a:	6005      	str	r5, [r0, #0]
 800785c:	60c5      	str	r5, [r0, #12]
 800785e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007860:	6819      	ldr	r1, [r3, #0]
 8007862:	b151      	cbz	r1, 800787a <_dtoa_r+0x4a>
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	604a      	str	r2, [r1, #4]
 8007868:	2301      	movs	r3, #1
 800786a:	4093      	lsls	r3, r2
 800786c:	608b      	str	r3, [r1, #8]
 800786e:	4620      	mov	r0, r4
 8007870:	f000 fde5 	bl	800843e <_Bfree>
 8007874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	1e3b      	subs	r3, r7, #0
 800787c:	bfbb      	ittet	lt
 800787e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007882:	9301      	strlt	r3, [sp, #4]
 8007884:	2300      	movge	r3, #0
 8007886:	2201      	movlt	r2, #1
 8007888:	bfac      	ite	ge
 800788a:	f8c8 3000 	strge.w	r3, [r8]
 800788e:	f8c8 2000 	strlt.w	r2, [r8]
 8007892:	4baf      	ldr	r3, [pc, #700]	; (8007b50 <_dtoa_r+0x320>)
 8007894:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007898:	ea33 0308 	bics.w	r3, r3, r8
 800789c:	d114      	bne.n	80078c8 <_dtoa_r+0x98>
 800789e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	9b00      	ldr	r3, [sp, #0]
 80078a8:	b923      	cbnz	r3, 80078b4 <_dtoa_r+0x84>
 80078aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f000 8542 	beq.w	8008338 <_dtoa_r+0xb08>
 80078b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007b64 <_dtoa_r+0x334>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 8544 	beq.w	8008348 <_dtoa_r+0xb18>
 80078c0:	f10b 0303 	add.w	r3, fp, #3
 80078c4:	f000 bd3e 	b.w	8008344 <_dtoa_r+0xb14>
 80078c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80078cc:	2200      	movs	r2, #0
 80078ce:	2300      	movs	r3, #0
 80078d0:	4630      	mov	r0, r6
 80078d2:	4639      	mov	r1, r7
 80078d4:	f7f9 f900 	bl	8000ad8 <__aeabi_dcmpeq>
 80078d8:	4681      	mov	r9, r0
 80078da:	b168      	cbz	r0, 80078f8 <_dtoa_r+0xc8>
 80078dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078de:	2301      	movs	r3, #1
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8524 	beq.w	8008332 <_dtoa_r+0xb02>
 80078ea:	4b9a      	ldr	r3, [pc, #616]	; (8007b54 <_dtoa_r+0x324>)
 80078ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078ee:	f103 3bff 	add.w	fp, r3, #4294967295
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	f000 bd28 	b.w	8008348 <_dtoa_r+0xb18>
 80078f8:	aa14      	add	r2, sp, #80	; 0x50
 80078fa:	a915      	add	r1, sp, #84	; 0x54
 80078fc:	ec47 6b10 	vmov	d0, r6, r7
 8007900:	4620      	mov	r0, r4
 8007902:	f000 fff4 	bl	80088ee <__d2b>
 8007906:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800790a:	9004      	str	r0, [sp, #16]
 800790c:	2d00      	cmp	r5, #0
 800790e:	d07c      	beq.n	8007a0a <_dtoa_r+0x1da>
 8007910:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007914:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007918:	46b2      	mov	sl, r6
 800791a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800791e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007922:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007926:	2200      	movs	r2, #0
 8007928:	4b8b      	ldr	r3, [pc, #556]	; (8007b58 <_dtoa_r+0x328>)
 800792a:	4650      	mov	r0, sl
 800792c:	4659      	mov	r1, fp
 800792e:	f7f8 fcb3 	bl	8000298 <__aeabi_dsub>
 8007932:	a381      	add	r3, pc, #516	; (adr r3, 8007b38 <_dtoa_r+0x308>)
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f7f8 fe66 	bl	8000608 <__aeabi_dmul>
 800793c:	a380      	add	r3, pc, #512	; (adr r3, 8007b40 <_dtoa_r+0x310>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	f7f8 fcab 	bl	800029c <__adddf3>
 8007946:	4606      	mov	r6, r0
 8007948:	4628      	mov	r0, r5
 800794a:	460f      	mov	r7, r1
 800794c:	f7f8 fdf2 	bl	8000534 <__aeabi_i2d>
 8007950:	a37d      	add	r3, pc, #500	; (adr r3, 8007b48 <_dtoa_r+0x318>)
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f7f8 fe57 	bl	8000608 <__aeabi_dmul>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4630      	mov	r0, r6
 8007960:	4639      	mov	r1, r7
 8007962:	f7f8 fc9b 	bl	800029c <__adddf3>
 8007966:	4606      	mov	r6, r0
 8007968:	460f      	mov	r7, r1
 800796a:	f7f9 f8fd 	bl	8000b68 <__aeabi_d2iz>
 800796e:	2200      	movs	r2, #0
 8007970:	4682      	mov	sl, r0
 8007972:	2300      	movs	r3, #0
 8007974:	4630      	mov	r0, r6
 8007976:	4639      	mov	r1, r7
 8007978:	f7f9 f8b8 	bl	8000aec <__aeabi_dcmplt>
 800797c:	b148      	cbz	r0, 8007992 <_dtoa_r+0x162>
 800797e:	4650      	mov	r0, sl
 8007980:	f7f8 fdd8 	bl	8000534 <__aeabi_i2d>
 8007984:	4632      	mov	r2, r6
 8007986:	463b      	mov	r3, r7
 8007988:	f7f9 f8a6 	bl	8000ad8 <__aeabi_dcmpeq>
 800798c:	b908      	cbnz	r0, 8007992 <_dtoa_r+0x162>
 800798e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007992:	f1ba 0f16 	cmp.w	sl, #22
 8007996:	d859      	bhi.n	8007a4c <_dtoa_r+0x21c>
 8007998:	4970      	ldr	r1, [pc, #448]	; (8007b5c <_dtoa_r+0x32c>)
 800799a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800799e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079a6:	f7f9 f8bf 	bl	8000b28 <__aeabi_dcmpgt>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d050      	beq.n	8007a50 <_dtoa_r+0x220>
 80079ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079b2:	2300      	movs	r3, #0
 80079b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80079b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079b8:	1b5d      	subs	r5, r3, r5
 80079ba:	f1b5 0801 	subs.w	r8, r5, #1
 80079be:	bf49      	itett	mi
 80079c0:	f1c5 0301 	rsbmi	r3, r5, #1
 80079c4:	2300      	movpl	r3, #0
 80079c6:	9305      	strmi	r3, [sp, #20]
 80079c8:	f04f 0800 	movmi.w	r8, #0
 80079cc:	bf58      	it	pl
 80079ce:	9305      	strpl	r3, [sp, #20]
 80079d0:	f1ba 0f00 	cmp.w	sl, #0
 80079d4:	db3e      	blt.n	8007a54 <_dtoa_r+0x224>
 80079d6:	2300      	movs	r3, #0
 80079d8:	44d0      	add	r8, sl
 80079da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80079de:	9307      	str	r3, [sp, #28]
 80079e0:	9b06      	ldr	r3, [sp, #24]
 80079e2:	2b09      	cmp	r3, #9
 80079e4:	f200 8090 	bhi.w	8007b08 <_dtoa_r+0x2d8>
 80079e8:	2b05      	cmp	r3, #5
 80079ea:	bfc4      	itt	gt
 80079ec:	3b04      	subgt	r3, #4
 80079ee:	9306      	strgt	r3, [sp, #24]
 80079f0:	9b06      	ldr	r3, [sp, #24]
 80079f2:	f1a3 0302 	sub.w	r3, r3, #2
 80079f6:	bfcc      	ite	gt
 80079f8:	2500      	movgt	r5, #0
 80079fa:	2501      	movle	r5, #1
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	f200 808f 	bhi.w	8007b20 <_dtoa_r+0x2f0>
 8007a02:	e8df f003 	tbb	[pc, r3]
 8007a06:	7f7d      	.short	0x7f7d
 8007a08:	7131      	.short	0x7131
 8007a0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007a0e:	441d      	add	r5, r3
 8007a10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007a14:	2820      	cmp	r0, #32
 8007a16:	dd13      	ble.n	8007a40 <_dtoa_r+0x210>
 8007a18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007a1c:	9b00      	ldr	r3, [sp, #0]
 8007a1e:	fa08 f800 	lsl.w	r8, r8, r0
 8007a22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007a26:	fa23 f000 	lsr.w	r0, r3, r0
 8007a2a:	ea48 0000 	orr.w	r0, r8, r0
 8007a2e:	f7f8 fd71 	bl	8000514 <__aeabi_ui2d>
 8007a32:	2301      	movs	r3, #1
 8007a34:	4682      	mov	sl, r0
 8007a36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007a3a:	3d01      	subs	r5, #1
 8007a3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a3e:	e772      	b.n	8007926 <_dtoa_r+0xf6>
 8007a40:	9b00      	ldr	r3, [sp, #0]
 8007a42:	f1c0 0020 	rsb	r0, r0, #32
 8007a46:	fa03 f000 	lsl.w	r0, r3, r0
 8007a4a:	e7f0      	b.n	8007a2e <_dtoa_r+0x1fe>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e7b1      	b.n	80079b4 <_dtoa_r+0x184>
 8007a50:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a52:	e7b0      	b.n	80079b6 <_dtoa_r+0x186>
 8007a54:	9b05      	ldr	r3, [sp, #20]
 8007a56:	eba3 030a 	sub.w	r3, r3, sl
 8007a5a:	9305      	str	r3, [sp, #20]
 8007a5c:	f1ca 0300 	rsb	r3, sl, #0
 8007a60:	9307      	str	r3, [sp, #28]
 8007a62:	2300      	movs	r3, #0
 8007a64:	930e      	str	r3, [sp, #56]	; 0x38
 8007a66:	e7bb      	b.n	80079e0 <_dtoa_r+0x1b0>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dd59      	ble.n	8007b26 <_dtoa_r+0x2f6>
 8007a72:	9302      	str	r3, [sp, #8]
 8007a74:	4699      	mov	r9, r3
 8007a76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a78:	2200      	movs	r2, #0
 8007a7a:	6072      	str	r2, [r6, #4]
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	f102 0014 	add.w	r0, r2, #20
 8007a82:	4298      	cmp	r0, r3
 8007a84:	6871      	ldr	r1, [r6, #4]
 8007a86:	d953      	bls.n	8007b30 <_dtoa_r+0x300>
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fca4 	bl	80083d6 <_Balloc>
 8007a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a90:	6030      	str	r0, [r6, #0]
 8007a92:	f1b9 0f0e 	cmp.w	r9, #14
 8007a96:	f8d3 b000 	ldr.w	fp, [r3]
 8007a9a:	f200 80e6 	bhi.w	8007c6a <_dtoa_r+0x43a>
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	f000 80e3 	beq.w	8007c6a <_dtoa_r+0x43a>
 8007aa4:	ed9d 7b00 	vldr	d7, [sp]
 8007aa8:	f1ba 0f00 	cmp.w	sl, #0
 8007aac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007ab0:	dd74      	ble.n	8007b9c <_dtoa_r+0x36c>
 8007ab2:	4a2a      	ldr	r2, [pc, #168]	; (8007b5c <_dtoa_r+0x32c>)
 8007ab4:	f00a 030f 	and.w	r3, sl, #15
 8007ab8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007abc:	ed93 7b00 	vldr	d7, [r3]
 8007ac0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007ac4:	06f0      	lsls	r0, r6, #27
 8007ac6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007aca:	d565      	bpl.n	8007b98 <_dtoa_r+0x368>
 8007acc:	4b24      	ldr	r3, [pc, #144]	; (8007b60 <_dtoa_r+0x330>)
 8007ace:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ad2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ad6:	f7f8 fec1 	bl	800085c <__aeabi_ddiv>
 8007ada:	e9cd 0100 	strd	r0, r1, [sp]
 8007ade:	f006 060f 	and.w	r6, r6, #15
 8007ae2:	2503      	movs	r5, #3
 8007ae4:	4f1e      	ldr	r7, [pc, #120]	; (8007b60 <_dtoa_r+0x330>)
 8007ae6:	e04c      	b.n	8007b82 <_dtoa_r+0x352>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	930a      	str	r3, [sp, #40]	; 0x28
 8007aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aee:	4453      	add	r3, sl
 8007af0:	f103 0901 	add.w	r9, r3, #1
 8007af4:	9302      	str	r3, [sp, #8]
 8007af6:	464b      	mov	r3, r9
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	bfb8      	it	lt
 8007afc:	2301      	movlt	r3, #1
 8007afe:	e7ba      	b.n	8007a76 <_dtoa_r+0x246>
 8007b00:	2300      	movs	r3, #0
 8007b02:	e7b2      	b.n	8007a6a <_dtoa_r+0x23a>
 8007b04:	2300      	movs	r3, #0
 8007b06:	e7f0      	b.n	8007aea <_dtoa_r+0x2ba>
 8007b08:	2501      	movs	r5, #1
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9306      	str	r3, [sp, #24]
 8007b0e:	950a      	str	r5, [sp, #40]	; 0x28
 8007b10:	f04f 33ff 	mov.w	r3, #4294967295
 8007b14:	9302      	str	r3, [sp, #8]
 8007b16:	4699      	mov	r9, r3
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2312      	movs	r3, #18
 8007b1c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b1e:	e7aa      	b.n	8007a76 <_dtoa_r+0x246>
 8007b20:	2301      	movs	r3, #1
 8007b22:	930a      	str	r3, [sp, #40]	; 0x28
 8007b24:	e7f4      	b.n	8007b10 <_dtoa_r+0x2e0>
 8007b26:	2301      	movs	r3, #1
 8007b28:	9302      	str	r3, [sp, #8]
 8007b2a:	4699      	mov	r9, r3
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	e7f5      	b.n	8007b1c <_dtoa_r+0x2ec>
 8007b30:	3101      	adds	r1, #1
 8007b32:	6071      	str	r1, [r6, #4]
 8007b34:	0052      	lsls	r2, r2, #1
 8007b36:	e7a2      	b.n	8007a7e <_dtoa_r+0x24e>
 8007b38:	636f4361 	.word	0x636f4361
 8007b3c:	3fd287a7 	.word	0x3fd287a7
 8007b40:	8b60c8b3 	.word	0x8b60c8b3
 8007b44:	3fc68a28 	.word	0x3fc68a28
 8007b48:	509f79fb 	.word	0x509f79fb
 8007b4c:	3fd34413 	.word	0x3fd34413
 8007b50:	7ff00000 	.word	0x7ff00000
 8007b54:	0800a3f9 	.word	0x0800a3f9
 8007b58:	3ff80000 	.word	0x3ff80000
 8007b5c:	0800a458 	.word	0x0800a458
 8007b60:	0800a430 	.word	0x0800a430
 8007b64:	0800a425 	.word	0x0800a425
 8007b68:	07f1      	lsls	r1, r6, #31
 8007b6a:	d508      	bpl.n	8007b7e <_dtoa_r+0x34e>
 8007b6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b74:	f7f8 fd48 	bl	8000608 <__aeabi_dmul>
 8007b78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	1076      	asrs	r6, r6, #1
 8007b80:	3708      	adds	r7, #8
 8007b82:	2e00      	cmp	r6, #0
 8007b84:	d1f0      	bne.n	8007b68 <_dtoa_r+0x338>
 8007b86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b8e:	f7f8 fe65 	bl	800085c <__aeabi_ddiv>
 8007b92:	e9cd 0100 	strd	r0, r1, [sp]
 8007b96:	e01a      	b.n	8007bce <_dtoa_r+0x39e>
 8007b98:	2502      	movs	r5, #2
 8007b9a:	e7a3      	b.n	8007ae4 <_dtoa_r+0x2b4>
 8007b9c:	f000 80a0 	beq.w	8007ce0 <_dtoa_r+0x4b0>
 8007ba0:	f1ca 0600 	rsb	r6, sl, #0
 8007ba4:	4b9f      	ldr	r3, [pc, #636]	; (8007e24 <_dtoa_r+0x5f4>)
 8007ba6:	4fa0      	ldr	r7, [pc, #640]	; (8007e28 <_dtoa_r+0x5f8>)
 8007ba8:	f006 020f 	and.w	r2, r6, #15
 8007bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bb8:	f7f8 fd26 	bl	8000608 <__aeabi_dmul>
 8007bbc:	e9cd 0100 	strd	r0, r1, [sp]
 8007bc0:	1136      	asrs	r6, r6, #4
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2502      	movs	r5, #2
 8007bc6:	2e00      	cmp	r6, #0
 8007bc8:	d17f      	bne.n	8007cca <_dtoa_r+0x49a>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e1      	bne.n	8007b92 <_dtoa_r+0x362>
 8007bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8087 	beq.w	8007ce4 <_dtoa_r+0x4b4>
 8007bd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	4b93      	ldr	r3, [pc, #588]	; (8007e2c <_dtoa_r+0x5fc>)
 8007bde:	4630      	mov	r0, r6
 8007be0:	4639      	mov	r1, r7
 8007be2:	f7f8 ff83 	bl	8000aec <__aeabi_dcmplt>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d07c      	beq.n	8007ce4 <_dtoa_r+0x4b4>
 8007bea:	f1b9 0f00 	cmp.w	r9, #0
 8007bee:	d079      	beq.n	8007ce4 <_dtoa_r+0x4b4>
 8007bf0:	9b02      	ldr	r3, [sp, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	dd35      	ble.n	8007c62 <_dtoa_r+0x432>
 8007bf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007bfa:	9308      	str	r3, [sp, #32]
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4b8b      	ldr	r3, [pc, #556]	; (8007e30 <_dtoa_r+0x600>)
 8007c02:	4630      	mov	r0, r6
 8007c04:	f7f8 fd00 	bl	8000608 <__aeabi_dmul>
 8007c08:	e9cd 0100 	strd	r0, r1, [sp]
 8007c0c:	9f02      	ldr	r7, [sp, #8]
 8007c0e:	3501      	adds	r5, #1
 8007c10:	4628      	mov	r0, r5
 8007c12:	f7f8 fc8f 	bl	8000534 <__aeabi_i2d>
 8007c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c1a:	f7f8 fcf5 	bl	8000608 <__aeabi_dmul>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	4b84      	ldr	r3, [pc, #528]	; (8007e34 <_dtoa_r+0x604>)
 8007c22:	f7f8 fb3b 	bl	800029c <__adddf3>
 8007c26:	4605      	mov	r5, r0
 8007c28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007c2c:	2f00      	cmp	r7, #0
 8007c2e:	d15d      	bne.n	8007cec <_dtoa_r+0x4bc>
 8007c30:	2200      	movs	r2, #0
 8007c32:	4b81      	ldr	r3, [pc, #516]	; (8007e38 <_dtoa_r+0x608>)
 8007c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c38:	f7f8 fb2e 	bl	8000298 <__aeabi_dsub>
 8007c3c:	462a      	mov	r2, r5
 8007c3e:	4633      	mov	r3, r6
 8007c40:	e9cd 0100 	strd	r0, r1, [sp]
 8007c44:	f7f8 ff70 	bl	8000b28 <__aeabi_dcmpgt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f040 8288 	bne.w	800815e <_dtoa_r+0x92e>
 8007c4e:	462a      	mov	r2, r5
 8007c50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c58:	f7f8 ff48 	bl	8000aec <__aeabi_dcmplt>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	f040 827c 	bne.w	800815a <_dtoa_r+0x92a>
 8007c62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c66:	e9cd 2300 	strd	r2, r3, [sp]
 8007c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f2c0 8150 	blt.w	8007f12 <_dtoa_r+0x6e2>
 8007c72:	f1ba 0f0e 	cmp.w	sl, #14
 8007c76:	f300 814c 	bgt.w	8007f12 <_dtoa_r+0x6e2>
 8007c7a:	4b6a      	ldr	r3, [pc, #424]	; (8007e24 <_dtoa_r+0x5f4>)
 8007c7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c80:	ed93 7b00 	vldr	d7, [r3]
 8007c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c8c:	f280 80d8 	bge.w	8007e40 <_dtoa_r+0x610>
 8007c90:	f1b9 0f00 	cmp.w	r9, #0
 8007c94:	f300 80d4 	bgt.w	8007e40 <_dtoa_r+0x610>
 8007c98:	f040 825e 	bne.w	8008158 <_dtoa_r+0x928>
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4b66      	ldr	r3, [pc, #408]	; (8007e38 <_dtoa_r+0x608>)
 8007ca0:	ec51 0b17 	vmov	r0, r1, d7
 8007ca4:	f7f8 fcb0 	bl	8000608 <__aeabi_dmul>
 8007ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cac:	f7f8 ff32 	bl	8000b14 <__aeabi_dcmpge>
 8007cb0:	464f      	mov	r7, r9
 8007cb2:	464e      	mov	r6, r9
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	f040 8234 	bne.w	8008122 <_dtoa_r+0x8f2>
 8007cba:	2331      	movs	r3, #49	; 0x31
 8007cbc:	f10b 0501 	add.w	r5, fp, #1
 8007cc0:	f88b 3000 	strb.w	r3, [fp]
 8007cc4:	f10a 0a01 	add.w	sl, sl, #1
 8007cc8:	e22f      	b.n	800812a <_dtoa_r+0x8fa>
 8007cca:	07f2      	lsls	r2, r6, #31
 8007ccc:	d505      	bpl.n	8007cda <_dtoa_r+0x4aa>
 8007cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd2:	f7f8 fc99 	bl	8000608 <__aeabi_dmul>
 8007cd6:	3501      	adds	r5, #1
 8007cd8:	2301      	movs	r3, #1
 8007cda:	1076      	asrs	r6, r6, #1
 8007cdc:	3708      	adds	r7, #8
 8007cde:	e772      	b.n	8007bc6 <_dtoa_r+0x396>
 8007ce0:	2502      	movs	r5, #2
 8007ce2:	e774      	b.n	8007bce <_dtoa_r+0x39e>
 8007ce4:	f8cd a020 	str.w	sl, [sp, #32]
 8007ce8:	464f      	mov	r7, r9
 8007cea:	e791      	b.n	8007c10 <_dtoa_r+0x3e0>
 8007cec:	4b4d      	ldr	r3, [pc, #308]	; (8007e24 <_dtoa_r+0x5f4>)
 8007cee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cf2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d047      	beq.n	8007d8c <_dtoa_r+0x55c>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	2000      	movs	r0, #0
 8007d02:	494e      	ldr	r1, [pc, #312]	; (8007e3c <_dtoa_r+0x60c>)
 8007d04:	f7f8 fdaa 	bl	800085c <__aeabi_ddiv>
 8007d08:	462a      	mov	r2, r5
 8007d0a:	4633      	mov	r3, r6
 8007d0c:	f7f8 fac4 	bl	8000298 <__aeabi_dsub>
 8007d10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d14:	465d      	mov	r5, fp
 8007d16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d1a:	f7f8 ff25 	bl	8000b68 <__aeabi_d2iz>
 8007d1e:	4606      	mov	r6, r0
 8007d20:	f7f8 fc08 	bl	8000534 <__aeabi_i2d>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d2c:	f7f8 fab4 	bl	8000298 <__aeabi_dsub>
 8007d30:	3630      	adds	r6, #48	; 0x30
 8007d32:	f805 6b01 	strb.w	r6, [r5], #1
 8007d36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d3a:	e9cd 0100 	strd	r0, r1, [sp]
 8007d3e:	f7f8 fed5 	bl	8000aec <__aeabi_dcmplt>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d163      	bne.n	8007e0e <_dtoa_r+0x5de>
 8007d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	4937      	ldr	r1, [pc, #220]	; (8007e2c <_dtoa_r+0x5fc>)
 8007d4e:	f7f8 faa3 	bl	8000298 <__aeabi_dsub>
 8007d52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d56:	f7f8 fec9 	bl	8000aec <__aeabi_dcmplt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f040 80b7 	bne.w	8007ece <_dtoa_r+0x69e>
 8007d60:	eba5 030b 	sub.w	r3, r5, fp
 8007d64:	429f      	cmp	r7, r3
 8007d66:	f77f af7c 	ble.w	8007c62 <_dtoa_r+0x432>
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	4b30      	ldr	r3, [pc, #192]	; (8007e30 <_dtoa_r+0x600>)
 8007d6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d72:	f7f8 fc49 	bl	8000608 <__aeabi_dmul>
 8007d76:	2200      	movs	r2, #0
 8007d78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d7c:	4b2c      	ldr	r3, [pc, #176]	; (8007e30 <_dtoa_r+0x600>)
 8007d7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d82:	f7f8 fc41 	bl	8000608 <__aeabi_dmul>
 8007d86:	e9cd 0100 	strd	r0, r1, [sp]
 8007d8a:	e7c4      	b.n	8007d16 <_dtoa_r+0x4e6>
 8007d8c:	462a      	mov	r2, r5
 8007d8e:	4633      	mov	r3, r6
 8007d90:	f7f8 fc3a 	bl	8000608 <__aeabi_dmul>
 8007d94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d98:	eb0b 0507 	add.w	r5, fp, r7
 8007d9c:	465e      	mov	r6, fp
 8007d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007da2:	f7f8 fee1 	bl	8000b68 <__aeabi_d2iz>
 8007da6:	4607      	mov	r7, r0
 8007da8:	f7f8 fbc4 	bl	8000534 <__aeabi_i2d>
 8007dac:	3730      	adds	r7, #48	; 0x30
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007db6:	f7f8 fa6f 	bl	8000298 <__aeabi_dsub>
 8007dba:	f806 7b01 	strb.w	r7, [r6], #1
 8007dbe:	42ae      	cmp	r6, r5
 8007dc0:	e9cd 0100 	strd	r0, r1, [sp]
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	d126      	bne.n	8007e18 <_dtoa_r+0x5e8>
 8007dca:	4b1c      	ldr	r3, [pc, #112]	; (8007e3c <_dtoa_r+0x60c>)
 8007dcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007dd0:	f7f8 fa64 	bl	800029c <__adddf3>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ddc:	f7f8 fea4 	bl	8000b28 <__aeabi_dcmpgt>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d174      	bne.n	8007ece <_dtoa_r+0x69e>
 8007de4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007de8:	2000      	movs	r0, #0
 8007dea:	4914      	ldr	r1, [pc, #80]	; (8007e3c <_dtoa_r+0x60c>)
 8007dec:	f7f8 fa54 	bl	8000298 <__aeabi_dsub>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007df8:	f7f8 fe78 	bl	8000aec <__aeabi_dcmplt>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f43f af30 	beq.w	8007c62 <_dtoa_r+0x432>
 8007e02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e06:	2b30      	cmp	r3, #48	; 0x30
 8007e08:	f105 32ff 	add.w	r2, r5, #4294967295
 8007e0c:	d002      	beq.n	8007e14 <_dtoa_r+0x5e4>
 8007e0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007e12:	e04a      	b.n	8007eaa <_dtoa_r+0x67a>
 8007e14:	4615      	mov	r5, r2
 8007e16:	e7f4      	b.n	8007e02 <_dtoa_r+0x5d2>
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <_dtoa_r+0x600>)
 8007e1a:	f7f8 fbf5 	bl	8000608 <__aeabi_dmul>
 8007e1e:	e9cd 0100 	strd	r0, r1, [sp]
 8007e22:	e7bc      	b.n	8007d9e <_dtoa_r+0x56e>
 8007e24:	0800a458 	.word	0x0800a458
 8007e28:	0800a430 	.word	0x0800a430
 8007e2c:	3ff00000 	.word	0x3ff00000
 8007e30:	40240000 	.word	0x40240000
 8007e34:	401c0000 	.word	0x401c0000
 8007e38:	40140000 	.word	0x40140000
 8007e3c:	3fe00000 	.word	0x3fe00000
 8007e40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e44:	465d      	mov	r5, fp
 8007e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	f7f8 fd05 	bl	800085c <__aeabi_ddiv>
 8007e52:	f7f8 fe89 	bl	8000b68 <__aeabi_d2iz>
 8007e56:	4680      	mov	r8, r0
 8007e58:	f7f8 fb6c 	bl	8000534 <__aeabi_i2d>
 8007e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e60:	f7f8 fbd2 	bl	8000608 <__aeabi_dmul>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007e70:	f7f8 fa12 	bl	8000298 <__aeabi_dsub>
 8007e74:	f805 6b01 	strb.w	r6, [r5], #1
 8007e78:	eba5 060b 	sub.w	r6, r5, fp
 8007e7c:	45b1      	cmp	r9, r6
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	d139      	bne.n	8007ef8 <_dtoa_r+0x6c8>
 8007e84:	f7f8 fa0a 	bl	800029c <__adddf3>
 8007e88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e8c:	4606      	mov	r6, r0
 8007e8e:	460f      	mov	r7, r1
 8007e90:	f7f8 fe4a 	bl	8000b28 <__aeabi_dcmpgt>
 8007e94:	b9c8      	cbnz	r0, 8007eca <_dtoa_r+0x69a>
 8007e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	f7f8 fe1b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ea2:	b110      	cbz	r0, 8007eaa <_dtoa_r+0x67a>
 8007ea4:	f018 0f01 	tst.w	r8, #1
 8007ea8:	d10f      	bne.n	8007eca <_dtoa_r+0x69a>
 8007eaa:	9904      	ldr	r1, [sp, #16]
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fac6 	bl	800843e <_Bfree>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007eb6:	702b      	strb	r3, [r5, #0]
 8007eb8:	f10a 0301 	add.w	r3, sl, #1
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8241 	beq.w	8008348 <_dtoa_r+0xb18>
 8007ec6:	601d      	str	r5, [r3, #0]
 8007ec8:	e23e      	b.n	8008348 <_dtoa_r+0xb18>
 8007eca:	f8cd a020 	str.w	sl, [sp, #32]
 8007ece:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ed2:	2a39      	cmp	r2, #57	; 0x39
 8007ed4:	f105 33ff 	add.w	r3, r5, #4294967295
 8007ed8:	d108      	bne.n	8007eec <_dtoa_r+0x6bc>
 8007eda:	459b      	cmp	fp, r3
 8007edc:	d10a      	bne.n	8007ef4 <_dtoa_r+0x6c4>
 8007ede:	9b08      	ldr	r3, [sp, #32]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	9308      	str	r3, [sp, #32]
 8007ee4:	2330      	movs	r3, #48	; 0x30
 8007ee6:	f88b 3000 	strb.w	r3, [fp]
 8007eea:	465b      	mov	r3, fp
 8007eec:	781a      	ldrb	r2, [r3, #0]
 8007eee:	3201      	adds	r2, #1
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	e78c      	b.n	8007e0e <_dtoa_r+0x5de>
 8007ef4:	461d      	mov	r5, r3
 8007ef6:	e7ea      	b.n	8007ece <_dtoa_r+0x69e>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4b9b      	ldr	r3, [pc, #620]	; (8008168 <_dtoa_r+0x938>)
 8007efc:	f7f8 fb84 	bl	8000608 <__aeabi_dmul>
 8007f00:	2200      	movs	r2, #0
 8007f02:	2300      	movs	r3, #0
 8007f04:	4606      	mov	r6, r0
 8007f06:	460f      	mov	r7, r1
 8007f08:	f7f8 fde6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d09a      	beq.n	8007e46 <_dtoa_r+0x616>
 8007f10:	e7cb      	b.n	8007eaa <_dtoa_r+0x67a>
 8007f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f14:	2a00      	cmp	r2, #0
 8007f16:	f000 808b 	beq.w	8008030 <_dtoa_r+0x800>
 8007f1a:	9a06      	ldr	r2, [sp, #24]
 8007f1c:	2a01      	cmp	r2, #1
 8007f1e:	dc6e      	bgt.n	8007ffe <_dtoa_r+0x7ce>
 8007f20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	d067      	beq.n	8007ff6 <_dtoa_r+0x7c6>
 8007f26:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f2a:	9f07      	ldr	r7, [sp, #28]
 8007f2c:	9d05      	ldr	r5, [sp, #20]
 8007f2e:	9a05      	ldr	r2, [sp, #20]
 8007f30:	2101      	movs	r1, #1
 8007f32:	441a      	add	r2, r3
 8007f34:	4620      	mov	r0, r4
 8007f36:	9205      	str	r2, [sp, #20]
 8007f38:	4498      	add	r8, r3
 8007f3a:	f000 fb20 	bl	800857e <__i2b>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	2d00      	cmp	r5, #0
 8007f42:	dd0c      	ble.n	8007f5e <_dtoa_r+0x72e>
 8007f44:	f1b8 0f00 	cmp.w	r8, #0
 8007f48:	dd09      	ble.n	8007f5e <_dtoa_r+0x72e>
 8007f4a:	4545      	cmp	r5, r8
 8007f4c:	9a05      	ldr	r2, [sp, #20]
 8007f4e:	462b      	mov	r3, r5
 8007f50:	bfa8      	it	ge
 8007f52:	4643      	movge	r3, r8
 8007f54:	1ad2      	subs	r2, r2, r3
 8007f56:	9205      	str	r2, [sp, #20]
 8007f58:	1aed      	subs	r5, r5, r3
 8007f5a:	eba8 0803 	sub.w	r8, r8, r3
 8007f5e:	9b07      	ldr	r3, [sp, #28]
 8007f60:	b1eb      	cbz	r3, 8007f9e <_dtoa_r+0x76e>
 8007f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d067      	beq.n	8008038 <_dtoa_r+0x808>
 8007f68:	b18f      	cbz	r7, 8007f8e <_dtoa_r+0x75e>
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	463a      	mov	r2, r7
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 fba4 	bl	80086bc <__pow5mult>
 8007f74:	9a04      	ldr	r2, [sp, #16]
 8007f76:	4601      	mov	r1, r0
 8007f78:	4606      	mov	r6, r0
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fb08 	bl	8008590 <__multiply>
 8007f80:	9904      	ldr	r1, [sp, #16]
 8007f82:	9008      	str	r0, [sp, #32]
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 fa5a 	bl	800843e <_Bfree>
 8007f8a:	9b08      	ldr	r3, [sp, #32]
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	9b07      	ldr	r3, [sp, #28]
 8007f90:	1bda      	subs	r2, r3, r7
 8007f92:	d004      	beq.n	8007f9e <_dtoa_r+0x76e>
 8007f94:	9904      	ldr	r1, [sp, #16]
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 fb90 	bl	80086bc <__pow5mult>
 8007f9c:	9004      	str	r0, [sp, #16]
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 faec 	bl	800857e <__i2b>
 8007fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fa8:	4607      	mov	r7, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 81d0 	beq.w	8008350 <_dtoa_r+0xb20>
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 fb81 	bl	80086bc <__pow5mult>
 8007fba:	9b06      	ldr	r3, [sp, #24]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	4607      	mov	r7, r0
 8007fc0:	dc40      	bgt.n	8008044 <_dtoa_r+0x814>
 8007fc2:	9b00      	ldr	r3, [sp, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d139      	bne.n	800803c <_dtoa_r+0x80c>
 8007fc8:	9b01      	ldr	r3, [sp, #4]
 8007fca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d136      	bne.n	8008040 <_dtoa_r+0x810>
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fd8:	0d1b      	lsrs	r3, r3, #20
 8007fda:	051b      	lsls	r3, r3, #20
 8007fdc:	b12b      	cbz	r3, 8007fea <_dtoa_r+0x7ba>
 8007fde:	9b05      	ldr	r3, [sp, #20]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	9305      	str	r3, [sp, #20]
 8007fe4:	f108 0801 	add.w	r8, r8, #1
 8007fe8:	2301      	movs	r3, #1
 8007fea:	9307      	str	r3, [sp, #28]
 8007fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d12a      	bne.n	8008048 <_dtoa_r+0x818>
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	e030      	b.n	8008058 <_dtoa_r+0x828>
 8007ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ff8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ffc:	e795      	b.n	8007f2a <_dtoa_r+0x6fa>
 8007ffe:	9b07      	ldr	r3, [sp, #28]
 8008000:	f109 37ff 	add.w	r7, r9, #4294967295
 8008004:	42bb      	cmp	r3, r7
 8008006:	bfbf      	itttt	lt
 8008008:	9b07      	ldrlt	r3, [sp, #28]
 800800a:	9707      	strlt	r7, [sp, #28]
 800800c:	1afa      	sublt	r2, r7, r3
 800800e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008010:	bfbb      	ittet	lt
 8008012:	189b      	addlt	r3, r3, r2
 8008014:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008016:	1bdf      	subge	r7, r3, r7
 8008018:	2700      	movlt	r7, #0
 800801a:	f1b9 0f00 	cmp.w	r9, #0
 800801e:	bfb5      	itete	lt
 8008020:	9b05      	ldrlt	r3, [sp, #20]
 8008022:	9d05      	ldrge	r5, [sp, #20]
 8008024:	eba3 0509 	sublt.w	r5, r3, r9
 8008028:	464b      	movge	r3, r9
 800802a:	bfb8      	it	lt
 800802c:	2300      	movlt	r3, #0
 800802e:	e77e      	b.n	8007f2e <_dtoa_r+0x6fe>
 8008030:	9f07      	ldr	r7, [sp, #28]
 8008032:	9d05      	ldr	r5, [sp, #20]
 8008034:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008036:	e783      	b.n	8007f40 <_dtoa_r+0x710>
 8008038:	9a07      	ldr	r2, [sp, #28]
 800803a:	e7ab      	b.n	8007f94 <_dtoa_r+0x764>
 800803c:	2300      	movs	r3, #0
 800803e:	e7d4      	b.n	8007fea <_dtoa_r+0x7ba>
 8008040:	9b00      	ldr	r3, [sp, #0]
 8008042:	e7d2      	b.n	8007fea <_dtoa_r+0x7ba>
 8008044:	2300      	movs	r3, #0
 8008046:	9307      	str	r3, [sp, #28]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800804e:	6918      	ldr	r0, [r3, #16]
 8008050:	f000 fa47 	bl	80084e2 <__hi0bits>
 8008054:	f1c0 0020 	rsb	r0, r0, #32
 8008058:	4440      	add	r0, r8
 800805a:	f010 001f 	ands.w	r0, r0, #31
 800805e:	d047      	beq.n	80080f0 <_dtoa_r+0x8c0>
 8008060:	f1c0 0320 	rsb	r3, r0, #32
 8008064:	2b04      	cmp	r3, #4
 8008066:	dd3b      	ble.n	80080e0 <_dtoa_r+0x8b0>
 8008068:	9b05      	ldr	r3, [sp, #20]
 800806a:	f1c0 001c 	rsb	r0, r0, #28
 800806e:	4403      	add	r3, r0
 8008070:	9305      	str	r3, [sp, #20]
 8008072:	4405      	add	r5, r0
 8008074:	4480      	add	r8, r0
 8008076:	9b05      	ldr	r3, [sp, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dd05      	ble.n	8008088 <_dtoa_r+0x858>
 800807c:	461a      	mov	r2, r3
 800807e:	9904      	ldr	r1, [sp, #16]
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fb69 	bl	8008758 <__lshift>
 8008086:	9004      	str	r0, [sp, #16]
 8008088:	f1b8 0f00 	cmp.w	r8, #0
 800808c:	dd05      	ble.n	800809a <_dtoa_r+0x86a>
 800808e:	4639      	mov	r1, r7
 8008090:	4642      	mov	r2, r8
 8008092:	4620      	mov	r0, r4
 8008094:	f000 fb60 	bl	8008758 <__lshift>
 8008098:	4607      	mov	r7, r0
 800809a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800809c:	b353      	cbz	r3, 80080f4 <_dtoa_r+0x8c4>
 800809e:	4639      	mov	r1, r7
 80080a0:	9804      	ldr	r0, [sp, #16]
 80080a2:	f000 fbad 	bl	8008800 <__mcmp>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	da24      	bge.n	80080f4 <_dtoa_r+0x8c4>
 80080aa:	2300      	movs	r3, #0
 80080ac:	220a      	movs	r2, #10
 80080ae:	9904      	ldr	r1, [sp, #16]
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 f9db 	bl	800846c <__multadd>
 80080b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b8:	9004      	str	r0, [sp, #16]
 80080ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 814d 	beq.w	800835e <_dtoa_r+0xb2e>
 80080c4:	2300      	movs	r3, #0
 80080c6:	4631      	mov	r1, r6
 80080c8:	220a      	movs	r2, #10
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 f9ce 	bl	800846c <__multadd>
 80080d0:	9b02      	ldr	r3, [sp, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	4606      	mov	r6, r0
 80080d6:	dc4f      	bgt.n	8008178 <_dtoa_r+0x948>
 80080d8:	9b06      	ldr	r3, [sp, #24]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	dd4c      	ble.n	8008178 <_dtoa_r+0x948>
 80080de:	e011      	b.n	8008104 <_dtoa_r+0x8d4>
 80080e0:	d0c9      	beq.n	8008076 <_dtoa_r+0x846>
 80080e2:	9a05      	ldr	r2, [sp, #20]
 80080e4:	331c      	adds	r3, #28
 80080e6:	441a      	add	r2, r3
 80080e8:	9205      	str	r2, [sp, #20]
 80080ea:	441d      	add	r5, r3
 80080ec:	4498      	add	r8, r3
 80080ee:	e7c2      	b.n	8008076 <_dtoa_r+0x846>
 80080f0:	4603      	mov	r3, r0
 80080f2:	e7f6      	b.n	80080e2 <_dtoa_r+0x8b2>
 80080f4:	f1b9 0f00 	cmp.w	r9, #0
 80080f8:	dc38      	bgt.n	800816c <_dtoa_r+0x93c>
 80080fa:	9b06      	ldr	r3, [sp, #24]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	dd35      	ble.n	800816c <_dtoa_r+0x93c>
 8008100:	f8cd 9008 	str.w	r9, [sp, #8]
 8008104:	9b02      	ldr	r3, [sp, #8]
 8008106:	b963      	cbnz	r3, 8008122 <_dtoa_r+0x8f2>
 8008108:	4639      	mov	r1, r7
 800810a:	2205      	movs	r2, #5
 800810c:	4620      	mov	r0, r4
 800810e:	f000 f9ad 	bl	800846c <__multadd>
 8008112:	4601      	mov	r1, r0
 8008114:	4607      	mov	r7, r0
 8008116:	9804      	ldr	r0, [sp, #16]
 8008118:	f000 fb72 	bl	8008800 <__mcmp>
 800811c:	2800      	cmp	r0, #0
 800811e:	f73f adcc 	bgt.w	8007cba <_dtoa_r+0x48a>
 8008122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008124:	465d      	mov	r5, fp
 8008126:	ea6f 0a03 	mvn.w	sl, r3
 800812a:	f04f 0900 	mov.w	r9, #0
 800812e:	4639      	mov	r1, r7
 8008130:	4620      	mov	r0, r4
 8008132:	f000 f984 	bl	800843e <_Bfree>
 8008136:	2e00      	cmp	r6, #0
 8008138:	f43f aeb7 	beq.w	8007eaa <_dtoa_r+0x67a>
 800813c:	f1b9 0f00 	cmp.w	r9, #0
 8008140:	d005      	beq.n	800814e <_dtoa_r+0x91e>
 8008142:	45b1      	cmp	r9, r6
 8008144:	d003      	beq.n	800814e <_dtoa_r+0x91e>
 8008146:	4649      	mov	r1, r9
 8008148:	4620      	mov	r0, r4
 800814a:	f000 f978 	bl	800843e <_Bfree>
 800814e:	4631      	mov	r1, r6
 8008150:	4620      	mov	r0, r4
 8008152:	f000 f974 	bl	800843e <_Bfree>
 8008156:	e6a8      	b.n	8007eaa <_dtoa_r+0x67a>
 8008158:	2700      	movs	r7, #0
 800815a:	463e      	mov	r6, r7
 800815c:	e7e1      	b.n	8008122 <_dtoa_r+0x8f2>
 800815e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008162:	463e      	mov	r6, r7
 8008164:	e5a9      	b.n	8007cba <_dtoa_r+0x48a>
 8008166:	bf00      	nop
 8008168:	40240000 	.word	0x40240000
 800816c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80fa 	beq.w	800836c <_dtoa_r+0xb3c>
 8008178:	2d00      	cmp	r5, #0
 800817a:	dd05      	ble.n	8008188 <_dtoa_r+0x958>
 800817c:	4631      	mov	r1, r6
 800817e:	462a      	mov	r2, r5
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fae9 	bl	8008758 <__lshift>
 8008186:	4606      	mov	r6, r0
 8008188:	9b07      	ldr	r3, [sp, #28]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d04c      	beq.n	8008228 <_dtoa_r+0x9f8>
 800818e:	6871      	ldr	r1, [r6, #4]
 8008190:	4620      	mov	r0, r4
 8008192:	f000 f920 	bl	80083d6 <_Balloc>
 8008196:	6932      	ldr	r2, [r6, #16]
 8008198:	3202      	adds	r2, #2
 800819a:	4605      	mov	r5, r0
 800819c:	0092      	lsls	r2, r2, #2
 800819e:	f106 010c 	add.w	r1, r6, #12
 80081a2:	300c      	adds	r0, #12
 80081a4:	f000 f90a 	bl	80083bc <memcpy>
 80081a8:	2201      	movs	r2, #1
 80081aa:	4629      	mov	r1, r5
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fad3 	bl	8008758 <__lshift>
 80081b2:	9b00      	ldr	r3, [sp, #0]
 80081b4:	f8cd b014 	str.w	fp, [sp, #20]
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	46b1      	mov	r9, r6
 80081be:	9307      	str	r3, [sp, #28]
 80081c0:	4606      	mov	r6, r0
 80081c2:	4639      	mov	r1, r7
 80081c4:	9804      	ldr	r0, [sp, #16]
 80081c6:	f7ff faa5 	bl	8007714 <quorem>
 80081ca:	4649      	mov	r1, r9
 80081cc:	4605      	mov	r5, r0
 80081ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80081d2:	9804      	ldr	r0, [sp, #16]
 80081d4:	f000 fb14 	bl	8008800 <__mcmp>
 80081d8:	4632      	mov	r2, r6
 80081da:	9000      	str	r0, [sp, #0]
 80081dc:	4639      	mov	r1, r7
 80081de:	4620      	mov	r0, r4
 80081e0:	f000 fb28 	bl	8008834 <__mdiff>
 80081e4:	68c3      	ldr	r3, [r0, #12]
 80081e6:	4602      	mov	r2, r0
 80081e8:	bb03      	cbnz	r3, 800822c <_dtoa_r+0x9fc>
 80081ea:	4601      	mov	r1, r0
 80081ec:	9008      	str	r0, [sp, #32]
 80081ee:	9804      	ldr	r0, [sp, #16]
 80081f0:	f000 fb06 	bl	8008800 <__mcmp>
 80081f4:	9a08      	ldr	r2, [sp, #32]
 80081f6:	4603      	mov	r3, r0
 80081f8:	4611      	mov	r1, r2
 80081fa:	4620      	mov	r0, r4
 80081fc:	9308      	str	r3, [sp, #32]
 80081fe:	f000 f91e 	bl	800843e <_Bfree>
 8008202:	9b08      	ldr	r3, [sp, #32]
 8008204:	b9a3      	cbnz	r3, 8008230 <_dtoa_r+0xa00>
 8008206:	9a06      	ldr	r2, [sp, #24]
 8008208:	b992      	cbnz	r2, 8008230 <_dtoa_r+0xa00>
 800820a:	9a07      	ldr	r2, [sp, #28]
 800820c:	b982      	cbnz	r2, 8008230 <_dtoa_r+0xa00>
 800820e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008212:	d029      	beq.n	8008268 <_dtoa_r+0xa38>
 8008214:	9b00      	ldr	r3, [sp, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	dd01      	ble.n	800821e <_dtoa_r+0x9ee>
 800821a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800821e:	9b05      	ldr	r3, [sp, #20]
 8008220:	1c5d      	adds	r5, r3, #1
 8008222:	f883 8000 	strb.w	r8, [r3]
 8008226:	e782      	b.n	800812e <_dtoa_r+0x8fe>
 8008228:	4630      	mov	r0, r6
 800822a:	e7c2      	b.n	80081b2 <_dtoa_r+0x982>
 800822c:	2301      	movs	r3, #1
 800822e:	e7e3      	b.n	80081f8 <_dtoa_r+0x9c8>
 8008230:	9a00      	ldr	r2, [sp, #0]
 8008232:	2a00      	cmp	r2, #0
 8008234:	db04      	blt.n	8008240 <_dtoa_r+0xa10>
 8008236:	d125      	bne.n	8008284 <_dtoa_r+0xa54>
 8008238:	9a06      	ldr	r2, [sp, #24]
 800823a:	bb1a      	cbnz	r2, 8008284 <_dtoa_r+0xa54>
 800823c:	9a07      	ldr	r2, [sp, #28]
 800823e:	bb0a      	cbnz	r2, 8008284 <_dtoa_r+0xa54>
 8008240:	2b00      	cmp	r3, #0
 8008242:	ddec      	ble.n	800821e <_dtoa_r+0x9ee>
 8008244:	2201      	movs	r2, #1
 8008246:	9904      	ldr	r1, [sp, #16]
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fa85 	bl	8008758 <__lshift>
 800824e:	4639      	mov	r1, r7
 8008250:	9004      	str	r0, [sp, #16]
 8008252:	f000 fad5 	bl	8008800 <__mcmp>
 8008256:	2800      	cmp	r0, #0
 8008258:	dc03      	bgt.n	8008262 <_dtoa_r+0xa32>
 800825a:	d1e0      	bne.n	800821e <_dtoa_r+0x9ee>
 800825c:	f018 0f01 	tst.w	r8, #1
 8008260:	d0dd      	beq.n	800821e <_dtoa_r+0x9ee>
 8008262:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008266:	d1d8      	bne.n	800821a <_dtoa_r+0x9ea>
 8008268:	9b05      	ldr	r3, [sp, #20]
 800826a:	9a05      	ldr	r2, [sp, #20]
 800826c:	1c5d      	adds	r5, r3, #1
 800826e:	2339      	movs	r3, #57	; 0x39
 8008270:	7013      	strb	r3, [r2, #0]
 8008272:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008276:	2b39      	cmp	r3, #57	; 0x39
 8008278:	f105 32ff 	add.w	r2, r5, #4294967295
 800827c:	d04f      	beq.n	800831e <_dtoa_r+0xaee>
 800827e:	3301      	adds	r3, #1
 8008280:	7013      	strb	r3, [r2, #0]
 8008282:	e754      	b.n	800812e <_dtoa_r+0x8fe>
 8008284:	9a05      	ldr	r2, [sp, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f102 0501 	add.w	r5, r2, #1
 800828c:	dd06      	ble.n	800829c <_dtoa_r+0xa6c>
 800828e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008292:	d0e9      	beq.n	8008268 <_dtoa_r+0xa38>
 8008294:	f108 0801 	add.w	r8, r8, #1
 8008298:	9b05      	ldr	r3, [sp, #20]
 800829a:	e7c2      	b.n	8008222 <_dtoa_r+0x9f2>
 800829c:	9a02      	ldr	r2, [sp, #8]
 800829e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80082a2:	eba5 030b 	sub.w	r3, r5, fp
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d021      	beq.n	80082ee <_dtoa_r+0xabe>
 80082aa:	2300      	movs	r3, #0
 80082ac:	220a      	movs	r2, #10
 80082ae:	9904      	ldr	r1, [sp, #16]
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 f8db 	bl	800846c <__multadd>
 80082b6:	45b1      	cmp	r9, r6
 80082b8:	9004      	str	r0, [sp, #16]
 80082ba:	f04f 0300 	mov.w	r3, #0
 80082be:	f04f 020a 	mov.w	r2, #10
 80082c2:	4649      	mov	r1, r9
 80082c4:	4620      	mov	r0, r4
 80082c6:	d105      	bne.n	80082d4 <_dtoa_r+0xaa4>
 80082c8:	f000 f8d0 	bl	800846c <__multadd>
 80082cc:	4681      	mov	r9, r0
 80082ce:	4606      	mov	r6, r0
 80082d0:	9505      	str	r5, [sp, #20]
 80082d2:	e776      	b.n	80081c2 <_dtoa_r+0x992>
 80082d4:	f000 f8ca 	bl	800846c <__multadd>
 80082d8:	4631      	mov	r1, r6
 80082da:	4681      	mov	r9, r0
 80082dc:	2300      	movs	r3, #0
 80082de:	220a      	movs	r2, #10
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 f8c3 	bl	800846c <__multadd>
 80082e6:	4606      	mov	r6, r0
 80082e8:	e7f2      	b.n	80082d0 <_dtoa_r+0xaa0>
 80082ea:	f04f 0900 	mov.w	r9, #0
 80082ee:	2201      	movs	r2, #1
 80082f0:	9904      	ldr	r1, [sp, #16]
 80082f2:	4620      	mov	r0, r4
 80082f4:	f000 fa30 	bl	8008758 <__lshift>
 80082f8:	4639      	mov	r1, r7
 80082fa:	9004      	str	r0, [sp, #16]
 80082fc:	f000 fa80 	bl	8008800 <__mcmp>
 8008300:	2800      	cmp	r0, #0
 8008302:	dcb6      	bgt.n	8008272 <_dtoa_r+0xa42>
 8008304:	d102      	bne.n	800830c <_dtoa_r+0xadc>
 8008306:	f018 0f01 	tst.w	r8, #1
 800830a:	d1b2      	bne.n	8008272 <_dtoa_r+0xa42>
 800830c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008310:	2b30      	cmp	r3, #48	; 0x30
 8008312:	f105 32ff 	add.w	r2, r5, #4294967295
 8008316:	f47f af0a 	bne.w	800812e <_dtoa_r+0x8fe>
 800831a:	4615      	mov	r5, r2
 800831c:	e7f6      	b.n	800830c <_dtoa_r+0xadc>
 800831e:	4593      	cmp	fp, r2
 8008320:	d105      	bne.n	800832e <_dtoa_r+0xafe>
 8008322:	2331      	movs	r3, #49	; 0x31
 8008324:	f10a 0a01 	add.w	sl, sl, #1
 8008328:	f88b 3000 	strb.w	r3, [fp]
 800832c:	e6ff      	b.n	800812e <_dtoa_r+0x8fe>
 800832e:	4615      	mov	r5, r2
 8008330:	e79f      	b.n	8008272 <_dtoa_r+0xa42>
 8008332:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008398 <_dtoa_r+0xb68>
 8008336:	e007      	b.n	8008348 <_dtoa_r+0xb18>
 8008338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800833a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800839c <_dtoa_r+0xb6c>
 800833e:	b11b      	cbz	r3, 8008348 <_dtoa_r+0xb18>
 8008340:	f10b 0308 	add.w	r3, fp, #8
 8008344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	4658      	mov	r0, fp
 800834a:	b017      	add	sp, #92	; 0x5c
 800834c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008350:	9b06      	ldr	r3, [sp, #24]
 8008352:	2b01      	cmp	r3, #1
 8008354:	f77f ae35 	ble.w	8007fc2 <_dtoa_r+0x792>
 8008358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	e649      	b.n	8007ff2 <_dtoa_r+0x7c2>
 800835e:	9b02      	ldr	r3, [sp, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	dc03      	bgt.n	800836c <_dtoa_r+0xb3c>
 8008364:	9b06      	ldr	r3, [sp, #24]
 8008366:	2b02      	cmp	r3, #2
 8008368:	f73f aecc 	bgt.w	8008104 <_dtoa_r+0x8d4>
 800836c:	465d      	mov	r5, fp
 800836e:	4639      	mov	r1, r7
 8008370:	9804      	ldr	r0, [sp, #16]
 8008372:	f7ff f9cf 	bl	8007714 <quorem>
 8008376:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800837a:	f805 8b01 	strb.w	r8, [r5], #1
 800837e:	9a02      	ldr	r2, [sp, #8]
 8008380:	eba5 030b 	sub.w	r3, r5, fp
 8008384:	429a      	cmp	r2, r3
 8008386:	ddb0      	ble.n	80082ea <_dtoa_r+0xaba>
 8008388:	2300      	movs	r3, #0
 800838a:	220a      	movs	r2, #10
 800838c:	9904      	ldr	r1, [sp, #16]
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f86c 	bl	800846c <__multadd>
 8008394:	9004      	str	r0, [sp, #16]
 8008396:	e7ea      	b.n	800836e <_dtoa_r+0xb3e>
 8008398:	0800a3f8 	.word	0x0800a3f8
 800839c:	0800a41c 	.word	0x0800a41c

080083a0 <_localeconv_r>:
 80083a0:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <_localeconv_r+0x14>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6a18      	ldr	r0, [r3, #32]
 80083a6:	4b04      	ldr	r3, [pc, #16]	; (80083b8 <_localeconv_r+0x18>)
 80083a8:	2800      	cmp	r0, #0
 80083aa:	bf08      	it	eq
 80083ac:	4618      	moveq	r0, r3
 80083ae:	30f0      	adds	r0, #240	; 0xf0
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	2000006c 	.word	0x2000006c
 80083b8:	200000d0 	.word	0x200000d0

080083bc <memcpy>:
 80083bc:	b510      	push	{r4, lr}
 80083be:	1e43      	subs	r3, r0, #1
 80083c0:	440a      	add	r2, r1
 80083c2:	4291      	cmp	r1, r2
 80083c4:	d100      	bne.n	80083c8 <memcpy+0xc>
 80083c6:	bd10      	pop	{r4, pc}
 80083c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d0:	e7f7      	b.n	80083c2 <memcpy+0x6>

080083d2 <__malloc_lock>:
 80083d2:	4770      	bx	lr

080083d4 <__malloc_unlock>:
 80083d4:	4770      	bx	lr

080083d6 <_Balloc>:
 80083d6:	b570      	push	{r4, r5, r6, lr}
 80083d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083da:	4604      	mov	r4, r0
 80083dc:	460e      	mov	r6, r1
 80083de:	b93d      	cbnz	r5, 80083f0 <_Balloc+0x1a>
 80083e0:	2010      	movs	r0, #16
 80083e2:	f7fe fc45 	bl	8006c70 <malloc>
 80083e6:	6260      	str	r0, [r4, #36]	; 0x24
 80083e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083ec:	6005      	str	r5, [r0, #0]
 80083ee:	60c5      	str	r5, [r0, #12]
 80083f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80083f2:	68eb      	ldr	r3, [r5, #12]
 80083f4:	b183      	cbz	r3, 8008418 <_Balloc+0x42>
 80083f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80083fe:	b9b8      	cbnz	r0, 8008430 <_Balloc+0x5a>
 8008400:	2101      	movs	r1, #1
 8008402:	fa01 f506 	lsl.w	r5, r1, r6
 8008406:	1d6a      	adds	r2, r5, #5
 8008408:	0092      	lsls	r2, r2, #2
 800840a:	4620      	mov	r0, r4
 800840c:	f7fe fc40 	bl	8006c90 <_calloc_r>
 8008410:	b160      	cbz	r0, 800842c <_Balloc+0x56>
 8008412:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008416:	e00e      	b.n	8008436 <_Balloc+0x60>
 8008418:	2221      	movs	r2, #33	; 0x21
 800841a:	2104      	movs	r1, #4
 800841c:	4620      	mov	r0, r4
 800841e:	f7fe fc37 	bl	8006c90 <_calloc_r>
 8008422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008424:	60e8      	str	r0, [r5, #12]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e4      	bne.n	80083f6 <_Balloc+0x20>
 800842c:	2000      	movs	r0, #0
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	6802      	ldr	r2, [r0, #0]
 8008432:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008436:	2300      	movs	r3, #0
 8008438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800843c:	e7f7      	b.n	800842e <_Balloc+0x58>

0800843e <_Bfree>:
 800843e:	b570      	push	{r4, r5, r6, lr}
 8008440:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008442:	4606      	mov	r6, r0
 8008444:	460d      	mov	r5, r1
 8008446:	b93c      	cbnz	r4, 8008458 <_Bfree+0x1a>
 8008448:	2010      	movs	r0, #16
 800844a:	f7fe fc11 	bl	8006c70 <malloc>
 800844e:	6270      	str	r0, [r6, #36]	; 0x24
 8008450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008454:	6004      	str	r4, [r0, #0]
 8008456:	60c4      	str	r4, [r0, #12]
 8008458:	b13d      	cbz	r5, 800846a <_Bfree+0x2c>
 800845a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800845c:	686a      	ldr	r2, [r5, #4]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008464:	6029      	str	r1, [r5, #0]
 8008466:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800846a:	bd70      	pop	{r4, r5, r6, pc}

0800846c <__multadd>:
 800846c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008470:	690d      	ldr	r5, [r1, #16]
 8008472:	461f      	mov	r7, r3
 8008474:	4606      	mov	r6, r0
 8008476:	460c      	mov	r4, r1
 8008478:	f101 0c14 	add.w	ip, r1, #20
 800847c:	2300      	movs	r3, #0
 800847e:	f8dc 0000 	ldr.w	r0, [ip]
 8008482:	b281      	uxth	r1, r0
 8008484:	fb02 7101 	mla	r1, r2, r1, r7
 8008488:	0c0f      	lsrs	r7, r1, #16
 800848a:	0c00      	lsrs	r0, r0, #16
 800848c:	fb02 7000 	mla	r0, r2, r0, r7
 8008490:	b289      	uxth	r1, r1
 8008492:	3301      	adds	r3, #1
 8008494:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008498:	429d      	cmp	r5, r3
 800849a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800849e:	f84c 1b04 	str.w	r1, [ip], #4
 80084a2:	dcec      	bgt.n	800847e <__multadd+0x12>
 80084a4:	b1d7      	cbz	r7, 80084dc <__multadd+0x70>
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	42ab      	cmp	r3, r5
 80084aa:	dc12      	bgt.n	80084d2 <__multadd+0x66>
 80084ac:	6861      	ldr	r1, [r4, #4]
 80084ae:	4630      	mov	r0, r6
 80084b0:	3101      	adds	r1, #1
 80084b2:	f7ff ff90 	bl	80083d6 <_Balloc>
 80084b6:	6922      	ldr	r2, [r4, #16]
 80084b8:	3202      	adds	r2, #2
 80084ba:	f104 010c 	add.w	r1, r4, #12
 80084be:	4680      	mov	r8, r0
 80084c0:	0092      	lsls	r2, r2, #2
 80084c2:	300c      	adds	r0, #12
 80084c4:	f7ff ff7a 	bl	80083bc <memcpy>
 80084c8:	4621      	mov	r1, r4
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7ff ffb7 	bl	800843e <_Bfree>
 80084d0:	4644      	mov	r4, r8
 80084d2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084d6:	3501      	adds	r5, #1
 80084d8:	615f      	str	r7, [r3, #20]
 80084da:	6125      	str	r5, [r4, #16]
 80084dc:	4620      	mov	r0, r4
 80084de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084e2 <__hi0bits>:
 80084e2:	0c02      	lsrs	r2, r0, #16
 80084e4:	0412      	lsls	r2, r2, #16
 80084e6:	4603      	mov	r3, r0
 80084e8:	b9b2      	cbnz	r2, 8008518 <__hi0bits+0x36>
 80084ea:	0403      	lsls	r3, r0, #16
 80084ec:	2010      	movs	r0, #16
 80084ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80084f2:	bf04      	itt	eq
 80084f4:	021b      	lsleq	r3, r3, #8
 80084f6:	3008      	addeq	r0, #8
 80084f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80084fc:	bf04      	itt	eq
 80084fe:	011b      	lsleq	r3, r3, #4
 8008500:	3004      	addeq	r0, #4
 8008502:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008506:	bf04      	itt	eq
 8008508:	009b      	lsleq	r3, r3, #2
 800850a:	3002      	addeq	r0, #2
 800850c:	2b00      	cmp	r3, #0
 800850e:	db06      	blt.n	800851e <__hi0bits+0x3c>
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	d503      	bpl.n	800851c <__hi0bits+0x3a>
 8008514:	3001      	adds	r0, #1
 8008516:	4770      	bx	lr
 8008518:	2000      	movs	r0, #0
 800851a:	e7e8      	b.n	80084ee <__hi0bits+0xc>
 800851c:	2020      	movs	r0, #32
 800851e:	4770      	bx	lr

08008520 <__lo0bits>:
 8008520:	6803      	ldr	r3, [r0, #0]
 8008522:	f013 0207 	ands.w	r2, r3, #7
 8008526:	4601      	mov	r1, r0
 8008528:	d00b      	beq.n	8008542 <__lo0bits+0x22>
 800852a:	07da      	lsls	r2, r3, #31
 800852c:	d423      	bmi.n	8008576 <__lo0bits+0x56>
 800852e:	0798      	lsls	r0, r3, #30
 8008530:	bf49      	itett	mi
 8008532:	085b      	lsrmi	r3, r3, #1
 8008534:	089b      	lsrpl	r3, r3, #2
 8008536:	2001      	movmi	r0, #1
 8008538:	600b      	strmi	r3, [r1, #0]
 800853a:	bf5c      	itt	pl
 800853c:	600b      	strpl	r3, [r1, #0]
 800853e:	2002      	movpl	r0, #2
 8008540:	4770      	bx	lr
 8008542:	b298      	uxth	r0, r3
 8008544:	b9a8      	cbnz	r0, 8008572 <__lo0bits+0x52>
 8008546:	0c1b      	lsrs	r3, r3, #16
 8008548:	2010      	movs	r0, #16
 800854a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800854e:	bf04      	itt	eq
 8008550:	0a1b      	lsreq	r3, r3, #8
 8008552:	3008      	addeq	r0, #8
 8008554:	071a      	lsls	r2, r3, #28
 8008556:	bf04      	itt	eq
 8008558:	091b      	lsreq	r3, r3, #4
 800855a:	3004      	addeq	r0, #4
 800855c:	079a      	lsls	r2, r3, #30
 800855e:	bf04      	itt	eq
 8008560:	089b      	lsreq	r3, r3, #2
 8008562:	3002      	addeq	r0, #2
 8008564:	07da      	lsls	r2, r3, #31
 8008566:	d402      	bmi.n	800856e <__lo0bits+0x4e>
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	d006      	beq.n	800857a <__lo0bits+0x5a>
 800856c:	3001      	adds	r0, #1
 800856e:	600b      	str	r3, [r1, #0]
 8008570:	4770      	bx	lr
 8008572:	4610      	mov	r0, r2
 8008574:	e7e9      	b.n	800854a <__lo0bits+0x2a>
 8008576:	2000      	movs	r0, #0
 8008578:	4770      	bx	lr
 800857a:	2020      	movs	r0, #32
 800857c:	4770      	bx	lr

0800857e <__i2b>:
 800857e:	b510      	push	{r4, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	2101      	movs	r1, #1
 8008584:	f7ff ff27 	bl	80083d6 <_Balloc>
 8008588:	2201      	movs	r2, #1
 800858a:	6144      	str	r4, [r0, #20]
 800858c:	6102      	str	r2, [r0, #16]
 800858e:	bd10      	pop	{r4, pc}

08008590 <__multiply>:
 8008590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	4614      	mov	r4, r2
 8008596:	690a      	ldr	r2, [r1, #16]
 8008598:	6923      	ldr	r3, [r4, #16]
 800859a:	429a      	cmp	r2, r3
 800859c:	bfb8      	it	lt
 800859e:	460b      	movlt	r3, r1
 80085a0:	4688      	mov	r8, r1
 80085a2:	bfbc      	itt	lt
 80085a4:	46a0      	movlt	r8, r4
 80085a6:	461c      	movlt	r4, r3
 80085a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80085b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085b8:	eb07 0609 	add.w	r6, r7, r9
 80085bc:	42b3      	cmp	r3, r6
 80085be:	bfb8      	it	lt
 80085c0:	3101      	addlt	r1, #1
 80085c2:	f7ff ff08 	bl	80083d6 <_Balloc>
 80085c6:	f100 0514 	add.w	r5, r0, #20
 80085ca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80085ce:	462b      	mov	r3, r5
 80085d0:	2200      	movs	r2, #0
 80085d2:	4573      	cmp	r3, lr
 80085d4:	d316      	bcc.n	8008604 <__multiply+0x74>
 80085d6:	f104 0214 	add.w	r2, r4, #20
 80085da:	f108 0114 	add.w	r1, r8, #20
 80085de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80085e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	9b00      	ldr	r3, [sp, #0]
 80085ea:	9201      	str	r2, [sp, #4]
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d80c      	bhi.n	800860a <__multiply+0x7a>
 80085f0:	2e00      	cmp	r6, #0
 80085f2:	dd03      	ble.n	80085fc <__multiply+0x6c>
 80085f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d05d      	beq.n	80086b8 <__multiply+0x128>
 80085fc:	6106      	str	r6, [r0, #16]
 80085fe:	b003      	add	sp, #12
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	f843 2b04 	str.w	r2, [r3], #4
 8008608:	e7e3      	b.n	80085d2 <__multiply+0x42>
 800860a:	f8b2 b000 	ldrh.w	fp, [r2]
 800860e:	f1bb 0f00 	cmp.w	fp, #0
 8008612:	d023      	beq.n	800865c <__multiply+0xcc>
 8008614:	4689      	mov	r9, r1
 8008616:	46ac      	mov	ip, r5
 8008618:	f04f 0800 	mov.w	r8, #0
 800861c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008620:	f8dc a000 	ldr.w	sl, [ip]
 8008624:	b2a3      	uxth	r3, r4
 8008626:	fa1f fa8a 	uxth.w	sl, sl
 800862a:	fb0b a303 	mla	r3, fp, r3, sl
 800862e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008632:	f8dc 4000 	ldr.w	r4, [ip]
 8008636:	4443      	add	r3, r8
 8008638:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800863c:	fb0b 840a 	mla	r4, fp, sl, r8
 8008640:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008644:	46e2      	mov	sl, ip
 8008646:	b29b      	uxth	r3, r3
 8008648:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800864c:	454f      	cmp	r7, r9
 800864e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008652:	f84a 3b04 	str.w	r3, [sl], #4
 8008656:	d82b      	bhi.n	80086b0 <__multiply+0x120>
 8008658:	f8cc 8004 	str.w	r8, [ip, #4]
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008662:	3204      	adds	r2, #4
 8008664:	f1ba 0f00 	cmp.w	sl, #0
 8008668:	d020      	beq.n	80086ac <__multiply+0x11c>
 800866a:	682b      	ldr	r3, [r5, #0]
 800866c:	4689      	mov	r9, r1
 800866e:	46a8      	mov	r8, r5
 8008670:	f04f 0b00 	mov.w	fp, #0
 8008674:	f8b9 c000 	ldrh.w	ip, [r9]
 8008678:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800867c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008680:	445c      	add	r4, fp
 8008682:	46c4      	mov	ip, r8
 8008684:	b29b      	uxth	r3, r3
 8008686:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800868a:	f84c 3b04 	str.w	r3, [ip], #4
 800868e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008692:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008696:	0c1b      	lsrs	r3, r3, #16
 8008698:	fb0a b303 	mla	r3, sl, r3, fp
 800869c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80086a0:	454f      	cmp	r7, r9
 80086a2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80086a6:	d805      	bhi.n	80086b4 <__multiply+0x124>
 80086a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80086ac:	3504      	adds	r5, #4
 80086ae:	e79b      	b.n	80085e8 <__multiply+0x58>
 80086b0:	46d4      	mov	ip, sl
 80086b2:	e7b3      	b.n	800861c <__multiply+0x8c>
 80086b4:	46e0      	mov	r8, ip
 80086b6:	e7dd      	b.n	8008674 <__multiply+0xe4>
 80086b8:	3e01      	subs	r6, #1
 80086ba:	e799      	b.n	80085f0 <__multiply+0x60>

080086bc <__pow5mult>:
 80086bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c0:	4615      	mov	r5, r2
 80086c2:	f012 0203 	ands.w	r2, r2, #3
 80086c6:	4606      	mov	r6, r0
 80086c8:	460f      	mov	r7, r1
 80086ca:	d007      	beq.n	80086dc <__pow5mult+0x20>
 80086cc:	3a01      	subs	r2, #1
 80086ce:	4c21      	ldr	r4, [pc, #132]	; (8008754 <__pow5mult+0x98>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086d6:	f7ff fec9 	bl	800846c <__multadd>
 80086da:	4607      	mov	r7, r0
 80086dc:	10ad      	asrs	r5, r5, #2
 80086de:	d035      	beq.n	800874c <__pow5mult+0x90>
 80086e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086e2:	b93c      	cbnz	r4, 80086f4 <__pow5mult+0x38>
 80086e4:	2010      	movs	r0, #16
 80086e6:	f7fe fac3 	bl	8006c70 <malloc>
 80086ea:	6270      	str	r0, [r6, #36]	; 0x24
 80086ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086f0:	6004      	str	r4, [r0, #0]
 80086f2:	60c4      	str	r4, [r0, #12]
 80086f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086fc:	b94c      	cbnz	r4, 8008712 <__pow5mult+0x56>
 80086fe:	f240 2171 	movw	r1, #625	; 0x271
 8008702:	4630      	mov	r0, r6
 8008704:	f7ff ff3b 	bl	800857e <__i2b>
 8008708:	2300      	movs	r3, #0
 800870a:	f8c8 0008 	str.w	r0, [r8, #8]
 800870e:	4604      	mov	r4, r0
 8008710:	6003      	str	r3, [r0, #0]
 8008712:	f04f 0800 	mov.w	r8, #0
 8008716:	07eb      	lsls	r3, r5, #31
 8008718:	d50a      	bpl.n	8008730 <__pow5mult+0x74>
 800871a:	4639      	mov	r1, r7
 800871c:	4622      	mov	r2, r4
 800871e:	4630      	mov	r0, r6
 8008720:	f7ff ff36 	bl	8008590 <__multiply>
 8008724:	4639      	mov	r1, r7
 8008726:	4681      	mov	r9, r0
 8008728:	4630      	mov	r0, r6
 800872a:	f7ff fe88 	bl	800843e <_Bfree>
 800872e:	464f      	mov	r7, r9
 8008730:	106d      	asrs	r5, r5, #1
 8008732:	d00b      	beq.n	800874c <__pow5mult+0x90>
 8008734:	6820      	ldr	r0, [r4, #0]
 8008736:	b938      	cbnz	r0, 8008748 <__pow5mult+0x8c>
 8008738:	4622      	mov	r2, r4
 800873a:	4621      	mov	r1, r4
 800873c:	4630      	mov	r0, r6
 800873e:	f7ff ff27 	bl	8008590 <__multiply>
 8008742:	6020      	str	r0, [r4, #0]
 8008744:	f8c0 8000 	str.w	r8, [r0]
 8008748:	4604      	mov	r4, r0
 800874a:	e7e4      	b.n	8008716 <__pow5mult+0x5a>
 800874c:	4638      	mov	r0, r7
 800874e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008752:	bf00      	nop
 8008754:	0800a520 	.word	0x0800a520

08008758 <__lshift>:
 8008758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875c:	460c      	mov	r4, r1
 800875e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008762:	6923      	ldr	r3, [r4, #16]
 8008764:	6849      	ldr	r1, [r1, #4]
 8008766:	eb0a 0903 	add.w	r9, sl, r3
 800876a:	68a3      	ldr	r3, [r4, #8]
 800876c:	4607      	mov	r7, r0
 800876e:	4616      	mov	r6, r2
 8008770:	f109 0501 	add.w	r5, r9, #1
 8008774:	42ab      	cmp	r3, r5
 8008776:	db32      	blt.n	80087de <__lshift+0x86>
 8008778:	4638      	mov	r0, r7
 800877a:	f7ff fe2c 	bl	80083d6 <_Balloc>
 800877e:	2300      	movs	r3, #0
 8008780:	4680      	mov	r8, r0
 8008782:	f100 0114 	add.w	r1, r0, #20
 8008786:	461a      	mov	r2, r3
 8008788:	4553      	cmp	r3, sl
 800878a:	db2b      	blt.n	80087e4 <__lshift+0x8c>
 800878c:	6920      	ldr	r0, [r4, #16]
 800878e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008792:	f104 0314 	add.w	r3, r4, #20
 8008796:	f016 021f 	ands.w	r2, r6, #31
 800879a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800879e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087a2:	d025      	beq.n	80087f0 <__lshift+0x98>
 80087a4:	f1c2 0e20 	rsb	lr, r2, #32
 80087a8:	2000      	movs	r0, #0
 80087aa:	681e      	ldr	r6, [r3, #0]
 80087ac:	468a      	mov	sl, r1
 80087ae:	4096      	lsls	r6, r2
 80087b0:	4330      	orrs	r0, r6
 80087b2:	f84a 0b04 	str.w	r0, [sl], #4
 80087b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80087ba:	459c      	cmp	ip, r3
 80087bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80087c0:	d814      	bhi.n	80087ec <__lshift+0x94>
 80087c2:	6048      	str	r0, [r1, #4]
 80087c4:	b108      	cbz	r0, 80087ca <__lshift+0x72>
 80087c6:	f109 0502 	add.w	r5, r9, #2
 80087ca:	3d01      	subs	r5, #1
 80087cc:	4638      	mov	r0, r7
 80087ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80087d2:	4621      	mov	r1, r4
 80087d4:	f7ff fe33 	bl	800843e <_Bfree>
 80087d8:	4640      	mov	r0, r8
 80087da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087de:	3101      	adds	r1, #1
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	e7c7      	b.n	8008774 <__lshift+0x1c>
 80087e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80087e8:	3301      	adds	r3, #1
 80087ea:	e7cd      	b.n	8008788 <__lshift+0x30>
 80087ec:	4651      	mov	r1, sl
 80087ee:	e7dc      	b.n	80087aa <__lshift+0x52>
 80087f0:	3904      	subs	r1, #4
 80087f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80087fa:	459c      	cmp	ip, r3
 80087fc:	d8f9      	bhi.n	80087f2 <__lshift+0x9a>
 80087fe:	e7e4      	b.n	80087ca <__lshift+0x72>

08008800 <__mcmp>:
 8008800:	6903      	ldr	r3, [r0, #16]
 8008802:	690a      	ldr	r2, [r1, #16]
 8008804:	1a9b      	subs	r3, r3, r2
 8008806:	b530      	push	{r4, r5, lr}
 8008808:	d10c      	bne.n	8008824 <__mcmp+0x24>
 800880a:	0092      	lsls	r2, r2, #2
 800880c:	3014      	adds	r0, #20
 800880e:	3114      	adds	r1, #20
 8008810:	1884      	adds	r4, r0, r2
 8008812:	4411      	add	r1, r2
 8008814:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008818:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800881c:	4295      	cmp	r5, r2
 800881e:	d003      	beq.n	8008828 <__mcmp+0x28>
 8008820:	d305      	bcc.n	800882e <__mcmp+0x2e>
 8008822:	2301      	movs	r3, #1
 8008824:	4618      	mov	r0, r3
 8008826:	bd30      	pop	{r4, r5, pc}
 8008828:	42a0      	cmp	r0, r4
 800882a:	d3f3      	bcc.n	8008814 <__mcmp+0x14>
 800882c:	e7fa      	b.n	8008824 <__mcmp+0x24>
 800882e:	f04f 33ff 	mov.w	r3, #4294967295
 8008832:	e7f7      	b.n	8008824 <__mcmp+0x24>

08008834 <__mdiff>:
 8008834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008838:	460d      	mov	r5, r1
 800883a:	4607      	mov	r7, r0
 800883c:	4611      	mov	r1, r2
 800883e:	4628      	mov	r0, r5
 8008840:	4614      	mov	r4, r2
 8008842:	f7ff ffdd 	bl	8008800 <__mcmp>
 8008846:	1e06      	subs	r6, r0, #0
 8008848:	d108      	bne.n	800885c <__mdiff+0x28>
 800884a:	4631      	mov	r1, r6
 800884c:	4638      	mov	r0, r7
 800884e:	f7ff fdc2 	bl	80083d6 <_Balloc>
 8008852:	2301      	movs	r3, #1
 8008854:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885c:	bfa4      	itt	ge
 800885e:	4623      	movge	r3, r4
 8008860:	462c      	movge	r4, r5
 8008862:	4638      	mov	r0, r7
 8008864:	6861      	ldr	r1, [r4, #4]
 8008866:	bfa6      	itte	ge
 8008868:	461d      	movge	r5, r3
 800886a:	2600      	movge	r6, #0
 800886c:	2601      	movlt	r6, #1
 800886e:	f7ff fdb2 	bl	80083d6 <_Balloc>
 8008872:	692b      	ldr	r3, [r5, #16]
 8008874:	60c6      	str	r6, [r0, #12]
 8008876:	6926      	ldr	r6, [r4, #16]
 8008878:	f105 0914 	add.w	r9, r5, #20
 800887c:	f104 0214 	add.w	r2, r4, #20
 8008880:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008884:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008888:	f100 0514 	add.w	r5, r0, #20
 800888c:	f04f 0e00 	mov.w	lr, #0
 8008890:	f852 ab04 	ldr.w	sl, [r2], #4
 8008894:	f859 4b04 	ldr.w	r4, [r9], #4
 8008898:	fa1e f18a 	uxtah	r1, lr, sl
 800889c:	b2a3      	uxth	r3, r4
 800889e:	1ac9      	subs	r1, r1, r3
 80088a0:	0c23      	lsrs	r3, r4, #16
 80088a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80088a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80088aa:	b289      	uxth	r1, r1
 80088ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80088b0:	45c8      	cmp	r8, r9
 80088b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80088b6:	4694      	mov	ip, r2
 80088b8:	f845 3b04 	str.w	r3, [r5], #4
 80088bc:	d8e8      	bhi.n	8008890 <__mdiff+0x5c>
 80088be:	45bc      	cmp	ip, r7
 80088c0:	d304      	bcc.n	80088cc <__mdiff+0x98>
 80088c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80088c6:	b183      	cbz	r3, 80088ea <__mdiff+0xb6>
 80088c8:	6106      	str	r6, [r0, #16]
 80088ca:	e7c5      	b.n	8008858 <__mdiff+0x24>
 80088cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80088d0:	fa1e f381 	uxtah	r3, lr, r1
 80088d4:	141a      	asrs	r2, r3, #16
 80088d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088da:	b29b      	uxth	r3, r3
 80088dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80088e4:	f845 3b04 	str.w	r3, [r5], #4
 80088e8:	e7e9      	b.n	80088be <__mdiff+0x8a>
 80088ea:	3e01      	subs	r6, #1
 80088ec:	e7e9      	b.n	80088c2 <__mdiff+0x8e>

080088ee <__d2b>:
 80088ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088f2:	460e      	mov	r6, r1
 80088f4:	2101      	movs	r1, #1
 80088f6:	ec59 8b10 	vmov	r8, r9, d0
 80088fa:	4615      	mov	r5, r2
 80088fc:	f7ff fd6b 	bl	80083d6 <_Balloc>
 8008900:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008904:	4607      	mov	r7, r0
 8008906:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800890a:	bb34      	cbnz	r4, 800895a <__d2b+0x6c>
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	f1b8 0300 	subs.w	r3, r8, #0
 8008912:	d027      	beq.n	8008964 <__d2b+0x76>
 8008914:	a802      	add	r0, sp, #8
 8008916:	f840 3d08 	str.w	r3, [r0, #-8]!
 800891a:	f7ff fe01 	bl	8008520 <__lo0bits>
 800891e:	9900      	ldr	r1, [sp, #0]
 8008920:	b1f0      	cbz	r0, 8008960 <__d2b+0x72>
 8008922:	9a01      	ldr	r2, [sp, #4]
 8008924:	f1c0 0320 	rsb	r3, r0, #32
 8008928:	fa02 f303 	lsl.w	r3, r2, r3
 800892c:	430b      	orrs	r3, r1
 800892e:	40c2      	lsrs	r2, r0
 8008930:	617b      	str	r3, [r7, #20]
 8008932:	9201      	str	r2, [sp, #4]
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	61bb      	str	r3, [r7, #24]
 8008938:	2b00      	cmp	r3, #0
 800893a:	bf14      	ite	ne
 800893c:	2102      	movne	r1, #2
 800893e:	2101      	moveq	r1, #1
 8008940:	6139      	str	r1, [r7, #16]
 8008942:	b1c4      	cbz	r4, 8008976 <__d2b+0x88>
 8008944:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008948:	4404      	add	r4, r0
 800894a:	6034      	str	r4, [r6, #0]
 800894c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008950:	6028      	str	r0, [r5, #0]
 8008952:	4638      	mov	r0, r7
 8008954:	b003      	add	sp, #12
 8008956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800895a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800895e:	e7d5      	b.n	800890c <__d2b+0x1e>
 8008960:	6179      	str	r1, [r7, #20]
 8008962:	e7e7      	b.n	8008934 <__d2b+0x46>
 8008964:	a801      	add	r0, sp, #4
 8008966:	f7ff fddb 	bl	8008520 <__lo0bits>
 800896a:	9b01      	ldr	r3, [sp, #4]
 800896c:	617b      	str	r3, [r7, #20]
 800896e:	2101      	movs	r1, #1
 8008970:	6139      	str	r1, [r7, #16]
 8008972:	3020      	adds	r0, #32
 8008974:	e7e5      	b.n	8008942 <__d2b+0x54>
 8008976:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800897a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800897e:	6030      	str	r0, [r6, #0]
 8008980:	6918      	ldr	r0, [r3, #16]
 8008982:	f7ff fdae 	bl	80084e2 <__hi0bits>
 8008986:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800898a:	e7e1      	b.n	8008950 <__d2b+0x62>

0800898c <__ssputs_r>:
 800898c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	688e      	ldr	r6, [r1, #8]
 8008992:	429e      	cmp	r6, r3
 8008994:	4682      	mov	sl, r0
 8008996:	460c      	mov	r4, r1
 8008998:	4690      	mov	r8, r2
 800899a:	4699      	mov	r9, r3
 800899c:	d837      	bhi.n	8008a0e <__ssputs_r+0x82>
 800899e:	898a      	ldrh	r2, [r1, #12]
 80089a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089a4:	d031      	beq.n	8008a0a <__ssputs_r+0x7e>
 80089a6:	6825      	ldr	r5, [r4, #0]
 80089a8:	6909      	ldr	r1, [r1, #16]
 80089aa:	1a6f      	subs	r7, r5, r1
 80089ac:	6965      	ldr	r5, [r4, #20]
 80089ae:	2302      	movs	r3, #2
 80089b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80089b8:	f109 0301 	add.w	r3, r9, #1
 80089bc:	443b      	add	r3, r7
 80089be:	429d      	cmp	r5, r3
 80089c0:	bf38      	it	cc
 80089c2:	461d      	movcc	r5, r3
 80089c4:	0553      	lsls	r3, r2, #21
 80089c6:	d530      	bpl.n	8008a2a <__ssputs_r+0x9e>
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7fe f9bd 	bl	8006d48 <_malloc_r>
 80089ce:	4606      	mov	r6, r0
 80089d0:	b950      	cbnz	r0, 80089e8 <__ssputs_r+0x5c>
 80089d2:	230c      	movs	r3, #12
 80089d4:	f8ca 3000 	str.w	r3, [sl]
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089de:	81a3      	strh	r3, [r4, #12]
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e8:	463a      	mov	r2, r7
 80089ea:	6921      	ldr	r1, [r4, #16]
 80089ec:	f7ff fce6 	bl	80083bc <memcpy>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	6126      	str	r6, [r4, #16]
 80089fe:	6165      	str	r5, [r4, #20]
 8008a00:	443e      	add	r6, r7
 8008a02:	1bed      	subs	r5, r5, r7
 8008a04:	6026      	str	r6, [r4, #0]
 8008a06:	60a5      	str	r5, [r4, #8]
 8008a08:	464e      	mov	r6, r9
 8008a0a:	454e      	cmp	r6, r9
 8008a0c:	d900      	bls.n	8008a10 <__ssputs_r+0x84>
 8008a0e:	464e      	mov	r6, r9
 8008a10:	4632      	mov	r2, r6
 8008a12:	4641      	mov	r1, r8
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	f000 f91d 	bl	8008c54 <memmove>
 8008a1a:	68a3      	ldr	r3, [r4, #8]
 8008a1c:	1b9b      	subs	r3, r3, r6
 8008a1e:	60a3      	str	r3, [r4, #8]
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	441e      	add	r6, r3
 8008a24:	6026      	str	r6, [r4, #0]
 8008a26:	2000      	movs	r0, #0
 8008a28:	e7dc      	b.n	80089e4 <__ssputs_r+0x58>
 8008a2a:	462a      	mov	r2, r5
 8008a2c:	f000 f92b 	bl	8008c86 <_realloc_r>
 8008a30:	4606      	mov	r6, r0
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d1e2      	bne.n	80089fc <__ssputs_r+0x70>
 8008a36:	6921      	ldr	r1, [r4, #16]
 8008a38:	4650      	mov	r0, sl
 8008a3a:	f7fe f937 	bl	8006cac <_free_r>
 8008a3e:	e7c8      	b.n	80089d2 <__ssputs_r+0x46>

08008a40 <_svfiprintf_r>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	461d      	mov	r5, r3
 8008a46:	898b      	ldrh	r3, [r1, #12]
 8008a48:	061f      	lsls	r7, r3, #24
 8008a4a:	b09d      	sub	sp, #116	; 0x74
 8008a4c:	4680      	mov	r8, r0
 8008a4e:	460c      	mov	r4, r1
 8008a50:	4616      	mov	r6, r2
 8008a52:	d50f      	bpl.n	8008a74 <_svfiprintf_r+0x34>
 8008a54:	690b      	ldr	r3, [r1, #16]
 8008a56:	b96b      	cbnz	r3, 8008a74 <_svfiprintf_r+0x34>
 8008a58:	2140      	movs	r1, #64	; 0x40
 8008a5a:	f7fe f975 	bl	8006d48 <_malloc_r>
 8008a5e:	6020      	str	r0, [r4, #0]
 8008a60:	6120      	str	r0, [r4, #16]
 8008a62:	b928      	cbnz	r0, 8008a70 <_svfiprintf_r+0x30>
 8008a64:	230c      	movs	r3, #12
 8008a66:	f8c8 3000 	str.w	r3, [r8]
 8008a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6e:	e0c8      	b.n	8008c02 <_svfiprintf_r+0x1c2>
 8008a70:	2340      	movs	r3, #64	; 0x40
 8008a72:	6163      	str	r3, [r4, #20]
 8008a74:	2300      	movs	r3, #0
 8008a76:	9309      	str	r3, [sp, #36]	; 0x24
 8008a78:	2320      	movs	r3, #32
 8008a7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a7e:	2330      	movs	r3, #48	; 0x30
 8008a80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a84:	9503      	str	r5, [sp, #12]
 8008a86:	f04f 0b01 	mov.w	fp, #1
 8008a8a:	4637      	mov	r7, r6
 8008a8c:	463d      	mov	r5, r7
 8008a8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a92:	b10b      	cbz	r3, 8008a98 <_svfiprintf_r+0x58>
 8008a94:	2b25      	cmp	r3, #37	; 0x25
 8008a96:	d13e      	bne.n	8008b16 <_svfiprintf_r+0xd6>
 8008a98:	ebb7 0a06 	subs.w	sl, r7, r6
 8008a9c:	d00b      	beq.n	8008ab6 <_svfiprintf_r+0x76>
 8008a9e:	4653      	mov	r3, sl
 8008aa0:	4632      	mov	r2, r6
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	f7ff ff71 	bl	800898c <__ssputs_r>
 8008aaa:	3001      	adds	r0, #1
 8008aac:	f000 80a4 	beq.w	8008bf8 <_svfiprintf_r+0x1b8>
 8008ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab2:	4453      	add	r3, sl
 8008ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab6:	783b      	ldrb	r3, [r7, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 809d 	beq.w	8008bf8 <_svfiprintf_r+0x1b8>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ac8:	9304      	str	r3, [sp, #16]
 8008aca:	9307      	str	r3, [sp, #28]
 8008acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ad2:	462f      	mov	r7, r5
 8008ad4:	2205      	movs	r2, #5
 8008ad6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008ada:	4850      	ldr	r0, [pc, #320]	; (8008c1c <_svfiprintf_r+0x1dc>)
 8008adc:	f7f7 fb88 	bl	80001f0 <memchr>
 8008ae0:	9b04      	ldr	r3, [sp, #16]
 8008ae2:	b9d0      	cbnz	r0, 8008b1a <_svfiprintf_r+0xda>
 8008ae4:	06d9      	lsls	r1, r3, #27
 8008ae6:	bf44      	itt	mi
 8008ae8:	2220      	movmi	r2, #32
 8008aea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008aee:	071a      	lsls	r2, r3, #28
 8008af0:	bf44      	itt	mi
 8008af2:	222b      	movmi	r2, #43	; 0x2b
 8008af4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008af8:	782a      	ldrb	r2, [r5, #0]
 8008afa:	2a2a      	cmp	r2, #42	; 0x2a
 8008afc:	d015      	beq.n	8008b2a <_svfiprintf_r+0xea>
 8008afe:	9a07      	ldr	r2, [sp, #28]
 8008b00:	462f      	mov	r7, r5
 8008b02:	2000      	movs	r0, #0
 8008b04:	250a      	movs	r5, #10
 8008b06:	4639      	mov	r1, r7
 8008b08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b0c:	3b30      	subs	r3, #48	; 0x30
 8008b0e:	2b09      	cmp	r3, #9
 8008b10:	d94d      	bls.n	8008bae <_svfiprintf_r+0x16e>
 8008b12:	b1b8      	cbz	r0, 8008b44 <_svfiprintf_r+0x104>
 8008b14:	e00f      	b.n	8008b36 <_svfiprintf_r+0xf6>
 8008b16:	462f      	mov	r7, r5
 8008b18:	e7b8      	b.n	8008a8c <_svfiprintf_r+0x4c>
 8008b1a:	4a40      	ldr	r2, [pc, #256]	; (8008c1c <_svfiprintf_r+0x1dc>)
 8008b1c:	1a80      	subs	r0, r0, r2
 8008b1e:	fa0b f000 	lsl.w	r0, fp, r0
 8008b22:	4318      	orrs	r0, r3
 8008b24:	9004      	str	r0, [sp, #16]
 8008b26:	463d      	mov	r5, r7
 8008b28:	e7d3      	b.n	8008ad2 <_svfiprintf_r+0x92>
 8008b2a:	9a03      	ldr	r2, [sp, #12]
 8008b2c:	1d11      	adds	r1, r2, #4
 8008b2e:	6812      	ldr	r2, [r2, #0]
 8008b30:	9103      	str	r1, [sp, #12]
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	db01      	blt.n	8008b3a <_svfiprintf_r+0xfa>
 8008b36:	9207      	str	r2, [sp, #28]
 8008b38:	e004      	b.n	8008b44 <_svfiprintf_r+0x104>
 8008b3a:	4252      	negs	r2, r2
 8008b3c:	f043 0302 	orr.w	r3, r3, #2
 8008b40:	9207      	str	r2, [sp, #28]
 8008b42:	9304      	str	r3, [sp, #16]
 8008b44:	783b      	ldrb	r3, [r7, #0]
 8008b46:	2b2e      	cmp	r3, #46	; 0x2e
 8008b48:	d10c      	bne.n	8008b64 <_svfiprintf_r+0x124>
 8008b4a:	787b      	ldrb	r3, [r7, #1]
 8008b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b4e:	d133      	bne.n	8008bb8 <_svfiprintf_r+0x178>
 8008b50:	9b03      	ldr	r3, [sp, #12]
 8008b52:	1d1a      	adds	r2, r3, #4
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	9203      	str	r2, [sp, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bfb8      	it	lt
 8008b5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b60:	3702      	adds	r7, #2
 8008b62:	9305      	str	r3, [sp, #20]
 8008b64:	4d2e      	ldr	r5, [pc, #184]	; (8008c20 <_svfiprintf_r+0x1e0>)
 8008b66:	7839      	ldrb	r1, [r7, #0]
 8008b68:	2203      	movs	r2, #3
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f7f7 fb40 	bl	80001f0 <memchr>
 8008b70:	b138      	cbz	r0, 8008b82 <_svfiprintf_r+0x142>
 8008b72:	2340      	movs	r3, #64	; 0x40
 8008b74:	1b40      	subs	r0, r0, r5
 8008b76:	fa03 f000 	lsl.w	r0, r3, r0
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	4303      	orrs	r3, r0
 8008b7e:	3701      	adds	r7, #1
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	7839      	ldrb	r1, [r7, #0]
 8008b84:	4827      	ldr	r0, [pc, #156]	; (8008c24 <_svfiprintf_r+0x1e4>)
 8008b86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b8a:	2206      	movs	r2, #6
 8008b8c:	1c7e      	adds	r6, r7, #1
 8008b8e:	f7f7 fb2f 	bl	80001f0 <memchr>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d038      	beq.n	8008c08 <_svfiprintf_r+0x1c8>
 8008b96:	4b24      	ldr	r3, [pc, #144]	; (8008c28 <_svfiprintf_r+0x1e8>)
 8008b98:	bb13      	cbnz	r3, 8008be0 <_svfiprintf_r+0x1a0>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	3307      	adds	r3, #7
 8008b9e:	f023 0307 	bic.w	r3, r3, #7
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	9303      	str	r3, [sp, #12]
 8008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba8:	444b      	add	r3, r9
 8008baa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bac:	e76d      	b.n	8008a8a <_svfiprintf_r+0x4a>
 8008bae:	fb05 3202 	mla	r2, r5, r2, r3
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	460f      	mov	r7, r1
 8008bb6:	e7a6      	b.n	8008b06 <_svfiprintf_r+0xc6>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	3701      	adds	r7, #1
 8008bbc:	9305      	str	r3, [sp, #20]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	250a      	movs	r5, #10
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bc8:	3a30      	subs	r2, #48	; 0x30
 8008bca:	2a09      	cmp	r2, #9
 8008bcc:	d903      	bls.n	8008bd6 <_svfiprintf_r+0x196>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0c8      	beq.n	8008b64 <_svfiprintf_r+0x124>
 8008bd2:	9105      	str	r1, [sp, #20]
 8008bd4:	e7c6      	b.n	8008b64 <_svfiprintf_r+0x124>
 8008bd6:	fb05 2101 	mla	r1, r5, r1, r2
 8008bda:	2301      	movs	r3, #1
 8008bdc:	4607      	mov	r7, r0
 8008bde:	e7f0      	b.n	8008bc2 <_svfiprintf_r+0x182>
 8008be0:	ab03      	add	r3, sp, #12
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	4622      	mov	r2, r4
 8008be6:	4b11      	ldr	r3, [pc, #68]	; (8008c2c <_svfiprintf_r+0x1ec>)
 8008be8:	a904      	add	r1, sp, #16
 8008bea:	4640      	mov	r0, r8
 8008bec:	f7fe f99a 	bl	8006f24 <_printf_float>
 8008bf0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008bf4:	4681      	mov	r9, r0
 8008bf6:	d1d6      	bne.n	8008ba6 <_svfiprintf_r+0x166>
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	065b      	lsls	r3, r3, #25
 8008bfc:	f53f af35 	bmi.w	8008a6a <_svfiprintf_r+0x2a>
 8008c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c02:	b01d      	add	sp, #116	; 0x74
 8008c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c08:	ab03      	add	r3, sp, #12
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <_svfiprintf_r+0x1ec>)
 8008c10:	a904      	add	r1, sp, #16
 8008c12:	4640      	mov	r0, r8
 8008c14:	f7fe fc3c 	bl	8007490 <_printf_i>
 8008c18:	e7ea      	b.n	8008bf0 <_svfiprintf_r+0x1b0>
 8008c1a:	bf00      	nop
 8008c1c:	0800a52c 	.word	0x0800a52c
 8008c20:	0800a532 	.word	0x0800a532
 8008c24:	0800a536 	.word	0x0800a536
 8008c28:	08006f25 	.word	0x08006f25
 8008c2c:	0800898d 	.word	0x0800898d

08008c30 <__ascii_mbtowc>:
 8008c30:	b082      	sub	sp, #8
 8008c32:	b901      	cbnz	r1, 8008c36 <__ascii_mbtowc+0x6>
 8008c34:	a901      	add	r1, sp, #4
 8008c36:	b142      	cbz	r2, 8008c4a <__ascii_mbtowc+0x1a>
 8008c38:	b14b      	cbz	r3, 8008c4e <__ascii_mbtowc+0x1e>
 8008c3a:	7813      	ldrb	r3, [r2, #0]
 8008c3c:	600b      	str	r3, [r1, #0]
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	1c10      	adds	r0, r2, #0
 8008c42:	bf18      	it	ne
 8008c44:	2001      	movne	r0, #1
 8008c46:	b002      	add	sp, #8
 8008c48:	4770      	bx	lr
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	e7fb      	b.n	8008c46 <__ascii_mbtowc+0x16>
 8008c4e:	f06f 0001 	mvn.w	r0, #1
 8008c52:	e7f8      	b.n	8008c46 <__ascii_mbtowc+0x16>

08008c54 <memmove>:
 8008c54:	4288      	cmp	r0, r1
 8008c56:	b510      	push	{r4, lr}
 8008c58:	eb01 0302 	add.w	r3, r1, r2
 8008c5c:	d807      	bhi.n	8008c6e <memmove+0x1a>
 8008c5e:	1e42      	subs	r2, r0, #1
 8008c60:	4299      	cmp	r1, r3
 8008c62:	d00a      	beq.n	8008c7a <memmove+0x26>
 8008c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008c6c:	e7f8      	b.n	8008c60 <memmove+0xc>
 8008c6e:	4283      	cmp	r3, r0
 8008c70:	d9f5      	bls.n	8008c5e <memmove+0xa>
 8008c72:	1881      	adds	r1, r0, r2
 8008c74:	1ad2      	subs	r2, r2, r3
 8008c76:	42d3      	cmn	r3, r2
 8008c78:	d100      	bne.n	8008c7c <memmove+0x28>
 8008c7a:	bd10      	pop	{r4, pc}
 8008c7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008c84:	e7f7      	b.n	8008c76 <memmove+0x22>

08008c86 <_realloc_r>:
 8008c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c88:	4607      	mov	r7, r0
 8008c8a:	4614      	mov	r4, r2
 8008c8c:	460e      	mov	r6, r1
 8008c8e:	b921      	cbnz	r1, 8008c9a <_realloc_r+0x14>
 8008c90:	4611      	mov	r1, r2
 8008c92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c96:	f7fe b857 	b.w	8006d48 <_malloc_r>
 8008c9a:	b922      	cbnz	r2, 8008ca6 <_realloc_r+0x20>
 8008c9c:	f7fe f806 	bl	8006cac <_free_r>
 8008ca0:	4625      	mov	r5, r4
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca6:	f000 f821 	bl	8008cec <_malloc_usable_size_r>
 8008caa:	42a0      	cmp	r0, r4
 8008cac:	d20f      	bcs.n	8008cce <_realloc_r+0x48>
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7fe f849 	bl	8006d48 <_malloc_r>
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d0f2      	beq.n	8008ca2 <_realloc_r+0x1c>
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	f7ff fb7c 	bl	80083bc <memcpy>
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f7fd fff0 	bl	8006cac <_free_r>
 8008ccc:	e7e9      	b.n	8008ca2 <_realloc_r+0x1c>
 8008cce:	4635      	mov	r5, r6
 8008cd0:	e7e7      	b.n	8008ca2 <_realloc_r+0x1c>

08008cd2 <__ascii_wctomb>:
 8008cd2:	b149      	cbz	r1, 8008ce8 <__ascii_wctomb+0x16>
 8008cd4:	2aff      	cmp	r2, #255	; 0xff
 8008cd6:	bf85      	ittet	hi
 8008cd8:	238a      	movhi	r3, #138	; 0x8a
 8008cda:	6003      	strhi	r3, [r0, #0]
 8008cdc:	700a      	strbls	r2, [r1, #0]
 8008cde:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ce2:	bf98      	it	ls
 8008ce4:	2001      	movls	r0, #1
 8008ce6:	4770      	bx	lr
 8008ce8:	4608      	mov	r0, r1
 8008cea:	4770      	bx	lr

08008cec <_malloc_usable_size_r>:
 8008cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf0:	1f18      	subs	r0, r3, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfbc      	itt	lt
 8008cf6:	580b      	ldrlt	r3, [r1, r0]
 8008cf8:	18c0      	addlt	r0, r0, r3
 8008cfa:	4770      	bx	lr

08008cfc <_init>:
 8008cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfe:	bf00      	nop
 8008d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d02:	bc08      	pop	{r3}
 8008d04:	469e      	mov	lr, r3
 8008d06:	4770      	bx	lr

08008d08 <_fini>:
 8008d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0a:	bf00      	nop
 8008d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0e:	bc08      	pop	{r3}
 8008d10:	469e      	mov	lr, r3
 8008d12:	4770      	bx	lr
