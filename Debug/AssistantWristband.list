
AssistantWristband.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c20  08003c20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c20  08003c20  00013c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c28  08003c28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003ca0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003ca0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098b7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016cb  00000000  00000000  00029957  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e0  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000838  00000000  00000000  0002b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015d02  00000000  00000000  0002c140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a7d  00000000  00000000  00041e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008751f  00000000  00000000  000498bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0dde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000278c  00000000  00000000  000d0e5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b98 	.word	0x08003b98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003b98 	.word	0x08003b98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fb23 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f841 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f8ff 	bl	8000790 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000592:	f000 f8a5 	bl	80006e0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8d1 	bl	800073c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	mma8452qInit(&hi2c1);
 800059a:	481a      	ldr	r0, [pc, #104]	; (8000604 <main+0x84>)
 800059c:	f000 f96c 	bl	8000878 <mma8452qInit>


	while (1)
	{
		HAL_StatusTypeDef is_mma8452q_read_ok = mma8452qRead(&hi2c1, 0x00, 7, acc_3d.acc_info);
 80005a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005a4:	2207      	movs	r2, #7
 80005a6:	2100      	movs	r1, #0
 80005a8:	4816      	ldr	r0, [pc, #88]	; (8000604 <main+0x84>)
 80005aa:	f000 f948 	bl	800083e <mma8452qRead>
 80005ae:	4603      	mov	r3, r0
 80005b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (is_mma8452q_read_ok == HAL_OK) {
 80005b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1f1      	bne.n	80005a0 <main+0x20>
			getAccXYZ(&acc_3d);
 80005bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f982 	bl	80008ca <getAccXYZ>
			char message[50] = { 0 };
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2232      	movs	r2, #50	; 0x32
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fed5 	bl	800337c <memset>
			sprintf(message, "acc_x: %d, acc_y: %d, acc_z: %d\r\n", acc_3d.x_acc, acc_3d.y_acc, acc_3d.z_acc);
 80005d2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80005d6:	461a      	mov	r2, r3
 80005d8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80005dc:	4619      	mov	r1, r3
 80005de:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80005e2:	1d38      	adds	r0, r7, #4
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	460b      	mov	r3, r1
 80005e8:	4907      	ldr	r1, [pc, #28]	; (8000608 <main+0x88>)
 80005ea:	f002 fecf 	bl	800338c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(message), 100);
 80005ee:	1d39      	adds	r1, r7, #4
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	2232      	movs	r2, #50	; 0x32
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <main+0x8c>)
 80005f6:	f002 fa38 	bl	8002a6a <HAL_UART_Transmit>
			HAL_Delay(250);
 80005fa:	20fa      	movs	r0, #250	; 0xfa
 80005fc:	f000 fb5a 	bl	8000cb4 <HAL_Delay>
	{
 8000600:	e7ce      	b.n	80005a0 <main+0x20>
 8000602:	bf00      	nop
 8000604:	20000098 	.word	0x20000098
 8000608:	08003bb0 	.word	0x08003bb0
 800060c:	200000ec 	.word	0x200000ec

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 feac 	bl	800337c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemClock_Config+0xc8>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a20      	ldr	r2, [pc, #128]	; (80006dc <SystemClock_Config+0xcc>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <SystemClock_Config+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fd39 	bl	800210c <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f8ac 	bl	80007fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 ff94 	bl	80025ec <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006ca:	f000 f897 	bl	80007fc <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <MX_I2C1_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_I2C1_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_I2C1_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C1_Init+0x50>)
 800071e:	f000 fd53 	bl	80011c8 <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f868 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000098 	.word	0x20000098
 8000734:	40005400 	.word	0x40005400
 8000738:	000186a0 	.word	0x000186a0

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	2208      	movs	r2, #8
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f002 f92c 	bl	80029d0 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f83d 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000ec 	.word	0x200000ec
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_GPIO_Init+0x68>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <mma8452qWrite>:
 * This function writes value to address reg using the assigned peripheral address
 * hi2c : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * reg : address of register whose value is set inside the censor
 * value : reg's new content
 * */
HAL_StatusTypeDef mma8452qWrite(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t value) {
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af02      	add	r7, sp, #8
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	70fb      	strb	r3, [r7, #3]
 8000816:	4613      	mov	r3, r2
 8000818:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2];
	data[0] = reg;
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 800081e:	78bb      	ldrb	r3, [r7, #2]
 8000820:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(hi2c, MMA8452Q_DEVICE_ADDR, data, 2, 10);
 8000822:	f107 020c 	add.w	r2, r7, #12
 8000826:	230a      	movs	r3, #10
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2302      	movs	r3, #2
 800082c:	2138      	movs	r1, #56	; 0x38
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f000 fe02 	bl	8001438 <HAL_I2C_Master_Transmit>
 8000834:	4603      	mov	r3, r0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <mma8452qRead>:
 * hi2c  : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * reg   : address of register where to start reading data from
 * numberofbytes : amount of data to be read from the registers of the censor
 * data_rec : address of buffer where the data from the censor will be stored into
 * */
HAL_StatusTypeDef mma8452qRead(I2C_HandleTypeDef* hi2c, uint8_t reg, uint8_t numberofbytes, uint8_t* data_rec) {
 800083e:	b580      	push	{r7, lr}
 8000840:	b088      	sub	sp, #32
 8000842:	af04      	add	r7, sp, #16
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(hi2c, MMA8452Q_DEVICE_ADDR, reg, 1, data_rec, numberofbytes, 100);
 8000850:	7afb      	ldrb	r3, [r7, #11]
 8000852:	b299      	uxth	r1, r3
 8000854:	7abb      	ldrb	r3, [r7, #10]
 8000856:	b29b      	uxth	r3, r3
 8000858:	2264      	movs	r2, #100	; 0x64
 800085a:	9202      	str	r2, [sp, #8]
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2301      	movs	r3, #1
 8000864:	460a      	mov	r2, r1
 8000866:	2138      	movs	r1, #56	; 0x38
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f000 fee3 	bl	8001634 <HAL_I2C_Mem_Read>
 800086e:	4603      	mov	r3, r0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <mma8452qInit>:

/*
 * This function initializes all the necessary censor registers in order to read data from it
 * hi2c  : address of i2c peripheral device that will make communication between STM32 and MMA8452Q censor
 * */
HAL_StatusTypeDef mma8452qInit(I2C_HandleTypeDef* hi2c) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	  HAL_StatusTypeDef ret1 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_1, 0x00);
 8000880:	2200      	movs	r2, #0
 8000882:	212a      	movs	r1, #42	; 0x2a
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ffc0 	bl	800080a <mma8452qWrite>
 800088a:	4603      	mov	r3, r0
 800088c:	73fb      	strb	r3, [r7, #15]
	  HAL_StatusTypeDef ret2 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_1, 0x01);
 800088e:	2201      	movs	r2, #1
 8000890:	212a      	movs	r1, #42	; 0x2a
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffb9 	bl	800080a <mma8452qWrite>
 8000898:	4603      	mov	r3, r0
 800089a:	73bb      	strb	r3, [r7, #14]
	  HAL_StatusTypeDef ret3 = mma8452qWrite(hi2c, MMA8452Q_REG_ADDR_2, 0x00);
 800089c:	2200      	movs	r2, #0
 800089e:	210e      	movs	r1, #14
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ffb2 	bl	800080a <mma8452qWrite>
 80008a6:	4603      	mov	r3, r0
 80008a8:	737b      	strb	r3, [r7, #13]
	  if (ret1 == HAL_OK && ret2 == HAL_OK && ret3 == HAL_OK)
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d107      	bne.n	80008c0 <mma8452qInit+0x48>
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d104      	bne.n	80008c0 <mma8452qInit+0x48>
 80008b6:	7b7b      	ldrb	r3, [r7, #13]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <mma8452qInit+0x48>
		  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
 80008be:	e000      	b.n	80008c2 <mma8452qInit+0x4a>
	  else
		  return HAL_BUSY;
 80008c0:	2302      	movs	r3, #2
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <getAccXYZ>:
/*
 * This function takes 7 bytes coming from censor and converts them into meaningful acceloremeter values
 * acc_info : the array(7 bytes) that contains status, MSB of X acc, LSB of X acc, MSB of Y acc, LSB of Y acc, MSB of Z acc, LSB of Z acc
 * acc_xyz : new array(6 bytes) that contains acc x, acc y, acc z
 * */
void getAccXYZ(AccData* acc_3d) {
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	int16_t xAccl = (((int16_t)(acc_3d->acc_info[1] << 8)) | acc_3d->acc_info[2]) >> 4;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	785b      	ldrb	r3, [r3, #1]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	b21b      	sxth	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	789b      	ldrb	r3, [r3, #2]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	111b      	asrs	r3, r3, #4
 80008e4:	81fb      	strh	r3, [r7, #14]
	int16_t yAccl = (((int16_t)(acc_3d->acc_info[3] << 8)) | acc_3d->acc_info[4]) >> 4;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	78db      	ldrb	r3, [r3, #3]
 80008ea:	021b      	lsls	r3, r3, #8
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	111b      	asrs	r3, r3, #4
 80008f8:	81bb      	strh	r3, [r7, #12]
	int16_t zAccl = (((int16_t)(acc_3d->acc_info[5] << 8)) | acc_3d->acc_info[6]) >> 4;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	795b      	ldrb	r3, [r3, #5]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b21b      	sxth	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	799b      	ldrb	r3, [r3, #6]
 8000908:	4313      	orrs	r3, r2
 800090a:	111b      	asrs	r3, r3, #4
 800090c:	817b      	strh	r3, [r7, #10]
	acc_3d->x_acc = xAccl;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	89fa      	ldrh	r2, [r7, #14]
 8000912:	811a      	strh	r2, [r3, #8]
	acc_3d->y_acc = yAccl;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	89ba      	ldrh	r2, [r7, #12]
 8000918:	815a      	strh	r2, [r3, #10]
	acc_3d->z_acc = zAccl;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	897a      	ldrh	r2, [r7, #10]
 800091e:	819a      	strh	r2, [r3, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_I2C_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12c      	bne.n	80009f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c0:	2312      	movs	r3, #18
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009cc:	2304      	movs	r3, #4
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	480c      	ldr	r0, [pc, #48]	; (8000a08 <HAL_I2C_MspInit+0x8c>)
 80009d8:	f000 fa74 	bl	8000ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_I2C_MspInit+0x88>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40005400 	.word	0x40005400
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020400 	.word	0x40020400

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_MspInit+0x8c>)
 8000a82:	f000 fa1f 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f8c0 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x50>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x16>
		heap_end = &end;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <_sbrk+0x50>)
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <_sbrk+0x54>)
 8000b0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <_sbrk+0x50>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <_sbrk+0x50>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	466a      	mov	r2, sp
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d907      	bls.n	8000b32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b22:	f002 fc01 	bl	8003328 <__errno>
 8000b26:	4602      	mov	r2, r0
 8000b28:	230c      	movs	r3, #12
 8000b2a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	e006      	b.n	8000b40 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <_sbrk+0x50>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <_sbrk+0x50>)
 8000b3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	20000138 	.word	0x20000138

08000b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <SystemInit+0x28>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <SystemInit+0x28>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SystemInit+0x28>)
 8000b66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b82:	e003      	b.n	8000b8c <LoopCopyDataInit>

08000b84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b8a:	3104      	adds	r1, #4

08000b8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b94:	d3f6      	bcc.n	8000b84 <CopyDataInit>
  ldr  r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b98:	e002      	b.n	8000ba0 <LoopFillZerobss>

08000b9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b9c:	f842 3b04 	str.w	r3, [r2], #4

08000ba0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ba2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ba4:	d3f9      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ba6:	f7ff ffd3 	bl	8000b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f002 fbc3 	bl	8003334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fce7 	bl	8000580 <main>
  bx  lr    
 8000bb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bb8:	08003c30 	.word	0x08003c30
  ldr  r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bc0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000bc4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000bc8:	20000134 	.word	0x20000134

08000bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <HAL_Init+0x40>)
 8000bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_Init+0x40>)
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x40>)
 8000bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f92f 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fe92 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023c00 	.word	0x40023c00

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f939 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 f90f 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	2000012c 	.word	0x2000012c

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2000012c 	.word	0x2000012c

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_Delay+0x40>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff47 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff5c 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffb0 	bl	8000e18 <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e159      	b.n	8001194 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8148 	bne.w	800118e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d00b      	beq.n	8000f1e <HAL_GPIO_Init+0x5a>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f12:	2b11      	cmp	r3, #17
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b12      	cmp	r3, #18
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0xfc>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b12      	cmp	r3, #18
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80a2 	beq.w	800118e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a55      	ldr	r2, [pc, #340]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a51      	ldr	r2, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_GPIO_Init+0x2ec>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d019      	beq.n	80010c6 <HAL_GPIO_Init+0x202>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_GPIO_Init+0x2f0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x1fe>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a46      	ldr	r2, [pc, #280]	; (80011b8 <HAL_GPIO_Init+0x2f4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x1fa>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a45      	ldr	r2, [pc, #276]	; (80011bc <HAL_GPIO_Init+0x2f8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x1f6>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <HAL_GPIO_Init+0x2fc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x1f2>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e008      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010b6:	2307      	movs	r3, #7
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010c6:	2300      	movs	r3, #0
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d8:	4934      	ldr	r1, [pc, #208]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <HAL_GPIO_Init+0x300>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110a:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001134:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115e:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	f67f aea2 	bls.w	8000ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800119c:	bf00      	nop
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40013c00 	.word	0x40013c00

080011c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e11f      	b.n	800141a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fbc4 	bl	800097c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2224      	movs	r2, #36	; 0x24
 80011f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800121a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800122a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800122c:	f001 fba8 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8001230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a7b      	ldr	r2, [pc, #492]	; (8001424 <HAL_I2C_Init+0x25c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d807      	bhi.n	800124c <HAL_I2C_Init+0x84>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4a7a      	ldr	r2, [pc, #488]	; (8001428 <HAL_I2C_Init+0x260>)
 8001240:	4293      	cmp	r3, r2
 8001242:	bf94      	ite	ls
 8001244:	2301      	movls	r3, #1
 8001246:	2300      	movhi	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	e006      	b.n	800125a <HAL_I2C_Init+0x92>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4a77      	ldr	r2, [pc, #476]	; (800142c <HAL_I2C_Init+0x264>)
 8001250:	4293      	cmp	r3, r2
 8001252:	bf94      	ite	ls
 8001254:	2301      	movls	r3, #1
 8001256:	2300      	movhi	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0db      	b.n	800141a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4a72      	ldr	r2, [pc, #456]	; (8001430 <HAL_I2C_Init+0x268>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0c9b      	lsrs	r3, r3, #18
 800126c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	430a      	orrs	r2, r1
 8001280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a64      	ldr	r2, [pc, #400]	; (8001424 <HAL_I2C_Init+0x25c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d802      	bhi.n	800129c <HAL_I2C_Init+0xd4>
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3301      	adds	r3, #1
 800129a:	e009      	b.n	80012b0 <HAL_I2C_Init+0xe8>
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	4a63      	ldr	r2, [pc, #396]	; (8001434 <HAL_I2C_Init+0x26c>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	3301      	adds	r3, #1
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4956      	ldr	r1, [pc, #344]	; (8001424 <HAL_I2C_Init+0x25c>)
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d80d      	bhi.n	80012ec <HAL_I2C_Init+0x124>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1e59      	subs	r1, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fbb1 f3f3 	udiv	r3, r1, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	bf38      	it	cc
 80012e8:	2304      	movcc	r3, #4
 80012ea:	e04f      	b.n	800138c <HAL_I2C_Init+0x1c4>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d111      	bne.n	8001318 <HAL_I2C_Init+0x150>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	1e58      	subs	r0, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	440b      	add	r3, r1
 8001302:	fbb0 f3f3 	udiv	r3, r0, r3
 8001306:	3301      	adds	r3, #1
 8001308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	e012      	b.n	800133e <HAL_I2C_Init+0x176>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1e58      	subs	r0, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6859      	ldr	r1, [r3, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	0099      	lsls	r1, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	fbb0 f3f3 	udiv	r3, r0, r3
 800132e:	3301      	adds	r3, #1
 8001330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_I2C_Init+0x17e>
 8001342:	2301      	movs	r3, #1
 8001344:	e022      	b.n	800138c <HAL_I2C_Init+0x1c4>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10e      	bne.n	800136c <HAL_I2C_Init+0x1a4>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1e58      	subs	r0, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6859      	ldr	r1, [r3, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	440b      	add	r3, r1
 800135c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001360:	3301      	adds	r3, #1
 8001362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136a:	e00f      	b.n	800138c <HAL_I2C_Init+0x1c4>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1e58      	subs	r0, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	0099      	lsls	r1, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001382:	3301      	adds	r3, #1
 8001384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	6809      	ldr	r1, [r1, #0]
 8001390:	4313      	orrs	r3, r2
 8001392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69da      	ldr	r2, [r3, #28]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6911      	ldr	r1, [r2, #16]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68d2      	ldr	r2, [r2, #12]
 80013c6:	4311      	orrs	r1, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	430b      	orrs	r3, r1
 80013ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2220      	movs	r2, #32
 8001406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	000186a0 	.word	0x000186a0
 8001428:	001e847f 	.word	0x001e847f
 800142c:	003d08ff 	.word	0x003d08ff
 8001430:	431bde83 	.word	0x431bde83
 8001434:	10624dd3 	.word	0x10624dd3

08001438 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af02      	add	r7, sp, #8
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	461a      	mov	r2, r3
 8001444:	460b      	mov	r3, r1
 8001446:	817b      	strh	r3, [r7, #10]
 8001448:	4613      	mov	r3, r2
 800144a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff fc26 	bl	8000c9c <HAL_GetTick>
 8001450:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b20      	cmp	r3, #32
 800145c:	f040 80e0 	bne.w	8001620 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2319      	movs	r3, #25
 8001466:	2201      	movs	r2, #1
 8001468:	4970      	ldr	r1, [pc, #448]	; (800162c <HAL_I2C_Master_Transmit+0x1f4>)
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 fc70 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001476:	2302      	movs	r3, #2
 8001478:	e0d3      	b.n	8001622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_I2C_Master_Transmit+0x50>
 8001484:	2302      	movs	r3, #2
 8001486:	e0cc      	b.n	8001622 <HAL_I2C_Master_Transmit+0x1ea>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b01      	cmp	r3, #1
 800149c:	d007      	beq.n	80014ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0201 	orr.w	r2, r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2221      	movs	r2, #33	; 0x21
 80014c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2210      	movs	r2, #16
 80014ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	893a      	ldrh	r2, [r7, #8]
 80014de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4a50      	ldr	r2, [pc, #320]	; (8001630 <HAL_I2C_Master_Transmit+0x1f8>)
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014f0:	8979      	ldrh	r1, [r7, #10]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	6a3a      	ldr	r2, [r7, #32]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fac2 	bl	8001a80 <I2C_MasterRequestWrite>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e08d      	b.n	8001622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800151c:	e066      	b.n	80015ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	6a39      	ldr	r1, [r7, #32]
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fcea 	bl	8001efc <I2C_WaitOnTXEFlagUntilTimeout>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00d      	beq.n	800154a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	2b04      	cmp	r3, #4
 8001534:	d107      	bne.n	8001546 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e06b      	b.n	8001622 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001572:	3b01      	subs	r3, #1
 8001574:	b29a      	uxth	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b04      	cmp	r3, #4
 8001586:	d11b      	bne.n	80015c0 <HAL_I2C_Master_Transmit+0x188>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158c:	2b00      	cmp	r3, #0
 800158e:	d017      	beq.n	80015c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b8:	3b01      	subs	r3, #1
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	6a39      	ldr	r1, [r7, #32]
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 fcda 	bl	8001f7e <I2C_WaitOnBTFFlagUntilTimeout>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00d      	beq.n	80015ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d107      	bne.n	80015e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e01a      	b.n	8001622 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d194      	bne.n	800151e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2220      	movs	r2, #32
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	e000      	b.n	8001622 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001620:	2302      	movs	r3, #2
  }
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	00100002 	.word	0x00100002
 8001630:	ffff0000 	.word	0xffff0000

08001634 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	; 0x30
 8001638:	af02      	add	r7, sp, #8
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4603      	mov	r3, r0
 8001644:	817b      	strh	r3, [r7, #10]
 8001646:	460b      	mov	r3, r1
 8001648:	813b      	strh	r3, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800164e:	f7ff fb25 	bl	8000c9c <HAL_GetTick>
 8001652:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	f040 8208 	bne.w	8001a72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2319      	movs	r3, #25
 8001668:	2201      	movs	r2, #1
 800166a:	497b      	ldr	r1, [pc, #492]	; (8001858 <HAL_I2C_Mem_Read+0x224>)
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fb6f 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001678:	2302      	movs	r3, #2
 800167a:	e1fb      	b.n	8001a74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_I2C_Mem_Read+0x56>
 8001686:	2302      	movs	r3, #2
 8001688:	e1f4      	b.n	8001a74 <HAL_I2C_Mem_Read+0x440>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b01      	cmp	r3, #1
 800169e:	d007      	beq.n	80016b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2222      	movs	r2, #34	; 0x22
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2240      	movs	r2, #64	; 0x40
 80016cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80016e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a5b      	ldr	r2, [pc, #364]	; (800185c <HAL_I2C_Mem_Read+0x228>)
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016f2:	88f8      	ldrh	r0, [r7, #6]
 80016f4:	893a      	ldrh	r2, [r7, #8]
 80016f6:	8979      	ldrh	r1, [r7, #10]
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	4603      	mov	r3, r0
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fa3e 	bl	8001b84 <I2C_RequestMemoryRead>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e1b0      	b.n	8001a74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001716:	2b00      	cmp	r3, #0
 8001718:	d113      	bne.n	8001742 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	623b      	str	r3, [r7, #32]
 800172e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e184      	b.n	8001a4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	2b01      	cmp	r3, #1
 8001748:	d11b      	bne.n	8001782 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e164      	b.n	8001a4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001786:	2b02      	cmp	r3, #2
 8001788:	d11b      	bne.n	80017c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001798:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	e144      	b.n	8001a4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80017d8:	e138      	b.n	8001a4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	2b03      	cmp	r3, #3
 80017e0:	f200 80f1 	bhi.w	80019c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d123      	bne.n	8001834 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 fc05 	bl	8002000 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e139      	b.n	8001a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181c:	3b01      	subs	r3, #1
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001828:	b29b      	uxth	r3, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001832:	e10b      	b.n	8001a4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001838:	2b02      	cmp	r3, #2
 800183a:	d14e      	bne.n	80018da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001842:	2200      	movs	r2, #0
 8001844:	4906      	ldr	r1, [pc, #24]	; (8001860 <HAL_I2C_Mem_Read+0x22c>)
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 fa82 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e10e      	b.n	8001a74 <HAL_I2C_Mem_Read+0x440>
 8001856:	bf00      	nop
 8001858:	00100002 	.word	0x00100002
 800185c:	ffff0000 	.word	0xffff0000
 8001860:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018d8:	e0b8      	b.n	8001a4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e0:	2200      	movs	r2, #0
 80018e2:	4966      	ldr	r1, [pc, #408]	; (8001a7c <HAL_I2C_Mem_Read+0x448>)
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fa33 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0bf      	b.n	8001a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	3b01      	subs	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193c:	2200      	movs	r2, #0
 800193e:	494f      	ldr	r1, [pc, #316]	; (8001a7c <HAL_I2C_Mem_Read+0x448>)
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 fa05 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e091      	b.n	8001a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	3b01      	subs	r3, #1
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019c4:	e042      	b.n	8001a4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fb18 	bl	8002000 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e04c      	b.n	8001a74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d118      	bne.n	8001a4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f aec2 	bne.w	80017da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
  }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	00010004 	.word	0x00010004

08001a80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d006      	beq.n	8001aaa <I2C_MasterRequestWrite+0x2a>
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d003      	beq.n	8001aaa <I2C_MasterRequestWrite+0x2a>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aa8:	d108      	bne.n	8001abc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e00b      	b.n	8001ad4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d107      	bne.n	8001ad4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f935 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00c      	beq.n	8001b06 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e035      	b.n	8001b72 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b0e:	d108      	bne.n	8001b22 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b10:	897b      	ldrh	r3, [r7, #10]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	e01b      	b.n	8001b5a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b22:	897b      	ldrh	r3, [r7, #10]
 8001b24:	11db      	asrs	r3, r3, #7
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f003 0306 	and.w	r3, r3, #6
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f063 030f 	orn	r3, r3, #15
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	490f      	ldr	r1, [pc, #60]	; (8001b7c <I2C_MasterRequestWrite+0xfc>)
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f95c 	bl	8001dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e010      	b.n	8001b72 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b50:	897b      	ldrh	r3, [r7, #10]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <I2C_MasterRequestWrite+0x100>)
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f94c 	bl	8001dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	00010008 	.word	0x00010008
 8001b80:	00010002 	.word	0x00010002

08001b84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	4608      	mov	r0, r1
 8001b8e:	4611      	mov	r1, r2
 8001b90:	461a      	mov	r2, r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	817b      	strh	r3, [r7, #10]
 8001b96:	460b      	mov	r3, r1
 8001b98:	813b      	strh	r3, [r7, #8]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f8c0 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00c      	beq.n	8001bf0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e0a9      	b.n	8001d44 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bf0:	897b      	ldrh	r3, [r7, #10]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	6a3a      	ldr	r2, [r7, #32]
 8001c04:	4951      	ldr	r1, [pc, #324]	; (8001d4c <I2C_RequestMemoryRead+0x1c8>)
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f8f9 	bl	8001dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e096      	b.n	8001d44 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2e:	6a39      	ldr	r1, [r7, #32]
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f963 	bl	8001efc <I2C_WaitOnTXEFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00d      	beq.n	8001c58 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d107      	bne.n	8001c54 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e075      	b.n	8001d44 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c5e:	893b      	ldrh	r3, [r7, #8]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	e021      	b.n	8001cae <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c6a:	893b      	ldrh	r3, [r7, #8]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7a:	6a39      	ldr	r1, [r7, #32]
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f93d 	bl	8001efc <I2C_WaitOnTXEFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00d      	beq.n	8001ca4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d107      	bne.n	8001ca0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e04f      	b.n	8001d44 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca4:	893b      	ldrh	r3, [r7, #8]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	6a39      	ldr	r1, [r7, #32]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f922 	bl	8001efc <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00d      	beq.n	8001cda <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d107      	bne.n	8001cd6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e034      	b.n	8001d44 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f82a 	bl	8001d50 <I2C_WaitOnFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00c      	beq.n	8001d1c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e013      	b.n	8001d44 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	6a3a      	ldr	r2, [r7, #32]
 8001d30:	4906      	ldr	r1, [pc, #24]	; (8001d4c <I2C_RequestMemoryRead+0x1c8>)
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f863 	bl	8001dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	00010002 	.word	0x00010002

08001d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d60:	e025      	b.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d021      	beq.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6a:	f7fe ff97 	bl	8000c9c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d302      	bcc.n	8001d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d116      	bne.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f043 0220 	orr.w	r2, r3, #32
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e023      	b.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10d      	bne.n	8001dd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf0c      	ite	eq
 8001dca:	2301      	moveq	r3, #1
 8001dcc:	2300      	movne	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	e00c      	b.n	8001dee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4013      	ands	r3, r2
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf0c      	ite	eq
 8001de6:	2301      	moveq	r3, #1
 8001de8:	2300      	movne	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d0b6      	beq.n	8001d62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e0c:	e051      	b.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1c:	d123      	bne.n	8001e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f043 0204 	orr.w	r2, r3, #4
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e046      	b.n	8001ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d021      	beq.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6e:	f7fe ff15 	bl	8000c9c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d302      	bcc.n	8001e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d116      	bne.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f043 0220 	orr.w	r2, r3, #32
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e020      	b.n	8001ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10c      	bne.n	8001ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	e00b      	b.n	8001eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	43da      	mvns	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d18d      	bne.n	8001e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f08:	e02d      	b.n	8001f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f8ce 	bl	80020ac <I2C_IsAcknowledgeFailed>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e02d      	b.n	8001f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d021      	beq.n	8001f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f22:	f7fe febb 	bl	8000c9c <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d302      	bcc.n	8001f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d116      	bne.n	8001f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f043 0220 	orr.w	r2, r3, #32
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e007      	b.n	8001f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	2b80      	cmp	r3, #128	; 0x80
 8001f72:	d1ca      	bne.n	8001f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f8a:	e02d      	b.n	8001fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f88d 	bl	80020ac <I2C_IsAcknowledgeFailed>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e02d      	b.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d021      	beq.n	8001fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa4:	f7fe fe7a 	bl	8000c9c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d302      	bcc.n	8001fba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f043 0220 	orr.w	r2, r3, #32
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e007      	b.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d1ca      	bne.n	8001f8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800200c:	e042      	b.n	8002094 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b10      	cmp	r3, #16
 800201a:	d119      	bne.n	8002050 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0210 	mvn.w	r2, #16
 8002024:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e029      	b.n	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002050:	f7fe fe24 	bl	8000c9c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	429a      	cmp	r2, r3
 800205e:	d302      	bcc.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d116      	bne.n	8002094 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f043 0220 	orr.w	r2, r3, #32
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e007      	b.n	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209e:	2b40      	cmp	r3, #64	; 0x40
 80020a0:	d1b5      	bne.n	800200e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d11b      	bne.n	80020fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f043 0204 	orr.w	r2, r3, #4
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e25b      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d075      	beq.n	8002216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800212a:	4ba3      	ldr	r3, [pc, #652]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b04      	cmp	r3, #4
 8002134:	d00c      	beq.n	8002150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002136:	4ba0      	ldr	r3, [pc, #640]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213e:	2b08      	cmp	r3, #8
 8002140:	d112      	bne.n	8002168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002142:	4b9d      	ldr	r3, [pc, #628]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800214e:	d10b      	bne.n	8002168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	4b99      	ldr	r3, [pc, #612]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d05b      	beq.n	8002214 <HAL_RCC_OscConfig+0x108>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d157      	bne.n	8002214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e236      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d106      	bne.n	8002180 <HAL_RCC_OscConfig+0x74>
 8002172:	4b91      	ldr	r3, [pc, #580]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a90      	ldr	r2, [pc, #576]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e01d      	b.n	80021bc <HAL_RCC_OscConfig+0xb0>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x98>
 800218a:	4b8b      	ldr	r3, [pc, #556]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a8a      	ldr	r2, [pc, #552]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b88      	ldr	r3, [pc, #544]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a87      	ldr	r2, [pc, #540]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xb0>
 80021a4:	4b84      	ldr	r3, [pc, #528]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a83      	ldr	r2, [pc, #524]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b81      	ldr	r3, [pc, #516]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a80      	ldr	r2, [pc, #512]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80021b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe fd6a 	bl	8000c9c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021cc:	f7fe fd66 	bl	8000c9c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1fb      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0xc0>
 80021ea:	e014      	b.n	8002216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fd56 	bl	8000c9c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f4:	f7fe fd52 	bl	8000c9c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1e7      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	4b6c      	ldr	r3, [pc, #432]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0xe8>
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d063      	beq.n	80022ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002222:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b62      	ldr	r3, [pc, #392]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002236:	2b08      	cmp	r3, #8
 8002238:	d11c      	bne.n	8002274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223a:	4b5f      	ldr	r3, [pc, #380]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d116      	bne.n	8002274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x152>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e1bb      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4952      	ldr	r1, [pc, #328]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	e03a      	b.n	80022ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d020      	beq.n	80022be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227c:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <HAL_RCC_OscConfig+0x2b0>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7fe fd0b 	bl	8000c9c <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228a:	f7fe fd07 	bl	8000c9c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e19c      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4940      	ldr	r1, [pc, #256]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	e015      	b.n	80022ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022be:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <HAL_RCC_OscConfig+0x2b0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fcea 	bl	8000c9c <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022cc:	f7fe fce6 	bl	8000c9c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e17b      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d030      	beq.n	8002358 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_RCC_OscConfig+0x2b4>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7fe fcca 	bl	8000c9c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230c:	f7fe fcc6 	bl	8000c9c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e15b      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x200>
 800232a:	e015      	b.n	8002358 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_RCC_OscConfig+0x2b4>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7fe fcb3 	bl	8000c9c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233a:	f7fe fcaf 	bl	8000c9c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e144      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800234e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a0 	beq.w	80024a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_OscConfig+0x2b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d121      	bne.n	80023e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <HAL_RCC_OscConfig+0x2b8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <HAL_RCC_OscConfig+0x2b8>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7fe fc75 	bl	8000c9c <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	e011      	b.n	80023da <HAL_RCC_OscConfig+0x2ce>
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	42470000 	.word	0x42470000
 80023c0:	42470e80 	.word	0x42470e80
 80023c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe fc68 	bl	8000c9c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0fd      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b81      	ldr	r3, [pc, #516]	; (80025e0 <HAL_RCC_OscConfig+0x4d4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d106      	bne.n	80023fc <HAL_RCC_OscConfig+0x2f0>
 80023ee:	4b7d      	ldr	r3, [pc, #500]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a7c      	ldr	r2, [pc, #496]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70
 80023fa:	e01c      	b.n	8002436 <HAL_RCC_OscConfig+0x32a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b05      	cmp	r3, #5
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x312>
 8002404:	4b77      	ldr	r3, [pc, #476]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	4a76      	ldr	r2, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6713      	str	r3, [r2, #112]	; 0x70
 8002410:	4b74      	ldr	r3, [pc, #464]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a73      	ldr	r2, [pc, #460]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	e00b      	b.n	8002436 <HAL_RCC_OscConfig+0x32a>
 800241e:	4b71      	ldr	r3, [pc, #452]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a70      	ldr	r2, [pc, #448]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	4b6e      	ldr	r3, [pc, #440]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a6d      	ldr	r2, [pc, #436]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d015      	beq.n	800246a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7fe fc2d 	bl	8000c9c <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7fe fc29 	bl	8000c9c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	; 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0bc      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ee      	beq.n	8002446 <HAL_RCC_OscConfig+0x33a>
 8002468:	e014      	b.n	8002494 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7fe fc17 	bl	8000c9c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fc13 	bl	8000c9c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0a6      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ee      	bne.n	8002472 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b52      	ldr	r3, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a51      	ldr	r2, [pc, #324]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8092 	beq.w	80025d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024b0:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d05c      	beq.n	8002576 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d141      	bne.n	8002548 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c4:	4b48      	ldr	r3, [pc, #288]	; (80025e8 <HAL_RCC_OscConfig+0x4dc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe fbe7 	bl	8000c9c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe fbe3 	bl	8000c9c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e078      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e4:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	019b      	lsls	r3, r3, #6
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	085b      	lsrs	r3, r3, #1
 8002508:	3b01      	subs	r3, #1
 800250a:	041b      	lsls	r3, r3, #16
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	061b      	lsls	r3, r3, #24
 8002514:	4933      	ldr	r1, [pc, #204]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251a:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <HAL_RCC_OscConfig+0x4dc>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fbbc 	bl	8000c9c <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe fbb8 	bl	8000c9c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e04d      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x41c>
 8002546:	e045      	b.n	80025d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x4dc>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe fba5 	bl	8000c9c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe fba1 	bl	8000c9c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e036      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x44a>
 8002574:	e02e      	b.n	80025d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e029      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002582:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_RCC_OscConfig+0x4d8>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	429a      	cmp	r2, r3
 8002594:	d11c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d115      	bne.n	80025d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d10d      	bne.n	80025d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40007000 	.word	0x40007000
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470060 	.word	0x42470060

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0cc      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b68      	ldr	r3, [pc, #416]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d90c      	bls.n	8002628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b65      	ldr	r3, [pc, #404]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0b8      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002640:	4b59      	ldr	r3, [pc, #356]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002658:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a52      	ldr	r2, [pc, #328]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	494d      	ldr	r1, [pc, #308]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d044      	beq.n	800270c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d119      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07f      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	4b3f      	ldr	r3, [pc, #252]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e06f      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e067      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4934      	ldr	r1, [pc, #208]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026dc:	f7fe fade 	bl	8000c9c <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7fe fada 	bl	8000c9c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e04f      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d20c      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e032      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4916      	ldr	r1, [pc, #88]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002772:	f000 f821 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002776:	4601      	mov	r1, r0
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	fa21 f303 	lsr.w	r3, r1, r3
 800278a:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fa3e 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023c00 	.word	0x40023c00
 80027a8:	40023800 	.word	0x40023800
 80027ac:	08003bd4 	.word	0x08003bd4
 80027b0:	20000000 	.word	0x20000000
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	2300      	movs	r3, #0
 80027c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ce:	4b63      	ldr	r3, [pc, #396]	; (800295c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d007      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x32>
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d008      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x38>
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 80b4 	bne.w	800294c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027e6:	60bb      	str	r3, [r7, #8]
       break;
 80027e8:	e0b3      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ea:	4b5e      	ldr	r3, [pc, #376]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80027ec:	60bb      	str	r3, [r7, #8]
      break;
 80027ee:	e0b0      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f0:	4b5a      	ldr	r3, [pc, #360]	; (800295c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027fa:	4b58      	ldr	r3, [pc, #352]	; (800295c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d04a      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002806:	4b55      	ldr	r3, [pc, #340]	; (800295c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	f04f 0400 	mov.w	r4, #0
 8002810:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	ea03 0501 	and.w	r5, r3, r1
 800281c:	ea04 0602 	and.w	r6, r4, r2
 8002820:	4629      	mov	r1, r5
 8002822:	4632      	mov	r2, r6
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	f04f 0400 	mov.w	r4, #0
 800282c:	0154      	lsls	r4, r2, #5
 800282e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002832:	014b      	lsls	r3, r1, #5
 8002834:	4619      	mov	r1, r3
 8002836:	4622      	mov	r2, r4
 8002838:	1b49      	subs	r1, r1, r5
 800283a:	eb62 0206 	sbc.w	r2, r2, r6
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	f04f 0400 	mov.w	r4, #0
 8002846:	0194      	lsls	r4, r2, #6
 8002848:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800284c:	018b      	lsls	r3, r1, #6
 800284e:	1a5b      	subs	r3, r3, r1
 8002850:	eb64 0402 	sbc.w	r4, r4, r2
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	00e2      	lsls	r2, r4, #3
 800285e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002862:	00d9      	lsls	r1, r3, #3
 8002864:	460b      	mov	r3, r1
 8002866:	4614      	mov	r4, r2
 8002868:	195b      	adds	r3, r3, r5
 800286a:	eb44 0406 	adc.w	r4, r4, r6
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	0262      	lsls	r2, r4, #9
 8002878:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800287c:	0259      	lsls	r1, r3, #9
 800287e:	460b      	mov	r3, r1
 8002880:	4614      	mov	r4, r2
 8002882:	4618      	mov	r0, r3
 8002884:	4621      	mov	r1, r4
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f04f 0400 	mov.w	r4, #0
 800288c:	461a      	mov	r2, r3
 800288e:	4623      	mov	r3, r4
 8002890:	f7fd fcf6 	bl	8000280 <__aeabi_uldivmod>
 8002894:	4603      	mov	r3, r0
 8002896:	460c      	mov	r4, r1
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e049      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289c:	4b2f      	ldr	r3, [pc, #188]	; (800295c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	f04f 0400 	mov.w	r4, #0
 80028a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	ea03 0501 	and.w	r5, r3, r1
 80028b2:	ea04 0602 	and.w	r6, r4, r2
 80028b6:	4629      	mov	r1, r5
 80028b8:	4632      	mov	r2, r6
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	f04f 0400 	mov.w	r4, #0
 80028c2:	0154      	lsls	r4, r2, #5
 80028c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028c8:	014b      	lsls	r3, r1, #5
 80028ca:	4619      	mov	r1, r3
 80028cc:	4622      	mov	r2, r4
 80028ce:	1b49      	subs	r1, r1, r5
 80028d0:	eb62 0206 	sbc.w	r2, r2, r6
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	f04f 0400 	mov.w	r4, #0
 80028dc:	0194      	lsls	r4, r2, #6
 80028de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028e2:	018b      	lsls	r3, r1, #6
 80028e4:	1a5b      	subs	r3, r3, r1
 80028e6:	eb64 0402 	sbc.w	r4, r4, r2
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	00e2      	lsls	r2, r4, #3
 80028f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028f8:	00d9      	lsls	r1, r3, #3
 80028fa:	460b      	mov	r3, r1
 80028fc:	4614      	mov	r4, r2
 80028fe:	195b      	adds	r3, r3, r5
 8002900:	eb44 0406 	adc.w	r4, r4, r6
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	02a2      	lsls	r2, r4, #10
 800290e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002912:	0299      	lsls	r1, r3, #10
 8002914:	460b      	mov	r3, r1
 8002916:	4614      	mov	r4, r2
 8002918:	4618      	mov	r0, r3
 800291a:	4621      	mov	r1, r4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f04f 0400 	mov.w	r4, #0
 8002922:	461a      	mov	r2, r3
 8002924:	4623      	mov	r3, r4
 8002926:	f7fd fcab 	bl	8000280 <__aeabi_uldivmod>
 800292a:	4603      	mov	r3, r0
 800292c:	460c      	mov	r4, r1
 800292e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	3301      	adds	r3, #1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	60bb      	str	r3, [r7, #8]
      break;
 800294a:	e002      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800294e:	60bb      	str	r3, [r7, #8]
      break;
 8002950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002952:	68bb      	ldr	r3, [r7, #8]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	00f42400 	.word	0x00f42400
 8002964:	007a1200 	.word	0x007a1200

08002968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCC_GetHCLKFreq+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000000 	.word	0x20000000

08002980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002984:	f7ff fff0 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002988:	4601      	mov	r1, r0
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	0a9b      	lsrs	r3, r3, #10
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4a03      	ldr	r2, [pc, #12]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08003be4 	.word	0x08003be4

080029a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029ac:	f7ff ffdc 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 80029b0:	4601      	mov	r1, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0b5b      	lsrs	r3, r3, #13
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4a03      	ldr	r2, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40023800 	.word	0x40023800
 80029cc:	08003be4 	.word	0x08003be4

080029d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e03f      	b.n	8002a62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe f808 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	; 0x24
 8002a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f90b 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af02      	add	r7, sp, #8
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 8083 	bne.w	8002b92 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_UART_Transmit+0x2e>
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e07b      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Transmit+0x40>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e074      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2221      	movs	r2, #33	; 0x21
 8002abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ac0:	f7fe f8ec 	bl	8000c9c <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ada:	e042      	b.n	8002b62 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af2:	d122      	bne.n	8002b3a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2200      	movs	r2, #0
 8002afc:	2180      	movs	r1, #128	; 0x80
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f84c 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e042      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b20:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	e017      	b.n	8002b62 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3301      	adds	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	e013      	b.n	8002b62 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f829 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e01f      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	60ba      	str	r2, [r7, #8]
 8002b5a:	781a      	ldrb	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1b7      	bne.n	8002adc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2200      	movs	r2, #0
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f810 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e006      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bac:	e02c      	b.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d028      	beq.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bbc:	f7fe f86e 	bl	8000c9c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d21d      	bcs.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e00f      	b.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4013      	ands	r3, r2
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d0c3      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c72:	f023 030c 	bic.w	r3, r3, #12
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9e:	f040 818b 	bne.w	8002fb8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4ac1      	ldr	r2, [pc, #772]	; (8002fac <UART_SetConfig+0x37c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d005      	beq.n	8002cb8 <UART_SetConfig+0x88>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4abf      	ldr	r2, [pc, #764]	; (8002fb0 <UART_SetConfig+0x380>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	f040 80bd 	bne.w	8002e32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cb8:	f7ff fe76 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 8002cbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	461d      	mov	r5, r3
 8002cc2:	f04f 0600 	mov.w	r6, #0
 8002cc6:	46a8      	mov	r8, r5
 8002cc8:	46b1      	mov	r9, r6
 8002cca:	eb18 0308 	adds.w	r3, r8, r8
 8002cce:	eb49 0409 	adc.w	r4, r9, r9
 8002cd2:	4698      	mov	r8, r3
 8002cd4:	46a1      	mov	r9, r4
 8002cd6:	eb18 0805 	adds.w	r8, r8, r5
 8002cda:	eb49 0906 	adc.w	r9, r9, r6
 8002cde:	f04f 0100 	mov.w	r1, #0
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cf2:	4688      	mov	r8, r1
 8002cf4:	4691      	mov	r9, r2
 8002cf6:	eb18 0005 	adds.w	r0, r8, r5
 8002cfa:	eb49 0106 	adc.w	r1, r9, r6
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	461d      	mov	r5, r3
 8002d04:	f04f 0600 	mov.w	r6, #0
 8002d08:	196b      	adds	r3, r5, r5
 8002d0a:	eb46 0406 	adc.w	r4, r6, r6
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4623      	mov	r3, r4
 8002d12:	f7fd fab5 	bl	8000280 <__aeabi_uldivmod>
 8002d16:	4603      	mov	r3, r0
 8002d18:	460c      	mov	r4, r1
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4ba5      	ldr	r3, [pc, #660]	; (8002fb4 <UART_SetConfig+0x384>)
 8002d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	f04f 0600 	mov.w	r6, #0
 8002d30:	46a9      	mov	r9, r5
 8002d32:	46b2      	mov	sl, r6
 8002d34:	eb19 0309 	adds.w	r3, r9, r9
 8002d38:	eb4a 040a 	adc.w	r4, sl, sl
 8002d3c:	4699      	mov	r9, r3
 8002d3e:	46a2      	mov	sl, r4
 8002d40:	eb19 0905 	adds.w	r9, r9, r5
 8002d44:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d5c:	4689      	mov	r9, r1
 8002d5e:	4692      	mov	sl, r2
 8002d60:	eb19 0005 	adds.w	r0, r9, r5
 8002d64:	eb4a 0106 	adc.w	r1, sl, r6
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	461d      	mov	r5, r3
 8002d6e:	f04f 0600 	mov.w	r6, #0
 8002d72:	196b      	adds	r3, r5, r5
 8002d74:	eb46 0406 	adc.w	r4, r6, r6
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	f7fd fa80 	bl	8000280 <__aeabi_uldivmod>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b8b      	ldr	r3, [pc, #556]	; (8002fb4 <UART_SetConfig+0x384>)
 8002d88:	fba3 1302 	umull	r1, r3, r3, r2
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	2164      	movs	r1, #100	; 0x64
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	3332      	adds	r3, #50	; 0x32
 8002d9a:	4a86      	ldr	r2, [pc, #536]	; (8002fb4 <UART_SetConfig+0x384>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002da8:	4498      	add	r8, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	461d      	mov	r5, r3
 8002dae:	f04f 0600 	mov.w	r6, #0
 8002db2:	46a9      	mov	r9, r5
 8002db4:	46b2      	mov	sl, r6
 8002db6:	eb19 0309 	adds.w	r3, r9, r9
 8002dba:	eb4a 040a 	adc.w	r4, sl, sl
 8002dbe:	4699      	mov	r9, r3
 8002dc0:	46a2      	mov	sl, r4
 8002dc2:	eb19 0905 	adds.w	r9, r9, r5
 8002dc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dde:	4689      	mov	r9, r1
 8002de0:	4692      	mov	sl, r2
 8002de2:	eb19 0005 	adds.w	r0, r9, r5
 8002de6:	eb4a 0106 	adc.w	r1, sl, r6
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	461d      	mov	r5, r3
 8002df0:	f04f 0600 	mov.w	r6, #0
 8002df4:	196b      	adds	r3, r5, r5
 8002df6:	eb46 0406 	adc.w	r4, r6, r6
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4623      	mov	r3, r4
 8002dfe:	f7fd fa3f 	bl	8000280 <__aeabi_uldivmod>
 8002e02:	4603      	mov	r3, r0
 8002e04:	460c      	mov	r4, r1
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <UART_SetConfig+0x384>)
 8002e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2164      	movs	r1, #100	; 0x64
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	3332      	adds	r3, #50	; 0x32
 8002e1c:	4a65      	ldr	r2, [pc, #404]	; (8002fb4 <UART_SetConfig+0x384>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	f003 0207 	and.w	r2, r3, #7
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4442      	add	r2, r8
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	e26f      	b.n	8003312 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e32:	f7ff fda5 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8002e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	461d      	mov	r5, r3
 8002e3c:	f04f 0600 	mov.w	r6, #0
 8002e40:	46a8      	mov	r8, r5
 8002e42:	46b1      	mov	r9, r6
 8002e44:	eb18 0308 	adds.w	r3, r8, r8
 8002e48:	eb49 0409 	adc.w	r4, r9, r9
 8002e4c:	4698      	mov	r8, r3
 8002e4e:	46a1      	mov	r9, r4
 8002e50:	eb18 0805 	adds.w	r8, r8, r5
 8002e54:	eb49 0906 	adc.w	r9, r9, r6
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e6c:	4688      	mov	r8, r1
 8002e6e:	4691      	mov	r9, r2
 8002e70:	eb18 0005 	adds.w	r0, r8, r5
 8002e74:	eb49 0106 	adc.w	r1, r9, r6
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	461d      	mov	r5, r3
 8002e7e:	f04f 0600 	mov.w	r6, #0
 8002e82:	196b      	adds	r3, r5, r5
 8002e84:	eb46 0406 	adc.w	r4, r6, r6
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	f7fd f9f8 	bl	8000280 <__aeabi_uldivmod>
 8002e90:	4603      	mov	r3, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <UART_SetConfig+0x384>)
 8002e98:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	461d      	mov	r5, r3
 8002ea6:	f04f 0600 	mov.w	r6, #0
 8002eaa:	46a9      	mov	r9, r5
 8002eac:	46b2      	mov	sl, r6
 8002eae:	eb19 0309 	adds.w	r3, r9, r9
 8002eb2:	eb4a 040a 	adc.w	r4, sl, sl
 8002eb6:	4699      	mov	r9, r3
 8002eb8:	46a2      	mov	sl, r4
 8002eba:	eb19 0905 	adds.w	r9, r9, r5
 8002ebe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ece:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ed2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ed6:	4689      	mov	r9, r1
 8002ed8:	4692      	mov	sl, r2
 8002eda:	eb19 0005 	adds.w	r0, r9, r5
 8002ede:	eb4a 0106 	adc.w	r1, sl, r6
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	461d      	mov	r5, r3
 8002ee8:	f04f 0600 	mov.w	r6, #0
 8002eec:	196b      	adds	r3, r5, r5
 8002eee:	eb46 0406 	adc.w	r4, r6, r6
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	f7fd f9c3 	bl	8000280 <__aeabi_uldivmod>
 8002efa:	4603      	mov	r3, r0
 8002efc:	460c      	mov	r4, r1
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f02:	fba3 1302 	umull	r1, r3, r3, r2
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2164      	movs	r1, #100	; 0x64
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	3332      	adds	r3, #50	; 0x32
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f22:	4498      	add	r8, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	461d      	mov	r5, r3
 8002f28:	f04f 0600 	mov.w	r6, #0
 8002f2c:	46a9      	mov	r9, r5
 8002f2e:	46b2      	mov	sl, r6
 8002f30:	eb19 0309 	adds.w	r3, r9, r9
 8002f34:	eb4a 040a 	adc.w	r4, sl, sl
 8002f38:	4699      	mov	r9, r3
 8002f3a:	46a2      	mov	sl, r4
 8002f3c:	eb19 0905 	adds.w	r9, r9, r5
 8002f40:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f58:	4689      	mov	r9, r1
 8002f5a:	4692      	mov	sl, r2
 8002f5c:	eb19 0005 	adds.w	r0, r9, r5
 8002f60:	eb4a 0106 	adc.w	r1, sl, r6
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	461d      	mov	r5, r3
 8002f6a:	f04f 0600 	mov.w	r6, #0
 8002f6e:	196b      	adds	r3, r5, r5
 8002f70:	eb46 0406 	adc.w	r4, r6, r6
 8002f74:	461a      	mov	r2, r3
 8002f76:	4623      	mov	r3, r4
 8002f78:	f7fd f982 	bl	8000280 <__aeabi_uldivmod>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f84:	fba3 1302 	umull	r1, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <UART_SetConfig+0x384>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 0207 	and.w	r2, r3, #7
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4442      	add	r2, r8
 8002fa8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002faa:	e1b2      	b.n	8003312 <UART_SetConfig+0x6e2>
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40011400 	.word	0x40011400
 8002fb4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4ad7      	ldr	r2, [pc, #860]	; (800331c <UART_SetConfig+0x6ec>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d005      	beq.n	8002fce <UART_SetConfig+0x39e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4ad6      	ldr	r2, [pc, #856]	; (8003320 <UART_SetConfig+0x6f0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f040 80d1 	bne.w	8003170 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fce:	f7ff fceb 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 8002fd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	469a      	mov	sl, r3
 8002fd8:	f04f 0b00 	mov.w	fp, #0
 8002fdc:	46d0      	mov	r8, sl
 8002fde:	46d9      	mov	r9, fp
 8002fe0:	eb18 0308 	adds.w	r3, r8, r8
 8002fe4:	eb49 0409 	adc.w	r4, r9, r9
 8002fe8:	4698      	mov	r8, r3
 8002fea:	46a1      	mov	r9, r4
 8002fec:	eb18 080a 	adds.w	r8, r8, sl
 8002ff0:	eb49 090b 	adc.w	r9, r9, fp
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003000:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003004:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003008:	4688      	mov	r8, r1
 800300a:	4691      	mov	r9, r2
 800300c:	eb1a 0508 	adds.w	r5, sl, r8
 8003010:	eb4b 0609 	adc.w	r6, fp, r9
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4619      	mov	r1, r3
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	f04f 0400 	mov.w	r4, #0
 8003026:	0094      	lsls	r4, r2, #2
 8003028:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800302c:	008b      	lsls	r3, r1, #2
 800302e:	461a      	mov	r2, r3
 8003030:	4623      	mov	r3, r4
 8003032:	4628      	mov	r0, r5
 8003034:	4631      	mov	r1, r6
 8003036:	f7fd f923 	bl	8000280 <__aeabi_uldivmod>
 800303a:	4603      	mov	r3, r0
 800303c:	460c      	mov	r4, r1
 800303e:	461a      	mov	r2, r3
 8003040:	4bb8      	ldr	r3, [pc, #736]	; (8003324 <UART_SetConfig+0x6f4>)
 8003042:	fba3 2302 	umull	r2, r3, r3, r2
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	469b      	mov	fp, r3
 8003050:	f04f 0c00 	mov.w	ip, #0
 8003054:	46d9      	mov	r9, fp
 8003056:	46e2      	mov	sl, ip
 8003058:	eb19 0309 	adds.w	r3, r9, r9
 800305c:	eb4a 040a 	adc.w	r4, sl, sl
 8003060:	4699      	mov	r9, r3
 8003062:	46a2      	mov	sl, r4
 8003064:	eb19 090b 	adds.w	r9, r9, fp
 8003068:	eb4a 0a0c 	adc.w	sl, sl, ip
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003078:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800307c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003080:	4689      	mov	r9, r1
 8003082:	4692      	mov	sl, r2
 8003084:	eb1b 0509 	adds.w	r5, fp, r9
 8003088:	eb4c 060a 	adc.w	r6, ip, sl
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4619      	mov	r1, r3
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	f04f 0400 	mov.w	r4, #0
 800309e:	0094      	lsls	r4, r2, #2
 80030a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030a4:	008b      	lsls	r3, r1, #2
 80030a6:	461a      	mov	r2, r3
 80030a8:	4623      	mov	r3, r4
 80030aa:	4628      	mov	r0, r5
 80030ac:	4631      	mov	r1, r6
 80030ae:	f7fd f8e7 	bl	8000280 <__aeabi_uldivmod>
 80030b2:	4603      	mov	r3, r0
 80030b4:	460c      	mov	r4, r1
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b9a      	ldr	r3, [pc, #616]	; (8003324 <UART_SetConfig+0x6f4>)
 80030ba:	fba3 1302 	umull	r1, r3, r3, r2
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2164      	movs	r1, #100	; 0x64
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	3332      	adds	r3, #50	; 0x32
 80030cc:	4a95      	ldr	r2, [pc, #596]	; (8003324 <UART_SetConfig+0x6f4>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d8:	4498      	add	r8, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	469b      	mov	fp, r3
 80030de:	f04f 0c00 	mov.w	ip, #0
 80030e2:	46d9      	mov	r9, fp
 80030e4:	46e2      	mov	sl, ip
 80030e6:	eb19 0309 	adds.w	r3, r9, r9
 80030ea:	eb4a 040a 	adc.w	r4, sl, sl
 80030ee:	4699      	mov	r9, r3
 80030f0:	46a2      	mov	sl, r4
 80030f2:	eb19 090b 	adds.w	r9, r9, fp
 80030f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800310a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800310e:	4689      	mov	r9, r1
 8003110:	4692      	mov	sl, r2
 8003112:	eb1b 0509 	adds.w	r5, fp, r9
 8003116:	eb4c 060a 	adc.w	r6, ip, sl
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4619      	mov	r1, r3
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	0094      	lsls	r4, r2, #2
 800312e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003132:	008b      	lsls	r3, r1, #2
 8003134:	461a      	mov	r2, r3
 8003136:	4623      	mov	r3, r4
 8003138:	4628      	mov	r0, r5
 800313a:	4631      	mov	r1, r6
 800313c:	f7fd f8a0 	bl	8000280 <__aeabi_uldivmod>
 8003140:	4603      	mov	r3, r0
 8003142:	460c      	mov	r4, r1
 8003144:	461a      	mov	r2, r3
 8003146:	4b77      	ldr	r3, [pc, #476]	; (8003324 <UART_SetConfig+0x6f4>)
 8003148:	fba3 1302 	umull	r1, r3, r3, r2
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	2164      	movs	r1, #100	; 0x64
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	3332      	adds	r3, #50	; 0x32
 800315a:	4a72      	ldr	r2, [pc, #456]	; (8003324 <UART_SetConfig+0x6f4>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4442      	add	r2, r8
 800316c:	609a      	str	r2, [r3, #8]
 800316e:	e0d0      	b.n	8003312 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003170:	f7ff fc06 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 8003174:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	469a      	mov	sl, r3
 800317a:	f04f 0b00 	mov.w	fp, #0
 800317e:	46d0      	mov	r8, sl
 8003180:	46d9      	mov	r9, fp
 8003182:	eb18 0308 	adds.w	r3, r8, r8
 8003186:	eb49 0409 	adc.w	r4, r9, r9
 800318a:	4698      	mov	r8, r3
 800318c:	46a1      	mov	r9, r4
 800318e:	eb18 080a 	adds.w	r8, r8, sl
 8003192:	eb49 090b 	adc.w	r9, r9, fp
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031aa:	4688      	mov	r8, r1
 80031ac:	4691      	mov	r9, r2
 80031ae:	eb1a 0508 	adds.w	r5, sl, r8
 80031b2:	eb4b 0609 	adc.w	r6, fp, r9
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4619      	mov	r1, r3
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	f04f 0400 	mov.w	r4, #0
 80031c8:	0094      	lsls	r4, r2, #2
 80031ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031ce:	008b      	lsls	r3, r1, #2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	4628      	mov	r0, r5
 80031d6:	4631      	mov	r1, r6
 80031d8:	f7fd f852 	bl	8000280 <__aeabi_uldivmod>
 80031dc:	4603      	mov	r3, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b50      	ldr	r3, [pc, #320]	; (8003324 <UART_SetConfig+0x6f4>)
 80031e4:	fba3 2302 	umull	r2, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	469b      	mov	fp, r3
 80031f2:	f04f 0c00 	mov.w	ip, #0
 80031f6:	46d9      	mov	r9, fp
 80031f8:	46e2      	mov	sl, ip
 80031fa:	eb19 0309 	adds.w	r3, r9, r9
 80031fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003202:	4699      	mov	r9, r3
 8003204:	46a2      	mov	sl, r4
 8003206:	eb19 090b 	adds.w	r9, r9, fp
 800320a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800321a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800321e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003222:	4689      	mov	r9, r1
 8003224:	4692      	mov	sl, r2
 8003226:	eb1b 0509 	adds.w	r5, fp, r9
 800322a:	eb4c 060a 	adc.w	r6, ip, sl
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4619      	mov	r1, r3
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	f04f 0400 	mov.w	r4, #0
 8003240:	0094      	lsls	r4, r2, #2
 8003242:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003246:	008b      	lsls	r3, r1, #2
 8003248:	461a      	mov	r2, r3
 800324a:	4623      	mov	r3, r4
 800324c:	4628      	mov	r0, r5
 800324e:	4631      	mov	r1, r6
 8003250:	f7fd f816 	bl	8000280 <__aeabi_uldivmod>
 8003254:	4603      	mov	r3, r0
 8003256:	460c      	mov	r4, r1
 8003258:	461a      	mov	r2, r3
 800325a:	4b32      	ldr	r3, [pc, #200]	; (8003324 <UART_SetConfig+0x6f4>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a2d      	ldr	r2, [pc, #180]	; (8003324 <UART_SetConfig+0x6f4>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327a:	4498      	add	r8, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	469b      	mov	fp, r3
 8003280:	f04f 0c00 	mov.w	ip, #0
 8003284:	46d9      	mov	r9, fp
 8003286:	46e2      	mov	sl, ip
 8003288:	eb19 0309 	adds.w	r3, r9, r9
 800328c:	eb4a 040a 	adc.w	r4, sl, sl
 8003290:	4699      	mov	r9, r3
 8003292:	46a2      	mov	sl, r4
 8003294:	eb19 090b 	adds.w	r9, r9, fp
 8003298:	eb4a 0a0c 	adc.w	sl, sl, ip
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032b0:	4689      	mov	r9, r1
 80032b2:	4692      	mov	sl, r2
 80032b4:	eb1b 0509 	adds.w	r5, fp, r9
 80032b8:	eb4c 060a 	adc.w	r6, ip, sl
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4619      	mov	r1, r3
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	f04f 0400 	mov.w	r4, #0
 80032ce:	0094      	lsls	r4, r2, #2
 80032d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032d4:	008b      	lsls	r3, r1, #2
 80032d6:	461a      	mov	r2, r3
 80032d8:	4623      	mov	r3, r4
 80032da:	4628      	mov	r0, r5
 80032dc:	4631      	mov	r1, r6
 80032de:	f7fc ffcf 	bl	8000280 <__aeabi_uldivmod>
 80032e2:	4603      	mov	r3, r0
 80032e4:	460c      	mov	r4, r1
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <UART_SetConfig+0x6f4>)
 80032ea:	fba3 1302 	umull	r1, r3, r3, r2
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2164      	movs	r1, #100	; 0x64
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	3332      	adds	r3, #50	; 0x32
 80032fc:	4a09      	ldr	r2, [pc, #36]	; (8003324 <UART_SetConfig+0x6f4>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4442      	add	r2, r8
 800330e:	609a      	str	r2, [r3, #8]
}
 8003310:	e7ff      	b.n	8003312 <UART_SetConfig+0x6e2>
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331c:	40011000 	.word	0x40011000
 8003320:	40011400 	.word	0x40011400
 8003324:	51eb851f 	.word	0x51eb851f

08003328 <__errno>:
 8003328:	4b01      	ldr	r3, [pc, #4]	; (8003330 <__errno+0x8>)
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	2000000c 	.word	0x2000000c

08003334 <__libc_init_array>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4e0d      	ldr	r6, [pc, #52]	; (800336c <__libc_init_array+0x38>)
 8003338:	4c0d      	ldr	r4, [pc, #52]	; (8003370 <__libc_init_array+0x3c>)
 800333a:	1ba4      	subs	r4, r4, r6
 800333c:	10a4      	asrs	r4, r4, #2
 800333e:	2500      	movs	r5, #0
 8003340:	42a5      	cmp	r5, r4
 8003342:	d109      	bne.n	8003358 <__libc_init_array+0x24>
 8003344:	4e0b      	ldr	r6, [pc, #44]	; (8003374 <__libc_init_array+0x40>)
 8003346:	4c0c      	ldr	r4, [pc, #48]	; (8003378 <__libc_init_array+0x44>)
 8003348:	f000 fc26 	bl	8003b98 <_init>
 800334c:	1ba4      	subs	r4, r4, r6
 800334e:	10a4      	asrs	r4, r4, #2
 8003350:	2500      	movs	r5, #0
 8003352:	42a5      	cmp	r5, r4
 8003354:	d105      	bne.n	8003362 <__libc_init_array+0x2e>
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800335c:	4798      	blx	r3
 800335e:	3501      	adds	r5, #1
 8003360:	e7ee      	b.n	8003340 <__libc_init_array+0xc>
 8003362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003366:	4798      	blx	r3
 8003368:	3501      	adds	r5, #1
 800336a:	e7f2      	b.n	8003352 <__libc_init_array+0x1e>
 800336c:	08003c28 	.word	0x08003c28
 8003370:	08003c28 	.word	0x08003c28
 8003374:	08003c28 	.word	0x08003c28
 8003378:	08003c2c 	.word	0x08003c2c

0800337c <memset>:
 800337c:	4402      	add	r2, r0
 800337e:	4603      	mov	r3, r0
 8003380:	4293      	cmp	r3, r2
 8003382:	d100      	bne.n	8003386 <memset+0xa>
 8003384:	4770      	bx	lr
 8003386:	f803 1b01 	strb.w	r1, [r3], #1
 800338a:	e7f9      	b.n	8003380 <memset+0x4>

0800338c <siprintf>:
 800338c:	b40e      	push	{r1, r2, r3}
 800338e:	b500      	push	{lr}
 8003390:	b09c      	sub	sp, #112	; 0x70
 8003392:	ab1d      	add	r3, sp, #116	; 0x74
 8003394:	9002      	str	r0, [sp, #8]
 8003396:	9006      	str	r0, [sp, #24]
 8003398:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800339c:	4809      	ldr	r0, [pc, #36]	; (80033c4 <siprintf+0x38>)
 800339e:	9107      	str	r1, [sp, #28]
 80033a0:	9104      	str	r1, [sp, #16]
 80033a2:	4909      	ldr	r1, [pc, #36]	; (80033c8 <siprintf+0x3c>)
 80033a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033a8:	9105      	str	r1, [sp, #20]
 80033aa:	6800      	ldr	r0, [r0, #0]
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	a902      	add	r1, sp, #8
 80033b0:	f000 f866 	bl	8003480 <_svfiprintf_r>
 80033b4:	9b02      	ldr	r3, [sp, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	b01c      	add	sp, #112	; 0x70
 80033bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80033c0:	b003      	add	sp, #12
 80033c2:	4770      	bx	lr
 80033c4:	2000000c 	.word	0x2000000c
 80033c8:	ffff0208 	.word	0xffff0208

080033cc <__ssputs_r>:
 80033cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	688e      	ldr	r6, [r1, #8]
 80033d2:	429e      	cmp	r6, r3
 80033d4:	4682      	mov	sl, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	4690      	mov	r8, r2
 80033da:	4699      	mov	r9, r3
 80033dc:	d837      	bhi.n	800344e <__ssputs_r+0x82>
 80033de:	898a      	ldrh	r2, [r1, #12]
 80033e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033e4:	d031      	beq.n	800344a <__ssputs_r+0x7e>
 80033e6:	6825      	ldr	r5, [r4, #0]
 80033e8:	6909      	ldr	r1, [r1, #16]
 80033ea:	1a6f      	subs	r7, r5, r1
 80033ec:	6965      	ldr	r5, [r4, #20]
 80033ee:	2302      	movs	r3, #2
 80033f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80033f8:	f109 0301 	add.w	r3, r9, #1
 80033fc:	443b      	add	r3, r7
 80033fe:	429d      	cmp	r5, r3
 8003400:	bf38      	it	cc
 8003402:	461d      	movcc	r5, r3
 8003404:	0553      	lsls	r3, r2, #21
 8003406:	d530      	bpl.n	800346a <__ssputs_r+0x9e>
 8003408:	4629      	mov	r1, r5
 800340a:	f000 fb2b 	bl	8003a64 <_malloc_r>
 800340e:	4606      	mov	r6, r0
 8003410:	b950      	cbnz	r0, 8003428 <__ssputs_r+0x5c>
 8003412:	230c      	movs	r3, #12
 8003414:	f8ca 3000 	str.w	r3, [sl]
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003428:	463a      	mov	r2, r7
 800342a:	6921      	ldr	r1, [r4, #16]
 800342c:	f000 faa8 	bl	8003980 <memcpy>
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343a:	81a3      	strh	r3, [r4, #12]
 800343c:	6126      	str	r6, [r4, #16]
 800343e:	6165      	str	r5, [r4, #20]
 8003440:	443e      	add	r6, r7
 8003442:	1bed      	subs	r5, r5, r7
 8003444:	6026      	str	r6, [r4, #0]
 8003446:	60a5      	str	r5, [r4, #8]
 8003448:	464e      	mov	r6, r9
 800344a:	454e      	cmp	r6, r9
 800344c:	d900      	bls.n	8003450 <__ssputs_r+0x84>
 800344e:	464e      	mov	r6, r9
 8003450:	4632      	mov	r2, r6
 8003452:	4641      	mov	r1, r8
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	f000 fa9e 	bl	8003996 <memmove>
 800345a:	68a3      	ldr	r3, [r4, #8]
 800345c:	1b9b      	subs	r3, r3, r6
 800345e:	60a3      	str	r3, [r4, #8]
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	441e      	add	r6, r3
 8003464:	6026      	str	r6, [r4, #0]
 8003466:	2000      	movs	r0, #0
 8003468:	e7dc      	b.n	8003424 <__ssputs_r+0x58>
 800346a:	462a      	mov	r2, r5
 800346c:	f000 fb54 	bl	8003b18 <_realloc_r>
 8003470:	4606      	mov	r6, r0
 8003472:	2800      	cmp	r0, #0
 8003474:	d1e2      	bne.n	800343c <__ssputs_r+0x70>
 8003476:	6921      	ldr	r1, [r4, #16]
 8003478:	4650      	mov	r0, sl
 800347a:	f000 faa5 	bl	80039c8 <_free_r>
 800347e:	e7c8      	b.n	8003412 <__ssputs_r+0x46>

08003480 <_svfiprintf_r>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	461d      	mov	r5, r3
 8003486:	898b      	ldrh	r3, [r1, #12]
 8003488:	061f      	lsls	r7, r3, #24
 800348a:	b09d      	sub	sp, #116	; 0x74
 800348c:	4680      	mov	r8, r0
 800348e:	460c      	mov	r4, r1
 8003490:	4616      	mov	r6, r2
 8003492:	d50f      	bpl.n	80034b4 <_svfiprintf_r+0x34>
 8003494:	690b      	ldr	r3, [r1, #16]
 8003496:	b96b      	cbnz	r3, 80034b4 <_svfiprintf_r+0x34>
 8003498:	2140      	movs	r1, #64	; 0x40
 800349a:	f000 fae3 	bl	8003a64 <_malloc_r>
 800349e:	6020      	str	r0, [r4, #0]
 80034a0:	6120      	str	r0, [r4, #16]
 80034a2:	b928      	cbnz	r0, 80034b0 <_svfiprintf_r+0x30>
 80034a4:	230c      	movs	r3, #12
 80034a6:	f8c8 3000 	str.w	r3, [r8]
 80034aa:	f04f 30ff 	mov.w	r0, #4294967295
 80034ae:	e0c8      	b.n	8003642 <_svfiprintf_r+0x1c2>
 80034b0:	2340      	movs	r3, #64	; 0x40
 80034b2:	6163      	str	r3, [r4, #20]
 80034b4:	2300      	movs	r3, #0
 80034b6:	9309      	str	r3, [sp, #36]	; 0x24
 80034b8:	2320      	movs	r3, #32
 80034ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034be:	2330      	movs	r3, #48	; 0x30
 80034c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034c4:	9503      	str	r5, [sp, #12]
 80034c6:	f04f 0b01 	mov.w	fp, #1
 80034ca:	4637      	mov	r7, r6
 80034cc:	463d      	mov	r5, r7
 80034ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034d2:	b10b      	cbz	r3, 80034d8 <_svfiprintf_r+0x58>
 80034d4:	2b25      	cmp	r3, #37	; 0x25
 80034d6:	d13e      	bne.n	8003556 <_svfiprintf_r+0xd6>
 80034d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80034dc:	d00b      	beq.n	80034f6 <_svfiprintf_r+0x76>
 80034de:	4653      	mov	r3, sl
 80034e0:	4632      	mov	r2, r6
 80034e2:	4621      	mov	r1, r4
 80034e4:	4640      	mov	r0, r8
 80034e6:	f7ff ff71 	bl	80033cc <__ssputs_r>
 80034ea:	3001      	adds	r0, #1
 80034ec:	f000 80a4 	beq.w	8003638 <_svfiprintf_r+0x1b8>
 80034f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034f2:	4453      	add	r3, sl
 80034f4:	9309      	str	r3, [sp, #36]	; 0x24
 80034f6:	783b      	ldrb	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 809d 	beq.w	8003638 <_svfiprintf_r+0x1b8>
 80034fe:	2300      	movs	r3, #0
 8003500:	f04f 32ff 	mov.w	r2, #4294967295
 8003504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003508:	9304      	str	r3, [sp, #16]
 800350a:	9307      	str	r3, [sp, #28]
 800350c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003510:	931a      	str	r3, [sp, #104]	; 0x68
 8003512:	462f      	mov	r7, r5
 8003514:	2205      	movs	r2, #5
 8003516:	f817 1b01 	ldrb.w	r1, [r7], #1
 800351a:	4850      	ldr	r0, [pc, #320]	; (800365c <_svfiprintf_r+0x1dc>)
 800351c:	f7fc fe60 	bl	80001e0 <memchr>
 8003520:	9b04      	ldr	r3, [sp, #16]
 8003522:	b9d0      	cbnz	r0, 800355a <_svfiprintf_r+0xda>
 8003524:	06d9      	lsls	r1, r3, #27
 8003526:	bf44      	itt	mi
 8003528:	2220      	movmi	r2, #32
 800352a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800352e:	071a      	lsls	r2, r3, #28
 8003530:	bf44      	itt	mi
 8003532:	222b      	movmi	r2, #43	; 0x2b
 8003534:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003538:	782a      	ldrb	r2, [r5, #0]
 800353a:	2a2a      	cmp	r2, #42	; 0x2a
 800353c:	d015      	beq.n	800356a <_svfiprintf_r+0xea>
 800353e:	9a07      	ldr	r2, [sp, #28]
 8003540:	462f      	mov	r7, r5
 8003542:	2000      	movs	r0, #0
 8003544:	250a      	movs	r5, #10
 8003546:	4639      	mov	r1, r7
 8003548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800354c:	3b30      	subs	r3, #48	; 0x30
 800354e:	2b09      	cmp	r3, #9
 8003550:	d94d      	bls.n	80035ee <_svfiprintf_r+0x16e>
 8003552:	b1b8      	cbz	r0, 8003584 <_svfiprintf_r+0x104>
 8003554:	e00f      	b.n	8003576 <_svfiprintf_r+0xf6>
 8003556:	462f      	mov	r7, r5
 8003558:	e7b8      	b.n	80034cc <_svfiprintf_r+0x4c>
 800355a:	4a40      	ldr	r2, [pc, #256]	; (800365c <_svfiprintf_r+0x1dc>)
 800355c:	1a80      	subs	r0, r0, r2
 800355e:	fa0b f000 	lsl.w	r0, fp, r0
 8003562:	4318      	orrs	r0, r3
 8003564:	9004      	str	r0, [sp, #16]
 8003566:	463d      	mov	r5, r7
 8003568:	e7d3      	b.n	8003512 <_svfiprintf_r+0x92>
 800356a:	9a03      	ldr	r2, [sp, #12]
 800356c:	1d11      	adds	r1, r2, #4
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	9103      	str	r1, [sp, #12]
 8003572:	2a00      	cmp	r2, #0
 8003574:	db01      	blt.n	800357a <_svfiprintf_r+0xfa>
 8003576:	9207      	str	r2, [sp, #28]
 8003578:	e004      	b.n	8003584 <_svfiprintf_r+0x104>
 800357a:	4252      	negs	r2, r2
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	9207      	str	r2, [sp, #28]
 8003582:	9304      	str	r3, [sp, #16]
 8003584:	783b      	ldrb	r3, [r7, #0]
 8003586:	2b2e      	cmp	r3, #46	; 0x2e
 8003588:	d10c      	bne.n	80035a4 <_svfiprintf_r+0x124>
 800358a:	787b      	ldrb	r3, [r7, #1]
 800358c:	2b2a      	cmp	r3, #42	; 0x2a
 800358e:	d133      	bne.n	80035f8 <_svfiprintf_r+0x178>
 8003590:	9b03      	ldr	r3, [sp, #12]
 8003592:	1d1a      	adds	r2, r3, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	9203      	str	r2, [sp, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	bfb8      	it	lt
 800359c:	f04f 33ff 	movlt.w	r3, #4294967295
 80035a0:	3702      	adds	r7, #2
 80035a2:	9305      	str	r3, [sp, #20]
 80035a4:	4d2e      	ldr	r5, [pc, #184]	; (8003660 <_svfiprintf_r+0x1e0>)
 80035a6:	7839      	ldrb	r1, [r7, #0]
 80035a8:	2203      	movs	r2, #3
 80035aa:	4628      	mov	r0, r5
 80035ac:	f7fc fe18 	bl	80001e0 <memchr>
 80035b0:	b138      	cbz	r0, 80035c2 <_svfiprintf_r+0x142>
 80035b2:	2340      	movs	r3, #64	; 0x40
 80035b4:	1b40      	subs	r0, r0, r5
 80035b6:	fa03 f000 	lsl.w	r0, r3, r0
 80035ba:	9b04      	ldr	r3, [sp, #16]
 80035bc:	4303      	orrs	r3, r0
 80035be:	3701      	adds	r7, #1
 80035c0:	9304      	str	r3, [sp, #16]
 80035c2:	7839      	ldrb	r1, [r7, #0]
 80035c4:	4827      	ldr	r0, [pc, #156]	; (8003664 <_svfiprintf_r+0x1e4>)
 80035c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035ca:	2206      	movs	r2, #6
 80035cc:	1c7e      	adds	r6, r7, #1
 80035ce:	f7fc fe07 	bl	80001e0 <memchr>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d038      	beq.n	8003648 <_svfiprintf_r+0x1c8>
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <_svfiprintf_r+0x1e8>)
 80035d8:	bb13      	cbnz	r3, 8003620 <_svfiprintf_r+0x1a0>
 80035da:	9b03      	ldr	r3, [sp, #12]
 80035dc:	3307      	adds	r3, #7
 80035de:	f023 0307 	bic.w	r3, r3, #7
 80035e2:	3308      	adds	r3, #8
 80035e4:	9303      	str	r3, [sp, #12]
 80035e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e8:	444b      	add	r3, r9
 80035ea:	9309      	str	r3, [sp, #36]	; 0x24
 80035ec:	e76d      	b.n	80034ca <_svfiprintf_r+0x4a>
 80035ee:	fb05 3202 	mla	r2, r5, r2, r3
 80035f2:	2001      	movs	r0, #1
 80035f4:	460f      	mov	r7, r1
 80035f6:	e7a6      	b.n	8003546 <_svfiprintf_r+0xc6>
 80035f8:	2300      	movs	r3, #0
 80035fa:	3701      	adds	r7, #1
 80035fc:	9305      	str	r3, [sp, #20]
 80035fe:	4619      	mov	r1, r3
 8003600:	250a      	movs	r5, #10
 8003602:	4638      	mov	r0, r7
 8003604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003608:	3a30      	subs	r2, #48	; 0x30
 800360a:	2a09      	cmp	r2, #9
 800360c:	d903      	bls.n	8003616 <_svfiprintf_r+0x196>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0c8      	beq.n	80035a4 <_svfiprintf_r+0x124>
 8003612:	9105      	str	r1, [sp, #20]
 8003614:	e7c6      	b.n	80035a4 <_svfiprintf_r+0x124>
 8003616:	fb05 2101 	mla	r1, r5, r1, r2
 800361a:	2301      	movs	r3, #1
 800361c:	4607      	mov	r7, r0
 800361e:	e7f0      	b.n	8003602 <_svfiprintf_r+0x182>
 8003620:	ab03      	add	r3, sp, #12
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4622      	mov	r2, r4
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <_svfiprintf_r+0x1ec>)
 8003628:	a904      	add	r1, sp, #16
 800362a:	4640      	mov	r0, r8
 800362c:	f3af 8000 	nop.w
 8003630:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003634:	4681      	mov	r9, r0
 8003636:	d1d6      	bne.n	80035e6 <_svfiprintf_r+0x166>
 8003638:	89a3      	ldrh	r3, [r4, #12]
 800363a:	065b      	lsls	r3, r3, #25
 800363c:	f53f af35 	bmi.w	80034aa <_svfiprintf_r+0x2a>
 8003640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003642:	b01d      	add	sp, #116	; 0x74
 8003644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003648:	ab03      	add	r3, sp, #12
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	4622      	mov	r2, r4
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <_svfiprintf_r+0x1ec>)
 8003650:	a904      	add	r1, sp, #16
 8003652:	4640      	mov	r0, r8
 8003654:	f000 f882 	bl	800375c <_printf_i>
 8003658:	e7ea      	b.n	8003630 <_svfiprintf_r+0x1b0>
 800365a:	bf00      	nop
 800365c:	08003bec 	.word	0x08003bec
 8003660:	08003bf2 	.word	0x08003bf2
 8003664:	08003bf6 	.word	0x08003bf6
 8003668:	00000000 	.word	0x00000000
 800366c:	080033cd 	.word	0x080033cd

08003670 <_printf_common>:
 8003670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003674:	4691      	mov	r9, r2
 8003676:	461f      	mov	r7, r3
 8003678:	688a      	ldr	r2, [r1, #8]
 800367a:	690b      	ldr	r3, [r1, #16]
 800367c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003680:	4293      	cmp	r3, r2
 8003682:	bfb8      	it	lt
 8003684:	4613      	movlt	r3, r2
 8003686:	f8c9 3000 	str.w	r3, [r9]
 800368a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800368e:	4606      	mov	r6, r0
 8003690:	460c      	mov	r4, r1
 8003692:	b112      	cbz	r2, 800369a <_printf_common+0x2a>
 8003694:	3301      	adds	r3, #1
 8003696:	f8c9 3000 	str.w	r3, [r9]
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	0699      	lsls	r1, r3, #26
 800369e:	bf42      	ittt	mi
 80036a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036a4:	3302      	addmi	r3, #2
 80036a6:	f8c9 3000 	strmi.w	r3, [r9]
 80036aa:	6825      	ldr	r5, [r4, #0]
 80036ac:	f015 0506 	ands.w	r5, r5, #6
 80036b0:	d107      	bne.n	80036c2 <_printf_common+0x52>
 80036b2:	f104 0a19 	add.w	sl, r4, #25
 80036b6:	68e3      	ldr	r3, [r4, #12]
 80036b8:	f8d9 2000 	ldr.w	r2, [r9]
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	42ab      	cmp	r3, r5
 80036c0:	dc28      	bgt.n	8003714 <_printf_common+0xa4>
 80036c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036c6:	6822      	ldr	r2, [r4, #0]
 80036c8:	3300      	adds	r3, #0
 80036ca:	bf18      	it	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	0692      	lsls	r2, r2, #26
 80036d0:	d42d      	bmi.n	800372e <_printf_common+0xbe>
 80036d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036d6:	4639      	mov	r1, r7
 80036d8:	4630      	mov	r0, r6
 80036da:	47c0      	blx	r8
 80036dc:	3001      	adds	r0, #1
 80036de:	d020      	beq.n	8003722 <_printf_common+0xb2>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	68e5      	ldr	r5, [r4, #12]
 80036e4:	f8d9 2000 	ldr.w	r2, [r9]
 80036e8:	f003 0306 	and.w	r3, r3, #6
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	bf08      	it	eq
 80036f0:	1aad      	subeq	r5, r5, r2
 80036f2:	68a3      	ldr	r3, [r4, #8]
 80036f4:	6922      	ldr	r2, [r4, #16]
 80036f6:	bf0c      	ite	eq
 80036f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036fc:	2500      	movne	r5, #0
 80036fe:	4293      	cmp	r3, r2
 8003700:	bfc4      	itt	gt
 8003702:	1a9b      	subgt	r3, r3, r2
 8003704:	18ed      	addgt	r5, r5, r3
 8003706:	f04f 0900 	mov.w	r9, #0
 800370a:	341a      	adds	r4, #26
 800370c:	454d      	cmp	r5, r9
 800370e:	d11a      	bne.n	8003746 <_printf_common+0xd6>
 8003710:	2000      	movs	r0, #0
 8003712:	e008      	b.n	8003726 <_printf_common+0xb6>
 8003714:	2301      	movs	r3, #1
 8003716:	4652      	mov	r2, sl
 8003718:	4639      	mov	r1, r7
 800371a:	4630      	mov	r0, r6
 800371c:	47c0      	blx	r8
 800371e:	3001      	adds	r0, #1
 8003720:	d103      	bne.n	800372a <_printf_common+0xba>
 8003722:	f04f 30ff 	mov.w	r0, #4294967295
 8003726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800372a:	3501      	adds	r5, #1
 800372c:	e7c3      	b.n	80036b6 <_printf_common+0x46>
 800372e:	18e1      	adds	r1, r4, r3
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	2030      	movs	r0, #48	; 0x30
 8003734:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003738:	4422      	add	r2, r4
 800373a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800373e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003742:	3302      	adds	r3, #2
 8003744:	e7c5      	b.n	80036d2 <_printf_common+0x62>
 8003746:	2301      	movs	r3, #1
 8003748:	4622      	mov	r2, r4
 800374a:	4639      	mov	r1, r7
 800374c:	4630      	mov	r0, r6
 800374e:	47c0      	blx	r8
 8003750:	3001      	adds	r0, #1
 8003752:	d0e6      	beq.n	8003722 <_printf_common+0xb2>
 8003754:	f109 0901 	add.w	r9, r9, #1
 8003758:	e7d8      	b.n	800370c <_printf_common+0x9c>
	...

0800375c <_printf_i>:
 800375c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003760:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003764:	460c      	mov	r4, r1
 8003766:	7e09      	ldrb	r1, [r1, #24]
 8003768:	b085      	sub	sp, #20
 800376a:	296e      	cmp	r1, #110	; 0x6e
 800376c:	4617      	mov	r7, r2
 800376e:	4606      	mov	r6, r0
 8003770:	4698      	mov	r8, r3
 8003772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003774:	f000 80b3 	beq.w	80038de <_printf_i+0x182>
 8003778:	d822      	bhi.n	80037c0 <_printf_i+0x64>
 800377a:	2963      	cmp	r1, #99	; 0x63
 800377c:	d036      	beq.n	80037ec <_printf_i+0x90>
 800377e:	d80a      	bhi.n	8003796 <_printf_i+0x3a>
 8003780:	2900      	cmp	r1, #0
 8003782:	f000 80b9 	beq.w	80038f8 <_printf_i+0x19c>
 8003786:	2958      	cmp	r1, #88	; 0x58
 8003788:	f000 8083 	beq.w	8003892 <_printf_i+0x136>
 800378c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003790:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003794:	e032      	b.n	80037fc <_printf_i+0xa0>
 8003796:	2964      	cmp	r1, #100	; 0x64
 8003798:	d001      	beq.n	800379e <_printf_i+0x42>
 800379a:	2969      	cmp	r1, #105	; 0x69
 800379c:	d1f6      	bne.n	800378c <_printf_i+0x30>
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	6813      	ldr	r3, [r2, #0]
 80037a2:	0605      	lsls	r5, r0, #24
 80037a4:	f103 0104 	add.w	r1, r3, #4
 80037a8:	d52a      	bpl.n	8003800 <_printf_i+0xa4>
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6011      	str	r1, [r2, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	da03      	bge.n	80037ba <_printf_i+0x5e>
 80037b2:	222d      	movs	r2, #45	; 0x2d
 80037b4:	425b      	negs	r3, r3
 80037b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80037ba:	486f      	ldr	r0, [pc, #444]	; (8003978 <_printf_i+0x21c>)
 80037bc:	220a      	movs	r2, #10
 80037be:	e039      	b.n	8003834 <_printf_i+0xd8>
 80037c0:	2973      	cmp	r1, #115	; 0x73
 80037c2:	f000 809d 	beq.w	8003900 <_printf_i+0x1a4>
 80037c6:	d808      	bhi.n	80037da <_printf_i+0x7e>
 80037c8:	296f      	cmp	r1, #111	; 0x6f
 80037ca:	d020      	beq.n	800380e <_printf_i+0xb2>
 80037cc:	2970      	cmp	r1, #112	; 0x70
 80037ce:	d1dd      	bne.n	800378c <_printf_i+0x30>
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	f043 0320 	orr.w	r3, r3, #32
 80037d6:	6023      	str	r3, [r4, #0]
 80037d8:	e003      	b.n	80037e2 <_printf_i+0x86>
 80037da:	2975      	cmp	r1, #117	; 0x75
 80037dc:	d017      	beq.n	800380e <_printf_i+0xb2>
 80037de:	2978      	cmp	r1, #120	; 0x78
 80037e0:	d1d4      	bne.n	800378c <_printf_i+0x30>
 80037e2:	2378      	movs	r3, #120	; 0x78
 80037e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037e8:	4864      	ldr	r0, [pc, #400]	; (800397c <_printf_i+0x220>)
 80037ea:	e055      	b.n	8003898 <_printf_i+0x13c>
 80037ec:	6813      	ldr	r3, [r2, #0]
 80037ee:	1d19      	adds	r1, r3, #4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6011      	str	r1, [r2, #0]
 80037f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037fc:	2301      	movs	r3, #1
 80037fe:	e08c      	b.n	800391a <_printf_i+0x1be>
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6011      	str	r1, [r2, #0]
 8003804:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003808:	bf18      	it	ne
 800380a:	b21b      	sxthne	r3, r3
 800380c:	e7cf      	b.n	80037ae <_printf_i+0x52>
 800380e:	6813      	ldr	r3, [r2, #0]
 8003810:	6825      	ldr	r5, [r4, #0]
 8003812:	1d18      	adds	r0, r3, #4
 8003814:	6010      	str	r0, [r2, #0]
 8003816:	0628      	lsls	r0, r5, #24
 8003818:	d501      	bpl.n	800381e <_printf_i+0xc2>
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	e002      	b.n	8003824 <_printf_i+0xc8>
 800381e:	0668      	lsls	r0, r5, #25
 8003820:	d5fb      	bpl.n	800381a <_printf_i+0xbe>
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	4854      	ldr	r0, [pc, #336]	; (8003978 <_printf_i+0x21c>)
 8003826:	296f      	cmp	r1, #111	; 0x6f
 8003828:	bf14      	ite	ne
 800382a:	220a      	movne	r2, #10
 800382c:	2208      	moveq	r2, #8
 800382e:	2100      	movs	r1, #0
 8003830:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003834:	6865      	ldr	r5, [r4, #4]
 8003836:	60a5      	str	r5, [r4, #8]
 8003838:	2d00      	cmp	r5, #0
 800383a:	f2c0 8095 	blt.w	8003968 <_printf_i+0x20c>
 800383e:	6821      	ldr	r1, [r4, #0]
 8003840:	f021 0104 	bic.w	r1, r1, #4
 8003844:	6021      	str	r1, [r4, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d13d      	bne.n	80038c6 <_printf_i+0x16a>
 800384a:	2d00      	cmp	r5, #0
 800384c:	f040 808e 	bne.w	800396c <_printf_i+0x210>
 8003850:	4665      	mov	r5, ip
 8003852:	2a08      	cmp	r2, #8
 8003854:	d10b      	bne.n	800386e <_printf_i+0x112>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	07db      	lsls	r3, r3, #31
 800385a:	d508      	bpl.n	800386e <_printf_i+0x112>
 800385c:	6923      	ldr	r3, [r4, #16]
 800385e:	6862      	ldr	r2, [r4, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	bfde      	ittt	le
 8003864:	2330      	movle	r3, #48	; 0x30
 8003866:	f805 3c01 	strble.w	r3, [r5, #-1]
 800386a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800386e:	ebac 0305 	sub.w	r3, ip, r5
 8003872:	6123      	str	r3, [r4, #16]
 8003874:	f8cd 8000 	str.w	r8, [sp]
 8003878:	463b      	mov	r3, r7
 800387a:	aa03      	add	r2, sp, #12
 800387c:	4621      	mov	r1, r4
 800387e:	4630      	mov	r0, r6
 8003880:	f7ff fef6 	bl	8003670 <_printf_common>
 8003884:	3001      	adds	r0, #1
 8003886:	d14d      	bne.n	8003924 <_printf_i+0x1c8>
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	b005      	add	sp, #20
 800388e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003892:	4839      	ldr	r0, [pc, #228]	; (8003978 <_printf_i+0x21c>)
 8003894:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003898:	6813      	ldr	r3, [r2, #0]
 800389a:	6821      	ldr	r1, [r4, #0]
 800389c:	1d1d      	adds	r5, r3, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6015      	str	r5, [r2, #0]
 80038a2:	060a      	lsls	r2, r1, #24
 80038a4:	d50b      	bpl.n	80038be <_printf_i+0x162>
 80038a6:	07ca      	lsls	r2, r1, #31
 80038a8:	bf44      	itt	mi
 80038aa:	f041 0120 	orrmi.w	r1, r1, #32
 80038ae:	6021      	strmi	r1, [r4, #0]
 80038b0:	b91b      	cbnz	r3, 80038ba <_printf_i+0x15e>
 80038b2:	6822      	ldr	r2, [r4, #0]
 80038b4:	f022 0220 	bic.w	r2, r2, #32
 80038b8:	6022      	str	r2, [r4, #0]
 80038ba:	2210      	movs	r2, #16
 80038bc:	e7b7      	b.n	800382e <_printf_i+0xd2>
 80038be:	064d      	lsls	r5, r1, #25
 80038c0:	bf48      	it	mi
 80038c2:	b29b      	uxthmi	r3, r3
 80038c4:	e7ef      	b.n	80038a6 <_printf_i+0x14a>
 80038c6:	4665      	mov	r5, ip
 80038c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80038cc:	fb02 3311 	mls	r3, r2, r1, r3
 80038d0:	5cc3      	ldrb	r3, [r0, r3]
 80038d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038d6:	460b      	mov	r3, r1
 80038d8:	2900      	cmp	r1, #0
 80038da:	d1f5      	bne.n	80038c8 <_printf_i+0x16c>
 80038dc:	e7b9      	b.n	8003852 <_printf_i+0xf6>
 80038de:	6813      	ldr	r3, [r2, #0]
 80038e0:	6825      	ldr	r5, [r4, #0]
 80038e2:	6961      	ldr	r1, [r4, #20]
 80038e4:	1d18      	adds	r0, r3, #4
 80038e6:	6010      	str	r0, [r2, #0]
 80038e8:	0628      	lsls	r0, r5, #24
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	d501      	bpl.n	80038f2 <_printf_i+0x196>
 80038ee:	6019      	str	r1, [r3, #0]
 80038f0:	e002      	b.n	80038f8 <_printf_i+0x19c>
 80038f2:	066a      	lsls	r2, r5, #25
 80038f4:	d5fb      	bpl.n	80038ee <_printf_i+0x192>
 80038f6:	8019      	strh	r1, [r3, #0]
 80038f8:	2300      	movs	r3, #0
 80038fa:	6123      	str	r3, [r4, #16]
 80038fc:	4665      	mov	r5, ip
 80038fe:	e7b9      	b.n	8003874 <_printf_i+0x118>
 8003900:	6813      	ldr	r3, [r2, #0]
 8003902:	1d19      	adds	r1, r3, #4
 8003904:	6011      	str	r1, [r2, #0]
 8003906:	681d      	ldr	r5, [r3, #0]
 8003908:	6862      	ldr	r2, [r4, #4]
 800390a:	2100      	movs	r1, #0
 800390c:	4628      	mov	r0, r5
 800390e:	f7fc fc67 	bl	80001e0 <memchr>
 8003912:	b108      	cbz	r0, 8003918 <_printf_i+0x1bc>
 8003914:	1b40      	subs	r0, r0, r5
 8003916:	6060      	str	r0, [r4, #4]
 8003918:	6863      	ldr	r3, [r4, #4]
 800391a:	6123      	str	r3, [r4, #16]
 800391c:	2300      	movs	r3, #0
 800391e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003922:	e7a7      	b.n	8003874 <_printf_i+0x118>
 8003924:	6923      	ldr	r3, [r4, #16]
 8003926:	462a      	mov	r2, r5
 8003928:	4639      	mov	r1, r7
 800392a:	4630      	mov	r0, r6
 800392c:	47c0      	blx	r8
 800392e:	3001      	adds	r0, #1
 8003930:	d0aa      	beq.n	8003888 <_printf_i+0x12c>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	079b      	lsls	r3, r3, #30
 8003936:	d413      	bmi.n	8003960 <_printf_i+0x204>
 8003938:	68e0      	ldr	r0, [r4, #12]
 800393a:	9b03      	ldr	r3, [sp, #12]
 800393c:	4298      	cmp	r0, r3
 800393e:	bfb8      	it	lt
 8003940:	4618      	movlt	r0, r3
 8003942:	e7a3      	b.n	800388c <_printf_i+0x130>
 8003944:	2301      	movs	r3, #1
 8003946:	464a      	mov	r2, r9
 8003948:	4639      	mov	r1, r7
 800394a:	4630      	mov	r0, r6
 800394c:	47c0      	blx	r8
 800394e:	3001      	adds	r0, #1
 8003950:	d09a      	beq.n	8003888 <_printf_i+0x12c>
 8003952:	3501      	adds	r5, #1
 8003954:	68e3      	ldr	r3, [r4, #12]
 8003956:	9a03      	ldr	r2, [sp, #12]
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	42ab      	cmp	r3, r5
 800395c:	dcf2      	bgt.n	8003944 <_printf_i+0x1e8>
 800395e:	e7eb      	b.n	8003938 <_printf_i+0x1dc>
 8003960:	2500      	movs	r5, #0
 8003962:	f104 0919 	add.w	r9, r4, #25
 8003966:	e7f5      	b.n	8003954 <_printf_i+0x1f8>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ac      	bne.n	80038c6 <_printf_i+0x16a>
 800396c:	7803      	ldrb	r3, [r0, #0]
 800396e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003972:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003976:	e76c      	b.n	8003852 <_printf_i+0xf6>
 8003978:	08003bfd 	.word	0x08003bfd
 800397c:	08003c0e 	.word	0x08003c0e

08003980 <memcpy>:
 8003980:	b510      	push	{r4, lr}
 8003982:	1e43      	subs	r3, r0, #1
 8003984:	440a      	add	r2, r1
 8003986:	4291      	cmp	r1, r2
 8003988:	d100      	bne.n	800398c <memcpy+0xc>
 800398a:	bd10      	pop	{r4, pc}
 800398c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003990:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003994:	e7f7      	b.n	8003986 <memcpy+0x6>

08003996 <memmove>:
 8003996:	4288      	cmp	r0, r1
 8003998:	b510      	push	{r4, lr}
 800399a:	eb01 0302 	add.w	r3, r1, r2
 800399e:	d807      	bhi.n	80039b0 <memmove+0x1a>
 80039a0:	1e42      	subs	r2, r0, #1
 80039a2:	4299      	cmp	r1, r3
 80039a4:	d00a      	beq.n	80039bc <memmove+0x26>
 80039a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80039ae:	e7f8      	b.n	80039a2 <memmove+0xc>
 80039b0:	4283      	cmp	r3, r0
 80039b2:	d9f5      	bls.n	80039a0 <memmove+0xa>
 80039b4:	1881      	adds	r1, r0, r2
 80039b6:	1ad2      	subs	r2, r2, r3
 80039b8:	42d3      	cmn	r3, r2
 80039ba:	d100      	bne.n	80039be <memmove+0x28>
 80039bc:	bd10      	pop	{r4, pc}
 80039be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80039c6:	e7f7      	b.n	80039b8 <memmove+0x22>

080039c8 <_free_r>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	4605      	mov	r5, r0
 80039cc:	2900      	cmp	r1, #0
 80039ce:	d045      	beq.n	8003a5c <_free_r+0x94>
 80039d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d4:	1f0c      	subs	r4, r1, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bfb8      	it	lt
 80039da:	18e4      	addlt	r4, r4, r3
 80039dc:	f000 f8d2 	bl	8003b84 <__malloc_lock>
 80039e0:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <_free_r+0x98>)
 80039e2:	6813      	ldr	r3, [r2, #0]
 80039e4:	4610      	mov	r0, r2
 80039e6:	b933      	cbnz	r3, 80039f6 <_free_r+0x2e>
 80039e8:	6063      	str	r3, [r4, #4]
 80039ea:	6014      	str	r4, [r2, #0]
 80039ec:	4628      	mov	r0, r5
 80039ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039f2:	f000 b8c8 	b.w	8003b86 <__malloc_unlock>
 80039f6:	42a3      	cmp	r3, r4
 80039f8:	d90c      	bls.n	8003a14 <_free_r+0x4c>
 80039fa:	6821      	ldr	r1, [r4, #0]
 80039fc:	1862      	adds	r2, r4, r1
 80039fe:	4293      	cmp	r3, r2
 8003a00:	bf04      	itt	eq
 8003a02:	681a      	ldreq	r2, [r3, #0]
 8003a04:	685b      	ldreq	r3, [r3, #4]
 8003a06:	6063      	str	r3, [r4, #4]
 8003a08:	bf04      	itt	eq
 8003a0a:	1852      	addeq	r2, r2, r1
 8003a0c:	6022      	streq	r2, [r4, #0]
 8003a0e:	6004      	str	r4, [r0, #0]
 8003a10:	e7ec      	b.n	80039ec <_free_r+0x24>
 8003a12:	4613      	mov	r3, r2
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	b10a      	cbz	r2, 8003a1c <_free_r+0x54>
 8003a18:	42a2      	cmp	r2, r4
 8003a1a:	d9fa      	bls.n	8003a12 <_free_r+0x4a>
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	1858      	adds	r0, r3, r1
 8003a20:	42a0      	cmp	r0, r4
 8003a22:	d10b      	bne.n	8003a3c <_free_r+0x74>
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	4401      	add	r1, r0
 8003a28:	1858      	adds	r0, r3, r1
 8003a2a:	4282      	cmp	r2, r0
 8003a2c:	6019      	str	r1, [r3, #0]
 8003a2e:	d1dd      	bne.n	80039ec <_free_r+0x24>
 8003a30:	6810      	ldr	r0, [r2, #0]
 8003a32:	6852      	ldr	r2, [r2, #4]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	4401      	add	r1, r0
 8003a38:	6019      	str	r1, [r3, #0]
 8003a3a:	e7d7      	b.n	80039ec <_free_r+0x24>
 8003a3c:	d902      	bls.n	8003a44 <_free_r+0x7c>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	602b      	str	r3, [r5, #0]
 8003a42:	e7d3      	b.n	80039ec <_free_r+0x24>
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	1821      	adds	r1, r4, r0
 8003a48:	428a      	cmp	r2, r1
 8003a4a:	bf04      	itt	eq
 8003a4c:	6811      	ldreq	r1, [r2, #0]
 8003a4e:	6852      	ldreq	r2, [r2, #4]
 8003a50:	6062      	str	r2, [r4, #4]
 8003a52:	bf04      	itt	eq
 8003a54:	1809      	addeq	r1, r1, r0
 8003a56:	6021      	streq	r1, [r4, #0]
 8003a58:	605c      	str	r4, [r3, #4]
 8003a5a:	e7c7      	b.n	80039ec <_free_r+0x24>
 8003a5c:	bd38      	pop	{r3, r4, r5, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000090 	.word	0x20000090

08003a64 <_malloc_r>:
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	1ccd      	adds	r5, r1, #3
 8003a68:	f025 0503 	bic.w	r5, r5, #3
 8003a6c:	3508      	adds	r5, #8
 8003a6e:	2d0c      	cmp	r5, #12
 8003a70:	bf38      	it	cc
 8003a72:	250c      	movcc	r5, #12
 8003a74:	2d00      	cmp	r5, #0
 8003a76:	4606      	mov	r6, r0
 8003a78:	db01      	blt.n	8003a7e <_malloc_r+0x1a>
 8003a7a:	42a9      	cmp	r1, r5
 8003a7c:	d903      	bls.n	8003a86 <_malloc_r+0x22>
 8003a7e:	230c      	movs	r3, #12
 8003a80:	6033      	str	r3, [r6, #0]
 8003a82:	2000      	movs	r0, #0
 8003a84:	bd70      	pop	{r4, r5, r6, pc}
 8003a86:	f000 f87d 	bl	8003b84 <__malloc_lock>
 8003a8a:	4a21      	ldr	r2, [pc, #132]	; (8003b10 <_malloc_r+0xac>)
 8003a8c:	6814      	ldr	r4, [r2, #0]
 8003a8e:	4621      	mov	r1, r4
 8003a90:	b991      	cbnz	r1, 8003ab8 <_malloc_r+0x54>
 8003a92:	4c20      	ldr	r4, [pc, #128]	; (8003b14 <_malloc_r+0xb0>)
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	b91b      	cbnz	r3, 8003aa0 <_malloc_r+0x3c>
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f000 f863 	bl	8003b64 <_sbrk_r>
 8003a9e:	6020      	str	r0, [r4, #0]
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f000 f85e 	bl	8003b64 <_sbrk_r>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d124      	bne.n	8003af6 <_malloc_r+0x92>
 8003aac:	230c      	movs	r3, #12
 8003aae:	6033      	str	r3, [r6, #0]
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	f000 f868 	bl	8003b86 <__malloc_unlock>
 8003ab6:	e7e4      	b.n	8003a82 <_malloc_r+0x1e>
 8003ab8:	680b      	ldr	r3, [r1, #0]
 8003aba:	1b5b      	subs	r3, r3, r5
 8003abc:	d418      	bmi.n	8003af0 <_malloc_r+0x8c>
 8003abe:	2b0b      	cmp	r3, #11
 8003ac0:	d90f      	bls.n	8003ae2 <_malloc_r+0x7e>
 8003ac2:	600b      	str	r3, [r1, #0]
 8003ac4:	50cd      	str	r5, [r1, r3]
 8003ac6:	18cc      	adds	r4, r1, r3
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f000 f85c 	bl	8003b86 <__malloc_unlock>
 8003ace:	f104 000b 	add.w	r0, r4, #11
 8003ad2:	1d23      	adds	r3, r4, #4
 8003ad4:	f020 0007 	bic.w	r0, r0, #7
 8003ad8:	1ac3      	subs	r3, r0, r3
 8003ada:	d0d3      	beq.n	8003a84 <_malloc_r+0x20>
 8003adc:	425a      	negs	r2, r3
 8003ade:	50e2      	str	r2, [r4, r3]
 8003ae0:	e7d0      	b.n	8003a84 <_malloc_r+0x20>
 8003ae2:	428c      	cmp	r4, r1
 8003ae4:	684b      	ldr	r3, [r1, #4]
 8003ae6:	bf16      	itet	ne
 8003ae8:	6063      	strne	r3, [r4, #4]
 8003aea:	6013      	streq	r3, [r2, #0]
 8003aec:	460c      	movne	r4, r1
 8003aee:	e7eb      	b.n	8003ac8 <_malloc_r+0x64>
 8003af0:	460c      	mov	r4, r1
 8003af2:	6849      	ldr	r1, [r1, #4]
 8003af4:	e7cc      	b.n	8003a90 <_malloc_r+0x2c>
 8003af6:	1cc4      	adds	r4, r0, #3
 8003af8:	f024 0403 	bic.w	r4, r4, #3
 8003afc:	42a0      	cmp	r0, r4
 8003afe:	d005      	beq.n	8003b0c <_malloc_r+0xa8>
 8003b00:	1a21      	subs	r1, r4, r0
 8003b02:	4630      	mov	r0, r6
 8003b04:	f000 f82e 	bl	8003b64 <_sbrk_r>
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d0cf      	beq.n	8003aac <_malloc_r+0x48>
 8003b0c:	6025      	str	r5, [r4, #0]
 8003b0e:	e7db      	b.n	8003ac8 <_malloc_r+0x64>
 8003b10:	20000090 	.word	0x20000090
 8003b14:	20000094 	.word	0x20000094

08003b18 <_realloc_r>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	4607      	mov	r7, r0
 8003b1c:	4614      	mov	r4, r2
 8003b1e:	460e      	mov	r6, r1
 8003b20:	b921      	cbnz	r1, 8003b2c <_realloc_r+0x14>
 8003b22:	4611      	mov	r1, r2
 8003b24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b28:	f7ff bf9c 	b.w	8003a64 <_malloc_r>
 8003b2c:	b922      	cbnz	r2, 8003b38 <_realloc_r+0x20>
 8003b2e:	f7ff ff4b 	bl	80039c8 <_free_r>
 8003b32:	4625      	mov	r5, r4
 8003b34:	4628      	mov	r0, r5
 8003b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b38:	f000 f826 	bl	8003b88 <_malloc_usable_size_r>
 8003b3c:	42a0      	cmp	r0, r4
 8003b3e:	d20f      	bcs.n	8003b60 <_realloc_r+0x48>
 8003b40:	4621      	mov	r1, r4
 8003b42:	4638      	mov	r0, r7
 8003b44:	f7ff ff8e 	bl	8003a64 <_malloc_r>
 8003b48:	4605      	mov	r5, r0
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d0f2      	beq.n	8003b34 <_realloc_r+0x1c>
 8003b4e:	4631      	mov	r1, r6
 8003b50:	4622      	mov	r2, r4
 8003b52:	f7ff ff15 	bl	8003980 <memcpy>
 8003b56:	4631      	mov	r1, r6
 8003b58:	4638      	mov	r0, r7
 8003b5a:	f7ff ff35 	bl	80039c8 <_free_r>
 8003b5e:	e7e9      	b.n	8003b34 <_realloc_r+0x1c>
 8003b60:	4635      	mov	r5, r6
 8003b62:	e7e7      	b.n	8003b34 <_realloc_r+0x1c>

08003b64 <_sbrk_r>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	4c06      	ldr	r4, [pc, #24]	; (8003b80 <_sbrk_r+0x1c>)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	4605      	mov	r5, r0
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	6023      	str	r3, [r4, #0]
 8003b70:	f7fc ffc2 	bl	8000af8 <_sbrk>
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d102      	bne.n	8003b7e <_sbrk_r+0x1a>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	b103      	cbz	r3, 8003b7e <_sbrk_r+0x1a>
 8003b7c:	602b      	str	r3, [r5, #0]
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
 8003b80:	20000130 	.word	0x20000130

08003b84 <__malloc_lock>:
 8003b84:	4770      	bx	lr

08003b86 <__malloc_unlock>:
 8003b86:	4770      	bx	lr

08003b88 <_malloc_usable_size_r>:
 8003b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b8c:	1f18      	subs	r0, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bfbc      	itt	lt
 8003b92:	580b      	ldrlt	r3, [r1, r0]
 8003b94:	18c0      	addlt	r0, r0, r3
 8003b96:	4770      	bx	lr

08003b98 <_init>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr

08003ba4 <_fini>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr
